
Project4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006400  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08006590  08006590  00016590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800665c  0800665c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800665c  0800665c  0001665c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006664  08006664  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006664  08006664  00016664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006668  08006668  00016668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800666c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          000041b4  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004220  20004220  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013dcf  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003148  00000000  00000000  00033eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012c8  00000000  00000000  00036ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e8d  00000000  00000000  000382c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023b45  00000000  00000000  0003914d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016a67  00000000  00000000  0005cc92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5dde  00000000  00000000  000736f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000055a0  00000000  00000000  001494d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  0014ea78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006578 	.word	0x08006578

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08006578 	.word	0x08006578

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	4a07      	ldr	r2, [pc, #28]	; (8000598 <vApplicationGetIdleTaskMemory+0x2c>)
 800057c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <vApplicationGetIdleTaskMemory+0x30>)
 8000582:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000088 	.word	0x20000088
 800059c:	200000dc 	.word	0x200000dc

080005a0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005a8:	1d39      	adds	r1, r7, #4
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	2201      	movs	r2, #1
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <__io_putchar+0x20>)
 80005b2:	f001 fe5d 	bl	8002270 <HAL_UART_Transmit>
	return ch;
 80005b6:	687b      	ldr	r3, [r7, #4]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	200002dc 	.word	0x200002dc

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b090      	sub	sp, #64	; 0x40
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fb43 	bl	8000c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f847 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f8d9 	bl	8000788 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005d6:	f000 f8ad 	bl	8000734 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Application start %d\n");
 80005da:	481b      	ldr	r0, [pc, #108]	; (8000648 <main+0x84>)
 80005dc:	f005 f948 	bl	8005870 <iprintf>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 80005e0:	2300      	movs	r3, #0
 80005e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80005e4:	2300      	movs	r3, #0
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 80005e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005ec:	2101      	movs	r1, #1
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 fe6d 	bl	80032ce <osSemaphoreCreate>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4a15      	ldr	r2, [pc, #84]	; (800064c <main+0x88>)
 80005f8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, StartTask1, osPriorityNormal, 0, 128);
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <main+0x8c>)
 80005fc:	f107 041c 	add.w	r4, r7, #28
 8000600:	461d      	mov	r5, r3
 8000602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000606:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f002 fe0e 	bl	8003236 <osThreadCreate>
 800061a:	4603      	mov	r3, r0
 800061c:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <main+0x90>)
 800061e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, StartTask2, osPriorityNormal, 0, 128);
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <main+0x94>)
 8000622:	463c      	mov	r4, r7
 8000624:	461d      	mov	r5, r3
 8000626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000632:	463b      	mov	r3, r7
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f002 fdfd 	bl	8003236 <osThreadCreate>
 800063c:	4603      	mov	r3, r0
 800063e:	4a07      	ldr	r2, [pc, #28]	; (800065c <main+0x98>)
 8000640:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000642:	f002 fdf1 	bl	8003228 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000646:	e7fe      	b.n	8000646 <main+0x82>
 8000648:	08006590 	.word	0x08006590
 800064c:	2000032c 	.word	0x2000032c
 8000650:	080065b0 	.word	0x080065b0
 8000654:	20000324 	.word	0x20000324
 8000658:	080065d4 	.word	0x080065d4
 800065c:	20000328 	.word	0x20000328

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	; 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f005 f953 	bl	800591a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b28      	ldr	r3, [pc, #160]	; (800072c <SystemClock_Config+0xcc>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a27      	ldr	r2, [pc, #156]	; (800072c <SystemClock_Config+0xcc>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b25      	ldr	r3, [pc, #148]	; (800072c <SystemClock_Config+0xcc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <SystemClock_Config+0xd0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a21      	ldr	r2, [pc, #132]	; (8000730 <SystemClock_Config+0xd0>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <SystemClock_Config+0xd0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d0:	2308      	movs	r3, #8
 80006d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006d4:	23a8      	movs	r3, #168	; 0xa8
 80006d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006dc:	2304      	movs	r3, #4
 80006de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 fe07 	bl	80012f8 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f0:	f000 f8a9 	bl	8000846 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	2302      	movs	r3, #2
 80006fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000700:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2105      	movs	r1, #5
 8000712:	4618      	mov	r0, r3
 8000714:	f001 f868 	bl	80017e8 <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800071e:	f000 f892 	bl	8000846 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3750      	adds	r7, #80	; 0x50
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 800073a:	4a12      	ldr	r2, [pc, #72]	; (8000784 <MX_USART1_UART_Init+0x50>)
 800073c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000744:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 800076c:	f001 fd30 	bl	80021d0 <HAL_UART_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000776:	f000 f866 	bl	8000846 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200002dc 	.word	0x200002dc
 8000784:	40011000 	.word	0x40011000

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <MX_GPIO_Init+0x68>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a16      	ldr	r2, [pc, #88]	; (80007f0 <MX_GPIO_Init+0x68>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_GPIO_Init+0x68>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_GPIO_Init+0x68>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <MX_GPIO_Init+0x68>)
 80007b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <MX_GPIO_Init+0x68>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_GPIO_Init+0x68>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <MX_GPIO_Init+0x68>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_GPIO_Init+0x68>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e2:	bf00      	nop
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800

080007f4 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void const * argument)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	for(;;)
 80007fc:	e7fe      	b.n	80007fc <StartTask1+0x8>
	...

08000800 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void const * argument)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(myBinarySem01Handle,4000);
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <StartTask2+0x20>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8000810:	4618      	mov	r0, r3
 8000812:	f002 fd8f 	bl	8003334 <osSemaphoreWait>
	  printf("Task2 synchronized\n\r");
 8000816:	4803      	ldr	r0, [pc, #12]	; (8000824 <StartTask2+0x24>)
 8000818:	f005 f82a 	bl	8005870 <iprintf>
	  osSemaphoreWait(myBinarySem01Handle,4000);
 800081c:	e7f4      	b.n	8000808 <StartTask2+0x8>
 800081e:	bf00      	nop
 8000820:	2000032c 	.word	0x2000032c
 8000824:	080065f0 	.word	0x080065f0

08000828 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000838:	d101      	bne.n	800083e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800083a:	f000 fa2d 	bl	8000c98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084a:	b672      	cpsid	i
}
 800084c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084e:	e7fe      	b.n	800084e <Error_Handler+0x8>

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <HAL_MspInit+0x54>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	4a11      	ldr	r2, [pc, #68]	; (80008a4 <HAL_MspInit+0x54>)
 8000860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000864:	6453      	str	r3, [r2, #68]	; 0x44
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <HAL_MspInit+0x54>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <HAL_MspInit+0x54>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <HAL_MspInit+0x54>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000880:	6413      	str	r3, [r2, #64]	; 0x40
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <HAL_MspInit+0x54>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	210f      	movs	r1, #15
 8000892:	f06f 0001 	mvn.w	r0, #1
 8000896:	f000 fad7 	bl	8000e48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800

080008a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a1d      	ldr	r2, [pc, #116]	; (800093c <HAL_UART_MspInit+0x94>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d134      	bne.n	8000934 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <HAL_UART_MspInit+0x98>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	4a1b      	ldr	r2, [pc, #108]	; (8000940 <HAL_UART_MspInit+0x98>)
 80008d4:	f043 0310 	orr.w	r3, r3, #16
 80008d8:	6453      	str	r3, [r2, #68]	; 0x44
 80008da:	4b19      	ldr	r3, [pc, #100]	; (8000940 <HAL_UART_MspInit+0x98>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	f003 0310 	and.w	r3, r3, #16
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <HAL_UART_MspInit+0x98>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a14      	ldr	r2, [pc, #80]	; (8000940 <HAL_UART_MspInit+0x98>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b12      	ldr	r3, [pc, #72]	; (8000940 <HAL_UART_MspInit+0x98>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000902:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000910:	2303      	movs	r3, #3
 8000912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000914:	2307      	movs	r3, #7
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	4809      	ldr	r0, [pc, #36]	; (8000944 <HAL_UART_MspInit+0x9c>)
 8000920:	f000 fb4e 	bl	8000fc0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2105      	movs	r1, #5
 8000928:	2025      	movs	r0, #37	; 0x25
 800092a:	f000 fa8d 	bl	8000e48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800092e:	2025      	movs	r0, #37	; 0x25
 8000930:	f000 faa6 	bl	8000e80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000934:	bf00      	nop
 8000936:	3728      	adds	r7, #40	; 0x28
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40011000 	.word	0x40011000
 8000940:	40023800 	.word	0x40023800
 8000944:	40020000 	.word	0x40020000

08000948 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08e      	sub	sp, #56	; 0x38
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000950:	2300      	movs	r3, #0
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	4b34      	ldr	r3, [pc, #208]	; (8000a30 <HAL_InitTick+0xe8>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	4a33      	ldr	r2, [pc, #204]	; (8000a30 <HAL_InitTick+0xe8>)
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	6413      	str	r3, [r2, #64]	; 0x40
 8000968:	4b31      	ldr	r3, [pc, #196]	; (8000a30 <HAL_InitTick+0xe8>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000974:	f107 0210 	add.w	r2, r7, #16
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4611      	mov	r1, r2
 800097e:	4618      	mov	r0, r3
 8000980:	f001 f952 	bl	8001c28 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000984:	6a3b      	ldr	r3, [r7, #32]
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800098a:	2b00      	cmp	r3, #0
 800098c:	d103      	bne.n	8000996 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800098e:	f001 f923 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 8000992:	6378      	str	r0, [r7, #52]	; 0x34
 8000994:	e004      	b.n	80009a0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000996:	f001 f91f 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 800099a:	4603      	mov	r3, r0
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a2:	4a24      	ldr	r2, [pc, #144]	; (8000a34 <HAL_InitTick+0xec>)
 80009a4:	fba2 2303 	umull	r2, r3, r2, r3
 80009a8:	0c9b      	lsrs	r3, r3, #18
 80009aa:	3b01      	subs	r3, #1
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80009ae:	4b22      	ldr	r3, [pc, #136]	; (8000a38 <HAL_InitTick+0xf0>)
 80009b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <HAL_InitTick+0xf0>)
 80009b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009bc:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80009be:	4a1e      	ldr	r2, [pc, #120]	; (8000a38 <HAL_InitTick+0xf0>)
 80009c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <HAL_InitTick+0xf0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ca:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <HAL_InitTick+0xf0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <HAL_InitTick+0xf0>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80009d6:	4818      	ldr	r0, [pc, #96]	; (8000a38 <HAL_InitTick+0xf0>)
 80009d8:	f001 f958 	bl	8001c8c <HAL_TIM_Base_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d11b      	bne.n	8000a22 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80009ea:	4813      	ldr	r0, [pc, #76]	; (8000a38 <HAL_InitTick+0xf0>)
 80009ec:	f001 f9a8 	bl	8001d40 <HAL_TIM_Base_Start_IT>
 80009f0:	4603      	mov	r3, r0
 80009f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d111      	bne.n	8000a22 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009fe:	201c      	movs	r0, #28
 8000a00:	f000 fa3e 	bl	8000e80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b0f      	cmp	r3, #15
 8000a08:	d808      	bhi.n	8000a1c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	6879      	ldr	r1, [r7, #4]
 8000a0e:	201c      	movs	r0, #28
 8000a10:	f000 fa1a 	bl	8000e48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a14:	4a09      	ldr	r2, [pc, #36]	; (8000a3c <HAL_InitTick+0xf4>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
 8000a1a:	e002      	b.n	8000a22 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3738      	adds	r7, #56	; 0x38
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800
 8000a34:	431bde83 	.word	0x431bde83
 8000a38:	20000330 	.word	0x20000330
 8000a3c:	20000004 	.word	0x20000004

08000a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a44:	e7fe      	b.n	8000a44 <NMI_Handler+0x4>

08000a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <HardFault_Handler+0x4>

08000a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <MemManage_Handler+0x4>

08000a52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <BusFault_Handler+0x4>

08000a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <UsageFault_Handler+0x4>

08000a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <TIM2_IRQHandler+0x10>)
 8000a72:	f001 f9d5 	bl	8001e20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000330 	.word	0x20000330

08000a80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a84:	4802      	ldr	r0, [pc, #8]	; (8000a90 <USART1_IRQHandler+0x10>)
 8000a86:	f001 fc7f 	bl	8002388 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200002dc 	.word	0x200002dc

08000a94 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	e00a      	b.n	8000abc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aa6:	f3af 8000 	nop.w
 8000aaa:	4601      	mov	r1, r0
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	1c5a      	adds	r2, r3, #1
 8000ab0:	60ba      	str	r2, [r7, #8]
 8000ab2:	b2ca      	uxtb	r2, r1
 8000ab4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	dbf0      	blt.n	8000aa6 <_read+0x12>
  }

  return len;
 8000ac4:	687b      	ldr	r3, [r7, #4]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b086      	sub	sp, #24
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	60f8      	str	r0, [r7, #12]
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
 8000ade:	e009      	b.n	8000af4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	60ba      	str	r2, [r7, #8]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fd59 	bl	80005a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	3301      	adds	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	697a      	ldr	r2, [r7, #20]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	dbf1      	blt.n	8000ae0 <_write+0x12>
  }
  return len;
 8000afc:	687b      	ldr	r3, [r7, #4]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <_close>:

int _close(int file)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
 8000b26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b2e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <_isatty>:

int _isatty(int file)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b78:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <_sbrk+0x5c>)
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <_sbrk+0x60>)
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <_sbrk+0x64>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <_sbrk+0x68>)
 8000b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d207      	bcs.n	8000bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba0:	f004 ff0a 	bl	80059b8 <__errno>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bae:	e009      	b.n	8000bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <_sbrk+0x64>)
 8000bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20020000 	.word	0x20020000
 8000bd0:	00000400 	.word	0x00000400
 8000bd4:	20000378 	.word	0x20000378
 8000bd8:	20004220 	.word	0x20004220

08000bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <SystemInit+0x20>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <SystemInit+0x20>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c38 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c04:	f7ff ffea 	bl	8000bdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c0a:	490d      	ldr	r1, [pc, #52]	; (8000c40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c20:	4c0a      	ldr	r4, [pc, #40]	; (8000c4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f004 fec9 	bl	80059c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c32:	f7ff fcc7 	bl	80005c4 <main>
  bx  lr    
 8000c36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c44:	0800666c 	.word	0x0800666c
  ldr r2, =_sbss
 8000c48:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c4c:	20004220 	.word	0x20004220

08000c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC_IRQHandler>
	...

08000c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c58:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <HAL_Init+0x40>)
 8000c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <HAL_Init+0x40>)
 8000c6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_Init+0x40>)
 8000c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f000 f8d8 	bl	8000e32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c82:	200f      	movs	r0, #15
 8000c84:	f7ff fe60 	bl	8000948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c88:	f7ff fde2 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023c00 	.word	0x40023c00

08000c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	2000037c 	.word	0x2000037c

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	2000037c 	.word	0x2000037c

08000cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0a:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	60d3      	str	r3, [r2, #12]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <__NVIC_GetPriorityGrouping+0x18>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	f003 0307 	and.w	r3, r3, #7
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	db0b      	blt.n	8000d66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	f003 021f 	and.w	r2, r3, #31
 8000d54:	4907      	ldr	r1, [pc, #28]	; (8000d74 <__NVIC_EnableIRQ+0x38>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	095b      	lsrs	r3, r3, #5
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000e100 	.word	0xe000e100

08000d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	db0a      	blt.n	8000da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	490c      	ldr	r1, [pc, #48]	; (8000dc4 <__NVIC_SetPriority+0x4c>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	0112      	lsls	r2, r2, #4
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da0:	e00a      	b.n	8000db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4908      	ldr	r1, [pc, #32]	; (8000dc8 <__NVIC_SetPriority+0x50>)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	f003 030f 	and.w	r3, r3, #15
 8000dae:	3b04      	subs	r3, #4
 8000db0:	0112      	lsls	r2, r2, #4
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	440b      	add	r3, r1
 8000db6:	761a      	strb	r2, [r3, #24]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000e100 	.word	0xe000e100
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	; 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f1c3 0307 	rsb	r3, r3, #7
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	bf28      	it	cs
 8000dea:	2304      	movcs	r3, #4
 8000dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3304      	adds	r3, #4
 8000df2:	2b06      	cmp	r3, #6
 8000df4:	d902      	bls.n	8000dfc <NVIC_EncodePriority+0x30>
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3b03      	subs	r3, #3
 8000dfa:	e000      	b.n	8000dfe <NVIC_EncodePriority+0x32>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	f04f 32ff 	mov.w	r2, #4294967295
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	401a      	ands	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1e:	43d9      	mvns	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	4313      	orrs	r3, r2
         );
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3724      	adds	r7, #36	; 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ff4c 	bl	8000cd8 <__NVIC_SetPriorityGrouping>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
 8000e54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5a:	f7ff ff61 	bl	8000d20 <__NVIC_GetPriorityGrouping>
 8000e5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	68b9      	ldr	r1, [r7, #8]
 8000e64:	6978      	ldr	r0, [r7, #20]
 8000e66:	f7ff ffb1 	bl	8000dcc <NVIC_EncodePriority>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e70:	4611      	mov	r1, r2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ff80 	bl	8000d78 <__NVIC_SetPriority>
}
 8000e78:	bf00      	nop
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ff54 	bl	8000d3c <__NVIC_EnableIRQ>
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000eaa:	f7ff ff09 	bl	8000cc0 <HAL_GetTick>
 8000eae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d008      	beq.n	8000ece <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2280      	movs	r2, #128	; 0x80
 8000ec0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e052      	b.n	8000f74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f022 0216 	bic.w	r2, r2, #22
 8000edc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	695a      	ldr	r2, [r3, #20]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000eec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d103      	bne.n	8000efe <HAL_DMA_Abort+0x62>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d007      	beq.n	8000f0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f022 0208 	bic.w	r2, r2, #8
 8000f0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f022 0201 	bic.w	r2, r2, #1
 8000f1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f1e:	e013      	b.n	8000f48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f20:	f7ff fece 	bl	8000cc0 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b05      	cmp	r3, #5
 8000f2c:	d90c      	bls.n	8000f48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2220      	movs	r2, #32
 8000f32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2203      	movs	r2, #3
 8000f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e015      	b.n	8000f74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1e4      	bne.n	8000f20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f5a:	223f      	movs	r2, #63	; 0x3f
 8000f5c:	409a      	lsls	r2, r3
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2201      	movs	r2, #1
 8000f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d004      	beq.n	8000f9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2280      	movs	r2, #128	; 0x80
 8000f94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00c      	b.n	8000fb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2205      	movs	r2, #5
 8000f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f022 0201 	bic.w	r2, r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b089      	sub	sp, #36	; 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
 8000fda:	e16b      	b.n	80012b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fdc:	2201      	movs	r2, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	f040 815a 	bne.w	80012ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
 8001002:	2b01      	cmp	r3, #1
 8001004:	d005      	beq.n	8001012 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800100e:	2b02      	cmp	r3, #2
 8001010:	d130      	bne.n	8001074 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	2203      	movs	r2, #3
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	68da      	ldr	r2, [r3, #12]
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001048:	2201      	movs	r2, #1
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	091b      	lsrs	r3, r3, #4
 800105e:	f003 0201 	and.w	r2, r3, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	2b03      	cmp	r3, #3
 800107e:	d017      	beq.n	80010b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d123      	bne.n	8001104 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	08da      	lsrs	r2, r3, #3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3208      	adds	r2, #8
 80010c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	f003 0307 	and.w	r3, r3, #7
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	220f      	movs	r2, #15
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	691a      	ldr	r2, [r3, #16]
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	08da      	lsrs	r2, r3, #3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3208      	adds	r2, #8
 80010fe:	69b9      	ldr	r1, [r7, #24]
 8001100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 0203 	and.w	r2, r3, #3
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001140:	2b00      	cmp	r3, #0
 8001142:	f000 80b4 	beq.w	80012ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b60      	ldr	r3, [pc, #384]	; (80012cc <HAL_GPIO_Init+0x30c>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	4a5f      	ldr	r2, [pc, #380]	; (80012cc <HAL_GPIO_Init+0x30c>)
 8001150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001154:	6453      	str	r3, [r2, #68]	; 0x44
 8001156:	4b5d      	ldr	r3, [pc, #372]	; (80012cc <HAL_GPIO_Init+0x30c>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001162:	4a5b      	ldr	r2, [pc, #364]	; (80012d0 <HAL_GPIO_Init+0x310>)
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	089b      	lsrs	r3, r3, #2
 8001168:	3302      	adds	r3, #2
 800116a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	220f      	movs	r2, #15
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a52      	ldr	r2, [pc, #328]	; (80012d4 <HAL_GPIO_Init+0x314>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d02b      	beq.n	80011e6 <HAL_GPIO_Init+0x226>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a51      	ldr	r2, [pc, #324]	; (80012d8 <HAL_GPIO_Init+0x318>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d025      	beq.n	80011e2 <HAL_GPIO_Init+0x222>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a50      	ldr	r2, [pc, #320]	; (80012dc <HAL_GPIO_Init+0x31c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d01f      	beq.n	80011de <HAL_GPIO_Init+0x21e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4f      	ldr	r2, [pc, #316]	; (80012e0 <HAL_GPIO_Init+0x320>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d019      	beq.n	80011da <HAL_GPIO_Init+0x21a>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4e      	ldr	r2, [pc, #312]	; (80012e4 <HAL_GPIO_Init+0x324>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d013      	beq.n	80011d6 <HAL_GPIO_Init+0x216>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4d      	ldr	r2, [pc, #308]	; (80012e8 <HAL_GPIO_Init+0x328>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d00d      	beq.n	80011d2 <HAL_GPIO_Init+0x212>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4c      	ldr	r2, [pc, #304]	; (80012ec <HAL_GPIO_Init+0x32c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d007      	beq.n	80011ce <HAL_GPIO_Init+0x20e>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4b      	ldr	r2, [pc, #300]	; (80012f0 <HAL_GPIO_Init+0x330>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d101      	bne.n	80011ca <HAL_GPIO_Init+0x20a>
 80011c6:	2307      	movs	r3, #7
 80011c8:	e00e      	b.n	80011e8 <HAL_GPIO_Init+0x228>
 80011ca:	2308      	movs	r3, #8
 80011cc:	e00c      	b.n	80011e8 <HAL_GPIO_Init+0x228>
 80011ce:	2306      	movs	r3, #6
 80011d0:	e00a      	b.n	80011e8 <HAL_GPIO_Init+0x228>
 80011d2:	2305      	movs	r3, #5
 80011d4:	e008      	b.n	80011e8 <HAL_GPIO_Init+0x228>
 80011d6:	2304      	movs	r3, #4
 80011d8:	e006      	b.n	80011e8 <HAL_GPIO_Init+0x228>
 80011da:	2303      	movs	r3, #3
 80011dc:	e004      	b.n	80011e8 <HAL_GPIO_Init+0x228>
 80011de:	2302      	movs	r3, #2
 80011e0:	e002      	b.n	80011e8 <HAL_GPIO_Init+0x228>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <HAL_GPIO_Init+0x228>
 80011e6:	2300      	movs	r3, #0
 80011e8:	69fa      	ldr	r2, [r7, #28]
 80011ea:	f002 0203 	and.w	r2, r2, #3
 80011ee:	0092      	lsls	r2, r2, #2
 80011f0:	4093      	lsls	r3, r2
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011f8:	4935      	ldr	r1, [pc, #212]	; (80012d0 <HAL_GPIO_Init+0x310>)
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	089b      	lsrs	r3, r3, #2
 80011fe:	3302      	adds	r3, #2
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001206:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <HAL_GPIO_Init+0x334>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800122a:	4a32      	ldr	r2, [pc, #200]	; (80012f4 <HAL_GPIO_Init+0x334>)
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001230:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <HAL_GPIO_Init+0x334>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001254:	4a27      	ldr	r2, [pc, #156]	; (80012f4 <HAL_GPIO_Init+0x334>)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <HAL_GPIO_Init+0x334>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800127e:	4a1d      	ldr	r2, [pc, #116]	; (80012f4 <HAL_GPIO_Init+0x334>)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <HAL_GPIO_Init+0x334>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a8:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <HAL_GPIO_Init+0x334>)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3301      	adds	r3, #1
 80012b2:	61fb      	str	r3, [r7, #28]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	2b0f      	cmp	r3, #15
 80012b8:	f67f ae90 	bls.w	8000fdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3724      	adds	r7, #36	; 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40013800 	.word	0x40013800
 80012d4:	40020000 	.word	0x40020000
 80012d8:	40020400 	.word	0x40020400
 80012dc:	40020800 	.word	0x40020800
 80012e0:	40020c00 	.word	0x40020c00
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40021400 	.word	0x40021400
 80012ec:	40021800 	.word	0x40021800
 80012f0:	40021c00 	.word	0x40021c00
 80012f4:	40013c00 	.word	0x40013c00

080012f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e267      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b00      	cmp	r3, #0
 8001314:	d075      	beq.n	8001402 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001316:	4b88      	ldr	r3, [pc, #544]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	2b04      	cmp	r3, #4
 8001320:	d00c      	beq.n	800133c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001322:	4b85      	ldr	r3, [pc, #532]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800132a:	2b08      	cmp	r3, #8
 800132c:	d112      	bne.n	8001354 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800132e:	4b82      	ldr	r3, [pc, #520]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001336:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800133a:	d10b      	bne.n	8001354 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133c:	4b7e      	ldr	r3, [pc, #504]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d05b      	beq.n	8001400 <HAL_RCC_OscConfig+0x108>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d157      	bne.n	8001400 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e242      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800135c:	d106      	bne.n	800136c <HAL_RCC_OscConfig+0x74>
 800135e:	4b76      	ldr	r3, [pc, #472]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a75      	ldr	r2, [pc, #468]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	e01d      	b.n	80013a8 <HAL_RCC_OscConfig+0xb0>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001374:	d10c      	bne.n	8001390 <HAL_RCC_OscConfig+0x98>
 8001376:	4b70      	ldr	r3, [pc, #448]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a6f      	ldr	r2, [pc, #444]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 800137c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	4b6d      	ldr	r3, [pc, #436]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a6c      	ldr	r2, [pc, #432]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	e00b      	b.n	80013a8 <HAL_RCC_OscConfig+0xb0>
 8001390:	4b69      	ldr	r3, [pc, #420]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a68      	ldr	r2, [pc, #416]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	4b66      	ldr	r3, [pc, #408]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a65      	ldr	r2, [pc, #404]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 80013a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d013      	beq.n	80013d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fc86 	bl	8000cc0 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b8:	f7ff fc82 	bl	8000cc0 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b64      	cmp	r3, #100	; 0x64
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e207      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ca:	4b5b      	ldr	r3, [pc, #364]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f0      	beq.n	80013b8 <HAL_RCC_OscConfig+0xc0>
 80013d6:	e014      	b.n	8001402 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d8:	f7ff fc72 	bl	8000cc0 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013e0:	f7ff fc6e 	bl	8000cc0 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b64      	cmp	r3, #100	; 0x64
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e1f3      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f2:	4b51      	ldr	r3, [pc, #324]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f0      	bne.n	80013e0 <HAL_RCC_OscConfig+0xe8>
 80013fe:	e000      	b.n	8001402 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d063      	beq.n	80014d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800140e:	4b4a      	ldr	r3, [pc, #296]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 030c 	and.w	r3, r3, #12
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00b      	beq.n	8001432 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800141a:	4b47      	ldr	r3, [pc, #284]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001422:	2b08      	cmp	r3, #8
 8001424:	d11c      	bne.n	8001460 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001426:	4b44      	ldr	r3, [pc, #272]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d116      	bne.n	8001460 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001432:	4b41      	ldr	r3, [pc, #260]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d005      	beq.n	800144a <HAL_RCC_OscConfig+0x152>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d001      	beq.n	800144a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e1c7      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144a:	4b3b      	ldr	r3, [pc, #236]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	4937      	ldr	r1, [pc, #220]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 800145a:	4313      	orrs	r3, r2
 800145c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145e:	e03a      	b.n	80014d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d020      	beq.n	80014aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001468:	4b34      	ldr	r3, [pc, #208]	; (800153c <HAL_RCC_OscConfig+0x244>)
 800146a:	2201      	movs	r2, #1
 800146c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146e:	f7ff fc27 	bl	8000cc0 <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001476:	f7ff fc23 	bl	8000cc0 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e1a8      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001488:	4b2b      	ldr	r3, [pc, #172]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0f0      	beq.n	8001476 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001494:	4b28      	ldr	r3, [pc, #160]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	4925      	ldr	r1, [pc, #148]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	600b      	str	r3, [r1, #0]
 80014a8:	e015      	b.n	80014d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014aa:	4b24      	ldr	r3, [pc, #144]	; (800153c <HAL_RCC_OscConfig+0x244>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b0:	f7ff fc06 	bl	8000cc0 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b8:	f7ff fc02 	bl	8000cc0 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e187      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ca:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d036      	beq.n	8001550 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d016      	beq.n	8001518 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <HAL_RCC_OscConfig+0x248>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f0:	f7ff fbe6 	bl	8000cc0 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f8:	f7ff fbe2 	bl	8000cc0 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e167      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 800150c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0f0      	beq.n	80014f8 <HAL_RCC_OscConfig+0x200>
 8001516:	e01b      	b.n	8001550 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_RCC_OscConfig+0x248>)
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151e:	f7ff fbcf 	bl	8000cc0 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001524:	e00e      	b.n	8001544 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001526:	f7ff fbcb 	bl	8000cc0 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d907      	bls.n	8001544 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e150      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
 8001538:	40023800 	.word	0x40023800
 800153c:	42470000 	.word	0x42470000
 8001540:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001544:	4b88      	ldr	r3, [pc, #544]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1ea      	bne.n	8001526 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 8097 	beq.w	800168c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800155e:	2300      	movs	r3, #0
 8001560:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001562:	4b81      	ldr	r3, [pc, #516]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10f      	bne.n	800158e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	4b7d      	ldr	r3, [pc, #500]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	4a7c      	ldr	r2, [pc, #496]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157c:	6413      	str	r3, [r2, #64]	; 0x40
 800157e:	4b7a      	ldr	r3, [pc, #488]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800158a:	2301      	movs	r3, #1
 800158c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158e:	4b77      	ldr	r3, [pc, #476]	; (800176c <HAL_RCC_OscConfig+0x474>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001596:	2b00      	cmp	r3, #0
 8001598:	d118      	bne.n	80015cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800159a:	4b74      	ldr	r3, [pc, #464]	; (800176c <HAL_RCC_OscConfig+0x474>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a73      	ldr	r2, [pc, #460]	; (800176c <HAL_RCC_OscConfig+0x474>)
 80015a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015a6:	f7ff fb8b 	bl	8000cc0 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ae:	f7ff fb87 	bl	8000cc0 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e10c      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c0:	4b6a      	ldr	r3, [pc, #424]	; (800176c <HAL_RCC_OscConfig+0x474>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d106      	bne.n	80015e2 <HAL_RCC_OscConfig+0x2ea>
 80015d4:	4b64      	ldr	r3, [pc, #400]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 80015d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d8:	4a63      	ldr	r2, [pc, #396]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6713      	str	r3, [r2, #112]	; 0x70
 80015e0:	e01c      	b.n	800161c <HAL_RCC_OscConfig+0x324>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b05      	cmp	r3, #5
 80015e8:	d10c      	bne.n	8001604 <HAL_RCC_OscConfig+0x30c>
 80015ea:	4b5f      	ldr	r3, [pc, #380]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 80015ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ee:	4a5e      	ldr	r2, [pc, #376]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	6713      	str	r3, [r2, #112]	; 0x70
 80015f6:	4b5c      	ldr	r3, [pc, #368]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 80015f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fa:	4a5b      	ldr	r2, [pc, #364]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6713      	str	r3, [r2, #112]	; 0x70
 8001602:	e00b      	b.n	800161c <HAL_RCC_OscConfig+0x324>
 8001604:	4b58      	ldr	r3, [pc, #352]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001608:	4a57      	ldr	r2, [pc, #348]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 800160a:	f023 0301 	bic.w	r3, r3, #1
 800160e:	6713      	str	r3, [r2, #112]	; 0x70
 8001610:	4b55      	ldr	r3, [pc, #340]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001614:	4a54      	ldr	r2, [pc, #336]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001616:	f023 0304 	bic.w	r3, r3, #4
 800161a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d015      	beq.n	8001650 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001624:	f7ff fb4c 	bl	8000cc0 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162a:	e00a      	b.n	8001642 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800162c:	f7ff fb48 	bl	8000cc0 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	f241 3288 	movw	r2, #5000	; 0x1388
 800163a:	4293      	cmp	r3, r2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e0cb      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001642:	4b49      	ldr	r3, [pc, #292]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0ee      	beq.n	800162c <HAL_RCC_OscConfig+0x334>
 800164e:	e014      	b.n	800167a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001650:	f7ff fb36 	bl	8000cc0 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001656:	e00a      	b.n	800166e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001658:	f7ff fb32 	bl	8000cc0 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	f241 3288 	movw	r2, #5000	; 0x1388
 8001666:	4293      	cmp	r3, r2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e0b5      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166e:	4b3e      	ldr	r3, [pc, #248]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1ee      	bne.n	8001658 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800167a:	7dfb      	ldrb	r3, [r7, #23]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d105      	bne.n	800168c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001680:	4b39      	ldr	r3, [pc, #228]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	4a38      	ldr	r2, [pc, #224]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800168a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 80a1 	beq.w	80017d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001696:	4b34      	ldr	r3, [pc, #208]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d05c      	beq.n	800175c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d141      	bne.n	800172e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016aa:	4b31      	ldr	r3, [pc, #196]	; (8001770 <HAL_RCC_OscConfig+0x478>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff fb06 	bl	8000cc0 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b8:	f7ff fb02 	bl	8000cc0 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e087      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ca:	4b27      	ldr	r3, [pc, #156]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69da      	ldr	r2, [r3, #28]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e4:	019b      	lsls	r3, r3, #6
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	085b      	lsrs	r3, r3, #1
 80016ee:	3b01      	subs	r3, #1
 80016f0:	041b      	lsls	r3, r3, #16
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	061b      	lsls	r3, r3, #24
 80016fa:	491b      	ldr	r1, [pc, #108]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <HAL_RCC_OscConfig+0x478>)
 8001702:	2201      	movs	r2, #1
 8001704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001706:	f7ff fadb 	bl	8000cc0 <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170e:	f7ff fad7 	bl	8000cc0 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e05c      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f0      	beq.n	800170e <HAL_RCC_OscConfig+0x416>
 800172c:	e054      	b.n	80017d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <HAL_RCC_OscConfig+0x478>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001734:	f7ff fac4 	bl	8000cc0 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800173c:	f7ff fac0 	bl	8000cc0 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e045      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x444>
 800175a:	e03d      	b.n	80017d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d107      	bne.n	8001774 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e038      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
 8001768:	40023800 	.word	0x40023800
 800176c:	40007000 	.word	0x40007000
 8001770:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <HAL_RCC_OscConfig+0x4ec>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d028      	beq.n	80017d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800178c:	429a      	cmp	r2, r3
 800178e:	d121      	bne.n	80017d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179a:	429a      	cmp	r2, r3
 800179c:	d11a      	bne.n	80017d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017a4:	4013      	ands	r3, r2
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d111      	bne.n	80017d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ba:	085b      	lsrs	r3, r3, #1
 80017bc:	3b01      	subs	r3, #1
 80017be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d107      	bne.n	80017d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e000      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800

080017e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0cc      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017fc:	4b68      	ldr	r3, [pc, #416]	; (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d90c      	bls.n	8001824 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180a:	4b65      	ldr	r3, [pc, #404]	; (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001812:	4b63      	ldr	r3, [pc, #396]	; (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d001      	beq.n	8001824 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0b8      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d020      	beq.n	8001872 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800183c:	4b59      	ldr	r3, [pc, #356]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	4a58      	ldr	r2, [pc, #352]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001846:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001854:	4b53      	ldr	r3, [pc, #332]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	4a52      	ldr	r2, [pc, #328]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800185e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001860:	4b50      	ldr	r3, [pc, #320]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	494d      	ldr	r1, [pc, #308]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	4313      	orrs	r3, r2
 8001870:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d044      	beq.n	8001908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d107      	bne.n	8001896 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	4b47      	ldr	r3, [pc, #284]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d119      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e07f      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d003      	beq.n	80018a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a6:	4b3f      	ldr	r3, [pc, #252]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e06f      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b6:	4b3b      	ldr	r3, [pc, #236]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e067      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c6:	4b37      	ldr	r3, [pc, #220]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f023 0203 	bic.w	r2, r3, #3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4934      	ldr	r1, [pc, #208]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d8:	f7ff f9f2 	bl	8000cc0 <HAL_GetTick>
 80018dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018de:	e00a      	b.n	80018f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e0:	f7ff f9ee 	bl	8000cc0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e04f      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f6:	4b2b      	ldr	r3, [pc, #172]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 020c 	and.w	r2, r3, #12
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	429a      	cmp	r2, r3
 8001906:	d1eb      	bne.n	80018e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001908:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d20c      	bcs.n	8001930 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	4b22      	ldr	r3, [pc, #136]	; (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800191e:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e032      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d008      	beq.n	800194e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	4916      	ldr	r1, [pc, #88]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	4313      	orrs	r3, r2
 800194c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	d009      	beq.n	800196e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800195a:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	490e      	ldr	r1, [pc, #56]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	4313      	orrs	r3, r2
 800196c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800196e:	f000 f821 	bl	80019b4 <HAL_RCC_GetSysClockFreq>
 8001972:	4602      	mov	r2, r0
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	490a      	ldr	r1, [pc, #40]	; (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001980:	5ccb      	ldrb	r3, [r1, r3]
 8001982:	fa22 f303 	lsr.w	r3, r2, r3
 8001986:	4a09      	ldr	r2, [pc, #36]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <HAL_RCC_ClockConfig+0x1c8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe ffda 	bl	8000948 <HAL_InitTick>

  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023c00 	.word	0x40023c00
 80019a4:	40023800 	.word	0x40023800
 80019a8:	08006610 	.word	0x08006610
 80019ac:	20000000 	.word	0x20000000
 80019b0:	20000004 	.word	0x20000004

080019b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019b8:	b094      	sub	sp, #80	; 0x50
 80019ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	647b      	str	r3, [r7, #68]	; 0x44
 80019c0:	2300      	movs	r3, #0
 80019c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019c4:	2300      	movs	r3, #0
 80019c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019cc:	4b79      	ldr	r3, [pc, #484]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d00d      	beq.n	80019f4 <HAL_RCC_GetSysClockFreq+0x40>
 80019d8:	2b08      	cmp	r3, #8
 80019da:	f200 80e1 	bhi.w	8001ba0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d002      	beq.n	80019e8 <HAL_RCC_GetSysClockFreq+0x34>
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d003      	beq.n	80019ee <HAL_RCC_GetSysClockFreq+0x3a>
 80019e6:	e0db      	b.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019e8:	4b73      	ldr	r3, [pc, #460]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x204>)
 80019ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019ec:	e0db      	b.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ee:	4b73      	ldr	r3, [pc, #460]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x208>)
 80019f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019f2:	e0d8      	b.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019f4:	4b6f      	ldr	r3, [pc, #444]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019fe:	4b6d      	ldr	r3, [pc, #436]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d063      	beq.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a0a:	4b6a      	ldr	r3, [pc, #424]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	099b      	lsrs	r3, r3, #6
 8001a10:	2200      	movs	r2, #0
 8001a12:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a1c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a1e:	2300      	movs	r3, #0
 8001a20:	637b      	str	r3, [r7, #52]	; 0x34
 8001a22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a26:	4622      	mov	r2, r4
 8001a28:	462b      	mov	r3, r5
 8001a2a:	f04f 0000 	mov.w	r0, #0
 8001a2e:	f04f 0100 	mov.w	r1, #0
 8001a32:	0159      	lsls	r1, r3, #5
 8001a34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a38:	0150      	lsls	r0, r2, #5
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4621      	mov	r1, r4
 8001a40:	1a51      	subs	r1, r2, r1
 8001a42:	6139      	str	r1, [r7, #16]
 8001a44:	4629      	mov	r1, r5
 8001a46:	eb63 0301 	sbc.w	r3, r3, r1
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a58:	4659      	mov	r1, fp
 8001a5a:	018b      	lsls	r3, r1, #6
 8001a5c:	4651      	mov	r1, sl
 8001a5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a62:	4651      	mov	r1, sl
 8001a64:	018a      	lsls	r2, r1, #6
 8001a66:	4651      	mov	r1, sl
 8001a68:	ebb2 0801 	subs.w	r8, r2, r1
 8001a6c:	4659      	mov	r1, fp
 8001a6e:	eb63 0901 	sbc.w	r9, r3, r1
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a86:	4690      	mov	r8, r2
 8001a88:	4699      	mov	r9, r3
 8001a8a:	4623      	mov	r3, r4
 8001a8c:	eb18 0303 	adds.w	r3, r8, r3
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	462b      	mov	r3, r5
 8001a94:	eb49 0303 	adc.w	r3, r9, r3
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001aa6:	4629      	mov	r1, r5
 8001aa8:	024b      	lsls	r3, r1, #9
 8001aaa:	4621      	mov	r1, r4
 8001aac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ab0:	4621      	mov	r1, r4
 8001ab2:	024a      	lsls	r2, r1, #9
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aba:	2200      	movs	r2, #0
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001abe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ac0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ac4:	f7fe fbd4 	bl	8000270 <__aeabi_uldivmod>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4613      	mov	r3, r2
 8001ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ad0:	e058      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad2:	4b38      	ldr	r3, [pc, #224]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	099b      	lsrs	r3, r3, #6
 8001ad8:	2200      	movs	r2, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	4611      	mov	r1, r2
 8001ade:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ae2:	623b      	str	r3, [r7, #32]
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001aec:	4642      	mov	r2, r8
 8001aee:	464b      	mov	r3, r9
 8001af0:	f04f 0000 	mov.w	r0, #0
 8001af4:	f04f 0100 	mov.w	r1, #0
 8001af8:	0159      	lsls	r1, r3, #5
 8001afa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001afe:	0150      	lsls	r0, r2, #5
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4641      	mov	r1, r8
 8001b06:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b0a:	4649      	mov	r1, r9
 8001b0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b24:	ebb2 040a 	subs.w	r4, r2, sl
 8001b28:	eb63 050b 	sbc.w	r5, r3, fp
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	00eb      	lsls	r3, r5, #3
 8001b36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b3a:	00e2      	lsls	r2, r4, #3
 8001b3c:	4614      	mov	r4, r2
 8001b3e:	461d      	mov	r5, r3
 8001b40:	4643      	mov	r3, r8
 8001b42:	18e3      	adds	r3, r4, r3
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	464b      	mov	r3, r9
 8001b48:	eb45 0303 	adc.w	r3, r5, r3
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b5a:	4629      	mov	r1, r5
 8001b5c:	028b      	lsls	r3, r1, #10
 8001b5e:	4621      	mov	r1, r4
 8001b60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b64:	4621      	mov	r1, r4
 8001b66:	028a      	lsls	r2, r1, #10
 8001b68:	4610      	mov	r0, r2
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61bb      	str	r3, [r7, #24]
 8001b72:	61fa      	str	r2, [r7, #28]
 8001b74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b78:	f7fe fb7a 	bl	8000270 <__aeabi_uldivmod>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4613      	mov	r3, r2
 8001b82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	0c1b      	lsrs	r3, r3, #16
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	3301      	adds	r3, #1
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b9e:	e002      	b.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ba2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ba4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3750      	adds	r7, #80	; 0x50
 8001bac:	46bd      	mov	sp, r7
 8001bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	00f42400 	.word	0x00f42400
 8001bbc:	007a1200 	.word	0x007a1200

08001bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc4:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000000 	.word	0x20000000

08001bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bdc:	f7ff fff0 	bl	8001bc0 <HAL_RCC_GetHCLKFreq>
 8001be0:	4602      	mov	r2, r0
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	0a9b      	lsrs	r3, r3, #10
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	4903      	ldr	r1, [pc, #12]	; (8001bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bee:	5ccb      	ldrb	r3, [r1, r3]
 8001bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	08006620 	.word	0x08006620

08001c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c04:	f7ff ffdc 	bl	8001bc0 <HAL_RCC_GetHCLKFreq>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	0b5b      	lsrs	r3, r3, #13
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	4903      	ldr	r1, [pc, #12]	; (8001c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c16:	5ccb      	ldrb	r3, [r1, r3]
 8001c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40023800 	.word	0x40023800
 8001c24:	08006620 	.word	0x08006620

08001c28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	220f      	movs	r2, #15
 8001c36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_RCC_GetClockConfig+0x5c>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 0203 	and.w	r2, r3, #3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <HAL_RCC_GetClockConfig+0x5c>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <HAL_RCC_GetClockConfig+0x5c>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_RCC_GetClockConfig+0x5c>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	08db      	lsrs	r3, r3, #3
 8001c62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <HAL_RCC_GetClockConfig+0x60>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0207 	and.w	r2, r3, #7
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	601a      	str	r2, [r3, #0]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40023c00 	.word	0x40023c00

08001c8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e041      	b.n	8001d22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d106      	bne.n	8001cb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f839 	bl	8001d2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3304      	adds	r3, #4
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4610      	mov	r0, r2
 8001ccc:	f000 f9c0 	bl	8002050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d001      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e04e      	b.n	8001df6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0201 	orr.w	r2, r2, #1
 8001d6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a23      	ldr	r2, [pc, #140]	; (8001e04 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d022      	beq.n	8001dc0 <HAL_TIM_Base_Start_IT+0x80>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d82:	d01d      	beq.n	8001dc0 <HAL_TIM_Base_Start_IT+0x80>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a1f      	ldr	r2, [pc, #124]	; (8001e08 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d018      	beq.n	8001dc0 <HAL_TIM_Base_Start_IT+0x80>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a1e      	ldr	r2, [pc, #120]	; (8001e0c <HAL_TIM_Base_Start_IT+0xcc>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d013      	beq.n	8001dc0 <HAL_TIM_Base_Start_IT+0x80>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a1c      	ldr	r2, [pc, #112]	; (8001e10 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d00e      	beq.n	8001dc0 <HAL_TIM_Base_Start_IT+0x80>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a1b      	ldr	r2, [pc, #108]	; (8001e14 <HAL_TIM_Base_Start_IT+0xd4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d009      	beq.n	8001dc0 <HAL_TIM_Base_Start_IT+0x80>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a19      	ldr	r2, [pc, #100]	; (8001e18 <HAL_TIM_Base_Start_IT+0xd8>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d004      	beq.n	8001dc0 <HAL_TIM_Base_Start_IT+0x80>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a18      	ldr	r2, [pc, #96]	; (8001e1c <HAL_TIM_Base_Start_IT+0xdc>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d111      	bne.n	8001de4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2b06      	cmp	r3, #6
 8001dd0:	d010      	beq.n	8001df4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f042 0201 	orr.w	r2, r2, #1
 8001de0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001de2:	e007      	b.n	8001df4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0201 	orr.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40010000 	.word	0x40010000
 8001e08:	40000400 	.word	0x40000400
 8001e0c:	40000800 	.word	0x40000800
 8001e10:	40000c00 	.word	0x40000c00
 8001e14:	40010400 	.word	0x40010400
 8001e18:	40014000 	.word	0x40014000
 8001e1c:	40001800 	.word	0x40001800

08001e20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d020      	beq.n	8001e84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d01b      	beq.n	8001e84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0202 	mvn.w	r2, #2
 8001e54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f8d2 	bl	8002014 <HAL_TIM_IC_CaptureCallback>
 8001e70:	e005      	b.n	8001e7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f8c4 	bl	8002000 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f8d5 	bl	8002028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d020      	beq.n	8001ed0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d01b      	beq.n	8001ed0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0204 	mvn.w	r2, #4
 8001ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f8ac 	bl	8002014 <HAL_TIM_IC_CaptureCallback>
 8001ebc:	e005      	b.n	8001eca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f89e 	bl	8002000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f8af 	bl	8002028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d020      	beq.n	8001f1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d01b      	beq.n	8001f1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f06f 0208 	mvn.w	r2, #8
 8001eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2204      	movs	r2, #4
 8001ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f886 	bl	8002014 <HAL_TIM_IC_CaptureCallback>
 8001f08:	e005      	b.n	8001f16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f878 	bl	8002000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f889 	bl	8002028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d020      	beq.n	8001f68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d01b      	beq.n	8001f68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f06f 0210 	mvn.w	r2, #16
 8001f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2208      	movs	r2, #8
 8001f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f860 	bl	8002014 <HAL_TIM_IC_CaptureCallback>
 8001f54:	e005      	b.n	8001f62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f852 	bl	8002000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f863 	bl	8002028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00c      	beq.n	8001f8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d007      	beq.n	8001f8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0201 	mvn.w	r2, #1
 8001f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7fe fc4e 	bl	8000828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00c      	beq.n	8001fb0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d007      	beq.n	8001fb0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f906 	bl	80021bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00c      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d007      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f834 	bl	800203c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f003 0320 	and.w	r3, r3, #32
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00c      	beq.n	8001ff8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f003 0320 	and.w	r3, r3, #32
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d007      	beq.n	8001ff8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0220 	mvn.w	r2, #32
 8001ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f8d8 	bl	80021a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a46      	ldr	r2, [pc, #280]	; (800217c <TIM_Base_SetConfig+0x12c>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d013      	beq.n	8002090 <TIM_Base_SetConfig+0x40>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800206e:	d00f      	beq.n	8002090 <TIM_Base_SetConfig+0x40>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a43      	ldr	r2, [pc, #268]	; (8002180 <TIM_Base_SetConfig+0x130>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d00b      	beq.n	8002090 <TIM_Base_SetConfig+0x40>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a42      	ldr	r2, [pc, #264]	; (8002184 <TIM_Base_SetConfig+0x134>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d007      	beq.n	8002090 <TIM_Base_SetConfig+0x40>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a41      	ldr	r2, [pc, #260]	; (8002188 <TIM_Base_SetConfig+0x138>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d003      	beq.n	8002090 <TIM_Base_SetConfig+0x40>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a40      	ldr	r2, [pc, #256]	; (800218c <TIM_Base_SetConfig+0x13c>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d108      	bne.n	80020a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002096:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	4313      	orrs	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a35      	ldr	r2, [pc, #212]	; (800217c <TIM_Base_SetConfig+0x12c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d02b      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b0:	d027      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a32      	ldr	r2, [pc, #200]	; (8002180 <TIM_Base_SetConfig+0x130>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d023      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a31      	ldr	r2, [pc, #196]	; (8002184 <TIM_Base_SetConfig+0x134>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d01f      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a30      	ldr	r2, [pc, #192]	; (8002188 <TIM_Base_SetConfig+0x138>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d01b      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a2f      	ldr	r2, [pc, #188]	; (800218c <TIM_Base_SetConfig+0x13c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d017      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a2e      	ldr	r2, [pc, #184]	; (8002190 <TIM_Base_SetConfig+0x140>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d013      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a2d      	ldr	r2, [pc, #180]	; (8002194 <TIM_Base_SetConfig+0x144>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00f      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a2c      	ldr	r2, [pc, #176]	; (8002198 <TIM_Base_SetConfig+0x148>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d00b      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a2b      	ldr	r2, [pc, #172]	; (800219c <TIM_Base_SetConfig+0x14c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d007      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a2a      	ldr	r2, [pc, #168]	; (80021a0 <TIM_Base_SetConfig+0x150>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d003      	beq.n	8002102 <TIM_Base_SetConfig+0xb2>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a29      	ldr	r2, [pc, #164]	; (80021a4 <TIM_Base_SetConfig+0x154>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d108      	bne.n	8002114 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	4313      	orrs	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	4313      	orrs	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a10      	ldr	r2, [pc, #64]	; (800217c <TIM_Base_SetConfig+0x12c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d003      	beq.n	8002148 <TIM_Base_SetConfig+0xf8>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a12      	ldr	r2, [pc, #72]	; (800218c <TIM_Base_SetConfig+0x13c>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d103      	bne.n	8002150 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b01      	cmp	r3, #1
 8002160:	d105      	bne.n	800216e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f023 0201 	bic.w	r2, r3, #1
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	611a      	str	r2, [r3, #16]
  }
}
 800216e:	bf00      	nop
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40010000 	.word	0x40010000
 8002180:	40000400 	.word	0x40000400
 8002184:	40000800 	.word	0x40000800
 8002188:	40000c00 	.word	0x40000c00
 800218c:	40010400 	.word	0x40010400
 8002190:	40014000 	.word	0x40014000
 8002194:	40014400 	.word	0x40014400
 8002198:	40014800 	.word	0x40014800
 800219c:	40001800 	.word	0x40001800
 80021a0:	40001c00 	.word	0x40001c00
 80021a4:	40002000 	.word	0x40002000

080021a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e042      	b.n	8002268 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d106      	bne.n	80021fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7fe fb56 	bl	80008a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2224      	movs	r2, #36	; 0x24
 8002200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002212:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 fd69 	bl	8002cec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	691a      	ldr	r2, [r3, #16]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002228:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695a      	ldr	r2, [r3, #20]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002238:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002248:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2220      	movs	r2, #32
 800225c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08a      	sub	sp, #40	; 0x28
 8002274:	af02      	add	r7, sp, #8
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	4613      	mov	r3, r2
 800227e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b20      	cmp	r3, #32
 800228e:	d175      	bne.n	800237c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <HAL_UART_Transmit+0x2c>
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e06e      	b.n	800237e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2221      	movs	r2, #33	; 0x21
 80022aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022ae:	f7fe fd07 	bl	8000cc0 <HAL_GetTick>
 80022b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	88fa      	ldrh	r2, [r7, #6]
 80022b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	88fa      	ldrh	r2, [r7, #6]
 80022be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c8:	d108      	bne.n	80022dc <HAL_UART_Transmit+0x6c>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d104      	bne.n	80022dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	61bb      	str	r3, [r7, #24]
 80022da:	e003      	b.n	80022e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80022e4:	e02e      	b.n	8002344 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2200      	movs	r2, #0
 80022ee:	2180      	movs	r1, #128	; 0x80
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 fb05 	bl	8002900 <UART_WaitOnFlagUntilTimeout>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e03a      	b.n	800237e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10b      	bne.n	8002326 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800231c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	3302      	adds	r3, #2
 8002322:	61bb      	str	r3, [r7, #24]
 8002324:	e007      	b.n	8002336 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	781a      	ldrb	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	3301      	adds	r3, #1
 8002334:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800233a:	b29b      	uxth	r3, r3
 800233c:	3b01      	subs	r3, #1
 800233e:	b29a      	uxth	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002348:	b29b      	uxth	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1cb      	bne.n	80022e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2200      	movs	r2, #0
 8002356:	2140      	movs	r1, #64	; 0x40
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 fad1 	bl	8002900 <UART_WaitOnFlagUntilTimeout>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2220      	movs	r2, #32
 8002368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e006      	b.n	800237e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2220      	movs	r2, #32
 8002374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	e000      	b.n	800237e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800237c:	2302      	movs	r3, #2
  }
}
 800237e:	4618      	mov	r0, r3
 8002380:	3720      	adds	r7, #32
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b0ba      	sub	sp, #232	; 0xe8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80023ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80023c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10f      	bne.n	80023ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023d2:	f003 0320 	and.w	r3, r3, #32
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d009      	beq.n	80023ee <HAL_UART_IRQHandler+0x66>
 80023da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023de:	f003 0320 	and.w	r3, r3, #32
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 fbc2 	bl	8002b70 <UART_Receive_IT>
      return;
 80023ec:	e25b      	b.n	80028a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80023ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 80de 	beq.w	80025b4 <HAL_UART_IRQHandler+0x22c>
 80023f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d106      	bne.n	8002412 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002408:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80d1 	beq.w	80025b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00b      	beq.n	8002436 <HAL_UART_IRQHandler+0xae>
 800241e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	f043 0201 	orr.w	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00b      	beq.n	800245a <HAL_UART_IRQHandler+0xd2>
 8002442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d005      	beq.n	800245a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	f043 0202 	orr.w	r2, r3, #2
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800245a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00b      	beq.n	800247e <HAL_UART_IRQHandler+0xf6>
 8002466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d005      	beq.n	800247e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	f043 0204 	orr.w	r2, r3, #4
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800247e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d011      	beq.n	80024ae <HAL_UART_IRQHandler+0x126>
 800248a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800248e:	f003 0320 	and.w	r3, r3, #32
 8002492:	2b00      	cmp	r3, #0
 8002494:	d105      	bne.n	80024a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002496:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d005      	beq.n	80024ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	f043 0208 	orr.w	r2, r3, #8
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 81f2 	beq.w	800289c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024bc:	f003 0320 	and.w	r3, r3, #32
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_UART_IRQHandler+0x14e>
 80024c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024c8:	f003 0320 	and.w	r3, r3, #32
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d002      	beq.n	80024d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 fb4d 	bl	8002b70 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e0:	2b40      	cmp	r3, #64	; 0x40
 80024e2:	bf0c      	ite	eq
 80024e4:	2301      	moveq	r3, #1
 80024e6:	2300      	movne	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d103      	bne.n	8002502 <HAL_UART_IRQHandler+0x17a>
 80024fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d04f      	beq.n	80025a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 fa55 	bl	80029b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002512:	2b40      	cmp	r3, #64	; 0x40
 8002514:	d141      	bne.n	800259a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	3314      	adds	r3, #20
 800251c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002520:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002524:	e853 3f00 	ldrex	r3, [r3]
 8002528:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800252c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002530:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002534:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	3314      	adds	r3, #20
 800253e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002542:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002546:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800254a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800254e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002552:	e841 2300 	strex	r3, r2, [r1]
 8002556:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800255a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1d9      	bne.n	8002516 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002566:	2b00      	cmp	r3, #0
 8002568:	d013      	beq.n	8002592 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256e:	4a7e      	ldr	r2, [pc, #504]	; (8002768 <HAL_UART_IRQHandler+0x3e0>)
 8002570:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002576:	4618      	mov	r0, r3
 8002578:	f7fe fd00 	bl	8000f7c <HAL_DMA_Abort_IT>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d016      	beq.n	80025b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800258c:	4610      	mov	r0, r2
 800258e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002590:	e00e      	b.n	80025b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f99e 	bl	80028d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002598:	e00a      	b.n	80025b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f99a 	bl	80028d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a0:	e006      	b.n	80025b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f996 	bl	80028d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80025ae:	e175      	b.n	800289c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b0:	bf00      	nop
    return;
 80025b2:	e173      	b.n	800289c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	f040 814f 	bne.w	800285c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80025be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025c2:	f003 0310 	and.w	r3, r3, #16
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 8148 	beq.w	800285c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80025cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025d0:	f003 0310 	and.w	r3, r3, #16
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 8141 	beq.w	800285c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025da:	2300      	movs	r3, #0
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fa:	2b40      	cmp	r3, #64	; 0x40
 80025fc:	f040 80b6 	bne.w	800276c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800260c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 8145 	beq.w	80028a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800261a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800261e:	429a      	cmp	r2, r3
 8002620:	f080 813e 	bcs.w	80028a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800262a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002636:	f000 8088 	beq.w	800274a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	330c      	adds	r3, #12
 8002640:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002644:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002648:	e853 3f00 	ldrex	r3, [r3]
 800264c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002650:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002658:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	330c      	adds	r3, #12
 8002662:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002666:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800266a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800266e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002672:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002676:	e841 2300 	strex	r3, r2, [r1]
 800267a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800267e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1d9      	bne.n	800263a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	3314      	adds	r3, #20
 800268c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800268e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002690:	e853 3f00 	ldrex	r3, [r3]
 8002694:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002696:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002698:	f023 0301 	bic.w	r3, r3, #1
 800269c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	3314      	adds	r3, #20
 80026a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80026aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80026ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80026b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80026b6:	e841 2300 	strex	r3, r2, [r1]
 80026ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80026bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1e1      	bne.n	8002686 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	3314      	adds	r3, #20
 80026c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026cc:	e853 3f00 	ldrex	r3, [r3]
 80026d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80026d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	3314      	adds	r3, #20
 80026e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80026e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80026e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80026ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80026ee:	e841 2300 	strex	r3, r2, [r1]
 80026f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80026f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1e3      	bne.n	80026c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2220      	movs	r2, #32
 80026fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	330c      	adds	r3, #12
 800270e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002712:	e853 3f00 	ldrex	r3, [r3]
 8002716:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800271a:	f023 0310 	bic.w	r3, r3, #16
 800271e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	330c      	adds	r3, #12
 8002728:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800272c:	65ba      	str	r2, [r7, #88]	; 0x58
 800272e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002730:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002732:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002734:	e841 2300 	strex	r3, r2, [r1]
 8002738:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800273a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1e3      	bne.n	8002708 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002744:	4618      	mov	r0, r3
 8002746:	f7fe fba9 	bl	8000e9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2202      	movs	r2, #2
 800274e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002758:	b29b      	uxth	r3, r3
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	b29b      	uxth	r3, r3
 800275e:	4619      	mov	r1, r3
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f8c1 	bl	80028e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002766:	e09b      	b.n	80028a0 <HAL_UART_IRQHandler+0x518>
 8002768:	08002a79 	.word	0x08002a79
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002774:	b29b      	uxth	r3, r3
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002780:	b29b      	uxth	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 808e 	beq.w	80028a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002788:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 8089 	beq.w	80028a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	330c      	adds	r3, #12
 8002798:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800279a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279c:	e853 3f00 	ldrex	r3, [r3]
 80027a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80027a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	330c      	adds	r3, #12
 80027b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80027b6:	647a      	str	r2, [r7, #68]	; 0x44
 80027b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80027bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027be:	e841 2300 	strex	r3, r2, [r1]
 80027c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80027c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1e3      	bne.n	8002792 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	3314      	adds	r3, #20
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	e853 3f00 	ldrex	r3, [r3]
 80027d8:	623b      	str	r3, [r7, #32]
   return(result);
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	f023 0301 	bic.w	r3, r3, #1
 80027e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	3314      	adds	r3, #20
 80027ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80027ee:	633a      	str	r2, [r7, #48]	; 0x30
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027f6:	e841 2300 	strex	r3, r2, [r1]
 80027fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80027fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1e3      	bne.n	80027ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	330c      	adds	r3, #12
 8002816:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	e853 3f00 	ldrex	r3, [r3]
 800281e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f023 0310 	bic.w	r3, r3, #16
 8002826:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	330c      	adds	r3, #12
 8002830:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002834:	61fa      	str	r2, [r7, #28]
 8002836:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002838:	69b9      	ldr	r1, [r7, #24]
 800283a:	69fa      	ldr	r2, [r7, #28]
 800283c:	e841 2300 	strex	r3, r2, [r1]
 8002840:	617b      	str	r3, [r7, #20]
   return(result);
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1e3      	bne.n	8002810 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800284e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002852:	4619      	mov	r1, r3
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f847 	bl	80028e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800285a:	e023      	b.n	80028a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800285c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002864:	2b00      	cmp	r3, #0
 8002866:	d009      	beq.n	800287c <HAL_UART_IRQHandler+0x4f4>
 8002868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800286c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 f913 	bl	8002aa0 <UART_Transmit_IT>
    return;
 800287a:	e014      	b.n	80028a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800287c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00e      	beq.n	80028a6 <HAL_UART_IRQHandler+0x51e>
 8002888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800288c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f953 	bl	8002b40 <UART_EndTransmit_IT>
    return;
 800289a:	e004      	b.n	80028a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800289c:	bf00      	nop
 800289e:	e002      	b.n	80028a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80028a0:	bf00      	nop
 80028a2:	e000      	b.n	80028a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80028a4:	bf00      	nop
  }
}
 80028a6:	37e8      	adds	r7, #232	; 0xe8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	4613      	mov	r3, r2
 800290e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002910:	e03b      	b.n	800298a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002918:	d037      	beq.n	800298a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800291a:	f7fe f9d1 	bl	8000cc0 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	6a3a      	ldr	r2, [r7, #32]
 8002926:	429a      	cmp	r2, r3
 8002928:	d302      	bcc.n	8002930 <UART_WaitOnFlagUntilTimeout+0x30>
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e03a      	b.n	80029aa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	2b00      	cmp	r3, #0
 8002940:	d023      	beq.n	800298a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b80      	cmp	r3, #128	; 0x80
 8002946:	d020      	beq.n	800298a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2b40      	cmp	r3, #64	; 0x40
 800294c:	d01d      	beq.n	800298a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b08      	cmp	r3, #8
 800295a:	d116      	bne.n	800298a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 f81d 	bl	80029b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2208      	movs	r2, #8
 800297c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e00f      	b.n	80029aa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	4013      	ands	r3, r2
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	429a      	cmp	r2, r3
 8002998:	bf0c      	ite	eq
 800299a:	2301      	moveq	r3, #1
 800299c:	2300      	movne	r3, #0
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	461a      	mov	r2, r3
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d0b4      	beq.n	8002912 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b095      	sub	sp, #84	; 0x54
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	330c      	adds	r3, #12
 80029c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c4:	e853 3f00 	ldrex	r3, [r3]
 80029c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80029ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	330c      	adds	r3, #12
 80029d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029da:	643a      	str	r2, [r7, #64]	; 0x40
 80029dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80029e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029e2:	e841 2300 	strex	r3, r2, [r1]
 80029e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80029e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1e5      	bne.n	80029ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	3314      	adds	r3, #20
 80029f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	e853 3f00 	ldrex	r3, [r3]
 80029fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	f023 0301 	bic.w	r3, r3, #1
 8002a04:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	3314      	adds	r3, #20
 8002a0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a16:	e841 2300 	strex	r3, r2, [r1]
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1e5      	bne.n	80029ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d119      	bne.n	8002a5e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	330c      	adds	r3, #12
 8002a30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	e853 3f00 	ldrex	r3, [r3]
 8002a38:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f023 0310 	bic.w	r3, r3, #16
 8002a40:	647b      	str	r3, [r7, #68]	; 0x44
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	330c      	adds	r3, #12
 8002a48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a4a:	61ba      	str	r2, [r7, #24]
 8002a4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4e:	6979      	ldr	r1, [r7, #20]
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	e841 2300 	strex	r3, r2, [r1]
 8002a56:	613b      	str	r3, [r7, #16]
   return(result);
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1e5      	bne.n	8002a2a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a6c:	bf00      	nop
 8002a6e:	3754      	adds	r7, #84	; 0x54
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f7ff ff1e 	bl	80028d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a98:	bf00      	nop
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b21      	cmp	r3, #33	; 0x21
 8002ab2:	d13e      	bne.n	8002b32 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002abc:	d114      	bne.n	8002ae8 <UART_Transmit_IT+0x48>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d110      	bne.n	8002ae8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ada:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	1c9a      	adds	r2, r3, #2
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	621a      	str	r2, [r3, #32]
 8002ae6:	e008      	b.n	8002afa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	1c59      	adds	r1, r3, #1
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6211      	str	r1, [r2, #32]
 8002af2:	781a      	ldrb	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	4619      	mov	r1, r3
 8002b08:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10f      	bne.n	8002b2e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b1c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b2c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e000      	b.n	8002b34 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b32:	2302      	movs	r3, #2
  }
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b56:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff fea3 	bl	80028ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08c      	sub	sp, #48	; 0x30
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b22      	cmp	r3, #34	; 0x22
 8002b82:	f040 80ae 	bne.w	8002ce2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b8e:	d117      	bne.n	8002bc0 <UART_Receive_IT+0x50>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d113      	bne.n	8002bc0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb8:	1c9a      	adds	r2, r3, #2
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	629a      	str	r2, [r3, #40]	; 0x28
 8002bbe:	e026      	b.n	8002c0e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd2:	d007      	beq.n	8002be4 <UART_Receive_IT+0x74>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10a      	bne.n	8002bf2 <UART_Receive_IT+0x82>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d106      	bne.n	8002bf2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bee:	701a      	strb	r2, [r3, #0]
 8002bf0:	e008      	b.n	8002c04 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c02:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d15d      	bne.n	8002cde <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0220 	bic.w	r2, r2, #32
 8002c30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695a      	ldr	r2, [r3, #20]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0201 	bic.w	r2, r2, #1
 8002c50:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2220      	movs	r2, #32
 8002c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d135      	bne.n	8002cd4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	330c      	adds	r3, #12
 8002c74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	e853 3f00 	ldrex	r3, [r3]
 8002c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f023 0310 	bic.w	r3, r3, #16
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	330c      	adds	r3, #12
 8002c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c8e:	623a      	str	r2, [r7, #32]
 8002c90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c92:	69f9      	ldr	r1, [r7, #28]
 8002c94:	6a3a      	ldr	r2, [r7, #32]
 8002c96:	e841 2300 	strex	r3, r2, [r1]
 8002c9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1e5      	bne.n	8002c6e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	2b10      	cmp	r3, #16
 8002cae:	d10a      	bne.n	8002cc6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cca:	4619      	mov	r1, r3
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff fe0b 	bl	80028e8 <HAL_UARTEx_RxEventCallback>
 8002cd2:	e002      	b.n	8002cda <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff fdf3 	bl	80028c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	e002      	b.n	8002ce4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	e000      	b.n	8002ce4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002ce2:	2302      	movs	r3, #2
  }
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3730      	adds	r7, #48	; 0x30
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cf0:	b0c0      	sub	sp, #256	; 0x100
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d08:	68d9      	ldr	r1, [r3, #12]
 8002d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	ea40 0301 	orr.w	r3, r0, r1
 8002d14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d44:	f021 010c 	bic.w	r1, r1, #12
 8002d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d52:	430b      	orrs	r3, r1
 8002d54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d66:	6999      	ldr	r1, [r3, #24]
 8002d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	ea40 0301 	orr.w	r3, r0, r1
 8002d72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	4b8f      	ldr	r3, [pc, #572]	; (8002fb8 <UART_SetConfig+0x2cc>)
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d005      	beq.n	8002d8c <UART_SetConfig+0xa0>
 8002d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	4b8d      	ldr	r3, [pc, #564]	; (8002fbc <UART_SetConfig+0x2d0>)
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d104      	bne.n	8002d96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d8c:	f7fe ff38 	bl	8001c00 <HAL_RCC_GetPCLK2Freq>
 8002d90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002d94:	e003      	b.n	8002d9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d96:	f7fe ff1f 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 8002d9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002da8:	f040 810c 	bne.w	8002fc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002db0:	2200      	movs	r2, #0
 8002db2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002db6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002dba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002dbe:	4622      	mov	r2, r4
 8002dc0:	462b      	mov	r3, r5
 8002dc2:	1891      	adds	r1, r2, r2
 8002dc4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002dc6:	415b      	adcs	r3, r3
 8002dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002dce:	4621      	mov	r1, r4
 8002dd0:	eb12 0801 	adds.w	r8, r2, r1
 8002dd4:	4629      	mov	r1, r5
 8002dd6:	eb43 0901 	adc.w	r9, r3, r1
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002de6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dee:	4690      	mov	r8, r2
 8002df0:	4699      	mov	r9, r3
 8002df2:	4623      	mov	r3, r4
 8002df4:	eb18 0303 	adds.w	r3, r8, r3
 8002df8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002dfc:	462b      	mov	r3, r5
 8002dfe:	eb49 0303 	adc.w	r3, r9, r3
 8002e02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	18db      	adds	r3, r3, r3
 8002e1e:	653b      	str	r3, [r7, #80]	; 0x50
 8002e20:	4613      	mov	r3, r2
 8002e22:	eb42 0303 	adc.w	r3, r2, r3
 8002e26:	657b      	str	r3, [r7, #84]	; 0x54
 8002e28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e30:	f7fd fa1e 	bl	8000270 <__aeabi_uldivmod>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4b61      	ldr	r3, [pc, #388]	; (8002fc0 <UART_SetConfig+0x2d4>)
 8002e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e3e:	095b      	lsrs	r3, r3, #5
 8002e40:	011c      	lsls	r4, r3, #4
 8002e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e46:	2200      	movs	r2, #0
 8002e48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e54:	4642      	mov	r2, r8
 8002e56:	464b      	mov	r3, r9
 8002e58:	1891      	adds	r1, r2, r2
 8002e5a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e5c:	415b      	adcs	r3, r3
 8002e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e64:	4641      	mov	r1, r8
 8002e66:	eb12 0a01 	adds.w	sl, r2, r1
 8002e6a:	4649      	mov	r1, r9
 8002e6c:	eb43 0b01 	adc.w	fp, r3, r1
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e84:	4692      	mov	sl, r2
 8002e86:	469b      	mov	fp, r3
 8002e88:	4643      	mov	r3, r8
 8002e8a:	eb1a 0303 	adds.w	r3, sl, r3
 8002e8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e92:	464b      	mov	r3, r9
 8002e94:	eb4b 0303 	adc.w	r3, fp, r3
 8002e98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ea8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002eac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	18db      	adds	r3, r3, r3
 8002eb4:	643b      	str	r3, [r7, #64]	; 0x40
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	eb42 0303 	adc.w	r3, r2, r3
 8002ebc:	647b      	str	r3, [r7, #68]	; 0x44
 8002ebe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ec2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ec6:	f7fd f9d3 	bl	8000270 <__aeabi_uldivmod>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4611      	mov	r1, r2
 8002ed0:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <UART_SetConfig+0x2d4>)
 8002ed2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ed6:	095b      	lsrs	r3, r3, #5
 8002ed8:	2264      	movs	r2, #100	; 0x64
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	1acb      	subs	r3, r1, r3
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ee6:	4b36      	ldr	r3, [pc, #216]	; (8002fc0 <UART_SetConfig+0x2d4>)
 8002ee8:	fba3 2302 	umull	r2, r3, r3, r2
 8002eec:	095b      	lsrs	r3, r3, #5
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ef4:	441c      	add	r4, r3
 8002ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002efa:	2200      	movs	r2, #0
 8002efc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f08:	4642      	mov	r2, r8
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	1891      	adds	r1, r2, r2
 8002f0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f10:	415b      	adcs	r3, r3
 8002f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f18:	4641      	mov	r1, r8
 8002f1a:	1851      	adds	r1, r2, r1
 8002f1c:	6339      	str	r1, [r7, #48]	; 0x30
 8002f1e:	4649      	mov	r1, r9
 8002f20:	414b      	adcs	r3, r1
 8002f22:	637b      	str	r3, [r7, #52]	; 0x34
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f30:	4659      	mov	r1, fp
 8002f32:	00cb      	lsls	r3, r1, #3
 8002f34:	4651      	mov	r1, sl
 8002f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f3a:	4651      	mov	r1, sl
 8002f3c:	00ca      	lsls	r2, r1, #3
 8002f3e:	4610      	mov	r0, r2
 8002f40:	4619      	mov	r1, r3
 8002f42:	4603      	mov	r3, r0
 8002f44:	4642      	mov	r2, r8
 8002f46:	189b      	adds	r3, r3, r2
 8002f48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f4c:	464b      	mov	r3, r9
 8002f4e:	460a      	mov	r2, r1
 8002f50:	eb42 0303 	adc.w	r3, r2, r3
 8002f54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	18db      	adds	r3, r3, r3
 8002f70:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f72:	4613      	mov	r3, r2
 8002f74:	eb42 0303 	adc.w	r3, r2, r3
 8002f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002f82:	f7fd f975 	bl	8000270 <__aeabi_uldivmod>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <UART_SetConfig+0x2d4>)
 8002f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f90:	095b      	lsrs	r3, r3, #5
 8002f92:	2164      	movs	r1, #100	; 0x64
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	3332      	adds	r3, #50	; 0x32
 8002f9e:	4a08      	ldr	r2, [pc, #32]	; (8002fc0 <UART_SetConfig+0x2d4>)
 8002fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa4:	095b      	lsrs	r3, r3, #5
 8002fa6:	f003 0207 	and.w	r2, r3, #7
 8002faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4422      	add	r2, r4
 8002fb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fb4:	e106      	b.n	80031c4 <UART_SetConfig+0x4d8>
 8002fb6:	bf00      	nop
 8002fb8:	40011000 	.word	0x40011000
 8002fbc:	40011400 	.word	0x40011400
 8002fc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002fce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002fd2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002fd6:	4642      	mov	r2, r8
 8002fd8:	464b      	mov	r3, r9
 8002fda:	1891      	adds	r1, r2, r2
 8002fdc:	6239      	str	r1, [r7, #32]
 8002fde:	415b      	adcs	r3, r3
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fe6:	4641      	mov	r1, r8
 8002fe8:	1854      	adds	r4, r2, r1
 8002fea:	4649      	mov	r1, r9
 8002fec:	eb43 0501 	adc.w	r5, r3, r1
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	00eb      	lsls	r3, r5, #3
 8002ffa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ffe:	00e2      	lsls	r2, r4, #3
 8003000:	4614      	mov	r4, r2
 8003002:	461d      	mov	r5, r3
 8003004:	4643      	mov	r3, r8
 8003006:	18e3      	adds	r3, r4, r3
 8003008:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800300c:	464b      	mov	r3, r9
 800300e:	eb45 0303 	adc.w	r3, r5, r3
 8003012:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003022:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003032:	4629      	mov	r1, r5
 8003034:	008b      	lsls	r3, r1, #2
 8003036:	4621      	mov	r1, r4
 8003038:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800303c:	4621      	mov	r1, r4
 800303e:	008a      	lsls	r2, r1, #2
 8003040:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003044:	f7fd f914 	bl	8000270 <__aeabi_uldivmod>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4b60      	ldr	r3, [pc, #384]	; (80031d0 <UART_SetConfig+0x4e4>)
 800304e:	fba3 2302 	umull	r2, r3, r3, r2
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	011c      	lsls	r4, r3, #4
 8003056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800305a:	2200      	movs	r2, #0
 800305c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003060:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003064:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003068:	4642      	mov	r2, r8
 800306a:	464b      	mov	r3, r9
 800306c:	1891      	adds	r1, r2, r2
 800306e:	61b9      	str	r1, [r7, #24]
 8003070:	415b      	adcs	r3, r3
 8003072:	61fb      	str	r3, [r7, #28]
 8003074:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003078:	4641      	mov	r1, r8
 800307a:	1851      	adds	r1, r2, r1
 800307c:	6139      	str	r1, [r7, #16]
 800307e:	4649      	mov	r1, r9
 8003080:	414b      	adcs	r3, r1
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	f04f 0300 	mov.w	r3, #0
 800308c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003090:	4659      	mov	r1, fp
 8003092:	00cb      	lsls	r3, r1, #3
 8003094:	4651      	mov	r1, sl
 8003096:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800309a:	4651      	mov	r1, sl
 800309c:	00ca      	lsls	r2, r1, #3
 800309e:	4610      	mov	r0, r2
 80030a0:	4619      	mov	r1, r3
 80030a2:	4603      	mov	r3, r0
 80030a4:	4642      	mov	r2, r8
 80030a6:	189b      	adds	r3, r3, r2
 80030a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030ac:	464b      	mov	r3, r9
 80030ae:	460a      	mov	r2, r1
 80030b0:	eb42 0303 	adc.w	r3, r2, r3
 80030b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80030c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80030d0:	4649      	mov	r1, r9
 80030d2:	008b      	lsls	r3, r1, #2
 80030d4:	4641      	mov	r1, r8
 80030d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030da:	4641      	mov	r1, r8
 80030dc:	008a      	lsls	r2, r1, #2
 80030de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80030e2:	f7fd f8c5 	bl	8000270 <__aeabi_uldivmod>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4611      	mov	r1, r2
 80030ec:	4b38      	ldr	r3, [pc, #224]	; (80031d0 <UART_SetConfig+0x4e4>)
 80030ee:	fba3 2301 	umull	r2, r3, r3, r1
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	2264      	movs	r2, #100	; 0x64
 80030f6:	fb02 f303 	mul.w	r3, r2, r3
 80030fa:	1acb      	subs	r3, r1, r3
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	3332      	adds	r3, #50	; 0x32
 8003100:	4a33      	ldr	r2, [pc, #204]	; (80031d0 <UART_SetConfig+0x4e4>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800310c:	441c      	add	r4, r3
 800310e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003112:	2200      	movs	r2, #0
 8003114:	673b      	str	r3, [r7, #112]	; 0x70
 8003116:	677a      	str	r2, [r7, #116]	; 0x74
 8003118:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800311c:	4642      	mov	r2, r8
 800311e:	464b      	mov	r3, r9
 8003120:	1891      	adds	r1, r2, r2
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	415b      	adcs	r3, r3
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800312c:	4641      	mov	r1, r8
 800312e:	1851      	adds	r1, r2, r1
 8003130:	6039      	str	r1, [r7, #0]
 8003132:	4649      	mov	r1, r9
 8003134:	414b      	adcs	r3, r1
 8003136:	607b      	str	r3, [r7, #4]
 8003138:	f04f 0200 	mov.w	r2, #0
 800313c:	f04f 0300 	mov.w	r3, #0
 8003140:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003144:	4659      	mov	r1, fp
 8003146:	00cb      	lsls	r3, r1, #3
 8003148:	4651      	mov	r1, sl
 800314a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800314e:	4651      	mov	r1, sl
 8003150:	00ca      	lsls	r2, r1, #3
 8003152:	4610      	mov	r0, r2
 8003154:	4619      	mov	r1, r3
 8003156:	4603      	mov	r3, r0
 8003158:	4642      	mov	r2, r8
 800315a:	189b      	adds	r3, r3, r2
 800315c:	66bb      	str	r3, [r7, #104]	; 0x68
 800315e:	464b      	mov	r3, r9
 8003160:	460a      	mov	r2, r1
 8003162:	eb42 0303 	adc.w	r3, r2, r3
 8003166:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	663b      	str	r3, [r7, #96]	; 0x60
 8003172:	667a      	str	r2, [r7, #100]	; 0x64
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003180:	4649      	mov	r1, r9
 8003182:	008b      	lsls	r3, r1, #2
 8003184:	4641      	mov	r1, r8
 8003186:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800318a:	4641      	mov	r1, r8
 800318c:	008a      	lsls	r2, r1, #2
 800318e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003192:	f7fd f86d 	bl	8000270 <__aeabi_uldivmod>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <UART_SetConfig+0x4e4>)
 800319c:	fba3 1302 	umull	r1, r3, r3, r2
 80031a0:	095b      	lsrs	r3, r3, #5
 80031a2:	2164      	movs	r1, #100	; 0x64
 80031a4:	fb01 f303 	mul.w	r3, r1, r3
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	3332      	adds	r3, #50	; 0x32
 80031ae:	4a08      	ldr	r2, [pc, #32]	; (80031d0 <UART_SetConfig+0x4e4>)
 80031b0:	fba2 2303 	umull	r2, r3, r2, r3
 80031b4:	095b      	lsrs	r3, r3, #5
 80031b6:	f003 020f 	and.w	r2, r3, #15
 80031ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4422      	add	r2, r4
 80031c2:	609a      	str	r2, [r3, #8]
}
 80031c4:	bf00      	nop
 80031c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80031ca:	46bd      	mov	sp, r7
 80031cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031d0:	51eb851f 	.word	0x51eb851f

080031d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80031e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031e6:	2b84      	cmp	r3, #132	; 0x84
 80031e8:	d005      	beq.n	80031f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80031ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4413      	add	r3, r2
 80031f2:	3303      	adds	r3, #3
 80031f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80031f6:	68fb      	ldr	r3, [r7, #12]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800320a:	f3ef 8305 	mrs	r3, IPSR
 800320e:	607b      	str	r3, [r7, #4]
  return(result);
 8003210:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003212:	2b00      	cmp	r3, #0
 8003214:	bf14      	ite	ne
 8003216:	2301      	movne	r3, #1
 8003218:	2300      	moveq	r3, #0
 800321a:	b2db      	uxtb	r3, r3
}
 800321c:	4618      	mov	r0, r3
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800322c:	f001 f804 	bl	8004238 <vTaskStartScheduler>
  
  return osOK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	bd80      	pop	{r7, pc}

08003236 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003236:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003238:	b089      	sub	sp, #36	; 0x24
 800323a:	af04      	add	r7, sp, #16
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d020      	beq.n	800328a <osThreadCreate+0x54>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d01c      	beq.n	800328a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685c      	ldr	r4, [r3, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691e      	ldr	r6, [r3, #16]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff ffb6 	bl	80031d4 <makeFreeRtosPriority>
 8003268:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003272:	9202      	str	r2, [sp, #8]
 8003274:	9301      	str	r3, [sp, #4]
 8003276:	9100      	str	r1, [sp, #0]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	4632      	mov	r2, r6
 800327c:	4629      	mov	r1, r5
 800327e:	4620      	mov	r0, r4
 8003280:	f000 fe46 	bl	8003f10 <xTaskCreateStatic>
 8003284:	4603      	mov	r3, r0
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	e01c      	b.n	80032c4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685c      	ldr	r4, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003296:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff ff98 	bl	80031d4 <makeFreeRtosPriority>
 80032a4:	4602      	mov	r2, r0
 80032a6:	f107 030c 	add.w	r3, r7, #12
 80032aa:	9301      	str	r3, [sp, #4]
 80032ac:	9200      	str	r2, [sp, #0]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	4632      	mov	r2, r6
 80032b2:	4629      	mov	r1, r5
 80032b4:	4620      	mov	r0, r4
 80032b6:	f000 fe88 	bl	8003fca <xTaskCreate>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d001      	beq.n	80032c4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	e000      	b.n	80032c6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80032c4:	68fb      	ldr	r3, [r7, #12]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032ce <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b086      	sub	sp, #24
 80032d2:	af02      	add	r7, sp, #8
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00f      	beq.n	8003300 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d10a      	bne.n	80032fc <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2203      	movs	r2, #3
 80032ec:	9200      	str	r2, [sp, #0]
 80032ee:	2200      	movs	r2, #0
 80032f0:	2100      	movs	r1, #0
 80032f2:	2001      	movs	r0, #1
 80032f4:	f000 f988 	bl	8003608 <xQueueGenericCreateStatic>
 80032f8:	4603      	mov	r3, r0
 80032fa:	e016      	b.n	800332a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	e014      	b.n	800332a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d110      	bne.n	8003328 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8003306:	2203      	movs	r2, #3
 8003308:	2100      	movs	r1, #0
 800330a:	2001      	movs	r0, #1
 800330c:	f000 f9f4 	bl	80036f8 <xQueueGenericCreate>
 8003310:	60f8      	str	r0, [r7, #12]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <osSemaphoreCreate+0x56>
 8003318:	2300      	movs	r3, #0
 800331a:	2200      	movs	r2, #0
 800331c:	2100      	movs	r1, #0
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 fa44 	bl	80037ac <xQueueGenericSend>
      return sema;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	e000      	b.n	800332a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8003328:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800333e:	2300      	movs	r3, #0
 8003340:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8003348:	2380      	movs	r3, #128	; 0x80
 800334a:	e03a      	b.n	80033c2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003356:	d103      	bne.n	8003360 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8003358:	f04f 33ff 	mov.w	r3, #4294967295
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	e009      	b.n	8003374 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d006      	beq.n	8003374 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <osSemaphoreWait+0x40>
      ticks = 1;
 8003370:	2301      	movs	r3, #1
 8003372:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003374:	f7ff ff46 	bl	8003204 <inHandlerMode>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d017      	beq.n	80033ae <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800337e:	f107 0308 	add.w	r3, r7, #8
 8003382:	461a      	mov	r2, r3
 8003384:	2100      	movs	r1, #0
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 fc1a 	bl	8003bc0 <xQueueReceiveFromISR>
 800338c:	4603      	mov	r3, r0
 800338e:	2b01      	cmp	r3, #1
 8003390:	d001      	beq.n	8003396 <osSemaphoreWait+0x62>
      return osErrorOS;
 8003392:	23ff      	movs	r3, #255	; 0xff
 8003394:	e015      	b.n	80033c2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d011      	beq.n	80033c0 <osSemaphoreWait+0x8c>
 800339c:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <osSemaphoreWait+0x98>)
 800339e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	e008      	b.n	80033c0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80033ae:	68f9      	ldr	r1, [r7, #12]
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 faf9 	bl	80039a8 <xQueueSemaphoreTake>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d001      	beq.n	80033c0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80033bc:	23ff      	movs	r3, #255	; 0xff
 80033be:	e000      	b.n	80033c2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	e000ed04 	.word	0xe000ed04

080033d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f103 0208 	add.w	r2, r3, #8
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f04f 32ff 	mov.w	r2, #4294967295
 80033e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f103 0208 	add.w	r2, r3, #8
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f103 0208 	add.w	r2, r3, #8
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800342a:	b480      	push	{r7}
 800342c:	b085      	sub	sp, #20
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	1c5a      	adds	r2, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	601a      	str	r2, [r3, #0]
}
 8003466:	bf00      	nop
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003472:	b480      	push	{r7}
 8003474:	b085      	sub	sp, #20
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003488:	d103      	bne.n	8003492 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	e00c      	b.n	80034ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3308      	adds	r3, #8
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	e002      	b.n	80034a0 <vListInsert+0x2e>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d2f6      	bcs.n	800349a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	601a      	str	r2, [r3, #0]
}
 80034d8:	bf00      	nop
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6892      	ldr	r2, [r2, #8]
 80034fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6852      	ldr	r2, [r2, #4]
 8003504:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	429a      	cmp	r2, r3
 800350e:	d103      	bne.n	8003518 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	1e5a      	subs	r2, r3, #1
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10a      	bne.n	8003562 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800354c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800355e:	bf00      	nop
 8003560:	e7fe      	b.n	8003560 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003562:	f001 fdb7 	bl	80050d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356e:	68f9      	ldr	r1, [r7, #12]
 8003570:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003572:	fb01 f303 	mul.w	r3, r1, r3
 8003576:	441a      	add	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003592:	3b01      	subs	r3, #1
 8003594:	68f9      	ldr	r1, [r7, #12]
 8003596:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003598:	fb01 f303 	mul.w	r3, r1, r3
 800359c:	441a      	add	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	22ff      	movs	r2, #255	; 0xff
 80035a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	22ff      	movs	r2, #255	; 0xff
 80035ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d114      	bne.n	80035e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01a      	beq.n	80035f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	3310      	adds	r3, #16
 80035c4:	4618      	mov	r0, r3
 80035c6:	f001 f879 	bl	80046bc <xTaskRemoveFromEventList>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d012      	beq.n	80035f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80035d0:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <xQueueGenericReset+0xcc>)
 80035d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	f3bf 8f4f 	dsb	sy
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	e009      	b.n	80035f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	3310      	adds	r3, #16
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff fef2 	bl	80033d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	3324      	adds	r3, #36	; 0x24
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff feed 	bl	80033d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80035f6:	f001 fd9d 	bl	8005134 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80035fa:	2301      	movs	r3, #1
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	e000ed04 	.word	0xe000ed04

08003608 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08e      	sub	sp, #56	; 0x38
 800360c:	af02      	add	r7, sp, #8
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
 8003614:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10a      	bne.n	8003632 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800361c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003620:	f383 8811 	msr	BASEPRI, r3
 8003624:	f3bf 8f6f 	isb	sy
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800362e:	bf00      	nop
 8003630:	e7fe      	b.n	8003630 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363c:	f383 8811 	msr	BASEPRI, r3
 8003640:	f3bf 8f6f 	isb	sy
 8003644:	f3bf 8f4f 	dsb	sy
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
}
 800364a:	bf00      	nop
 800364c:	e7fe      	b.n	800364c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <xQueueGenericCreateStatic+0x52>
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <xQueueGenericCreateStatic+0x56>
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <xQueueGenericCreateStatic+0x58>
 800365e:	2300      	movs	r3, #0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10a      	bne.n	800367a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	623b      	str	r3, [r7, #32]
}
 8003676:	bf00      	nop
 8003678:	e7fe      	b.n	8003678 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d102      	bne.n	8003686 <xQueueGenericCreateStatic+0x7e>
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <xQueueGenericCreateStatic+0x82>
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <xQueueGenericCreateStatic+0x84>
 800368a:	2300      	movs	r3, #0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10a      	bne.n	80036a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003694:	f383 8811 	msr	BASEPRI, r3
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	61fb      	str	r3, [r7, #28]
}
 80036a2:	bf00      	nop
 80036a4:	e7fe      	b.n	80036a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80036a6:	2348      	movs	r3, #72	; 0x48
 80036a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b48      	cmp	r3, #72	; 0x48
 80036ae:	d00a      	beq.n	80036c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80036b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b4:	f383 8811 	msr	BASEPRI, r3
 80036b8:	f3bf 8f6f 	isb	sy
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	61bb      	str	r3, [r7, #24]
}
 80036c2:	bf00      	nop
 80036c4:	e7fe      	b.n	80036c4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80036c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80036cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00d      	beq.n	80036ee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80036d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80036de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	4613      	mov	r3, r2
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 f83f 	bl	800376c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80036ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3730      	adds	r7, #48	; 0x30
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08a      	sub	sp, #40	; 0x28
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	4613      	mov	r3, r2
 8003704:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10a      	bne.n	8003722 <xQueueGenericCreate+0x2a>
	__asm volatile
 800370c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003710:	f383 8811 	msr	BASEPRI, r3
 8003714:	f3bf 8f6f 	isb	sy
 8003718:	f3bf 8f4f 	dsb	sy
 800371c:	613b      	str	r3, [r7, #16]
}
 800371e:	bf00      	nop
 8003720:	e7fe      	b.n	8003720 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	fb02 f303 	mul.w	r3, r2, r3
 800372a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	3348      	adds	r3, #72	; 0x48
 8003730:	4618      	mov	r0, r3
 8003732:	f001 fdf1 	bl	8005318 <pvPortMalloc>
 8003736:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d011      	beq.n	8003762 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	3348      	adds	r3, #72	; 0x48
 8003746:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003750:	79fa      	ldrb	r2, [r7, #7]
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	4613      	mov	r3, r2
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	68b9      	ldr	r1, [r7, #8]
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 f805 	bl	800376c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003762:	69bb      	ldr	r3, [r7, #24]
	}
 8003764:	4618      	mov	r0, r3
 8003766:	3720      	adds	r7, #32
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
 8003778:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d103      	bne.n	8003788 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	e002      	b.n	800378e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800379a:	2101      	movs	r1, #1
 800379c:	69b8      	ldr	r0, [r7, #24]
 800379e:	f7ff fecb 	bl	8003538 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80037a2:	bf00      	nop
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08e      	sub	sp, #56	; 0x38
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80037ba:	2300      	movs	r3, #0
 80037bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80037c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10a      	bne.n	80037de <xQueueGenericSend+0x32>
	__asm volatile
 80037c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037cc:	f383 8811 	msr	BASEPRI, r3
 80037d0:	f3bf 8f6f 	isb	sy
 80037d4:	f3bf 8f4f 	dsb	sy
 80037d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037da:	bf00      	nop
 80037dc:	e7fe      	b.n	80037dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d103      	bne.n	80037ec <xQueueGenericSend+0x40>
 80037e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <xQueueGenericSend+0x44>
 80037ec:	2301      	movs	r3, #1
 80037ee:	e000      	b.n	80037f2 <xQueueGenericSend+0x46>
 80037f0:	2300      	movs	r3, #0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10a      	bne.n	800380c <xQueueGenericSend+0x60>
	__asm volatile
 80037f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003808:	bf00      	nop
 800380a:	e7fe      	b.n	800380a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d103      	bne.n	800381a <xQueueGenericSend+0x6e>
 8003812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <xQueueGenericSend+0x72>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <xQueueGenericSend+0x74>
 800381e:	2300      	movs	r3, #0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10a      	bne.n	800383a <xQueueGenericSend+0x8e>
	__asm volatile
 8003824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003828:	f383 8811 	msr	BASEPRI, r3
 800382c:	f3bf 8f6f 	isb	sy
 8003830:	f3bf 8f4f 	dsb	sy
 8003834:	623b      	str	r3, [r7, #32]
}
 8003836:	bf00      	nop
 8003838:	e7fe      	b.n	8003838 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800383a:	f001 f8fb 	bl	8004a34 <xTaskGetSchedulerState>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d102      	bne.n	800384a <xQueueGenericSend+0x9e>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <xQueueGenericSend+0xa2>
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <xQueueGenericSend+0xa4>
 800384e:	2300      	movs	r3, #0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10a      	bne.n	800386a <xQueueGenericSend+0xbe>
	__asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	61fb      	str	r3, [r7, #28]
}
 8003866:	bf00      	nop
 8003868:	e7fe      	b.n	8003868 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800386a:	f001 fc33 	bl	80050d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800386e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003876:	429a      	cmp	r2, r3
 8003878:	d302      	bcc.n	8003880 <xQueueGenericSend+0xd4>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d129      	bne.n	80038d4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	68b9      	ldr	r1, [r7, #8]
 8003884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003886:	f000 fa33 	bl	8003cf0 <prvCopyDataToQueue>
 800388a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800388c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	2b00      	cmp	r3, #0
 8003892:	d010      	beq.n	80038b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003896:	3324      	adds	r3, #36	; 0x24
 8003898:	4618      	mov	r0, r3
 800389a:	f000 ff0f 	bl	80046bc <xTaskRemoveFromEventList>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d013      	beq.n	80038cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80038a4:	4b3f      	ldr	r3, [pc, #252]	; (80039a4 <xQueueGenericSend+0x1f8>)
 80038a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	f3bf 8f6f 	isb	sy
 80038b4:	e00a      	b.n	80038cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80038b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d007      	beq.n	80038cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80038bc:	4b39      	ldr	r3, [pc, #228]	; (80039a4 <xQueueGenericSend+0x1f8>)
 80038be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80038cc:	f001 fc32 	bl	8005134 <vPortExitCritical>
				return pdPASS;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e063      	b.n	800399c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d103      	bne.n	80038e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038da:	f001 fc2b 	bl	8005134 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80038de:	2300      	movs	r3, #0
 80038e0:	e05c      	b.n	800399c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d106      	bne.n	80038f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038e8:	f107 0314 	add.w	r3, r7, #20
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 ff47 	bl	8004780 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038f2:	2301      	movs	r3, #1
 80038f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038f6:	f001 fc1d 	bl	8005134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038fa:	f000 fcfd 	bl	80042f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038fe:	f001 fbe9 	bl	80050d4 <vPortEnterCritical>
 8003902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003904:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003908:	b25b      	sxtb	r3, r3
 800390a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390e:	d103      	bne.n	8003918 <xQueueGenericSend+0x16c>
 8003910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800391e:	b25b      	sxtb	r3, r3
 8003920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003924:	d103      	bne.n	800392e <xQueueGenericSend+0x182>
 8003926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800392e:	f001 fc01 	bl	8005134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003932:	1d3a      	adds	r2, r7, #4
 8003934:	f107 0314 	add.w	r3, r7, #20
 8003938:	4611      	mov	r1, r2
 800393a:	4618      	mov	r0, r3
 800393c:	f000 ff36 	bl	80047ac <xTaskCheckForTimeOut>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d124      	bne.n	8003990 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003946:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003948:	f000 faca 	bl	8003ee0 <prvIsQueueFull>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d018      	beq.n	8003984 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003954:	3310      	adds	r3, #16
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	4611      	mov	r1, r2
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fe8a 	bl	8004674 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003962:	f000 fa55 	bl	8003e10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003966:	f000 fcd5 	bl	8004314 <xTaskResumeAll>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	f47f af7c 	bne.w	800386a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003972:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <xQueueGenericSend+0x1f8>)
 8003974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	e772      	b.n	800386a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003986:	f000 fa43 	bl	8003e10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800398a:	f000 fcc3 	bl	8004314 <xTaskResumeAll>
 800398e:	e76c      	b.n	800386a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003992:	f000 fa3d 	bl	8003e10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003996:	f000 fcbd 	bl	8004314 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800399a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800399c:	4618      	mov	r0, r3
 800399e:	3738      	adds	r7, #56	; 0x38
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	e000ed04 	.word	0xe000ed04

080039a8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08e      	sub	sp, #56	; 0x38
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80039b2:	2300      	movs	r3, #0
 80039b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80039ba:	2300      	movs	r3, #0
 80039bc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80039be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10a      	bne.n	80039da <xQueueSemaphoreTake+0x32>
	__asm volatile
 80039c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c8:	f383 8811 	msr	BASEPRI, r3
 80039cc:	f3bf 8f6f 	isb	sy
 80039d0:	f3bf 8f4f 	dsb	sy
 80039d4:	623b      	str	r3, [r7, #32]
}
 80039d6:	bf00      	nop
 80039d8:	e7fe      	b.n	80039d8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80039da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80039e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e6:	f383 8811 	msr	BASEPRI, r3
 80039ea:	f3bf 8f6f 	isb	sy
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	61fb      	str	r3, [r7, #28]
}
 80039f4:	bf00      	nop
 80039f6:	e7fe      	b.n	80039f6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039f8:	f001 f81c 	bl	8004a34 <xTaskGetSchedulerState>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d102      	bne.n	8003a08 <xQueueSemaphoreTake+0x60>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <xQueueSemaphoreTake+0x64>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <xQueueSemaphoreTake+0x66>
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10a      	bne.n	8003a28 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	61bb      	str	r3, [r7, #24]
}
 8003a24:	bf00      	nop
 8003a26:	e7fe      	b.n	8003a26 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a28:	f001 fb54 	bl	80050d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a30:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d024      	beq.n	8003a82 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3a:	1e5a      	subs	r2, r3, #1
 8003a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d104      	bne.n	8003a52 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003a48:	f001 f99c 	bl	8004d84 <pvTaskIncrementMutexHeldCount>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a50:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00f      	beq.n	8003a7a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5c:	3310      	adds	r3, #16
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 fe2c 	bl	80046bc <xTaskRemoveFromEventList>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d007      	beq.n	8003a7a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a6a:	4b54      	ldr	r3, [pc, #336]	; (8003bbc <xQueueSemaphoreTake+0x214>)
 8003a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	f3bf 8f4f 	dsb	sy
 8003a76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a7a:	f001 fb5b 	bl	8005134 <vPortExitCritical>
				return pdPASS;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e097      	b.n	8003bb2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d111      	bne.n	8003aac <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a92:	f383 8811 	msr	BASEPRI, r3
 8003a96:	f3bf 8f6f 	isb	sy
 8003a9a:	f3bf 8f4f 	dsb	sy
 8003a9e:	617b      	str	r3, [r7, #20]
}
 8003aa0:	bf00      	nop
 8003aa2:	e7fe      	b.n	8003aa2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003aa4:	f001 fb46 	bl	8005134 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	e082      	b.n	8003bb2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d106      	bne.n	8003ac0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ab2:	f107 030c 	add.w	r3, r7, #12
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fe62 	bl	8004780 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003abc:	2301      	movs	r3, #1
 8003abe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ac0:	f001 fb38 	bl	8005134 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ac4:	f000 fc18 	bl	80042f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ac8:	f001 fb04 	bl	80050d4 <vPortEnterCritical>
 8003acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ace:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ad2:	b25b      	sxtb	r3, r3
 8003ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad8:	d103      	bne.n	8003ae2 <xQueueSemaphoreTake+0x13a>
 8003ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ae8:	b25b      	sxtb	r3, r3
 8003aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aee:	d103      	bne.n	8003af8 <xQueueSemaphoreTake+0x150>
 8003af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003af8:	f001 fb1c 	bl	8005134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003afc:	463a      	mov	r2, r7
 8003afe:	f107 030c 	add.w	r3, r7, #12
 8003b02:	4611      	mov	r1, r2
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 fe51 	bl	80047ac <xTaskCheckForTimeOut>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d132      	bne.n	8003b76 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b12:	f000 f9cf 	bl	8003eb4 <prvIsQueueEmpty>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d026      	beq.n	8003b6a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d109      	bne.n	8003b38 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003b24:	f001 fad6 	bl	80050d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 ff9f 	bl	8004a70 <xTaskPriorityInherit>
 8003b32:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003b34:	f001 fafe 	bl	8005134 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3a:	3324      	adds	r3, #36	; 0x24
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	4611      	mov	r1, r2
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 fd97 	bl	8004674 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b48:	f000 f962 	bl	8003e10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b4c:	f000 fbe2 	bl	8004314 <xTaskResumeAll>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f47f af68 	bne.w	8003a28 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003b58:	4b18      	ldr	r3, [pc, #96]	; (8003bbc <xQueueSemaphoreTake+0x214>)
 8003b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	e75e      	b.n	8003a28 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003b6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b6c:	f000 f950 	bl	8003e10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b70:	f000 fbd0 	bl	8004314 <xTaskResumeAll>
 8003b74:	e758      	b.n	8003a28 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003b76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b78:	f000 f94a 	bl	8003e10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b7c:	f000 fbca 	bl	8004314 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b82:	f000 f997 	bl	8003eb4 <prvIsQueueEmpty>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f43f af4d 	beq.w	8003a28 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00d      	beq.n	8003bb0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003b94:	f001 fa9e 	bl	80050d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003b98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b9a:	f000 f891 	bl	8003cc0 <prvGetDisinheritPriorityAfterTimeout>
 8003b9e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f001 f85e 	bl	8004c68 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003bac:	f001 fac2 	bl	8005134 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003bb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3738      	adds	r7, #56	; 0x38
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	e000ed04 	.word	0xe000ed04

08003bc0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08e      	sub	sp, #56	; 0x38
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10a      	bne.n	8003bec <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	623b      	str	r3, [r7, #32]
}
 8003be8:	bf00      	nop
 8003bea:	e7fe      	b.n	8003bea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d103      	bne.n	8003bfa <xQueueReceiveFromISR+0x3a>
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <xQueueReceiveFromISR+0x3e>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e000      	b.n	8003c00 <xQueueReceiveFromISR+0x40>
 8003bfe:	2300      	movs	r3, #0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10a      	bne.n	8003c1a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c08:	f383 8811 	msr	BASEPRI, r3
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	61fb      	str	r3, [r7, #28]
}
 8003c16:	bf00      	nop
 8003c18:	e7fe      	b.n	8003c18 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c1a:	f001 fb3d 	bl	8005298 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c1e:	f3ef 8211 	mrs	r2, BASEPRI
 8003c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c26:	f383 8811 	msr	BASEPRI, r3
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	61ba      	str	r2, [r7, #24]
 8003c34:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c36:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d02f      	beq.n	8003ca6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c50:	68b9      	ldr	r1, [r7, #8]
 8003c52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c54:	f000 f8b6 	bl	8003dc4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5a:	1e5a      	subs	r2, r3, #1
 8003c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003c60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c68:	d112      	bne.n	8003c90 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d016      	beq.n	8003ca0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c74:	3310      	adds	r3, #16
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 fd20 	bl	80046bc <xTaskRemoveFromEventList>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00e      	beq.n	8003ca0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00b      	beq.n	8003ca0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	e007      	b.n	8003ca0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003c90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c94:	3301      	adds	r3, #1
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	b25a      	sxtb	r2, r3
 8003c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ca4:	e001      	b.n	8003caa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8003caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cac:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003cb4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3738      	adds	r7, #56	; 0x38
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d006      	beq.n	8003cde <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f1c3 0307 	rsb	r3, r3, #7
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	e001      	b.n	8003ce2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
	}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10d      	bne.n	8003d2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d14d      	bne.n	8003db2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 ff1e 	bl	8004b5c <xTaskPriorityDisinherit>
 8003d20:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	609a      	str	r2, [r3, #8]
 8003d28:	e043      	b.n	8003db2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d119      	bne.n	8003d64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6858      	ldr	r0, [r3, #4]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	461a      	mov	r2, r3
 8003d3a:	68b9      	ldr	r1, [r7, #8]
 8003d3c:	f001 fe69 	bl	8005a12 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	441a      	add	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d32b      	bcc.n	8003db2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	605a      	str	r2, [r3, #4]
 8003d62:	e026      	b.n	8003db2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	68d8      	ldr	r0, [r3, #12]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	68b9      	ldr	r1, [r7, #8]
 8003d70:	f001 fe4f 	bl	8005a12 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	425b      	negs	r3, r3
 8003d7e:	441a      	add	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	68da      	ldr	r2, [r3, #12]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d207      	bcs.n	8003da0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	425b      	negs	r3, r3
 8003d9a:	441a      	add	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d105      	bne.n	8003db2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003dba:	697b      	ldr	r3, [r7, #20]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d018      	beq.n	8003e08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	441a      	add	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d303      	bcc.n	8003df8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68d9      	ldr	r1, [r3, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	461a      	mov	r2, r3
 8003e02:	6838      	ldr	r0, [r7, #0]
 8003e04:	f001 fe05 	bl	8005a12 <memcpy>
	}
}
 8003e08:	bf00      	nop
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e18:	f001 f95c 	bl	80050d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e24:	e011      	b.n	8003e4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d012      	beq.n	8003e54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	3324      	adds	r3, #36	; 0x24
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fc42 	bl	80046bc <xTaskRemoveFromEventList>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e3e:	f000 fd17 	bl	8004870 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	dce9      	bgt.n	8003e26 <prvUnlockQueue+0x16>
 8003e52:	e000      	b.n	8003e56 <prvUnlockQueue+0x46>
					break;
 8003e54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	22ff      	movs	r2, #255	; 0xff
 8003e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003e5e:	f001 f969 	bl	8005134 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e62:	f001 f937 	bl	80050d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e6e:	e011      	b.n	8003e94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d012      	beq.n	8003e9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3310      	adds	r3, #16
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 fc1d 	bl	80046bc <xTaskRemoveFromEventList>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003e88:	f000 fcf2 	bl	8004870 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e8c:	7bbb      	ldrb	r3, [r7, #14]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	dce9      	bgt.n	8003e70 <prvUnlockQueue+0x60>
 8003e9c:	e000      	b.n	8003ea0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	22ff      	movs	r2, #255	; 0xff
 8003ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003ea8:	f001 f944 	bl	8005134 <vPortExitCritical>
}
 8003eac:	bf00      	nop
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ebc:	f001 f90a 	bl	80050d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d102      	bne.n	8003ece <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	e001      	b.n	8003ed2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ed2:	f001 f92f 	bl	8005134 <vPortExitCritical>

	return xReturn;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ee8:	f001 f8f4 	bl	80050d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d102      	bne.n	8003efe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	e001      	b.n	8003f02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f02:	f001 f917 	bl	8005134 <vPortExitCritical>

	return xReturn;
 8003f06:	68fb      	ldr	r3, [r7, #12]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b08e      	sub	sp, #56	; 0x38
 8003f14:	af04      	add	r7, sp, #16
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
 8003f1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10a      	bne.n	8003f3a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f28:	f383 8811 	msr	BASEPRI, r3
 8003f2c:	f3bf 8f6f 	isb	sy
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	623b      	str	r3, [r7, #32]
}
 8003f36:	bf00      	nop
 8003f38:	e7fe      	b.n	8003f38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10a      	bne.n	8003f56 <xTaskCreateStatic+0x46>
	__asm volatile
 8003f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	61fb      	str	r3, [r7, #28]
}
 8003f52:	bf00      	nop
 8003f54:	e7fe      	b.n	8003f54 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f56:	2354      	movs	r3, #84	; 0x54
 8003f58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	2b54      	cmp	r3, #84	; 0x54
 8003f5e:	d00a      	beq.n	8003f76 <xTaskCreateStatic+0x66>
	__asm volatile
 8003f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f64:	f383 8811 	msr	BASEPRI, r3
 8003f68:	f3bf 8f6f 	isb	sy
 8003f6c:	f3bf 8f4f 	dsb	sy
 8003f70:	61bb      	str	r3, [r7, #24]
}
 8003f72:	bf00      	nop
 8003f74:	e7fe      	b.n	8003f74 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f76:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d01e      	beq.n	8003fbc <xTaskCreateStatic+0xac>
 8003f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d01b      	beq.n	8003fbc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f8c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	2202      	movs	r2, #2
 8003f92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f96:	2300      	movs	r3, #0
 8003f98:	9303      	str	r3, [sp, #12]
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	9302      	str	r3, [sp, #8]
 8003f9e:	f107 0314 	add.w	r3, r7, #20
 8003fa2:	9301      	str	r3, [sp, #4]
 8003fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	68b9      	ldr	r1, [r7, #8]
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 f850 	bl	8004054 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fb6:	f000 f8d5 	bl	8004164 <prvAddNewTaskToReadyList>
 8003fba:	e001      	b.n	8003fc0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003fc0:	697b      	ldr	r3, [r7, #20]
	}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3728      	adds	r7, #40	; 0x28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b08c      	sub	sp, #48	; 0x30
 8003fce:	af04      	add	r7, sp, #16
 8003fd0:	60f8      	str	r0, [r7, #12]
 8003fd2:	60b9      	str	r1, [r7, #8]
 8003fd4:	603b      	str	r3, [r7, #0]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003fda:	88fb      	ldrh	r3, [r7, #6]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f001 f99a 	bl	8005318 <pvPortMalloc>
 8003fe4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00e      	beq.n	800400a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003fec:	2054      	movs	r0, #84	; 0x54
 8003fee:	f001 f993 	bl	8005318 <pvPortMalloc>
 8003ff2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	631a      	str	r2, [r3, #48]	; 0x30
 8004000:	e005      	b.n	800400e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004002:	6978      	ldr	r0, [r7, #20]
 8004004:	f001 fa54 	bl	80054b0 <vPortFree>
 8004008:	e001      	b.n	800400e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d017      	beq.n	8004044 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800401c:	88fa      	ldrh	r2, [r7, #6]
 800401e:	2300      	movs	r3, #0
 8004020:	9303      	str	r3, [sp, #12]
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	9302      	str	r3, [sp, #8]
 8004026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004028:	9301      	str	r3, [sp, #4]
 800402a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68b9      	ldr	r1, [r7, #8]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f80e 	bl	8004054 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004038:	69f8      	ldr	r0, [r7, #28]
 800403a:	f000 f893 	bl	8004164 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800403e:	2301      	movs	r3, #1
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	e002      	b.n	800404a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004044:	f04f 33ff 	mov.w	r3, #4294967295
 8004048:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800404a:	69bb      	ldr	r3, [r7, #24]
	}
 800404c:	4618      	mov	r0, r3
 800404e:	3720      	adds	r7, #32
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b088      	sub	sp, #32
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
 8004060:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800406c:	3b01      	subs	r3, #1
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	f023 0307 	bic.w	r3, r3, #7
 800407a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <prvInitialiseNewTask+0x48>
	__asm volatile
 8004086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408a:	f383 8811 	msr	BASEPRI, r3
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	617b      	str	r3, [r7, #20]
}
 8004098:	bf00      	nop
 800409a:	e7fe      	b.n	800409a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d01f      	beq.n	80040e2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040a2:	2300      	movs	r3, #0
 80040a4:	61fb      	str	r3, [r7, #28]
 80040a6:	e012      	b.n	80040ce <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	4413      	add	r3, r2
 80040ae:	7819      	ldrb	r1, [r3, #0]
 80040b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	4413      	add	r3, r2
 80040b6:	3334      	adds	r3, #52	; 0x34
 80040b8:	460a      	mov	r2, r1
 80040ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	4413      	add	r3, r2
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d006      	beq.n	80040d6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	3301      	adds	r3, #1
 80040cc:	61fb      	str	r3, [r7, #28]
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	2b0f      	cmp	r3, #15
 80040d2:	d9e9      	bls.n	80040a8 <prvInitialiseNewTask+0x54>
 80040d4:	e000      	b.n	80040d8 <prvInitialiseNewTask+0x84>
			{
				break;
 80040d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040e0:	e003      	b.n	80040ea <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80040e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ec:	2b06      	cmp	r3, #6
 80040ee:	d901      	bls.n	80040f4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040f0:	2306      	movs	r3, #6
 80040f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040fe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004102:	2200      	movs	r2, #0
 8004104:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	3304      	adds	r3, #4
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff f980 	bl	8003410 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004112:	3318      	adds	r3, #24
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff f97b 	bl	8003410 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800411a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800411e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004122:	f1c3 0207 	rsb	r2, r3, #7
 8004126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004128:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800412a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800412e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	2200      	movs	r2, #0
 8004134:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	68f9      	ldr	r1, [r7, #12]
 8004142:	69b8      	ldr	r0, [r7, #24]
 8004144:	f000 fe98 	bl	8004e78 <pxPortInitialiseStack>
 8004148:	4602      	mov	r2, r0
 800414a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800414e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004158:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800415a:	bf00      	nop
 800415c:	3720      	adds	r7, #32
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
	...

08004164 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800416c:	f000 ffb2 	bl	80050d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004170:	4b2a      	ldr	r3, [pc, #168]	; (800421c <prvAddNewTaskToReadyList+0xb8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3301      	adds	r3, #1
 8004176:	4a29      	ldr	r2, [pc, #164]	; (800421c <prvAddNewTaskToReadyList+0xb8>)
 8004178:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800417a:	4b29      	ldr	r3, [pc, #164]	; (8004220 <prvAddNewTaskToReadyList+0xbc>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004182:	4a27      	ldr	r2, [pc, #156]	; (8004220 <prvAddNewTaskToReadyList+0xbc>)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004188:	4b24      	ldr	r3, [pc, #144]	; (800421c <prvAddNewTaskToReadyList+0xb8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d110      	bne.n	80041b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004190:	f000 fb92 	bl	80048b8 <prvInitialiseTaskLists>
 8004194:	e00d      	b.n	80041b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004196:	4b23      	ldr	r3, [pc, #140]	; (8004224 <prvAddNewTaskToReadyList+0xc0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d109      	bne.n	80041b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800419e:	4b20      	ldr	r3, [pc, #128]	; (8004220 <prvAddNewTaskToReadyList+0xbc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d802      	bhi.n	80041b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80041ac:	4a1c      	ldr	r2, [pc, #112]	; (8004220 <prvAddNewTaskToReadyList+0xbc>)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80041b2:	4b1d      	ldr	r3, [pc, #116]	; (8004228 <prvAddNewTaskToReadyList+0xc4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3301      	adds	r3, #1
 80041b8:	4a1b      	ldr	r2, [pc, #108]	; (8004228 <prvAddNewTaskToReadyList+0xc4>)
 80041ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	2201      	movs	r2, #1
 80041c2:	409a      	lsls	r2, r3
 80041c4:	4b19      	ldr	r3, [pc, #100]	; (800422c <prvAddNewTaskToReadyList+0xc8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	4a18      	ldr	r2, [pc, #96]	; (800422c <prvAddNewTaskToReadyList+0xc8>)
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d2:	4613      	mov	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4a15      	ldr	r2, [pc, #84]	; (8004230 <prvAddNewTaskToReadyList+0xcc>)
 80041dc:	441a      	add	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	3304      	adds	r3, #4
 80041e2:	4619      	mov	r1, r3
 80041e4:	4610      	mov	r0, r2
 80041e6:	f7ff f920 	bl	800342a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041ea:	f000 ffa3 	bl	8005134 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041ee:	4b0d      	ldr	r3, [pc, #52]	; (8004224 <prvAddNewTaskToReadyList+0xc0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00e      	beq.n	8004214 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041f6:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <prvAddNewTaskToReadyList+0xbc>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	429a      	cmp	r2, r3
 8004202:	d207      	bcs.n	8004214 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004204:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <prvAddNewTaskToReadyList+0xd0>)
 8004206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004214:	bf00      	nop
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20000480 	.word	0x20000480
 8004220:	20000380 	.word	0x20000380
 8004224:	2000048c 	.word	0x2000048c
 8004228:	2000049c 	.word	0x2000049c
 800422c:	20000488 	.word	0x20000488
 8004230:	20000384 	.word	0x20000384
 8004234:	e000ed04 	.word	0xe000ed04

08004238 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08a      	sub	sp, #40	; 0x28
 800423c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800423e:	2300      	movs	r3, #0
 8004240:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004242:	2300      	movs	r3, #0
 8004244:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004246:	463a      	mov	r2, r7
 8004248:	1d39      	adds	r1, r7, #4
 800424a:	f107 0308 	add.w	r3, r7, #8
 800424e:	4618      	mov	r0, r3
 8004250:	f7fc f98c 	bl	800056c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004254:	6839      	ldr	r1, [r7, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	9202      	str	r2, [sp, #8]
 800425c:	9301      	str	r3, [sp, #4]
 800425e:	2300      	movs	r3, #0
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	2300      	movs	r3, #0
 8004264:	460a      	mov	r2, r1
 8004266:	491e      	ldr	r1, [pc, #120]	; (80042e0 <vTaskStartScheduler+0xa8>)
 8004268:	481e      	ldr	r0, [pc, #120]	; (80042e4 <vTaskStartScheduler+0xac>)
 800426a:	f7ff fe51 	bl	8003f10 <xTaskCreateStatic>
 800426e:	4603      	mov	r3, r0
 8004270:	4a1d      	ldr	r2, [pc, #116]	; (80042e8 <vTaskStartScheduler+0xb0>)
 8004272:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004274:	4b1c      	ldr	r3, [pc, #112]	; (80042e8 <vTaskStartScheduler+0xb0>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800427c:	2301      	movs	r3, #1
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	e001      	b.n	8004286 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004282:	2300      	movs	r3, #0
 8004284:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d116      	bne.n	80042ba <vTaskStartScheduler+0x82>
	__asm volatile
 800428c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004290:	f383 8811 	msr	BASEPRI, r3
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	613b      	str	r3, [r7, #16]
}
 800429e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042a0:	4b12      	ldr	r3, [pc, #72]	; (80042ec <vTaskStartScheduler+0xb4>)
 80042a2:	f04f 32ff 	mov.w	r2, #4294967295
 80042a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042a8:	4b11      	ldr	r3, [pc, #68]	; (80042f0 <vTaskStartScheduler+0xb8>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80042ae:	4b11      	ldr	r3, [pc, #68]	; (80042f4 <vTaskStartScheduler+0xbc>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80042b4:	f000 fe6c 	bl	8004f90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80042b8:	e00e      	b.n	80042d8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c0:	d10a      	bne.n	80042d8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	60fb      	str	r3, [r7, #12]
}
 80042d4:	bf00      	nop
 80042d6:	e7fe      	b.n	80042d6 <vTaskStartScheduler+0x9e>
}
 80042d8:	bf00      	nop
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	08006608 	.word	0x08006608
 80042e4:	08004889 	.word	0x08004889
 80042e8:	200004a4 	.word	0x200004a4
 80042ec:	200004a0 	.word	0x200004a0
 80042f0:	2000048c 	.word	0x2000048c
 80042f4:	20000484 	.word	0x20000484

080042f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80042fc:	4b04      	ldr	r3, [pc, #16]	; (8004310 <vTaskSuspendAll+0x18>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3301      	adds	r3, #1
 8004302:	4a03      	ldr	r2, [pc, #12]	; (8004310 <vTaskSuspendAll+0x18>)
 8004304:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004306:	bf00      	nop
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	200004a8 	.word	0x200004a8

08004314 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800431e:	2300      	movs	r3, #0
 8004320:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004322:	4b41      	ldr	r3, [pc, #260]	; (8004428 <xTaskResumeAll+0x114>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10a      	bne.n	8004340 <xTaskResumeAll+0x2c>
	__asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	603b      	str	r3, [r7, #0]
}
 800433c:	bf00      	nop
 800433e:	e7fe      	b.n	800433e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004340:	f000 fec8 	bl	80050d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004344:	4b38      	ldr	r3, [pc, #224]	; (8004428 <xTaskResumeAll+0x114>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3b01      	subs	r3, #1
 800434a:	4a37      	ldr	r2, [pc, #220]	; (8004428 <xTaskResumeAll+0x114>)
 800434c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800434e:	4b36      	ldr	r3, [pc, #216]	; (8004428 <xTaskResumeAll+0x114>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d161      	bne.n	800441a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004356:	4b35      	ldr	r3, [pc, #212]	; (800442c <xTaskResumeAll+0x118>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d05d      	beq.n	800441a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800435e:	e02e      	b.n	80043be <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004360:	4b33      	ldr	r3, [pc, #204]	; (8004430 <xTaskResumeAll+0x11c>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	3318      	adds	r3, #24
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff f8b9 	bl	80034e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	3304      	adds	r3, #4
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff f8b4 	bl	80034e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	2201      	movs	r2, #1
 8004382:	409a      	lsls	r2, r3
 8004384:	4b2b      	ldr	r3, [pc, #172]	; (8004434 <xTaskResumeAll+0x120>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4313      	orrs	r3, r2
 800438a:	4a2a      	ldr	r2, [pc, #168]	; (8004434 <xTaskResumeAll+0x120>)
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004392:	4613      	mov	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4a27      	ldr	r2, [pc, #156]	; (8004438 <xTaskResumeAll+0x124>)
 800439c:	441a      	add	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	3304      	adds	r3, #4
 80043a2:	4619      	mov	r1, r3
 80043a4:	4610      	mov	r0, r2
 80043a6:	f7ff f840 	bl	800342a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ae:	4b23      	ldr	r3, [pc, #140]	; (800443c <xTaskResumeAll+0x128>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d302      	bcc.n	80043be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80043b8:	4b21      	ldr	r3, [pc, #132]	; (8004440 <xTaskResumeAll+0x12c>)
 80043ba:	2201      	movs	r2, #1
 80043bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043be:	4b1c      	ldr	r3, [pc, #112]	; (8004430 <xTaskResumeAll+0x11c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1cc      	bne.n	8004360 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80043cc:	f000 fb12 	bl	80049f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80043d0:	4b1c      	ldr	r3, [pc, #112]	; (8004444 <xTaskResumeAll+0x130>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d010      	beq.n	80043fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80043dc:	f000 f836 	bl	800444c <xTaskIncrementTick>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d002      	beq.n	80043ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80043e6:	4b16      	ldr	r3, [pc, #88]	; (8004440 <xTaskResumeAll+0x12c>)
 80043e8:	2201      	movs	r2, #1
 80043ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3b01      	subs	r3, #1
 80043f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1f1      	bne.n	80043dc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80043f8:	4b12      	ldr	r3, [pc, #72]	; (8004444 <xTaskResumeAll+0x130>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80043fe:	4b10      	ldr	r3, [pc, #64]	; (8004440 <xTaskResumeAll+0x12c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d009      	beq.n	800441a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004406:	2301      	movs	r3, #1
 8004408:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800440a:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <xTaskResumeAll+0x134>)
 800440c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800441a:	f000 fe8b 	bl	8005134 <vPortExitCritical>

	return xAlreadyYielded;
 800441e:	68bb      	ldr	r3, [r7, #8]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	200004a8 	.word	0x200004a8
 800442c:	20000480 	.word	0x20000480
 8004430:	20000440 	.word	0x20000440
 8004434:	20000488 	.word	0x20000488
 8004438:	20000384 	.word	0x20000384
 800443c:	20000380 	.word	0x20000380
 8004440:	20000494 	.word	0x20000494
 8004444:	20000490 	.word	0x20000490
 8004448:	e000ed04 	.word	0xe000ed04

0800444c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004456:	4b4e      	ldr	r3, [pc, #312]	; (8004590 <xTaskIncrementTick+0x144>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	f040 808e 	bne.w	800457c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004460:	4b4c      	ldr	r3, [pc, #304]	; (8004594 <xTaskIncrementTick+0x148>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	3301      	adds	r3, #1
 8004466:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004468:	4a4a      	ldr	r2, [pc, #296]	; (8004594 <xTaskIncrementTick+0x148>)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d120      	bne.n	80044b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004474:	4b48      	ldr	r3, [pc, #288]	; (8004598 <xTaskIncrementTick+0x14c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <xTaskIncrementTick+0x48>
	__asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	603b      	str	r3, [r7, #0]
}
 8004490:	bf00      	nop
 8004492:	e7fe      	b.n	8004492 <xTaskIncrementTick+0x46>
 8004494:	4b40      	ldr	r3, [pc, #256]	; (8004598 <xTaskIncrementTick+0x14c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	4b40      	ldr	r3, [pc, #256]	; (800459c <xTaskIncrementTick+0x150>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a3e      	ldr	r2, [pc, #248]	; (8004598 <xTaskIncrementTick+0x14c>)
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	4a3e      	ldr	r2, [pc, #248]	; (800459c <xTaskIncrementTick+0x150>)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	4b3d      	ldr	r3, [pc, #244]	; (80045a0 <xTaskIncrementTick+0x154>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3301      	adds	r3, #1
 80044ae:	4a3c      	ldr	r2, [pc, #240]	; (80045a0 <xTaskIncrementTick+0x154>)
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	f000 fa9f 	bl	80049f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044b6:	4b3b      	ldr	r3, [pc, #236]	; (80045a4 <xTaskIncrementTick+0x158>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d348      	bcc.n	8004552 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044c0:	4b35      	ldr	r3, [pc, #212]	; (8004598 <xTaskIncrementTick+0x14c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d104      	bne.n	80044d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ca:	4b36      	ldr	r3, [pc, #216]	; (80045a4 <xTaskIncrementTick+0x158>)
 80044cc:	f04f 32ff 	mov.w	r2, #4294967295
 80044d0:	601a      	str	r2, [r3, #0]
					break;
 80044d2:	e03e      	b.n	8004552 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044d4:	4b30      	ldr	r3, [pc, #192]	; (8004598 <xTaskIncrementTick+0x14c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d203      	bcs.n	80044f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80044ec:	4a2d      	ldr	r2, [pc, #180]	; (80045a4 <xTaskIncrementTick+0x158>)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80044f2:	e02e      	b.n	8004552 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	3304      	adds	r3, #4
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fe fff3 	bl	80034e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004502:	2b00      	cmp	r3, #0
 8004504:	d004      	beq.n	8004510 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	3318      	adds	r3, #24
 800450a:	4618      	mov	r0, r3
 800450c:	f7fe ffea 	bl	80034e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	2201      	movs	r2, #1
 8004516:	409a      	lsls	r2, r3
 8004518:	4b23      	ldr	r3, [pc, #140]	; (80045a8 <xTaskIncrementTick+0x15c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4313      	orrs	r3, r2
 800451e:	4a22      	ldr	r2, [pc, #136]	; (80045a8 <xTaskIncrementTick+0x15c>)
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004526:	4613      	mov	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4a1f      	ldr	r2, [pc, #124]	; (80045ac <xTaskIncrementTick+0x160>)
 8004530:	441a      	add	r2, r3
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	3304      	adds	r3, #4
 8004536:	4619      	mov	r1, r3
 8004538:	4610      	mov	r0, r2
 800453a:	f7fe ff76 	bl	800342a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004542:	4b1b      	ldr	r3, [pc, #108]	; (80045b0 <xTaskIncrementTick+0x164>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	429a      	cmp	r2, r3
 800454a:	d3b9      	bcc.n	80044c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800454c:	2301      	movs	r3, #1
 800454e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004550:	e7b6      	b.n	80044c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004552:	4b17      	ldr	r3, [pc, #92]	; (80045b0 <xTaskIncrementTick+0x164>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004558:	4914      	ldr	r1, [pc, #80]	; (80045ac <xTaskIncrementTick+0x160>)
 800455a:	4613      	mov	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	440b      	add	r3, r1
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d901      	bls.n	800456e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800456a:	2301      	movs	r3, #1
 800456c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800456e:	4b11      	ldr	r3, [pc, #68]	; (80045b4 <xTaskIncrementTick+0x168>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d007      	beq.n	8004586 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004576:	2301      	movs	r3, #1
 8004578:	617b      	str	r3, [r7, #20]
 800457a:	e004      	b.n	8004586 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800457c:	4b0e      	ldr	r3, [pc, #56]	; (80045b8 <xTaskIncrementTick+0x16c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3301      	adds	r3, #1
 8004582:	4a0d      	ldr	r2, [pc, #52]	; (80045b8 <xTaskIncrementTick+0x16c>)
 8004584:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004586:	697b      	ldr	r3, [r7, #20]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	200004a8 	.word	0x200004a8
 8004594:	20000484 	.word	0x20000484
 8004598:	20000438 	.word	0x20000438
 800459c:	2000043c 	.word	0x2000043c
 80045a0:	20000498 	.word	0x20000498
 80045a4:	200004a0 	.word	0x200004a0
 80045a8:	20000488 	.word	0x20000488
 80045ac:	20000384 	.word	0x20000384
 80045b0:	20000380 	.word	0x20000380
 80045b4:	20000494 	.word	0x20000494
 80045b8:	20000490 	.word	0x20000490

080045bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045c2:	4b27      	ldr	r3, [pc, #156]	; (8004660 <vTaskSwitchContext+0xa4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80045ca:	4b26      	ldr	r3, [pc, #152]	; (8004664 <vTaskSwitchContext+0xa8>)
 80045cc:	2201      	movs	r2, #1
 80045ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80045d0:	e03f      	b.n	8004652 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80045d2:	4b24      	ldr	r3, [pc, #144]	; (8004664 <vTaskSwitchContext+0xa8>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045d8:	4b23      	ldr	r3, [pc, #140]	; (8004668 <vTaskSwitchContext+0xac>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	fab3 f383 	clz	r3, r3
 80045e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80045e6:	7afb      	ldrb	r3, [r7, #11]
 80045e8:	f1c3 031f 	rsb	r3, r3, #31
 80045ec:	617b      	str	r3, [r7, #20]
 80045ee:	491f      	ldr	r1, [pc, #124]	; (800466c <vTaskSwitchContext+0xb0>)
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	4613      	mov	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	440b      	add	r3, r1
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10a      	bne.n	8004618 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	607b      	str	r3, [r7, #4]
}
 8004614:	bf00      	nop
 8004616:	e7fe      	b.n	8004616 <vTaskSwitchContext+0x5a>
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	4613      	mov	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4a12      	ldr	r2, [pc, #72]	; (800466c <vTaskSwitchContext+0xb0>)
 8004624:	4413      	add	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	605a      	str	r2, [r3, #4]
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	3308      	adds	r3, #8
 800463a:	429a      	cmp	r2, r3
 800463c:	d104      	bne.n	8004648 <vTaskSwitchContext+0x8c>
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	605a      	str	r2, [r3, #4]
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	4a08      	ldr	r2, [pc, #32]	; (8004670 <vTaskSwitchContext+0xb4>)
 8004650:	6013      	str	r3, [r2, #0]
}
 8004652:	bf00      	nop
 8004654:	371c      	adds	r7, #28
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	200004a8 	.word	0x200004a8
 8004664:	20000494 	.word	0x20000494
 8004668:	20000488 	.word	0x20000488
 800466c:	20000384 	.word	0x20000384
 8004670:	20000380 	.word	0x20000380

08004674 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10a      	bne.n	800469a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	60fb      	str	r3, [r7, #12]
}
 8004696:	bf00      	nop
 8004698:	e7fe      	b.n	8004698 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800469a:	4b07      	ldr	r3, [pc, #28]	; (80046b8 <vTaskPlaceOnEventList+0x44>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3318      	adds	r3, #24
 80046a0:	4619      	mov	r1, r3
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fe fee5 	bl	8003472 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046a8:	2101      	movs	r1, #1
 80046aa:	6838      	ldr	r0, [r7, #0]
 80046ac:	f000 fb7e 	bl	8004dac <prvAddCurrentTaskToDelayedList>
}
 80046b0:	bf00      	nop
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	20000380 	.word	0x20000380

080046bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10a      	bne.n	80046e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80046d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	60fb      	str	r3, [r7, #12]
}
 80046e4:	bf00      	nop
 80046e6:	e7fe      	b.n	80046e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	3318      	adds	r3, #24
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fe fef9 	bl	80034e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046f2:	4b1d      	ldr	r3, [pc, #116]	; (8004768 <xTaskRemoveFromEventList+0xac>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d11c      	bne.n	8004734 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	3304      	adds	r3, #4
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fe fef0 	bl	80034e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	2201      	movs	r2, #1
 800470a:	409a      	lsls	r2, r3
 800470c:	4b17      	ldr	r3, [pc, #92]	; (800476c <xTaskRemoveFromEventList+0xb0>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4313      	orrs	r3, r2
 8004712:	4a16      	ldr	r2, [pc, #88]	; (800476c <xTaskRemoveFromEventList+0xb0>)
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471a:	4613      	mov	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4a13      	ldr	r2, [pc, #76]	; (8004770 <xTaskRemoveFromEventList+0xb4>)
 8004724:	441a      	add	r2, r3
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	3304      	adds	r3, #4
 800472a:	4619      	mov	r1, r3
 800472c:	4610      	mov	r0, r2
 800472e:	f7fe fe7c 	bl	800342a <vListInsertEnd>
 8004732:	e005      	b.n	8004740 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	3318      	adds	r3, #24
 8004738:	4619      	mov	r1, r3
 800473a:	480e      	ldr	r0, [pc, #56]	; (8004774 <xTaskRemoveFromEventList+0xb8>)
 800473c:	f7fe fe75 	bl	800342a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004744:	4b0c      	ldr	r3, [pc, #48]	; (8004778 <xTaskRemoveFromEventList+0xbc>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474a:	429a      	cmp	r2, r3
 800474c:	d905      	bls.n	800475a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800474e:	2301      	movs	r3, #1
 8004750:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004752:	4b0a      	ldr	r3, [pc, #40]	; (800477c <xTaskRemoveFromEventList+0xc0>)
 8004754:	2201      	movs	r2, #1
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	e001      	b.n	800475e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800475a:	2300      	movs	r3, #0
 800475c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800475e:	697b      	ldr	r3, [r7, #20]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	200004a8 	.word	0x200004a8
 800476c:	20000488 	.word	0x20000488
 8004770:	20000384 	.word	0x20000384
 8004774:	20000440 	.word	0x20000440
 8004778:	20000380 	.word	0x20000380
 800477c:	20000494 	.word	0x20000494

08004780 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004788:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <vTaskInternalSetTimeOutState+0x24>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004790:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <vTaskInternalSetTimeOutState+0x28>)
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	605a      	str	r2, [r3, #4]
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	20000498 	.word	0x20000498
 80047a8:	20000484 	.word	0x20000484

080047ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10a      	bne.n	80047d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80047bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c0:	f383 8811 	msr	BASEPRI, r3
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	613b      	str	r3, [r7, #16]
}
 80047ce:	bf00      	nop
 80047d0:	e7fe      	b.n	80047d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10a      	bne.n	80047ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80047d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	60fb      	str	r3, [r7, #12]
}
 80047ea:	bf00      	nop
 80047ec:	e7fe      	b.n	80047ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80047ee:	f000 fc71 	bl	80050d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80047f2:	4b1d      	ldr	r3, [pc, #116]	; (8004868 <xTaskCheckForTimeOut+0xbc>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480a:	d102      	bne.n	8004812 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800480c:	2300      	movs	r3, #0
 800480e:	61fb      	str	r3, [r7, #28]
 8004810:	e023      	b.n	800485a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	4b15      	ldr	r3, [pc, #84]	; (800486c <xTaskCheckForTimeOut+0xc0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d007      	beq.n	800482e <xTaskCheckForTimeOut+0x82>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	429a      	cmp	r2, r3
 8004826:	d302      	bcc.n	800482e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004828:	2301      	movs	r3, #1
 800482a:	61fb      	str	r3, [r7, #28]
 800482c:	e015      	b.n	800485a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	429a      	cmp	r2, r3
 8004836:	d20b      	bcs.n	8004850 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	1ad2      	subs	r2, r2, r3
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff ff9b 	bl	8004780 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800484a:	2300      	movs	r3, #0
 800484c:	61fb      	str	r3, [r7, #28]
 800484e:	e004      	b.n	800485a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004856:	2301      	movs	r3, #1
 8004858:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800485a:	f000 fc6b 	bl	8005134 <vPortExitCritical>

	return xReturn;
 800485e:	69fb      	ldr	r3, [r7, #28]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3720      	adds	r7, #32
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	20000484 	.word	0x20000484
 800486c:	20000498 	.word	0x20000498

08004870 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004874:	4b03      	ldr	r3, [pc, #12]	; (8004884 <vTaskMissedYield+0x14>)
 8004876:	2201      	movs	r2, #1
 8004878:	601a      	str	r2, [r3, #0]
}
 800487a:	bf00      	nop
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	20000494 	.word	0x20000494

08004888 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004890:	f000 f852 	bl	8004938 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004894:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <prvIdleTask+0x28>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d9f9      	bls.n	8004890 <prvIdleTask+0x8>
			{
				taskYIELD();
 800489c:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <prvIdleTask+0x2c>)
 800489e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80048ac:	e7f0      	b.n	8004890 <prvIdleTask+0x8>
 80048ae:	bf00      	nop
 80048b0:	20000384 	.word	0x20000384
 80048b4:	e000ed04 	.word	0xe000ed04

080048b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048be:	2300      	movs	r3, #0
 80048c0:	607b      	str	r3, [r7, #4]
 80048c2:	e00c      	b.n	80048de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	4613      	mov	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4a12      	ldr	r2, [pc, #72]	; (8004918 <prvInitialiseTaskLists+0x60>)
 80048d0:	4413      	add	r3, r2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fe fd7c 	bl	80033d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3301      	adds	r3, #1
 80048dc:	607b      	str	r3, [r7, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b06      	cmp	r3, #6
 80048e2:	d9ef      	bls.n	80048c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80048e4:	480d      	ldr	r0, [pc, #52]	; (800491c <prvInitialiseTaskLists+0x64>)
 80048e6:	f7fe fd73 	bl	80033d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048ea:	480d      	ldr	r0, [pc, #52]	; (8004920 <prvInitialiseTaskLists+0x68>)
 80048ec:	f7fe fd70 	bl	80033d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80048f0:	480c      	ldr	r0, [pc, #48]	; (8004924 <prvInitialiseTaskLists+0x6c>)
 80048f2:	f7fe fd6d 	bl	80033d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80048f6:	480c      	ldr	r0, [pc, #48]	; (8004928 <prvInitialiseTaskLists+0x70>)
 80048f8:	f7fe fd6a 	bl	80033d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80048fc:	480b      	ldr	r0, [pc, #44]	; (800492c <prvInitialiseTaskLists+0x74>)
 80048fe:	f7fe fd67 	bl	80033d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004902:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <prvInitialiseTaskLists+0x78>)
 8004904:	4a05      	ldr	r2, [pc, #20]	; (800491c <prvInitialiseTaskLists+0x64>)
 8004906:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004908:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <prvInitialiseTaskLists+0x7c>)
 800490a:	4a05      	ldr	r2, [pc, #20]	; (8004920 <prvInitialiseTaskLists+0x68>)
 800490c:	601a      	str	r2, [r3, #0]
}
 800490e:	bf00      	nop
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	20000384 	.word	0x20000384
 800491c:	20000410 	.word	0x20000410
 8004920:	20000424 	.word	0x20000424
 8004924:	20000440 	.word	0x20000440
 8004928:	20000454 	.word	0x20000454
 800492c:	2000046c 	.word	0x2000046c
 8004930:	20000438 	.word	0x20000438
 8004934:	2000043c 	.word	0x2000043c

08004938 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800493e:	e019      	b.n	8004974 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004940:	f000 fbc8 	bl	80050d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004944:	4b10      	ldr	r3, [pc, #64]	; (8004988 <prvCheckTasksWaitingTermination+0x50>)
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3304      	adds	r3, #4
 8004950:	4618      	mov	r0, r3
 8004952:	f7fe fdc7 	bl	80034e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004956:	4b0d      	ldr	r3, [pc, #52]	; (800498c <prvCheckTasksWaitingTermination+0x54>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3b01      	subs	r3, #1
 800495c:	4a0b      	ldr	r2, [pc, #44]	; (800498c <prvCheckTasksWaitingTermination+0x54>)
 800495e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004960:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <prvCheckTasksWaitingTermination+0x58>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3b01      	subs	r3, #1
 8004966:	4a0a      	ldr	r2, [pc, #40]	; (8004990 <prvCheckTasksWaitingTermination+0x58>)
 8004968:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800496a:	f000 fbe3 	bl	8005134 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f810 	bl	8004994 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004974:	4b06      	ldr	r3, [pc, #24]	; (8004990 <prvCheckTasksWaitingTermination+0x58>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1e1      	bne.n	8004940 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800497c:	bf00      	nop
 800497e:	bf00      	nop
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20000454 	.word	0x20000454
 800498c:	20000480 	.word	0x20000480
 8004990:	20000468 	.word	0x20000468

08004994 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d108      	bne.n	80049b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 fd80 	bl	80054b0 <vPortFree>
				vPortFree( pxTCB );
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fd7d 	bl	80054b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049b6:	e018      	b.n	80049ea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d103      	bne.n	80049ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fd74 	bl	80054b0 <vPortFree>
	}
 80049c8:	e00f      	b.n	80049ea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d00a      	beq.n	80049ea <prvDeleteTCB+0x56>
	__asm volatile
 80049d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	60fb      	str	r3, [r7, #12]
}
 80049e6:	bf00      	nop
 80049e8:	e7fe      	b.n	80049e8 <prvDeleteTCB+0x54>
	}
 80049ea:	bf00      	nop
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
	...

080049f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049fa:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <prvResetNextTaskUnblockTime+0x38>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d104      	bne.n	8004a0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a04:	4b0a      	ldr	r3, [pc, #40]	; (8004a30 <prvResetNextTaskUnblockTime+0x3c>)
 8004a06:	f04f 32ff 	mov.w	r2, #4294967295
 8004a0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a0c:	e008      	b.n	8004a20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a0e:	4b07      	ldr	r3, [pc, #28]	; (8004a2c <prvResetNextTaskUnblockTime+0x38>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	4a04      	ldr	r2, [pc, #16]	; (8004a30 <prvResetNextTaskUnblockTime+0x3c>)
 8004a1e:	6013      	str	r3, [r2, #0]
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	20000438 	.word	0x20000438
 8004a30:	200004a0 	.word	0x200004a0

08004a34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <xTaskGetSchedulerState+0x34>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d102      	bne.n	8004a48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a42:	2301      	movs	r3, #1
 8004a44:	607b      	str	r3, [r7, #4]
 8004a46:	e008      	b.n	8004a5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a48:	4b08      	ldr	r3, [pc, #32]	; (8004a6c <xTaskGetSchedulerState+0x38>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d102      	bne.n	8004a56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004a50:	2302      	movs	r3, #2
 8004a52:	607b      	str	r3, [r7, #4]
 8004a54:	e001      	b.n	8004a5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004a56:	2300      	movs	r3, #0
 8004a58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004a5a:	687b      	ldr	r3, [r7, #4]
	}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	2000048c 	.word	0x2000048c
 8004a6c:	200004a8 	.word	0x200004a8

08004a70 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d05e      	beq.n	8004b44 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a8a:	4b31      	ldr	r3, [pc, #196]	; (8004b50 <xTaskPriorityInherit+0xe0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d24e      	bcs.n	8004b32 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	db06      	blt.n	8004aaa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a9c:	4b2c      	ldr	r3, [pc, #176]	; (8004b50 <xTaskPriorityInherit+0xe0>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa2:	f1c3 0207 	rsb	r2, r3, #7
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	6959      	ldr	r1, [r3, #20]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4a26      	ldr	r2, [pc, #152]	; (8004b54 <xTaskPriorityInherit+0xe4>)
 8004abc:	4413      	add	r3, r2
 8004abe:	4299      	cmp	r1, r3
 8004ac0:	d12f      	bne.n	8004b22 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fe fd0c 	bl	80034e4 <uxListRemove>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10a      	bne.n	8004ae8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	43da      	mvns	r2, r3
 8004ade:	4b1e      	ldr	r3, [pc, #120]	; (8004b58 <xTaskPriorityInherit+0xe8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	4a1c      	ldr	r2, [pc, #112]	; (8004b58 <xTaskPriorityInherit+0xe8>)
 8004ae6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004ae8:	4b19      	ldr	r3, [pc, #100]	; (8004b50 <xTaskPriorityInherit+0xe0>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af6:	2201      	movs	r2, #1
 8004af8:	409a      	lsls	r2, r3
 8004afa:	4b17      	ldr	r3, [pc, #92]	; (8004b58 <xTaskPriorityInherit+0xe8>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	4a15      	ldr	r2, [pc, #84]	; (8004b58 <xTaskPriorityInherit+0xe8>)
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b08:	4613      	mov	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4a10      	ldr	r2, [pc, #64]	; (8004b54 <xTaskPriorityInherit+0xe4>)
 8004b12:	441a      	add	r2, r3
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	3304      	adds	r3, #4
 8004b18:	4619      	mov	r1, r3
 8004b1a:	4610      	mov	r0, r2
 8004b1c:	f7fe fc85 	bl	800342a <vListInsertEnd>
 8004b20:	e004      	b.n	8004b2c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b22:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <xTaskPriorityInherit+0xe0>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	e008      	b.n	8004b44 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b36:	4b06      	ldr	r3, [pc, #24]	; (8004b50 <xTaskPriorityInherit+0xe0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d201      	bcs.n	8004b44 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004b40:	2301      	movs	r3, #1
 8004b42:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b44:	68fb      	ldr	r3, [r7, #12]
	}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	20000380 	.word	0x20000380
 8004b54:	20000384 	.word	0x20000384
 8004b58:	20000488 	.word	0x20000488

08004b5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d06e      	beq.n	8004c50 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b72:	4b3a      	ldr	r3, [pc, #232]	; (8004c5c <xTaskPriorityDisinherit+0x100>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d00a      	beq.n	8004b92 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b80:	f383 8811 	msr	BASEPRI, r3
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	60fb      	str	r3, [r7, #12]
}
 8004b8e:	bf00      	nop
 8004b90:	e7fe      	b.n	8004b90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10a      	bne.n	8004bb0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9e:	f383 8811 	msr	BASEPRI, r3
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	60bb      	str	r3, [r7, #8]
}
 8004bac:	bf00      	nop
 8004bae:	e7fe      	b.n	8004bae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bb4:	1e5a      	subs	r2, r3, #1
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d044      	beq.n	8004c50 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d140      	bne.n	8004c50 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	3304      	adds	r3, #4
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fe fc86 	bl	80034e4 <uxListRemove>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d115      	bne.n	8004c0a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be2:	491f      	ldr	r1, [pc, #124]	; (8004c60 <xTaskPriorityDisinherit+0x104>)
 8004be4:	4613      	mov	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	440b      	add	r3, r1
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10a      	bne.n	8004c0a <xTaskPriorityDisinherit+0xae>
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	43da      	mvns	r2, r3
 8004c00:	4b18      	ldr	r3, [pc, #96]	; (8004c64 <xTaskPriorityDisinherit+0x108>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4013      	ands	r3, r2
 8004c06:	4a17      	ldr	r2, [pc, #92]	; (8004c64 <xTaskPriorityDisinherit+0x108>)
 8004c08:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c16:	f1c3 0207 	rsb	r2, r3, #7
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	2201      	movs	r2, #1
 8004c24:	409a      	lsls	r2, r3
 8004c26:	4b0f      	ldr	r3, [pc, #60]	; (8004c64 <xTaskPriorityDisinherit+0x108>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	4a0d      	ldr	r2, [pc, #52]	; (8004c64 <xTaskPriorityDisinherit+0x108>)
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c34:	4613      	mov	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4a08      	ldr	r2, [pc, #32]	; (8004c60 <xTaskPriorityDisinherit+0x104>)
 8004c3e:	441a      	add	r2, r3
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	3304      	adds	r3, #4
 8004c44:	4619      	mov	r1, r3
 8004c46:	4610      	mov	r0, r2
 8004c48:	f7fe fbef 	bl	800342a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c50:	697b      	ldr	r3, [r7, #20]
	}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20000380 	.word	0x20000380
 8004c60:	20000384 	.word	0x20000384
 8004c64:	20000488 	.word	0x20000488

08004c68 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b088      	sub	sp, #32
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004c76:	2301      	movs	r3, #1
 8004c78:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d077      	beq.n	8004d70 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10a      	bne.n	8004c9e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	60fb      	str	r3, [r7, #12]
}
 8004c9a:	bf00      	nop
 8004c9c:	e7fe      	b.n	8004c9c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d902      	bls.n	8004cae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	61fb      	str	r3, [r7, #28]
 8004cac:	e002      	b.n	8004cb4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	69fa      	ldr	r2, [r7, #28]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d058      	beq.n	8004d70 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d153      	bne.n	8004d70 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004cc8:	4b2b      	ldr	r3, [pc, #172]	; (8004d78 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d10a      	bne.n	8004ce8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	60bb      	str	r3, [r7, #8]
}
 8004ce4:	bf00      	nop
 8004ce6:	e7fe      	b.n	8004ce6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	69fa      	ldr	r2, [r7, #28]
 8004cf2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	db04      	blt.n	8004d06 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	f1c3 0207 	rsb	r2, r3, #7
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	6959      	ldr	r1, [r3, #20]
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4a19      	ldr	r2, [pc, #100]	; (8004d7c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004d16:	4413      	add	r3, r2
 8004d18:	4299      	cmp	r1, r3
 8004d1a:	d129      	bne.n	8004d70 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7fe fbdf 	bl	80034e4 <uxListRemove>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10a      	bne.n	8004d42 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d30:	2201      	movs	r2, #1
 8004d32:	fa02 f303 	lsl.w	r3, r2, r3
 8004d36:	43da      	mvns	r2, r3
 8004d38:	4b11      	ldr	r3, [pc, #68]	; (8004d80 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	4a10      	ldr	r2, [pc, #64]	; (8004d80 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004d40:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d46:	2201      	movs	r2, #1
 8004d48:	409a      	lsls	r2, r3
 8004d4a:	4b0d      	ldr	r3, [pc, #52]	; (8004d80 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	4a0b      	ldr	r2, [pc, #44]	; (8004d80 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004d52:	6013      	str	r3, [r2, #0]
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4a06      	ldr	r2, [pc, #24]	; (8004d7c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004d62:	441a      	add	r2, r3
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	3304      	adds	r3, #4
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4610      	mov	r0, r2
 8004d6c:	f7fe fb5d 	bl	800342a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d70:	bf00      	nop
 8004d72:	3720      	adds	r7, #32
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	20000380 	.word	0x20000380
 8004d7c:	20000384 	.word	0x20000384
 8004d80:	20000488 	.word	0x20000488

08004d84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004d88:	4b07      	ldr	r3, [pc, #28]	; (8004da8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d004      	beq.n	8004d9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004d90:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d96:	3201      	adds	r2, #1
 8004d98:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004d9a:	4b03      	ldr	r3, [pc, #12]	; (8004da8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
	}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	20000380 	.word	0x20000380

08004dac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004db6:	4b29      	ldr	r3, [pc, #164]	; (8004e5c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dbc:	4b28      	ldr	r3, [pc, #160]	; (8004e60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fe fb8e 	bl	80034e4 <uxListRemove>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10b      	bne.n	8004de6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004dce:	4b24      	ldr	r3, [pc, #144]	; (8004e60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dda:	43da      	mvns	r2, r3
 8004ddc:	4b21      	ldr	r3, [pc, #132]	; (8004e64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4013      	ands	r3, r2
 8004de2:	4a20      	ldr	r2, [pc, #128]	; (8004e64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004de4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dec:	d10a      	bne.n	8004e04 <prvAddCurrentTaskToDelayedList+0x58>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d007      	beq.n	8004e04 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004df4:	4b1a      	ldr	r3, [pc, #104]	; (8004e60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3304      	adds	r3, #4
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	481a      	ldr	r0, [pc, #104]	; (8004e68 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004dfe:	f7fe fb14 	bl	800342a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e02:	e026      	b.n	8004e52 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4413      	add	r3, r2
 8004e0a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e0c:	4b14      	ldr	r3, [pc, #80]	; (8004e60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d209      	bcs.n	8004e30 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e1c:	4b13      	ldr	r3, [pc, #76]	; (8004e6c <prvAddCurrentTaskToDelayedList+0xc0>)
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	4b0f      	ldr	r3, [pc, #60]	; (8004e60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	3304      	adds	r3, #4
 8004e26:	4619      	mov	r1, r3
 8004e28:	4610      	mov	r0, r2
 8004e2a:	f7fe fb22 	bl	8003472 <vListInsert>
}
 8004e2e:	e010      	b.n	8004e52 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e30:	4b0f      	ldr	r3, [pc, #60]	; (8004e70 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3304      	adds	r3, #4
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	4610      	mov	r0, r2
 8004e3e:	f7fe fb18 	bl	8003472 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e42:	4b0c      	ldr	r3, [pc, #48]	; (8004e74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d202      	bcs.n	8004e52 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004e4c:	4a09      	ldr	r2, [pc, #36]	; (8004e74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	6013      	str	r3, [r2, #0]
}
 8004e52:	bf00      	nop
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000484 	.word	0x20000484
 8004e60:	20000380 	.word	0x20000380
 8004e64:	20000488 	.word	0x20000488
 8004e68:	2000046c 	.word	0x2000046c
 8004e6c:	2000043c 	.word	0x2000043c
 8004e70:	20000438 	.word	0x20000438
 8004e74:	200004a0 	.word	0x200004a0

08004e78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	3b04      	subs	r3, #4
 8004e88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	3b04      	subs	r3, #4
 8004e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f023 0201 	bic.w	r2, r3, #1
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	3b04      	subs	r3, #4
 8004ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ea8:	4a0c      	ldr	r2, [pc, #48]	; (8004edc <pxPortInitialiseStack+0x64>)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	3b14      	subs	r3, #20
 8004eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3b04      	subs	r3, #4
 8004ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f06f 0202 	mvn.w	r2, #2
 8004ec6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	3b20      	subs	r3, #32
 8004ecc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ece:	68fb      	ldr	r3, [r7, #12]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	08004ee1 	.word	0x08004ee1

08004ee0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004eea:	4b12      	ldr	r3, [pc, #72]	; (8004f34 <prvTaskExitError+0x54>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef2:	d00a      	beq.n	8004f0a <prvTaskExitError+0x2a>
	__asm volatile
 8004ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef8:	f383 8811 	msr	BASEPRI, r3
 8004efc:	f3bf 8f6f 	isb	sy
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	60fb      	str	r3, [r7, #12]
}
 8004f06:	bf00      	nop
 8004f08:	e7fe      	b.n	8004f08 <prvTaskExitError+0x28>
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	60bb      	str	r3, [r7, #8]
}
 8004f1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f1e:	bf00      	nop
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0fc      	beq.n	8004f20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f26:	bf00      	nop
 8004f28:	bf00      	nop
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	2000000c 	.word	0x2000000c
	...

08004f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f40:	4b07      	ldr	r3, [pc, #28]	; (8004f60 <pxCurrentTCBConst2>)
 8004f42:	6819      	ldr	r1, [r3, #0]
 8004f44:	6808      	ldr	r0, [r1, #0]
 8004f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f4a:	f380 8809 	msr	PSP, r0
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f04f 0000 	mov.w	r0, #0
 8004f56:	f380 8811 	msr	BASEPRI, r0
 8004f5a:	4770      	bx	lr
 8004f5c:	f3af 8000 	nop.w

08004f60 <pxCurrentTCBConst2>:
 8004f60:	20000380 	.word	0x20000380
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f64:	bf00      	nop
 8004f66:	bf00      	nop

08004f68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f68:	4808      	ldr	r0, [pc, #32]	; (8004f8c <prvPortStartFirstTask+0x24>)
 8004f6a:	6800      	ldr	r0, [r0, #0]
 8004f6c:	6800      	ldr	r0, [r0, #0]
 8004f6e:	f380 8808 	msr	MSP, r0
 8004f72:	f04f 0000 	mov.w	r0, #0
 8004f76:	f380 8814 	msr	CONTROL, r0
 8004f7a:	b662      	cpsie	i
 8004f7c:	b661      	cpsie	f
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	df00      	svc	0
 8004f88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f8a:	bf00      	nop
 8004f8c:	e000ed08 	.word	0xe000ed08

08004f90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f96:	4b46      	ldr	r3, [pc, #280]	; (80050b0 <xPortStartScheduler+0x120>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a46      	ldr	r2, [pc, #280]	; (80050b4 <xPortStartScheduler+0x124>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d10a      	bne.n	8004fb6 <xPortStartScheduler+0x26>
	__asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	613b      	str	r3, [r7, #16]
}
 8004fb2:	bf00      	nop
 8004fb4:	e7fe      	b.n	8004fb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004fb6:	4b3e      	ldr	r3, [pc, #248]	; (80050b0 <xPortStartScheduler+0x120>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a3f      	ldr	r2, [pc, #252]	; (80050b8 <xPortStartScheduler+0x128>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d10a      	bne.n	8004fd6 <xPortStartScheduler+0x46>
	__asm volatile
 8004fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	60fb      	str	r3, [r7, #12]
}
 8004fd2:	bf00      	nop
 8004fd4:	e7fe      	b.n	8004fd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004fd6:	4b39      	ldr	r3, [pc, #228]	; (80050bc <xPortStartScheduler+0x12c>)
 8004fd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	22ff      	movs	r2, #255	; 0xff
 8004fe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ff0:	78fb      	ldrb	r3, [r7, #3]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	4b31      	ldr	r3, [pc, #196]	; (80050c0 <xPortStartScheduler+0x130>)
 8004ffc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ffe:	4b31      	ldr	r3, [pc, #196]	; (80050c4 <xPortStartScheduler+0x134>)
 8005000:	2207      	movs	r2, #7
 8005002:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005004:	e009      	b.n	800501a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005006:	4b2f      	ldr	r3, [pc, #188]	; (80050c4 <xPortStartScheduler+0x134>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	3b01      	subs	r3, #1
 800500c:	4a2d      	ldr	r2, [pc, #180]	; (80050c4 <xPortStartScheduler+0x134>)
 800500e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	b2db      	uxtb	r3, r3
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	b2db      	uxtb	r3, r3
 8005018:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800501a:	78fb      	ldrb	r3, [r7, #3]
 800501c:	b2db      	uxtb	r3, r3
 800501e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005022:	2b80      	cmp	r3, #128	; 0x80
 8005024:	d0ef      	beq.n	8005006 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005026:	4b27      	ldr	r3, [pc, #156]	; (80050c4 <xPortStartScheduler+0x134>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f1c3 0307 	rsb	r3, r3, #7
 800502e:	2b04      	cmp	r3, #4
 8005030:	d00a      	beq.n	8005048 <xPortStartScheduler+0xb8>
	__asm volatile
 8005032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	60bb      	str	r3, [r7, #8]
}
 8005044:	bf00      	nop
 8005046:	e7fe      	b.n	8005046 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005048:	4b1e      	ldr	r3, [pc, #120]	; (80050c4 <xPortStartScheduler+0x134>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	021b      	lsls	r3, r3, #8
 800504e:	4a1d      	ldr	r2, [pc, #116]	; (80050c4 <xPortStartScheduler+0x134>)
 8005050:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005052:	4b1c      	ldr	r3, [pc, #112]	; (80050c4 <xPortStartScheduler+0x134>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800505a:	4a1a      	ldr	r2, [pc, #104]	; (80050c4 <xPortStartScheduler+0x134>)
 800505c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	b2da      	uxtb	r2, r3
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005066:	4b18      	ldr	r3, [pc, #96]	; (80050c8 <xPortStartScheduler+0x138>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a17      	ldr	r2, [pc, #92]	; (80050c8 <xPortStartScheduler+0x138>)
 800506c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005072:	4b15      	ldr	r3, [pc, #84]	; (80050c8 <xPortStartScheduler+0x138>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a14      	ldr	r2, [pc, #80]	; (80050c8 <xPortStartScheduler+0x138>)
 8005078:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800507c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800507e:	f000 f8dd 	bl	800523c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005082:	4b12      	ldr	r3, [pc, #72]	; (80050cc <xPortStartScheduler+0x13c>)
 8005084:	2200      	movs	r2, #0
 8005086:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005088:	f000 f8fc 	bl	8005284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800508c:	4b10      	ldr	r3, [pc, #64]	; (80050d0 <xPortStartScheduler+0x140>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a0f      	ldr	r2, [pc, #60]	; (80050d0 <xPortStartScheduler+0x140>)
 8005092:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005096:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005098:	f7ff ff66 	bl	8004f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800509c:	f7ff fa8e 	bl	80045bc <vTaskSwitchContext>
	prvTaskExitError();
 80050a0:	f7ff ff1e 	bl	8004ee0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	e000ed00 	.word	0xe000ed00
 80050b4:	410fc271 	.word	0x410fc271
 80050b8:	410fc270 	.word	0x410fc270
 80050bc:	e000e400 	.word	0xe000e400
 80050c0:	200004ac 	.word	0x200004ac
 80050c4:	200004b0 	.word	0x200004b0
 80050c8:	e000ed20 	.word	0xe000ed20
 80050cc:	2000000c 	.word	0x2000000c
 80050d0:	e000ef34 	.word	0xe000ef34

080050d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
	__asm volatile
 80050da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	607b      	str	r3, [r7, #4]
}
 80050ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80050ee:	4b0f      	ldr	r3, [pc, #60]	; (800512c <vPortEnterCritical+0x58>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3301      	adds	r3, #1
 80050f4:	4a0d      	ldr	r2, [pc, #52]	; (800512c <vPortEnterCritical+0x58>)
 80050f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050f8:	4b0c      	ldr	r3, [pc, #48]	; (800512c <vPortEnterCritical+0x58>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d10f      	bne.n	8005120 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005100:	4b0b      	ldr	r3, [pc, #44]	; (8005130 <vPortEnterCritical+0x5c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <vPortEnterCritical+0x4c>
	__asm volatile
 800510a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	603b      	str	r3, [r7, #0]
}
 800511c:	bf00      	nop
 800511e:	e7fe      	b.n	800511e <vPortEnterCritical+0x4a>
	}
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	2000000c 	.word	0x2000000c
 8005130:	e000ed04 	.word	0xe000ed04

08005134 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800513a:	4b12      	ldr	r3, [pc, #72]	; (8005184 <vPortExitCritical+0x50>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10a      	bne.n	8005158 <vPortExitCritical+0x24>
	__asm volatile
 8005142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	607b      	str	r3, [r7, #4]
}
 8005154:	bf00      	nop
 8005156:	e7fe      	b.n	8005156 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005158:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <vPortExitCritical+0x50>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3b01      	subs	r3, #1
 800515e:	4a09      	ldr	r2, [pc, #36]	; (8005184 <vPortExitCritical+0x50>)
 8005160:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005162:	4b08      	ldr	r3, [pc, #32]	; (8005184 <vPortExitCritical+0x50>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d105      	bne.n	8005176 <vPortExitCritical+0x42>
 800516a:	2300      	movs	r3, #0
 800516c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	f383 8811 	msr	BASEPRI, r3
}
 8005174:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	2000000c 	.word	0x2000000c
	...

08005190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005190:	f3ef 8009 	mrs	r0, PSP
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	4b15      	ldr	r3, [pc, #84]	; (80051f0 <pxCurrentTCBConst>)
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	f01e 0f10 	tst.w	lr, #16
 80051a0:	bf08      	it	eq
 80051a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051aa:	6010      	str	r0, [r2, #0]
 80051ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80051b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80051b4:	f380 8811 	msr	BASEPRI, r0
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f7ff f9fc 	bl	80045bc <vTaskSwitchContext>
 80051c4:	f04f 0000 	mov.w	r0, #0
 80051c8:	f380 8811 	msr	BASEPRI, r0
 80051cc:	bc09      	pop	{r0, r3}
 80051ce:	6819      	ldr	r1, [r3, #0]
 80051d0:	6808      	ldr	r0, [r1, #0]
 80051d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d6:	f01e 0f10 	tst.w	lr, #16
 80051da:	bf08      	it	eq
 80051dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80051e0:	f380 8809 	msr	PSP, r0
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	f3af 8000 	nop.w

080051f0 <pxCurrentTCBConst>:
 80051f0:	20000380 	.word	0x20000380
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051f4:	bf00      	nop
 80051f6:	bf00      	nop

080051f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	607b      	str	r3, [r7, #4]
}
 8005210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005212:	f7ff f91b 	bl	800444c <xTaskIncrementTick>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800521c:	4b06      	ldr	r3, [pc, #24]	; (8005238 <SysTick_Handler+0x40>)
 800521e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	2300      	movs	r3, #0
 8005226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	f383 8811 	msr	BASEPRI, r3
}
 800522e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005230:	bf00      	nop
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	e000ed04 	.word	0xe000ed04

0800523c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800523c:	b480      	push	{r7}
 800523e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005240:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <vPortSetupTimerInterrupt+0x34>)
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005246:	4b0b      	ldr	r3, [pc, #44]	; (8005274 <vPortSetupTimerInterrupt+0x38>)
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800524c:	4b0a      	ldr	r3, [pc, #40]	; (8005278 <vPortSetupTimerInterrupt+0x3c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a0a      	ldr	r2, [pc, #40]	; (800527c <vPortSetupTimerInterrupt+0x40>)
 8005252:	fba2 2303 	umull	r2, r3, r2, r3
 8005256:	099b      	lsrs	r3, r3, #6
 8005258:	4a09      	ldr	r2, [pc, #36]	; (8005280 <vPortSetupTimerInterrupt+0x44>)
 800525a:	3b01      	subs	r3, #1
 800525c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800525e:	4b04      	ldr	r3, [pc, #16]	; (8005270 <vPortSetupTimerInterrupt+0x34>)
 8005260:	2207      	movs	r2, #7
 8005262:	601a      	str	r2, [r3, #0]
}
 8005264:	bf00      	nop
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	e000e010 	.word	0xe000e010
 8005274:	e000e018 	.word	0xe000e018
 8005278:	20000000 	.word	0x20000000
 800527c:	10624dd3 	.word	0x10624dd3
 8005280:	e000e014 	.word	0xe000e014

08005284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005284:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005294 <vPortEnableVFP+0x10>
 8005288:	6801      	ldr	r1, [r0, #0]
 800528a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800528e:	6001      	str	r1, [r0, #0]
 8005290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005292:	bf00      	nop
 8005294:	e000ed88 	.word	0xe000ed88

08005298 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800529e:	f3ef 8305 	mrs	r3, IPSR
 80052a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b0f      	cmp	r3, #15
 80052a8:	d914      	bls.n	80052d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80052aa:	4a17      	ldr	r2, [pc, #92]	; (8005308 <vPortValidateInterruptPriority+0x70>)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80052b4:	4b15      	ldr	r3, [pc, #84]	; (800530c <vPortValidateInterruptPriority+0x74>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	7afa      	ldrb	r2, [r7, #11]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d20a      	bcs.n	80052d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	607b      	str	r3, [r7, #4]
}
 80052d0:	bf00      	nop
 80052d2:	e7fe      	b.n	80052d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80052d4:	4b0e      	ldr	r3, [pc, #56]	; (8005310 <vPortValidateInterruptPriority+0x78>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052dc:	4b0d      	ldr	r3, [pc, #52]	; (8005314 <vPortValidateInterruptPriority+0x7c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d90a      	bls.n	80052fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80052e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	603b      	str	r3, [r7, #0]
}
 80052f6:	bf00      	nop
 80052f8:	e7fe      	b.n	80052f8 <vPortValidateInterruptPriority+0x60>
	}
 80052fa:	bf00      	nop
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	e000e3f0 	.word	0xe000e3f0
 800530c:	200004ac 	.word	0x200004ac
 8005310:	e000ed0c 	.word	0xe000ed0c
 8005314:	200004b0 	.word	0x200004b0

08005318 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08a      	sub	sp, #40	; 0x28
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005320:	2300      	movs	r3, #0
 8005322:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005324:	f7fe ffe8 	bl	80042f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005328:	4b5b      	ldr	r3, [pc, #364]	; (8005498 <pvPortMalloc+0x180>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005330:	f000 f920 	bl	8005574 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005334:	4b59      	ldr	r3, [pc, #356]	; (800549c <pvPortMalloc+0x184>)
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4013      	ands	r3, r2
 800533c:	2b00      	cmp	r3, #0
 800533e:	f040 8093 	bne.w	8005468 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d01d      	beq.n	8005384 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005348:	2208      	movs	r2, #8
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4413      	add	r3, r2
 800534e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f003 0307 	and.w	r3, r3, #7
 8005356:	2b00      	cmp	r3, #0
 8005358:	d014      	beq.n	8005384 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f023 0307 	bic.w	r3, r3, #7
 8005360:	3308      	adds	r3, #8
 8005362:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00a      	beq.n	8005384 <pvPortMalloc+0x6c>
	__asm volatile
 800536e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	617b      	str	r3, [r7, #20]
}
 8005380:	bf00      	nop
 8005382:	e7fe      	b.n	8005382 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d06e      	beq.n	8005468 <pvPortMalloc+0x150>
 800538a:	4b45      	ldr	r3, [pc, #276]	; (80054a0 <pvPortMalloc+0x188>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	429a      	cmp	r2, r3
 8005392:	d869      	bhi.n	8005468 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005394:	4b43      	ldr	r3, [pc, #268]	; (80054a4 <pvPortMalloc+0x18c>)
 8005396:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005398:	4b42      	ldr	r3, [pc, #264]	; (80054a4 <pvPortMalloc+0x18c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800539e:	e004      	b.n	80053aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d903      	bls.n	80053bc <pvPortMalloc+0xa4>
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1f1      	bne.n	80053a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80053bc:	4b36      	ldr	r3, [pc, #216]	; (8005498 <pvPortMalloc+0x180>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d050      	beq.n	8005468 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2208      	movs	r2, #8
 80053cc:	4413      	add	r3, r2
 80053ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	1ad2      	subs	r2, r2, r3
 80053e0:	2308      	movs	r3, #8
 80053e2:	005b      	lsls	r3, r3, #1
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d91f      	bls.n	8005428 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4413      	add	r3, r2
 80053ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	f003 0307 	and.w	r3, r3, #7
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <pvPortMalloc+0xf8>
	__asm volatile
 80053fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fe:	f383 8811 	msr	BASEPRI, r3
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	613b      	str	r3, [r7, #16]
}
 800540c:	bf00      	nop
 800540e:	e7fe      	b.n	800540e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	1ad2      	subs	r2, r2, r3
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005422:	69b8      	ldr	r0, [r7, #24]
 8005424:	f000 f908 	bl	8005638 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005428:	4b1d      	ldr	r3, [pc, #116]	; (80054a0 <pvPortMalloc+0x188>)
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	4a1b      	ldr	r2, [pc, #108]	; (80054a0 <pvPortMalloc+0x188>)
 8005434:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005436:	4b1a      	ldr	r3, [pc, #104]	; (80054a0 <pvPortMalloc+0x188>)
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	4b1b      	ldr	r3, [pc, #108]	; (80054a8 <pvPortMalloc+0x190>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	429a      	cmp	r2, r3
 8005440:	d203      	bcs.n	800544a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005442:	4b17      	ldr	r3, [pc, #92]	; (80054a0 <pvPortMalloc+0x188>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a18      	ldr	r2, [pc, #96]	; (80054a8 <pvPortMalloc+0x190>)
 8005448:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	4b13      	ldr	r3, [pc, #76]	; (800549c <pvPortMalloc+0x184>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	431a      	orrs	r2, r3
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	2200      	movs	r2, #0
 800545c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800545e:	4b13      	ldr	r3, [pc, #76]	; (80054ac <pvPortMalloc+0x194>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3301      	adds	r3, #1
 8005464:	4a11      	ldr	r2, [pc, #68]	; (80054ac <pvPortMalloc+0x194>)
 8005466:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005468:	f7fe ff54 	bl	8004314 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f003 0307 	and.w	r3, r3, #7
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00a      	beq.n	800548c <pvPortMalloc+0x174>
	__asm volatile
 8005476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547a:	f383 8811 	msr	BASEPRI, r3
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	60fb      	str	r3, [r7, #12]
}
 8005488:	bf00      	nop
 800548a:	e7fe      	b.n	800548a <pvPortMalloc+0x172>
	return pvReturn;
 800548c:	69fb      	ldr	r3, [r7, #28]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3728      	adds	r7, #40	; 0x28
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	200040bc 	.word	0x200040bc
 800549c:	200040d0 	.word	0x200040d0
 80054a0:	200040c0 	.word	0x200040c0
 80054a4:	200040b4 	.word	0x200040b4
 80054a8:	200040c4 	.word	0x200040c4
 80054ac:	200040c8 	.word	0x200040c8

080054b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d04d      	beq.n	800555e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80054c2:	2308      	movs	r3, #8
 80054c4:	425b      	negs	r3, r3
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	4413      	add	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	4b24      	ldr	r3, [pc, #144]	; (8005568 <vPortFree+0xb8>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4013      	ands	r3, r2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10a      	bne.n	80054f4 <vPortFree+0x44>
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	60fb      	str	r3, [r7, #12]
}
 80054f0:	bf00      	nop
 80054f2:	e7fe      	b.n	80054f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00a      	beq.n	8005512 <vPortFree+0x62>
	__asm volatile
 80054fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005500:	f383 8811 	msr	BASEPRI, r3
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	60bb      	str	r3, [r7, #8]
}
 800550e:	bf00      	nop
 8005510:	e7fe      	b.n	8005510 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	4b14      	ldr	r3, [pc, #80]	; (8005568 <vPortFree+0xb8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4013      	ands	r3, r2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d01e      	beq.n	800555e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d11a      	bne.n	800555e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	4b0e      	ldr	r3, [pc, #56]	; (8005568 <vPortFree+0xb8>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	43db      	mvns	r3, r3
 8005532:	401a      	ands	r2, r3
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005538:	f7fe fede 	bl	80042f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	4b0a      	ldr	r3, [pc, #40]	; (800556c <vPortFree+0xbc>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4413      	add	r3, r2
 8005546:	4a09      	ldr	r2, [pc, #36]	; (800556c <vPortFree+0xbc>)
 8005548:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800554a:	6938      	ldr	r0, [r7, #16]
 800554c:	f000 f874 	bl	8005638 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005550:	4b07      	ldr	r3, [pc, #28]	; (8005570 <vPortFree+0xc0>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3301      	adds	r3, #1
 8005556:	4a06      	ldr	r2, [pc, #24]	; (8005570 <vPortFree+0xc0>)
 8005558:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800555a:	f7fe fedb 	bl	8004314 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800555e:	bf00      	nop
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	200040d0 	.word	0x200040d0
 800556c:	200040c0 	.word	0x200040c0
 8005570:	200040cc 	.word	0x200040cc

08005574 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800557a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800557e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005580:	4b27      	ldr	r3, [pc, #156]	; (8005620 <prvHeapInit+0xac>)
 8005582:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f003 0307 	and.w	r3, r3, #7
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00c      	beq.n	80055a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3307      	adds	r3, #7
 8005592:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 0307 	bic.w	r3, r3, #7
 800559a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	4a1f      	ldr	r2, [pc, #124]	; (8005620 <prvHeapInit+0xac>)
 80055a4:	4413      	add	r3, r2
 80055a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055ac:	4a1d      	ldr	r2, [pc, #116]	; (8005624 <prvHeapInit+0xb0>)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80055b2:	4b1c      	ldr	r3, [pc, #112]	; (8005624 <prvHeapInit+0xb0>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	4413      	add	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80055c0:	2208      	movs	r2, #8
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	1a9b      	subs	r3, r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0307 	bic.w	r3, r3, #7
 80055ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4a15      	ldr	r2, [pc, #84]	; (8005628 <prvHeapInit+0xb4>)
 80055d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80055d6:	4b14      	ldr	r3, [pc, #80]	; (8005628 <prvHeapInit+0xb4>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2200      	movs	r2, #0
 80055dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055de:	4b12      	ldr	r3, [pc, #72]	; (8005628 <prvHeapInit+0xb4>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2200      	movs	r2, #0
 80055e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	1ad2      	subs	r2, r2, r3
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055f4:	4b0c      	ldr	r3, [pc, #48]	; (8005628 <prvHeapInit+0xb4>)
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	4a0a      	ldr	r2, [pc, #40]	; (800562c <prvHeapInit+0xb8>)
 8005602:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	4a09      	ldr	r2, [pc, #36]	; (8005630 <prvHeapInit+0xbc>)
 800560a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800560c:	4b09      	ldr	r3, [pc, #36]	; (8005634 <prvHeapInit+0xc0>)
 800560e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005612:	601a      	str	r2, [r3, #0]
}
 8005614:	bf00      	nop
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	200004b4 	.word	0x200004b4
 8005624:	200040b4 	.word	0x200040b4
 8005628:	200040bc 	.word	0x200040bc
 800562c:	200040c4 	.word	0x200040c4
 8005630:	200040c0 	.word	0x200040c0
 8005634:	200040d0 	.word	0x200040d0

08005638 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005640:	4b28      	ldr	r3, [pc, #160]	; (80056e4 <prvInsertBlockIntoFreeList+0xac>)
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	e002      	b.n	800564c <prvInsertBlockIntoFreeList+0x14>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	429a      	cmp	r2, r3
 8005654:	d8f7      	bhi.n	8005646 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	4413      	add	r3, r2
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	429a      	cmp	r2, r3
 8005666:	d108      	bne.n	800567a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	441a      	add	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	441a      	add	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d118      	bne.n	80056c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <prvInsertBlockIntoFreeList+0xb0>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	429a      	cmp	r2, r3
 8005698:	d00d      	beq.n	80056b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	441a      	add	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	e008      	b.n	80056c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056b6:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <prvInsertBlockIntoFreeList+0xb0>)
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	e003      	b.n	80056c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d002      	beq.n	80056d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056d6:	bf00      	nop
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	200040b4 	.word	0x200040b4
 80056e8:	200040bc 	.word	0x200040bc

080056ec <std>:
 80056ec:	2300      	movs	r3, #0
 80056ee:	b510      	push	{r4, lr}
 80056f0:	4604      	mov	r4, r0
 80056f2:	e9c0 3300 	strd	r3, r3, [r0]
 80056f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056fa:	6083      	str	r3, [r0, #8]
 80056fc:	8181      	strh	r1, [r0, #12]
 80056fe:	6643      	str	r3, [r0, #100]	; 0x64
 8005700:	81c2      	strh	r2, [r0, #14]
 8005702:	6183      	str	r3, [r0, #24]
 8005704:	4619      	mov	r1, r3
 8005706:	2208      	movs	r2, #8
 8005708:	305c      	adds	r0, #92	; 0x5c
 800570a:	f000 f906 	bl	800591a <memset>
 800570e:	4b0d      	ldr	r3, [pc, #52]	; (8005744 <std+0x58>)
 8005710:	6263      	str	r3, [r4, #36]	; 0x24
 8005712:	4b0d      	ldr	r3, [pc, #52]	; (8005748 <std+0x5c>)
 8005714:	62a3      	str	r3, [r4, #40]	; 0x28
 8005716:	4b0d      	ldr	r3, [pc, #52]	; (800574c <std+0x60>)
 8005718:	62e3      	str	r3, [r4, #44]	; 0x2c
 800571a:	4b0d      	ldr	r3, [pc, #52]	; (8005750 <std+0x64>)
 800571c:	6323      	str	r3, [r4, #48]	; 0x30
 800571e:	4b0d      	ldr	r3, [pc, #52]	; (8005754 <std+0x68>)
 8005720:	6224      	str	r4, [r4, #32]
 8005722:	429c      	cmp	r4, r3
 8005724:	d006      	beq.n	8005734 <std+0x48>
 8005726:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800572a:	4294      	cmp	r4, r2
 800572c:	d002      	beq.n	8005734 <std+0x48>
 800572e:	33d0      	adds	r3, #208	; 0xd0
 8005730:	429c      	cmp	r4, r3
 8005732:	d105      	bne.n	8005740 <std+0x54>
 8005734:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800573c:	f000 b966 	b.w	8005a0c <__retarget_lock_init_recursive>
 8005740:	bd10      	pop	{r4, pc}
 8005742:	bf00      	nop
 8005744:	08005895 	.word	0x08005895
 8005748:	080058b7 	.word	0x080058b7
 800574c:	080058ef 	.word	0x080058ef
 8005750:	08005913 	.word	0x08005913
 8005754:	200040d4 	.word	0x200040d4

08005758 <stdio_exit_handler>:
 8005758:	4a02      	ldr	r2, [pc, #8]	; (8005764 <stdio_exit_handler+0xc>)
 800575a:	4903      	ldr	r1, [pc, #12]	; (8005768 <stdio_exit_handler+0x10>)
 800575c:	4803      	ldr	r0, [pc, #12]	; (800576c <stdio_exit_handler+0x14>)
 800575e:	f000 b869 	b.w	8005834 <_fwalk_sglue>
 8005762:	bf00      	nop
 8005764:	20000010 	.word	0x20000010
 8005768:	080062d5 	.word	0x080062d5
 800576c:	2000001c 	.word	0x2000001c

08005770 <cleanup_stdio>:
 8005770:	6841      	ldr	r1, [r0, #4]
 8005772:	4b0c      	ldr	r3, [pc, #48]	; (80057a4 <cleanup_stdio+0x34>)
 8005774:	4299      	cmp	r1, r3
 8005776:	b510      	push	{r4, lr}
 8005778:	4604      	mov	r4, r0
 800577a:	d001      	beq.n	8005780 <cleanup_stdio+0x10>
 800577c:	f000 fdaa 	bl	80062d4 <_fflush_r>
 8005780:	68a1      	ldr	r1, [r4, #8]
 8005782:	4b09      	ldr	r3, [pc, #36]	; (80057a8 <cleanup_stdio+0x38>)
 8005784:	4299      	cmp	r1, r3
 8005786:	d002      	beq.n	800578e <cleanup_stdio+0x1e>
 8005788:	4620      	mov	r0, r4
 800578a:	f000 fda3 	bl	80062d4 <_fflush_r>
 800578e:	68e1      	ldr	r1, [r4, #12]
 8005790:	4b06      	ldr	r3, [pc, #24]	; (80057ac <cleanup_stdio+0x3c>)
 8005792:	4299      	cmp	r1, r3
 8005794:	d004      	beq.n	80057a0 <cleanup_stdio+0x30>
 8005796:	4620      	mov	r0, r4
 8005798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800579c:	f000 bd9a 	b.w	80062d4 <_fflush_r>
 80057a0:	bd10      	pop	{r4, pc}
 80057a2:	bf00      	nop
 80057a4:	200040d4 	.word	0x200040d4
 80057a8:	2000413c 	.word	0x2000413c
 80057ac:	200041a4 	.word	0x200041a4

080057b0 <global_stdio_init.part.0>:
 80057b0:	b510      	push	{r4, lr}
 80057b2:	4b0b      	ldr	r3, [pc, #44]	; (80057e0 <global_stdio_init.part.0+0x30>)
 80057b4:	4c0b      	ldr	r4, [pc, #44]	; (80057e4 <global_stdio_init.part.0+0x34>)
 80057b6:	4a0c      	ldr	r2, [pc, #48]	; (80057e8 <global_stdio_init.part.0+0x38>)
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	4620      	mov	r0, r4
 80057bc:	2200      	movs	r2, #0
 80057be:	2104      	movs	r1, #4
 80057c0:	f7ff ff94 	bl	80056ec <std>
 80057c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80057c8:	2201      	movs	r2, #1
 80057ca:	2109      	movs	r1, #9
 80057cc:	f7ff ff8e 	bl	80056ec <std>
 80057d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80057d4:	2202      	movs	r2, #2
 80057d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057da:	2112      	movs	r1, #18
 80057dc:	f7ff bf86 	b.w	80056ec <std>
 80057e0:	2000420c 	.word	0x2000420c
 80057e4:	200040d4 	.word	0x200040d4
 80057e8:	08005759 	.word	0x08005759

080057ec <__sfp_lock_acquire>:
 80057ec:	4801      	ldr	r0, [pc, #4]	; (80057f4 <__sfp_lock_acquire+0x8>)
 80057ee:	f000 b90e 	b.w	8005a0e <__retarget_lock_acquire_recursive>
 80057f2:	bf00      	nop
 80057f4:	20004215 	.word	0x20004215

080057f8 <__sfp_lock_release>:
 80057f8:	4801      	ldr	r0, [pc, #4]	; (8005800 <__sfp_lock_release+0x8>)
 80057fa:	f000 b909 	b.w	8005a10 <__retarget_lock_release_recursive>
 80057fe:	bf00      	nop
 8005800:	20004215 	.word	0x20004215

08005804 <__sinit>:
 8005804:	b510      	push	{r4, lr}
 8005806:	4604      	mov	r4, r0
 8005808:	f7ff fff0 	bl	80057ec <__sfp_lock_acquire>
 800580c:	6a23      	ldr	r3, [r4, #32]
 800580e:	b11b      	cbz	r3, 8005818 <__sinit+0x14>
 8005810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005814:	f7ff bff0 	b.w	80057f8 <__sfp_lock_release>
 8005818:	4b04      	ldr	r3, [pc, #16]	; (800582c <__sinit+0x28>)
 800581a:	6223      	str	r3, [r4, #32]
 800581c:	4b04      	ldr	r3, [pc, #16]	; (8005830 <__sinit+0x2c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1f5      	bne.n	8005810 <__sinit+0xc>
 8005824:	f7ff ffc4 	bl	80057b0 <global_stdio_init.part.0>
 8005828:	e7f2      	b.n	8005810 <__sinit+0xc>
 800582a:	bf00      	nop
 800582c:	08005771 	.word	0x08005771
 8005830:	2000420c 	.word	0x2000420c

08005834 <_fwalk_sglue>:
 8005834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005838:	4607      	mov	r7, r0
 800583a:	4688      	mov	r8, r1
 800583c:	4614      	mov	r4, r2
 800583e:	2600      	movs	r6, #0
 8005840:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005844:	f1b9 0901 	subs.w	r9, r9, #1
 8005848:	d505      	bpl.n	8005856 <_fwalk_sglue+0x22>
 800584a:	6824      	ldr	r4, [r4, #0]
 800584c:	2c00      	cmp	r4, #0
 800584e:	d1f7      	bne.n	8005840 <_fwalk_sglue+0xc>
 8005850:	4630      	mov	r0, r6
 8005852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005856:	89ab      	ldrh	r3, [r5, #12]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d907      	bls.n	800586c <_fwalk_sglue+0x38>
 800585c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005860:	3301      	adds	r3, #1
 8005862:	d003      	beq.n	800586c <_fwalk_sglue+0x38>
 8005864:	4629      	mov	r1, r5
 8005866:	4638      	mov	r0, r7
 8005868:	47c0      	blx	r8
 800586a:	4306      	orrs	r6, r0
 800586c:	3568      	adds	r5, #104	; 0x68
 800586e:	e7e9      	b.n	8005844 <_fwalk_sglue+0x10>

08005870 <iprintf>:
 8005870:	b40f      	push	{r0, r1, r2, r3}
 8005872:	b507      	push	{r0, r1, r2, lr}
 8005874:	4906      	ldr	r1, [pc, #24]	; (8005890 <iprintf+0x20>)
 8005876:	ab04      	add	r3, sp, #16
 8005878:	6808      	ldr	r0, [r1, #0]
 800587a:	f853 2b04 	ldr.w	r2, [r3], #4
 800587e:	6881      	ldr	r1, [r0, #8]
 8005880:	9301      	str	r3, [sp, #4]
 8005882:	f000 f9f7 	bl	8005c74 <_vfiprintf_r>
 8005886:	b003      	add	sp, #12
 8005888:	f85d eb04 	ldr.w	lr, [sp], #4
 800588c:	b004      	add	sp, #16
 800588e:	4770      	bx	lr
 8005890:	20000068 	.word	0x20000068

08005894 <__sread>:
 8005894:	b510      	push	{r4, lr}
 8005896:	460c      	mov	r4, r1
 8005898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800589c:	f000 f868 	bl	8005970 <_read_r>
 80058a0:	2800      	cmp	r0, #0
 80058a2:	bfab      	itete	ge
 80058a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80058a6:	89a3      	ldrhlt	r3, [r4, #12]
 80058a8:	181b      	addge	r3, r3, r0
 80058aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80058ae:	bfac      	ite	ge
 80058b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80058b2:	81a3      	strhlt	r3, [r4, #12]
 80058b4:	bd10      	pop	{r4, pc}

080058b6 <__swrite>:
 80058b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058ba:	461f      	mov	r7, r3
 80058bc:	898b      	ldrh	r3, [r1, #12]
 80058be:	05db      	lsls	r3, r3, #23
 80058c0:	4605      	mov	r5, r0
 80058c2:	460c      	mov	r4, r1
 80058c4:	4616      	mov	r6, r2
 80058c6:	d505      	bpl.n	80058d4 <__swrite+0x1e>
 80058c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058cc:	2302      	movs	r3, #2
 80058ce:	2200      	movs	r2, #0
 80058d0:	f000 f83c 	bl	800594c <_lseek_r>
 80058d4:	89a3      	ldrh	r3, [r4, #12]
 80058d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058de:	81a3      	strh	r3, [r4, #12]
 80058e0:	4632      	mov	r2, r6
 80058e2:	463b      	mov	r3, r7
 80058e4:	4628      	mov	r0, r5
 80058e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058ea:	f000 b853 	b.w	8005994 <_write_r>

080058ee <__sseek>:
 80058ee:	b510      	push	{r4, lr}
 80058f0:	460c      	mov	r4, r1
 80058f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058f6:	f000 f829 	bl	800594c <_lseek_r>
 80058fa:	1c43      	adds	r3, r0, #1
 80058fc:	89a3      	ldrh	r3, [r4, #12]
 80058fe:	bf15      	itete	ne
 8005900:	6560      	strne	r0, [r4, #84]	; 0x54
 8005902:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005906:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800590a:	81a3      	strheq	r3, [r4, #12]
 800590c:	bf18      	it	ne
 800590e:	81a3      	strhne	r3, [r4, #12]
 8005910:	bd10      	pop	{r4, pc}

08005912 <__sclose>:
 8005912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005916:	f000 b809 	b.w	800592c <_close_r>

0800591a <memset>:
 800591a:	4402      	add	r2, r0
 800591c:	4603      	mov	r3, r0
 800591e:	4293      	cmp	r3, r2
 8005920:	d100      	bne.n	8005924 <memset+0xa>
 8005922:	4770      	bx	lr
 8005924:	f803 1b01 	strb.w	r1, [r3], #1
 8005928:	e7f9      	b.n	800591e <memset+0x4>
	...

0800592c <_close_r>:
 800592c:	b538      	push	{r3, r4, r5, lr}
 800592e:	4d06      	ldr	r5, [pc, #24]	; (8005948 <_close_r+0x1c>)
 8005930:	2300      	movs	r3, #0
 8005932:	4604      	mov	r4, r0
 8005934:	4608      	mov	r0, r1
 8005936:	602b      	str	r3, [r5, #0]
 8005938:	f7fb f8e5 	bl	8000b06 <_close>
 800593c:	1c43      	adds	r3, r0, #1
 800593e:	d102      	bne.n	8005946 <_close_r+0x1a>
 8005940:	682b      	ldr	r3, [r5, #0]
 8005942:	b103      	cbz	r3, 8005946 <_close_r+0x1a>
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	bd38      	pop	{r3, r4, r5, pc}
 8005948:	20004210 	.word	0x20004210

0800594c <_lseek_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	4d07      	ldr	r5, [pc, #28]	; (800596c <_lseek_r+0x20>)
 8005950:	4604      	mov	r4, r0
 8005952:	4608      	mov	r0, r1
 8005954:	4611      	mov	r1, r2
 8005956:	2200      	movs	r2, #0
 8005958:	602a      	str	r2, [r5, #0]
 800595a:	461a      	mov	r2, r3
 800595c:	f7fb f8fa 	bl	8000b54 <_lseek>
 8005960:	1c43      	adds	r3, r0, #1
 8005962:	d102      	bne.n	800596a <_lseek_r+0x1e>
 8005964:	682b      	ldr	r3, [r5, #0]
 8005966:	b103      	cbz	r3, 800596a <_lseek_r+0x1e>
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	bd38      	pop	{r3, r4, r5, pc}
 800596c:	20004210 	.word	0x20004210

08005970 <_read_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	4d07      	ldr	r5, [pc, #28]	; (8005990 <_read_r+0x20>)
 8005974:	4604      	mov	r4, r0
 8005976:	4608      	mov	r0, r1
 8005978:	4611      	mov	r1, r2
 800597a:	2200      	movs	r2, #0
 800597c:	602a      	str	r2, [r5, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	f7fb f888 	bl	8000a94 <_read>
 8005984:	1c43      	adds	r3, r0, #1
 8005986:	d102      	bne.n	800598e <_read_r+0x1e>
 8005988:	682b      	ldr	r3, [r5, #0]
 800598a:	b103      	cbz	r3, 800598e <_read_r+0x1e>
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	bd38      	pop	{r3, r4, r5, pc}
 8005990:	20004210 	.word	0x20004210

08005994 <_write_r>:
 8005994:	b538      	push	{r3, r4, r5, lr}
 8005996:	4d07      	ldr	r5, [pc, #28]	; (80059b4 <_write_r+0x20>)
 8005998:	4604      	mov	r4, r0
 800599a:	4608      	mov	r0, r1
 800599c:	4611      	mov	r1, r2
 800599e:	2200      	movs	r2, #0
 80059a0:	602a      	str	r2, [r5, #0]
 80059a2:	461a      	mov	r2, r3
 80059a4:	f7fb f893 	bl	8000ace <_write>
 80059a8:	1c43      	adds	r3, r0, #1
 80059aa:	d102      	bne.n	80059b2 <_write_r+0x1e>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	b103      	cbz	r3, 80059b2 <_write_r+0x1e>
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	bd38      	pop	{r3, r4, r5, pc}
 80059b4:	20004210 	.word	0x20004210

080059b8 <__errno>:
 80059b8:	4b01      	ldr	r3, [pc, #4]	; (80059c0 <__errno+0x8>)
 80059ba:	6818      	ldr	r0, [r3, #0]
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	20000068 	.word	0x20000068

080059c4 <__libc_init_array>:
 80059c4:	b570      	push	{r4, r5, r6, lr}
 80059c6:	4d0d      	ldr	r5, [pc, #52]	; (80059fc <__libc_init_array+0x38>)
 80059c8:	4c0d      	ldr	r4, [pc, #52]	; (8005a00 <__libc_init_array+0x3c>)
 80059ca:	1b64      	subs	r4, r4, r5
 80059cc:	10a4      	asrs	r4, r4, #2
 80059ce:	2600      	movs	r6, #0
 80059d0:	42a6      	cmp	r6, r4
 80059d2:	d109      	bne.n	80059e8 <__libc_init_array+0x24>
 80059d4:	4d0b      	ldr	r5, [pc, #44]	; (8005a04 <__libc_init_array+0x40>)
 80059d6:	4c0c      	ldr	r4, [pc, #48]	; (8005a08 <__libc_init_array+0x44>)
 80059d8:	f000 fdce 	bl	8006578 <_init>
 80059dc:	1b64      	subs	r4, r4, r5
 80059de:	10a4      	asrs	r4, r4, #2
 80059e0:	2600      	movs	r6, #0
 80059e2:	42a6      	cmp	r6, r4
 80059e4:	d105      	bne.n	80059f2 <__libc_init_array+0x2e>
 80059e6:	bd70      	pop	{r4, r5, r6, pc}
 80059e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ec:	4798      	blx	r3
 80059ee:	3601      	adds	r6, #1
 80059f0:	e7ee      	b.n	80059d0 <__libc_init_array+0xc>
 80059f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059f6:	4798      	blx	r3
 80059f8:	3601      	adds	r6, #1
 80059fa:	e7f2      	b.n	80059e2 <__libc_init_array+0x1e>
 80059fc:	08006664 	.word	0x08006664
 8005a00:	08006664 	.word	0x08006664
 8005a04:	08006664 	.word	0x08006664
 8005a08:	08006668 	.word	0x08006668

08005a0c <__retarget_lock_init_recursive>:
 8005a0c:	4770      	bx	lr

08005a0e <__retarget_lock_acquire_recursive>:
 8005a0e:	4770      	bx	lr

08005a10 <__retarget_lock_release_recursive>:
 8005a10:	4770      	bx	lr

08005a12 <memcpy>:
 8005a12:	440a      	add	r2, r1
 8005a14:	4291      	cmp	r1, r2
 8005a16:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a1a:	d100      	bne.n	8005a1e <memcpy+0xc>
 8005a1c:	4770      	bx	lr
 8005a1e:	b510      	push	{r4, lr}
 8005a20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a28:	4291      	cmp	r1, r2
 8005a2a:	d1f9      	bne.n	8005a20 <memcpy+0xe>
 8005a2c:	bd10      	pop	{r4, pc}
	...

08005a30 <_free_r>:
 8005a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a32:	2900      	cmp	r1, #0
 8005a34:	d044      	beq.n	8005ac0 <_free_r+0x90>
 8005a36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a3a:	9001      	str	r0, [sp, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f1a1 0404 	sub.w	r4, r1, #4
 8005a42:	bfb8      	it	lt
 8005a44:	18e4      	addlt	r4, r4, r3
 8005a46:	f000 f8df 	bl	8005c08 <__malloc_lock>
 8005a4a:	4a1e      	ldr	r2, [pc, #120]	; (8005ac4 <_free_r+0x94>)
 8005a4c:	9801      	ldr	r0, [sp, #4]
 8005a4e:	6813      	ldr	r3, [r2, #0]
 8005a50:	b933      	cbnz	r3, 8005a60 <_free_r+0x30>
 8005a52:	6063      	str	r3, [r4, #4]
 8005a54:	6014      	str	r4, [r2, #0]
 8005a56:	b003      	add	sp, #12
 8005a58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a5c:	f000 b8da 	b.w	8005c14 <__malloc_unlock>
 8005a60:	42a3      	cmp	r3, r4
 8005a62:	d908      	bls.n	8005a76 <_free_r+0x46>
 8005a64:	6825      	ldr	r5, [r4, #0]
 8005a66:	1961      	adds	r1, r4, r5
 8005a68:	428b      	cmp	r3, r1
 8005a6a:	bf01      	itttt	eq
 8005a6c:	6819      	ldreq	r1, [r3, #0]
 8005a6e:	685b      	ldreq	r3, [r3, #4]
 8005a70:	1949      	addeq	r1, r1, r5
 8005a72:	6021      	streq	r1, [r4, #0]
 8005a74:	e7ed      	b.n	8005a52 <_free_r+0x22>
 8005a76:	461a      	mov	r2, r3
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	b10b      	cbz	r3, 8005a80 <_free_r+0x50>
 8005a7c:	42a3      	cmp	r3, r4
 8005a7e:	d9fa      	bls.n	8005a76 <_free_r+0x46>
 8005a80:	6811      	ldr	r1, [r2, #0]
 8005a82:	1855      	adds	r5, r2, r1
 8005a84:	42a5      	cmp	r5, r4
 8005a86:	d10b      	bne.n	8005aa0 <_free_r+0x70>
 8005a88:	6824      	ldr	r4, [r4, #0]
 8005a8a:	4421      	add	r1, r4
 8005a8c:	1854      	adds	r4, r2, r1
 8005a8e:	42a3      	cmp	r3, r4
 8005a90:	6011      	str	r1, [r2, #0]
 8005a92:	d1e0      	bne.n	8005a56 <_free_r+0x26>
 8005a94:	681c      	ldr	r4, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	6053      	str	r3, [r2, #4]
 8005a9a:	440c      	add	r4, r1
 8005a9c:	6014      	str	r4, [r2, #0]
 8005a9e:	e7da      	b.n	8005a56 <_free_r+0x26>
 8005aa0:	d902      	bls.n	8005aa8 <_free_r+0x78>
 8005aa2:	230c      	movs	r3, #12
 8005aa4:	6003      	str	r3, [r0, #0]
 8005aa6:	e7d6      	b.n	8005a56 <_free_r+0x26>
 8005aa8:	6825      	ldr	r5, [r4, #0]
 8005aaa:	1961      	adds	r1, r4, r5
 8005aac:	428b      	cmp	r3, r1
 8005aae:	bf04      	itt	eq
 8005ab0:	6819      	ldreq	r1, [r3, #0]
 8005ab2:	685b      	ldreq	r3, [r3, #4]
 8005ab4:	6063      	str	r3, [r4, #4]
 8005ab6:	bf04      	itt	eq
 8005ab8:	1949      	addeq	r1, r1, r5
 8005aba:	6021      	streq	r1, [r4, #0]
 8005abc:	6054      	str	r4, [r2, #4]
 8005abe:	e7ca      	b.n	8005a56 <_free_r+0x26>
 8005ac0:	b003      	add	sp, #12
 8005ac2:	bd30      	pop	{r4, r5, pc}
 8005ac4:	20004218 	.word	0x20004218

08005ac8 <sbrk_aligned>:
 8005ac8:	b570      	push	{r4, r5, r6, lr}
 8005aca:	4e0e      	ldr	r6, [pc, #56]	; (8005b04 <sbrk_aligned+0x3c>)
 8005acc:	460c      	mov	r4, r1
 8005ace:	6831      	ldr	r1, [r6, #0]
 8005ad0:	4605      	mov	r5, r0
 8005ad2:	b911      	cbnz	r1, 8005ada <sbrk_aligned+0x12>
 8005ad4:	f000 fcbc 	bl	8006450 <_sbrk_r>
 8005ad8:	6030      	str	r0, [r6, #0]
 8005ada:	4621      	mov	r1, r4
 8005adc:	4628      	mov	r0, r5
 8005ade:	f000 fcb7 	bl	8006450 <_sbrk_r>
 8005ae2:	1c43      	adds	r3, r0, #1
 8005ae4:	d00a      	beq.n	8005afc <sbrk_aligned+0x34>
 8005ae6:	1cc4      	adds	r4, r0, #3
 8005ae8:	f024 0403 	bic.w	r4, r4, #3
 8005aec:	42a0      	cmp	r0, r4
 8005aee:	d007      	beq.n	8005b00 <sbrk_aligned+0x38>
 8005af0:	1a21      	subs	r1, r4, r0
 8005af2:	4628      	mov	r0, r5
 8005af4:	f000 fcac 	bl	8006450 <_sbrk_r>
 8005af8:	3001      	adds	r0, #1
 8005afa:	d101      	bne.n	8005b00 <sbrk_aligned+0x38>
 8005afc:	f04f 34ff 	mov.w	r4, #4294967295
 8005b00:	4620      	mov	r0, r4
 8005b02:	bd70      	pop	{r4, r5, r6, pc}
 8005b04:	2000421c 	.word	0x2000421c

08005b08 <_malloc_r>:
 8005b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b0c:	1ccd      	adds	r5, r1, #3
 8005b0e:	f025 0503 	bic.w	r5, r5, #3
 8005b12:	3508      	adds	r5, #8
 8005b14:	2d0c      	cmp	r5, #12
 8005b16:	bf38      	it	cc
 8005b18:	250c      	movcc	r5, #12
 8005b1a:	2d00      	cmp	r5, #0
 8005b1c:	4607      	mov	r7, r0
 8005b1e:	db01      	blt.n	8005b24 <_malloc_r+0x1c>
 8005b20:	42a9      	cmp	r1, r5
 8005b22:	d905      	bls.n	8005b30 <_malloc_r+0x28>
 8005b24:	230c      	movs	r3, #12
 8005b26:	603b      	str	r3, [r7, #0]
 8005b28:	2600      	movs	r6, #0
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005c04 <_malloc_r+0xfc>
 8005b34:	f000 f868 	bl	8005c08 <__malloc_lock>
 8005b38:	f8d8 3000 	ldr.w	r3, [r8]
 8005b3c:	461c      	mov	r4, r3
 8005b3e:	bb5c      	cbnz	r4, 8005b98 <_malloc_r+0x90>
 8005b40:	4629      	mov	r1, r5
 8005b42:	4638      	mov	r0, r7
 8005b44:	f7ff ffc0 	bl	8005ac8 <sbrk_aligned>
 8005b48:	1c43      	adds	r3, r0, #1
 8005b4a:	4604      	mov	r4, r0
 8005b4c:	d155      	bne.n	8005bfa <_malloc_r+0xf2>
 8005b4e:	f8d8 4000 	ldr.w	r4, [r8]
 8005b52:	4626      	mov	r6, r4
 8005b54:	2e00      	cmp	r6, #0
 8005b56:	d145      	bne.n	8005be4 <_malloc_r+0xdc>
 8005b58:	2c00      	cmp	r4, #0
 8005b5a:	d048      	beq.n	8005bee <_malloc_r+0xe6>
 8005b5c:	6823      	ldr	r3, [r4, #0]
 8005b5e:	4631      	mov	r1, r6
 8005b60:	4638      	mov	r0, r7
 8005b62:	eb04 0903 	add.w	r9, r4, r3
 8005b66:	f000 fc73 	bl	8006450 <_sbrk_r>
 8005b6a:	4581      	cmp	r9, r0
 8005b6c:	d13f      	bne.n	8005bee <_malloc_r+0xe6>
 8005b6e:	6821      	ldr	r1, [r4, #0]
 8005b70:	1a6d      	subs	r5, r5, r1
 8005b72:	4629      	mov	r1, r5
 8005b74:	4638      	mov	r0, r7
 8005b76:	f7ff ffa7 	bl	8005ac8 <sbrk_aligned>
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	d037      	beq.n	8005bee <_malloc_r+0xe6>
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	442b      	add	r3, r5
 8005b82:	6023      	str	r3, [r4, #0]
 8005b84:	f8d8 3000 	ldr.w	r3, [r8]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d038      	beq.n	8005bfe <_malloc_r+0xf6>
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	42a2      	cmp	r2, r4
 8005b90:	d12b      	bne.n	8005bea <_malloc_r+0xe2>
 8005b92:	2200      	movs	r2, #0
 8005b94:	605a      	str	r2, [r3, #4]
 8005b96:	e00f      	b.n	8005bb8 <_malloc_r+0xb0>
 8005b98:	6822      	ldr	r2, [r4, #0]
 8005b9a:	1b52      	subs	r2, r2, r5
 8005b9c:	d41f      	bmi.n	8005bde <_malloc_r+0xd6>
 8005b9e:	2a0b      	cmp	r2, #11
 8005ba0:	d917      	bls.n	8005bd2 <_malloc_r+0xca>
 8005ba2:	1961      	adds	r1, r4, r5
 8005ba4:	42a3      	cmp	r3, r4
 8005ba6:	6025      	str	r5, [r4, #0]
 8005ba8:	bf18      	it	ne
 8005baa:	6059      	strne	r1, [r3, #4]
 8005bac:	6863      	ldr	r3, [r4, #4]
 8005bae:	bf08      	it	eq
 8005bb0:	f8c8 1000 	streq.w	r1, [r8]
 8005bb4:	5162      	str	r2, [r4, r5]
 8005bb6:	604b      	str	r3, [r1, #4]
 8005bb8:	4638      	mov	r0, r7
 8005bba:	f104 060b 	add.w	r6, r4, #11
 8005bbe:	f000 f829 	bl	8005c14 <__malloc_unlock>
 8005bc2:	f026 0607 	bic.w	r6, r6, #7
 8005bc6:	1d23      	adds	r3, r4, #4
 8005bc8:	1af2      	subs	r2, r6, r3
 8005bca:	d0ae      	beq.n	8005b2a <_malloc_r+0x22>
 8005bcc:	1b9b      	subs	r3, r3, r6
 8005bce:	50a3      	str	r3, [r4, r2]
 8005bd0:	e7ab      	b.n	8005b2a <_malloc_r+0x22>
 8005bd2:	42a3      	cmp	r3, r4
 8005bd4:	6862      	ldr	r2, [r4, #4]
 8005bd6:	d1dd      	bne.n	8005b94 <_malloc_r+0x8c>
 8005bd8:	f8c8 2000 	str.w	r2, [r8]
 8005bdc:	e7ec      	b.n	8005bb8 <_malloc_r+0xb0>
 8005bde:	4623      	mov	r3, r4
 8005be0:	6864      	ldr	r4, [r4, #4]
 8005be2:	e7ac      	b.n	8005b3e <_malloc_r+0x36>
 8005be4:	4634      	mov	r4, r6
 8005be6:	6876      	ldr	r6, [r6, #4]
 8005be8:	e7b4      	b.n	8005b54 <_malloc_r+0x4c>
 8005bea:	4613      	mov	r3, r2
 8005bec:	e7cc      	b.n	8005b88 <_malloc_r+0x80>
 8005bee:	230c      	movs	r3, #12
 8005bf0:	603b      	str	r3, [r7, #0]
 8005bf2:	4638      	mov	r0, r7
 8005bf4:	f000 f80e 	bl	8005c14 <__malloc_unlock>
 8005bf8:	e797      	b.n	8005b2a <_malloc_r+0x22>
 8005bfa:	6025      	str	r5, [r4, #0]
 8005bfc:	e7dc      	b.n	8005bb8 <_malloc_r+0xb0>
 8005bfe:	605b      	str	r3, [r3, #4]
 8005c00:	deff      	udf	#255	; 0xff
 8005c02:	bf00      	nop
 8005c04:	20004218 	.word	0x20004218

08005c08 <__malloc_lock>:
 8005c08:	4801      	ldr	r0, [pc, #4]	; (8005c10 <__malloc_lock+0x8>)
 8005c0a:	f7ff bf00 	b.w	8005a0e <__retarget_lock_acquire_recursive>
 8005c0e:	bf00      	nop
 8005c10:	20004214 	.word	0x20004214

08005c14 <__malloc_unlock>:
 8005c14:	4801      	ldr	r0, [pc, #4]	; (8005c1c <__malloc_unlock+0x8>)
 8005c16:	f7ff befb 	b.w	8005a10 <__retarget_lock_release_recursive>
 8005c1a:	bf00      	nop
 8005c1c:	20004214 	.word	0x20004214

08005c20 <__sfputc_r>:
 8005c20:	6893      	ldr	r3, [r2, #8]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	b410      	push	{r4}
 8005c28:	6093      	str	r3, [r2, #8]
 8005c2a:	da08      	bge.n	8005c3e <__sfputc_r+0x1e>
 8005c2c:	6994      	ldr	r4, [r2, #24]
 8005c2e:	42a3      	cmp	r3, r4
 8005c30:	db01      	blt.n	8005c36 <__sfputc_r+0x16>
 8005c32:	290a      	cmp	r1, #10
 8005c34:	d103      	bne.n	8005c3e <__sfputc_r+0x1e>
 8005c36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c3a:	f000 bb73 	b.w	8006324 <__swbuf_r>
 8005c3e:	6813      	ldr	r3, [r2, #0]
 8005c40:	1c58      	adds	r0, r3, #1
 8005c42:	6010      	str	r0, [r2, #0]
 8005c44:	7019      	strb	r1, [r3, #0]
 8005c46:	4608      	mov	r0, r1
 8005c48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <__sfputs_r>:
 8005c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c50:	4606      	mov	r6, r0
 8005c52:	460f      	mov	r7, r1
 8005c54:	4614      	mov	r4, r2
 8005c56:	18d5      	adds	r5, r2, r3
 8005c58:	42ac      	cmp	r4, r5
 8005c5a:	d101      	bne.n	8005c60 <__sfputs_r+0x12>
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	e007      	b.n	8005c70 <__sfputs_r+0x22>
 8005c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c64:	463a      	mov	r2, r7
 8005c66:	4630      	mov	r0, r6
 8005c68:	f7ff ffda 	bl	8005c20 <__sfputc_r>
 8005c6c:	1c43      	adds	r3, r0, #1
 8005c6e:	d1f3      	bne.n	8005c58 <__sfputs_r+0xa>
 8005c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c74 <_vfiprintf_r>:
 8005c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c78:	460d      	mov	r5, r1
 8005c7a:	b09d      	sub	sp, #116	; 0x74
 8005c7c:	4614      	mov	r4, r2
 8005c7e:	4698      	mov	r8, r3
 8005c80:	4606      	mov	r6, r0
 8005c82:	b118      	cbz	r0, 8005c8c <_vfiprintf_r+0x18>
 8005c84:	6a03      	ldr	r3, [r0, #32]
 8005c86:	b90b      	cbnz	r3, 8005c8c <_vfiprintf_r+0x18>
 8005c88:	f7ff fdbc 	bl	8005804 <__sinit>
 8005c8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c8e:	07d9      	lsls	r1, r3, #31
 8005c90:	d405      	bmi.n	8005c9e <_vfiprintf_r+0x2a>
 8005c92:	89ab      	ldrh	r3, [r5, #12]
 8005c94:	059a      	lsls	r2, r3, #22
 8005c96:	d402      	bmi.n	8005c9e <_vfiprintf_r+0x2a>
 8005c98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c9a:	f7ff feb8 	bl	8005a0e <__retarget_lock_acquire_recursive>
 8005c9e:	89ab      	ldrh	r3, [r5, #12]
 8005ca0:	071b      	lsls	r3, r3, #28
 8005ca2:	d501      	bpl.n	8005ca8 <_vfiprintf_r+0x34>
 8005ca4:	692b      	ldr	r3, [r5, #16]
 8005ca6:	b99b      	cbnz	r3, 8005cd0 <_vfiprintf_r+0x5c>
 8005ca8:	4629      	mov	r1, r5
 8005caa:	4630      	mov	r0, r6
 8005cac:	f000 fb78 	bl	80063a0 <__swsetup_r>
 8005cb0:	b170      	cbz	r0, 8005cd0 <_vfiprintf_r+0x5c>
 8005cb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cb4:	07dc      	lsls	r4, r3, #31
 8005cb6:	d504      	bpl.n	8005cc2 <_vfiprintf_r+0x4e>
 8005cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cbc:	b01d      	add	sp, #116	; 0x74
 8005cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc2:	89ab      	ldrh	r3, [r5, #12]
 8005cc4:	0598      	lsls	r0, r3, #22
 8005cc6:	d4f7      	bmi.n	8005cb8 <_vfiprintf_r+0x44>
 8005cc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cca:	f7ff fea1 	bl	8005a10 <__retarget_lock_release_recursive>
 8005cce:	e7f3      	b.n	8005cb8 <_vfiprintf_r+0x44>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8005cd4:	2320      	movs	r3, #32
 8005cd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cda:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cde:	2330      	movs	r3, #48	; 0x30
 8005ce0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005e94 <_vfiprintf_r+0x220>
 8005ce4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ce8:	f04f 0901 	mov.w	r9, #1
 8005cec:	4623      	mov	r3, r4
 8005cee:	469a      	mov	sl, r3
 8005cf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cf4:	b10a      	cbz	r2, 8005cfa <_vfiprintf_r+0x86>
 8005cf6:	2a25      	cmp	r2, #37	; 0x25
 8005cf8:	d1f9      	bne.n	8005cee <_vfiprintf_r+0x7a>
 8005cfa:	ebba 0b04 	subs.w	fp, sl, r4
 8005cfe:	d00b      	beq.n	8005d18 <_vfiprintf_r+0xa4>
 8005d00:	465b      	mov	r3, fp
 8005d02:	4622      	mov	r2, r4
 8005d04:	4629      	mov	r1, r5
 8005d06:	4630      	mov	r0, r6
 8005d08:	f7ff ffa1 	bl	8005c4e <__sfputs_r>
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	f000 80a9 	beq.w	8005e64 <_vfiprintf_r+0x1f0>
 8005d12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d14:	445a      	add	r2, fp
 8005d16:	9209      	str	r2, [sp, #36]	; 0x24
 8005d18:	f89a 3000 	ldrb.w	r3, [sl]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 80a1 	beq.w	8005e64 <_vfiprintf_r+0x1f0>
 8005d22:	2300      	movs	r3, #0
 8005d24:	f04f 32ff 	mov.w	r2, #4294967295
 8005d28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d2c:	f10a 0a01 	add.w	sl, sl, #1
 8005d30:	9304      	str	r3, [sp, #16]
 8005d32:	9307      	str	r3, [sp, #28]
 8005d34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d38:	931a      	str	r3, [sp, #104]	; 0x68
 8005d3a:	4654      	mov	r4, sl
 8005d3c:	2205      	movs	r2, #5
 8005d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d42:	4854      	ldr	r0, [pc, #336]	; (8005e94 <_vfiprintf_r+0x220>)
 8005d44:	f7fa fa44 	bl	80001d0 <memchr>
 8005d48:	9a04      	ldr	r2, [sp, #16]
 8005d4a:	b9d8      	cbnz	r0, 8005d84 <_vfiprintf_r+0x110>
 8005d4c:	06d1      	lsls	r1, r2, #27
 8005d4e:	bf44      	itt	mi
 8005d50:	2320      	movmi	r3, #32
 8005d52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d56:	0713      	lsls	r3, r2, #28
 8005d58:	bf44      	itt	mi
 8005d5a:	232b      	movmi	r3, #43	; 0x2b
 8005d5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d60:	f89a 3000 	ldrb.w	r3, [sl]
 8005d64:	2b2a      	cmp	r3, #42	; 0x2a
 8005d66:	d015      	beq.n	8005d94 <_vfiprintf_r+0x120>
 8005d68:	9a07      	ldr	r2, [sp, #28]
 8005d6a:	4654      	mov	r4, sl
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	f04f 0c0a 	mov.w	ip, #10
 8005d72:	4621      	mov	r1, r4
 8005d74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d78:	3b30      	subs	r3, #48	; 0x30
 8005d7a:	2b09      	cmp	r3, #9
 8005d7c:	d94d      	bls.n	8005e1a <_vfiprintf_r+0x1a6>
 8005d7e:	b1b0      	cbz	r0, 8005dae <_vfiprintf_r+0x13a>
 8005d80:	9207      	str	r2, [sp, #28]
 8005d82:	e014      	b.n	8005dae <_vfiprintf_r+0x13a>
 8005d84:	eba0 0308 	sub.w	r3, r0, r8
 8005d88:	fa09 f303 	lsl.w	r3, r9, r3
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	9304      	str	r3, [sp, #16]
 8005d90:	46a2      	mov	sl, r4
 8005d92:	e7d2      	b.n	8005d3a <_vfiprintf_r+0xc6>
 8005d94:	9b03      	ldr	r3, [sp, #12]
 8005d96:	1d19      	adds	r1, r3, #4
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	9103      	str	r1, [sp, #12]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	bfbb      	ittet	lt
 8005da0:	425b      	neglt	r3, r3
 8005da2:	f042 0202 	orrlt.w	r2, r2, #2
 8005da6:	9307      	strge	r3, [sp, #28]
 8005da8:	9307      	strlt	r3, [sp, #28]
 8005daa:	bfb8      	it	lt
 8005dac:	9204      	strlt	r2, [sp, #16]
 8005dae:	7823      	ldrb	r3, [r4, #0]
 8005db0:	2b2e      	cmp	r3, #46	; 0x2e
 8005db2:	d10c      	bne.n	8005dce <_vfiprintf_r+0x15a>
 8005db4:	7863      	ldrb	r3, [r4, #1]
 8005db6:	2b2a      	cmp	r3, #42	; 0x2a
 8005db8:	d134      	bne.n	8005e24 <_vfiprintf_r+0x1b0>
 8005dba:	9b03      	ldr	r3, [sp, #12]
 8005dbc:	1d1a      	adds	r2, r3, #4
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	9203      	str	r2, [sp, #12]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	bfb8      	it	lt
 8005dc6:	f04f 33ff 	movlt.w	r3, #4294967295
 8005dca:	3402      	adds	r4, #2
 8005dcc:	9305      	str	r3, [sp, #20]
 8005dce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005ea4 <_vfiprintf_r+0x230>
 8005dd2:	7821      	ldrb	r1, [r4, #0]
 8005dd4:	2203      	movs	r2, #3
 8005dd6:	4650      	mov	r0, sl
 8005dd8:	f7fa f9fa 	bl	80001d0 <memchr>
 8005ddc:	b138      	cbz	r0, 8005dee <_vfiprintf_r+0x17a>
 8005dde:	9b04      	ldr	r3, [sp, #16]
 8005de0:	eba0 000a 	sub.w	r0, r0, sl
 8005de4:	2240      	movs	r2, #64	; 0x40
 8005de6:	4082      	lsls	r2, r0
 8005de8:	4313      	orrs	r3, r2
 8005dea:	3401      	adds	r4, #1
 8005dec:	9304      	str	r3, [sp, #16]
 8005dee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005df2:	4829      	ldr	r0, [pc, #164]	; (8005e98 <_vfiprintf_r+0x224>)
 8005df4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005df8:	2206      	movs	r2, #6
 8005dfa:	f7fa f9e9 	bl	80001d0 <memchr>
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	d03f      	beq.n	8005e82 <_vfiprintf_r+0x20e>
 8005e02:	4b26      	ldr	r3, [pc, #152]	; (8005e9c <_vfiprintf_r+0x228>)
 8005e04:	bb1b      	cbnz	r3, 8005e4e <_vfiprintf_r+0x1da>
 8005e06:	9b03      	ldr	r3, [sp, #12]
 8005e08:	3307      	adds	r3, #7
 8005e0a:	f023 0307 	bic.w	r3, r3, #7
 8005e0e:	3308      	adds	r3, #8
 8005e10:	9303      	str	r3, [sp, #12]
 8005e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e14:	443b      	add	r3, r7
 8005e16:	9309      	str	r3, [sp, #36]	; 0x24
 8005e18:	e768      	b.n	8005cec <_vfiprintf_r+0x78>
 8005e1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e1e:	460c      	mov	r4, r1
 8005e20:	2001      	movs	r0, #1
 8005e22:	e7a6      	b.n	8005d72 <_vfiprintf_r+0xfe>
 8005e24:	2300      	movs	r3, #0
 8005e26:	3401      	adds	r4, #1
 8005e28:	9305      	str	r3, [sp, #20]
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	f04f 0c0a 	mov.w	ip, #10
 8005e30:	4620      	mov	r0, r4
 8005e32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e36:	3a30      	subs	r2, #48	; 0x30
 8005e38:	2a09      	cmp	r2, #9
 8005e3a:	d903      	bls.n	8005e44 <_vfiprintf_r+0x1d0>
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d0c6      	beq.n	8005dce <_vfiprintf_r+0x15a>
 8005e40:	9105      	str	r1, [sp, #20]
 8005e42:	e7c4      	b.n	8005dce <_vfiprintf_r+0x15a>
 8005e44:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e48:	4604      	mov	r4, r0
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e7f0      	b.n	8005e30 <_vfiprintf_r+0x1bc>
 8005e4e:	ab03      	add	r3, sp, #12
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	462a      	mov	r2, r5
 8005e54:	4b12      	ldr	r3, [pc, #72]	; (8005ea0 <_vfiprintf_r+0x22c>)
 8005e56:	a904      	add	r1, sp, #16
 8005e58:	4630      	mov	r0, r6
 8005e5a:	f3af 8000 	nop.w
 8005e5e:	4607      	mov	r7, r0
 8005e60:	1c78      	adds	r0, r7, #1
 8005e62:	d1d6      	bne.n	8005e12 <_vfiprintf_r+0x19e>
 8005e64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e66:	07d9      	lsls	r1, r3, #31
 8005e68:	d405      	bmi.n	8005e76 <_vfiprintf_r+0x202>
 8005e6a:	89ab      	ldrh	r3, [r5, #12]
 8005e6c:	059a      	lsls	r2, r3, #22
 8005e6e:	d402      	bmi.n	8005e76 <_vfiprintf_r+0x202>
 8005e70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e72:	f7ff fdcd 	bl	8005a10 <__retarget_lock_release_recursive>
 8005e76:	89ab      	ldrh	r3, [r5, #12]
 8005e78:	065b      	lsls	r3, r3, #25
 8005e7a:	f53f af1d 	bmi.w	8005cb8 <_vfiprintf_r+0x44>
 8005e7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e80:	e71c      	b.n	8005cbc <_vfiprintf_r+0x48>
 8005e82:	ab03      	add	r3, sp, #12
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	462a      	mov	r2, r5
 8005e88:	4b05      	ldr	r3, [pc, #20]	; (8005ea0 <_vfiprintf_r+0x22c>)
 8005e8a:	a904      	add	r1, sp, #16
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	f000 f879 	bl	8005f84 <_printf_i>
 8005e92:	e7e4      	b.n	8005e5e <_vfiprintf_r+0x1ea>
 8005e94:	08006628 	.word	0x08006628
 8005e98:	08006632 	.word	0x08006632
 8005e9c:	00000000 	.word	0x00000000
 8005ea0:	08005c4f 	.word	0x08005c4f
 8005ea4:	0800662e 	.word	0x0800662e

08005ea8 <_printf_common>:
 8005ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eac:	4616      	mov	r6, r2
 8005eae:	4699      	mov	r9, r3
 8005eb0:	688a      	ldr	r2, [r1, #8]
 8005eb2:	690b      	ldr	r3, [r1, #16]
 8005eb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	bfb8      	it	lt
 8005ebc:	4613      	movlt	r3, r2
 8005ebe:	6033      	str	r3, [r6, #0]
 8005ec0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ec4:	4607      	mov	r7, r0
 8005ec6:	460c      	mov	r4, r1
 8005ec8:	b10a      	cbz	r2, 8005ece <_printf_common+0x26>
 8005eca:	3301      	adds	r3, #1
 8005ecc:	6033      	str	r3, [r6, #0]
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	0699      	lsls	r1, r3, #26
 8005ed2:	bf42      	ittt	mi
 8005ed4:	6833      	ldrmi	r3, [r6, #0]
 8005ed6:	3302      	addmi	r3, #2
 8005ed8:	6033      	strmi	r3, [r6, #0]
 8005eda:	6825      	ldr	r5, [r4, #0]
 8005edc:	f015 0506 	ands.w	r5, r5, #6
 8005ee0:	d106      	bne.n	8005ef0 <_printf_common+0x48>
 8005ee2:	f104 0a19 	add.w	sl, r4, #25
 8005ee6:	68e3      	ldr	r3, [r4, #12]
 8005ee8:	6832      	ldr	r2, [r6, #0]
 8005eea:	1a9b      	subs	r3, r3, r2
 8005eec:	42ab      	cmp	r3, r5
 8005eee:	dc26      	bgt.n	8005f3e <_printf_common+0x96>
 8005ef0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ef4:	1e13      	subs	r3, r2, #0
 8005ef6:	6822      	ldr	r2, [r4, #0]
 8005ef8:	bf18      	it	ne
 8005efa:	2301      	movne	r3, #1
 8005efc:	0692      	lsls	r2, r2, #26
 8005efe:	d42b      	bmi.n	8005f58 <_printf_common+0xb0>
 8005f00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f04:	4649      	mov	r1, r9
 8005f06:	4638      	mov	r0, r7
 8005f08:	47c0      	blx	r8
 8005f0a:	3001      	adds	r0, #1
 8005f0c:	d01e      	beq.n	8005f4c <_printf_common+0xa4>
 8005f0e:	6823      	ldr	r3, [r4, #0]
 8005f10:	6922      	ldr	r2, [r4, #16]
 8005f12:	f003 0306 	and.w	r3, r3, #6
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	bf02      	ittt	eq
 8005f1a:	68e5      	ldreq	r5, [r4, #12]
 8005f1c:	6833      	ldreq	r3, [r6, #0]
 8005f1e:	1aed      	subeq	r5, r5, r3
 8005f20:	68a3      	ldr	r3, [r4, #8]
 8005f22:	bf0c      	ite	eq
 8005f24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f28:	2500      	movne	r5, #0
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	bfc4      	itt	gt
 8005f2e:	1a9b      	subgt	r3, r3, r2
 8005f30:	18ed      	addgt	r5, r5, r3
 8005f32:	2600      	movs	r6, #0
 8005f34:	341a      	adds	r4, #26
 8005f36:	42b5      	cmp	r5, r6
 8005f38:	d11a      	bne.n	8005f70 <_printf_common+0xc8>
 8005f3a:	2000      	movs	r0, #0
 8005f3c:	e008      	b.n	8005f50 <_printf_common+0xa8>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	4652      	mov	r2, sl
 8005f42:	4649      	mov	r1, r9
 8005f44:	4638      	mov	r0, r7
 8005f46:	47c0      	blx	r8
 8005f48:	3001      	adds	r0, #1
 8005f4a:	d103      	bne.n	8005f54 <_printf_common+0xac>
 8005f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f54:	3501      	adds	r5, #1
 8005f56:	e7c6      	b.n	8005ee6 <_printf_common+0x3e>
 8005f58:	18e1      	adds	r1, r4, r3
 8005f5a:	1c5a      	adds	r2, r3, #1
 8005f5c:	2030      	movs	r0, #48	; 0x30
 8005f5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f62:	4422      	add	r2, r4
 8005f64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f6c:	3302      	adds	r3, #2
 8005f6e:	e7c7      	b.n	8005f00 <_printf_common+0x58>
 8005f70:	2301      	movs	r3, #1
 8005f72:	4622      	mov	r2, r4
 8005f74:	4649      	mov	r1, r9
 8005f76:	4638      	mov	r0, r7
 8005f78:	47c0      	blx	r8
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	d0e6      	beq.n	8005f4c <_printf_common+0xa4>
 8005f7e:	3601      	adds	r6, #1
 8005f80:	e7d9      	b.n	8005f36 <_printf_common+0x8e>
	...

08005f84 <_printf_i>:
 8005f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f88:	7e0f      	ldrb	r7, [r1, #24]
 8005f8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f8c:	2f78      	cmp	r7, #120	; 0x78
 8005f8e:	4691      	mov	r9, r2
 8005f90:	4680      	mov	r8, r0
 8005f92:	460c      	mov	r4, r1
 8005f94:	469a      	mov	sl, r3
 8005f96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f9a:	d807      	bhi.n	8005fac <_printf_i+0x28>
 8005f9c:	2f62      	cmp	r7, #98	; 0x62
 8005f9e:	d80a      	bhi.n	8005fb6 <_printf_i+0x32>
 8005fa0:	2f00      	cmp	r7, #0
 8005fa2:	f000 80d4 	beq.w	800614e <_printf_i+0x1ca>
 8005fa6:	2f58      	cmp	r7, #88	; 0x58
 8005fa8:	f000 80c0 	beq.w	800612c <_printf_i+0x1a8>
 8005fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005fb4:	e03a      	b.n	800602c <_printf_i+0xa8>
 8005fb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005fba:	2b15      	cmp	r3, #21
 8005fbc:	d8f6      	bhi.n	8005fac <_printf_i+0x28>
 8005fbe:	a101      	add	r1, pc, #4	; (adr r1, 8005fc4 <_printf_i+0x40>)
 8005fc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fc4:	0800601d 	.word	0x0800601d
 8005fc8:	08006031 	.word	0x08006031
 8005fcc:	08005fad 	.word	0x08005fad
 8005fd0:	08005fad 	.word	0x08005fad
 8005fd4:	08005fad 	.word	0x08005fad
 8005fd8:	08005fad 	.word	0x08005fad
 8005fdc:	08006031 	.word	0x08006031
 8005fe0:	08005fad 	.word	0x08005fad
 8005fe4:	08005fad 	.word	0x08005fad
 8005fe8:	08005fad 	.word	0x08005fad
 8005fec:	08005fad 	.word	0x08005fad
 8005ff0:	08006135 	.word	0x08006135
 8005ff4:	0800605d 	.word	0x0800605d
 8005ff8:	080060ef 	.word	0x080060ef
 8005ffc:	08005fad 	.word	0x08005fad
 8006000:	08005fad 	.word	0x08005fad
 8006004:	08006157 	.word	0x08006157
 8006008:	08005fad 	.word	0x08005fad
 800600c:	0800605d 	.word	0x0800605d
 8006010:	08005fad 	.word	0x08005fad
 8006014:	08005fad 	.word	0x08005fad
 8006018:	080060f7 	.word	0x080060f7
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	1d1a      	adds	r2, r3, #4
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	602a      	str	r2, [r5, #0]
 8006024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006028:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800602c:	2301      	movs	r3, #1
 800602e:	e09f      	b.n	8006170 <_printf_i+0x1ec>
 8006030:	6820      	ldr	r0, [r4, #0]
 8006032:	682b      	ldr	r3, [r5, #0]
 8006034:	0607      	lsls	r7, r0, #24
 8006036:	f103 0104 	add.w	r1, r3, #4
 800603a:	6029      	str	r1, [r5, #0]
 800603c:	d501      	bpl.n	8006042 <_printf_i+0xbe>
 800603e:	681e      	ldr	r6, [r3, #0]
 8006040:	e003      	b.n	800604a <_printf_i+0xc6>
 8006042:	0646      	lsls	r6, r0, #25
 8006044:	d5fb      	bpl.n	800603e <_printf_i+0xba>
 8006046:	f9b3 6000 	ldrsh.w	r6, [r3]
 800604a:	2e00      	cmp	r6, #0
 800604c:	da03      	bge.n	8006056 <_printf_i+0xd2>
 800604e:	232d      	movs	r3, #45	; 0x2d
 8006050:	4276      	negs	r6, r6
 8006052:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006056:	485a      	ldr	r0, [pc, #360]	; (80061c0 <_printf_i+0x23c>)
 8006058:	230a      	movs	r3, #10
 800605a:	e012      	b.n	8006082 <_printf_i+0xfe>
 800605c:	682b      	ldr	r3, [r5, #0]
 800605e:	6820      	ldr	r0, [r4, #0]
 8006060:	1d19      	adds	r1, r3, #4
 8006062:	6029      	str	r1, [r5, #0]
 8006064:	0605      	lsls	r5, r0, #24
 8006066:	d501      	bpl.n	800606c <_printf_i+0xe8>
 8006068:	681e      	ldr	r6, [r3, #0]
 800606a:	e002      	b.n	8006072 <_printf_i+0xee>
 800606c:	0641      	lsls	r1, r0, #25
 800606e:	d5fb      	bpl.n	8006068 <_printf_i+0xe4>
 8006070:	881e      	ldrh	r6, [r3, #0]
 8006072:	4853      	ldr	r0, [pc, #332]	; (80061c0 <_printf_i+0x23c>)
 8006074:	2f6f      	cmp	r7, #111	; 0x6f
 8006076:	bf0c      	ite	eq
 8006078:	2308      	moveq	r3, #8
 800607a:	230a      	movne	r3, #10
 800607c:	2100      	movs	r1, #0
 800607e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006082:	6865      	ldr	r5, [r4, #4]
 8006084:	60a5      	str	r5, [r4, #8]
 8006086:	2d00      	cmp	r5, #0
 8006088:	bfa2      	ittt	ge
 800608a:	6821      	ldrge	r1, [r4, #0]
 800608c:	f021 0104 	bicge.w	r1, r1, #4
 8006090:	6021      	strge	r1, [r4, #0]
 8006092:	b90e      	cbnz	r6, 8006098 <_printf_i+0x114>
 8006094:	2d00      	cmp	r5, #0
 8006096:	d04b      	beq.n	8006130 <_printf_i+0x1ac>
 8006098:	4615      	mov	r5, r2
 800609a:	fbb6 f1f3 	udiv	r1, r6, r3
 800609e:	fb03 6711 	mls	r7, r3, r1, r6
 80060a2:	5dc7      	ldrb	r7, [r0, r7]
 80060a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80060a8:	4637      	mov	r7, r6
 80060aa:	42bb      	cmp	r3, r7
 80060ac:	460e      	mov	r6, r1
 80060ae:	d9f4      	bls.n	800609a <_printf_i+0x116>
 80060b0:	2b08      	cmp	r3, #8
 80060b2:	d10b      	bne.n	80060cc <_printf_i+0x148>
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	07de      	lsls	r6, r3, #31
 80060b8:	d508      	bpl.n	80060cc <_printf_i+0x148>
 80060ba:	6923      	ldr	r3, [r4, #16]
 80060bc:	6861      	ldr	r1, [r4, #4]
 80060be:	4299      	cmp	r1, r3
 80060c0:	bfde      	ittt	le
 80060c2:	2330      	movle	r3, #48	; 0x30
 80060c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80060cc:	1b52      	subs	r2, r2, r5
 80060ce:	6122      	str	r2, [r4, #16]
 80060d0:	f8cd a000 	str.w	sl, [sp]
 80060d4:	464b      	mov	r3, r9
 80060d6:	aa03      	add	r2, sp, #12
 80060d8:	4621      	mov	r1, r4
 80060da:	4640      	mov	r0, r8
 80060dc:	f7ff fee4 	bl	8005ea8 <_printf_common>
 80060e0:	3001      	adds	r0, #1
 80060e2:	d14a      	bne.n	800617a <_printf_i+0x1f6>
 80060e4:	f04f 30ff 	mov.w	r0, #4294967295
 80060e8:	b004      	add	sp, #16
 80060ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	f043 0320 	orr.w	r3, r3, #32
 80060f4:	6023      	str	r3, [r4, #0]
 80060f6:	4833      	ldr	r0, [pc, #204]	; (80061c4 <_printf_i+0x240>)
 80060f8:	2778      	movs	r7, #120	; 0x78
 80060fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	6829      	ldr	r1, [r5, #0]
 8006102:	061f      	lsls	r7, r3, #24
 8006104:	f851 6b04 	ldr.w	r6, [r1], #4
 8006108:	d402      	bmi.n	8006110 <_printf_i+0x18c>
 800610a:	065f      	lsls	r7, r3, #25
 800610c:	bf48      	it	mi
 800610e:	b2b6      	uxthmi	r6, r6
 8006110:	07df      	lsls	r7, r3, #31
 8006112:	bf48      	it	mi
 8006114:	f043 0320 	orrmi.w	r3, r3, #32
 8006118:	6029      	str	r1, [r5, #0]
 800611a:	bf48      	it	mi
 800611c:	6023      	strmi	r3, [r4, #0]
 800611e:	b91e      	cbnz	r6, 8006128 <_printf_i+0x1a4>
 8006120:	6823      	ldr	r3, [r4, #0]
 8006122:	f023 0320 	bic.w	r3, r3, #32
 8006126:	6023      	str	r3, [r4, #0]
 8006128:	2310      	movs	r3, #16
 800612a:	e7a7      	b.n	800607c <_printf_i+0xf8>
 800612c:	4824      	ldr	r0, [pc, #144]	; (80061c0 <_printf_i+0x23c>)
 800612e:	e7e4      	b.n	80060fa <_printf_i+0x176>
 8006130:	4615      	mov	r5, r2
 8006132:	e7bd      	b.n	80060b0 <_printf_i+0x12c>
 8006134:	682b      	ldr	r3, [r5, #0]
 8006136:	6826      	ldr	r6, [r4, #0]
 8006138:	6961      	ldr	r1, [r4, #20]
 800613a:	1d18      	adds	r0, r3, #4
 800613c:	6028      	str	r0, [r5, #0]
 800613e:	0635      	lsls	r5, r6, #24
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	d501      	bpl.n	8006148 <_printf_i+0x1c4>
 8006144:	6019      	str	r1, [r3, #0]
 8006146:	e002      	b.n	800614e <_printf_i+0x1ca>
 8006148:	0670      	lsls	r0, r6, #25
 800614a:	d5fb      	bpl.n	8006144 <_printf_i+0x1c0>
 800614c:	8019      	strh	r1, [r3, #0]
 800614e:	2300      	movs	r3, #0
 8006150:	6123      	str	r3, [r4, #16]
 8006152:	4615      	mov	r5, r2
 8006154:	e7bc      	b.n	80060d0 <_printf_i+0x14c>
 8006156:	682b      	ldr	r3, [r5, #0]
 8006158:	1d1a      	adds	r2, r3, #4
 800615a:	602a      	str	r2, [r5, #0]
 800615c:	681d      	ldr	r5, [r3, #0]
 800615e:	6862      	ldr	r2, [r4, #4]
 8006160:	2100      	movs	r1, #0
 8006162:	4628      	mov	r0, r5
 8006164:	f7fa f834 	bl	80001d0 <memchr>
 8006168:	b108      	cbz	r0, 800616e <_printf_i+0x1ea>
 800616a:	1b40      	subs	r0, r0, r5
 800616c:	6060      	str	r0, [r4, #4]
 800616e:	6863      	ldr	r3, [r4, #4]
 8006170:	6123      	str	r3, [r4, #16]
 8006172:	2300      	movs	r3, #0
 8006174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006178:	e7aa      	b.n	80060d0 <_printf_i+0x14c>
 800617a:	6923      	ldr	r3, [r4, #16]
 800617c:	462a      	mov	r2, r5
 800617e:	4649      	mov	r1, r9
 8006180:	4640      	mov	r0, r8
 8006182:	47d0      	blx	sl
 8006184:	3001      	adds	r0, #1
 8006186:	d0ad      	beq.n	80060e4 <_printf_i+0x160>
 8006188:	6823      	ldr	r3, [r4, #0]
 800618a:	079b      	lsls	r3, r3, #30
 800618c:	d413      	bmi.n	80061b6 <_printf_i+0x232>
 800618e:	68e0      	ldr	r0, [r4, #12]
 8006190:	9b03      	ldr	r3, [sp, #12]
 8006192:	4298      	cmp	r0, r3
 8006194:	bfb8      	it	lt
 8006196:	4618      	movlt	r0, r3
 8006198:	e7a6      	b.n	80060e8 <_printf_i+0x164>
 800619a:	2301      	movs	r3, #1
 800619c:	4632      	mov	r2, r6
 800619e:	4649      	mov	r1, r9
 80061a0:	4640      	mov	r0, r8
 80061a2:	47d0      	blx	sl
 80061a4:	3001      	adds	r0, #1
 80061a6:	d09d      	beq.n	80060e4 <_printf_i+0x160>
 80061a8:	3501      	adds	r5, #1
 80061aa:	68e3      	ldr	r3, [r4, #12]
 80061ac:	9903      	ldr	r1, [sp, #12]
 80061ae:	1a5b      	subs	r3, r3, r1
 80061b0:	42ab      	cmp	r3, r5
 80061b2:	dcf2      	bgt.n	800619a <_printf_i+0x216>
 80061b4:	e7eb      	b.n	800618e <_printf_i+0x20a>
 80061b6:	2500      	movs	r5, #0
 80061b8:	f104 0619 	add.w	r6, r4, #25
 80061bc:	e7f5      	b.n	80061aa <_printf_i+0x226>
 80061be:	bf00      	nop
 80061c0:	08006639 	.word	0x08006639
 80061c4:	0800664a 	.word	0x0800664a

080061c8 <__sflush_r>:
 80061c8:	898a      	ldrh	r2, [r1, #12]
 80061ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ce:	4605      	mov	r5, r0
 80061d0:	0710      	lsls	r0, r2, #28
 80061d2:	460c      	mov	r4, r1
 80061d4:	d458      	bmi.n	8006288 <__sflush_r+0xc0>
 80061d6:	684b      	ldr	r3, [r1, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	dc05      	bgt.n	80061e8 <__sflush_r+0x20>
 80061dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80061de:	2b00      	cmp	r3, #0
 80061e0:	dc02      	bgt.n	80061e8 <__sflush_r+0x20>
 80061e2:	2000      	movs	r0, #0
 80061e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061ea:	2e00      	cmp	r6, #0
 80061ec:	d0f9      	beq.n	80061e2 <__sflush_r+0x1a>
 80061ee:	2300      	movs	r3, #0
 80061f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80061f4:	682f      	ldr	r7, [r5, #0]
 80061f6:	6a21      	ldr	r1, [r4, #32]
 80061f8:	602b      	str	r3, [r5, #0]
 80061fa:	d032      	beq.n	8006262 <__sflush_r+0x9a>
 80061fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80061fe:	89a3      	ldrh	r3, [r4, #12]
 8006200:	075a      	lsls	r2, r3, #29
 8006202:	d505      	bpl.n	8006210 <__sflush_r+0x48>
 8006204:	6863      	ldr	r3, [r4, #4]
 8006206:	1ac0      	subs	r0, r0, r3
 8006208:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800620a:	b10b      	cbz	r3, 8006210 <__sflush_r+0x48>
 800620c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800620e:	1ac0      	subs	r0, r0, r3
 8006210:	2300      	movs	r3, #0
 8006212:	4602      	mov	r2, r0
 8006214:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006216:	6a21      	ldr	r1, [r4, #32]
 8006218:	4628      	mov	r0, r5
 800621a:	47b0      	blx	r6
 800621c:	1c43      	adds	r3, r0, #1
 800621e:	89a3      	ldrh	r3, [r4, #12]
 8006220:	d106      	bne.n	8006230 <__sflush_r+0x68>
 8006222:	6829      	ldr	r1, [r5, #0]
 8006224:	291d      	cmp	r1, #29
 8006226:	d82b      	bhi.n	8006280 <__sflush_r+0xb8>
 8006228:	4a29      	ldr	r2, [pc, #164]	; (80062d0 <__sflush_r+0x108>)
 800622a:	410a      	asrs	r2, r1
 800622c:	07d6      	lsls	r6, r2, #31
 800622e:	d427      	bmi.n	8006280 <__sflush_r+0xb8>
 8006230:	2200      	movs	r2, #0
 8006232:	6062      	str	r2, [r4, #4]
 8006234:	04d9      	lsls	r1, r3, #19
 8006236:	6922      	ldr	r2, [r4, #16]
 8006238:	6022      	str	r2, [r4, #0]
 800623a:	d504      	bpl.n	8006246 <__sflush_r+0x7e>
 800623c:	1c42      	adds	r2, r0, #1
 800623e:	d101      	bne.n	8006244 <__sflush_r+0x7c>
 8006240:	682b      	ldr	r3, [r5, #0]
 8006242:	b903      	cbnz	r3, 8006246 <__sflush_r+0x7e>
 8006244:	6560      	str	r0, [r4, #84]	; 0x54
 8006246:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006248:	602f      	str	r7, [r5, #0]
 800624a:	2900      	cmp	r1, #0
 800624c:	d0c9      	beq.n	80061e2 <__sflush_r+0x1a>
 800624e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006252:	4299      	cmp	r1, r3
 8006254:	d002      	beq.n	800625c <__sflush_r+0x94>
 8006256:	4628      	mov	r0, r5
 8006258:	f7ff fbea 	bl	8005a30 <_free_r>
 800625c:	2000      	movs	r0, #0
 800625e:	6360      	str	r0, [r4, #52]	; 0x34
 8006260:	e7c0      	b.n	80061e4 <__sflush_r+0x1c>
 8006262:	2301      	movs	r3, #1
 8006264:	4628      	mov	r0, r5
 8006266:	47b0      	blx	r6
 8006268:	1c41      	adds	r1, r0, #1
 800626a:	d1c8      	bne.n	80061fe <__sflush_r+0x36>
 800626c:	682b      	ldr	r3, [r5, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d0c5      	beq.n	80061fe <__sflush_r+0x36>
 8006272:	2b1d      	cmp	r3, #29
 8006274:	d001      	beq.n	800627a <__sflush_r+0xb2>
 8006276:	2b16      	cmp	r3, #22
 8006278:	d101      	bne.n	800627e <__sflush_r+0xb6>
 800627a:	602f      	str	r7, [r5, #0]
 800627c:	e7b1      	b.n	80061e2 <__sflush_r+0x1a>
 800627e:	89a3      	ldrh	r3, [r4, #12]
 8006280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006284:	81a3      	strh	r3, [r4, #12]
 8006286:	e7ad      	b.n	80061e4 <__sflush_r+0x1c>
 8006288:	690f      	ldr	r7, [r1, #16]
 800628a:	2f00      	cmp	r7, #0
 800628c:	d0a9      	beq.n	80061e2 <__sflush_r+0x1a>
 800628e:	0793      	lsls	r3, r2, #30
 8006290:	680e      	ldr	r6, [r1, #0]
 8006292:	bf08      	it	eq
 8006294:	694b      	ldreq	r3, [r1, #20]
 8006296:	600f      	str	r7, [r1, #0]
 8006298:	bf18      	it	ne
 800629a:	2300      	movne	r3, #0
 800629c:	eba6 0807 	sub.w	r8, r6, r7
 80062a0:	608b      	str	r3, [r1, #8]
 80062a2:	f1b8 0f00 	cmp.w	r8, #0
 80062a6:	dd9c      	ble.n	80061e2 <__sflush_r+0x1a>
 80062a8:	6a21      	ldr	r1, [r4, #32]
 80062aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80062ac:	4643      	mov	r3, r8
 80062ae:	463a      	mov	r2, r7
 80062b0:	4628      	mov	r0, r5
 80062b2:	47b0      	blx	r6
 80062b4:	2800      	cmp	r0, #0
 80062b6:	dc06      	bgt.n	80062c6 <__sflush_r+0xfe>
 80062b8:	89a3      	ldrh	r3, [r4, #12]
 80062ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062be:	81a3      	strh	r3, [r4, #12]
 80062c0:	f04f 30ff 	mov.w	r0, #4294967295
 80062c4:	e78e      	b.n	80061e4 <__sflush_r+0x1c>
 80062c6:	4407      	add	r7, r0
 80062c8:	eba8 0800 	sub.w	r8, r8, r0
 80062cc:	e7e9      	b.n	80062a2 <__sflush_r+0xda>
 80062ce:	bf00      	nop
 80062d0:	dfbffffe 	.word	0xdfbffffe

080062d4 <_fflush_r>:
 80062d4:	b538      	push	{r3, r4, r5, lr}
 80062d6:	690b      	ldr	r3, [r1, #16]
 80062d8:	4605      	mov	r5, r0
 80062da:	460c      	mov	r4, r1
 80062dc:	b913      	cbnz	r3, 80062e4 <_fflush_r+0x10>
 80062de:	2500      	movs	r5, #0
 80062e0:	4628      	mov	r0, r5
 80062e2:	bd38      	pop	{r3, r4, r5, pc}
 80062e4:	b118      	cbz	r0, 80062ee <_fflush_r+0x1a>
 80062e6:	6a03      	ldr	r3, [r0, #32]
 80062e8:	b90b      	cbnz	r3, 80062ee <_fflush_r+0x1a>
 80062ea:	f7ff fa8b 	bl	8005804 <__sinit>
 80062ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d0f3      	beq.n	80062de <_fflush_r+0xa>
 80062f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80062f8:	07d0      	lsls	r0, r2, #31
 80062fa:	d404      	bmi.n	8006306 <_fflush_r+0x32>
 80062fc:	0599      	lsls	r1, r3, #22
 80062fe:	d402      	bmi.n	8006306 <_fflush_r+0x32>
 8006300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006302:	f7ff fb84 	bl	8005a0e <__retarget_lock_acquire_recursive>
 8006306:	4628      	mov	r0, r5
 8006308:	4621      	mov	r1, r4
 800630a:	f7ff ff5d 	bl	80061c8 <__sflush_r>
 800630e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006310:	07da      	lsls	r2, r3, #31
 8006312:	4605      	mov	r5, r0
 8006314:	d4e4      	bmi.n	80062e0 <_fflush_r+0xc>
 8006316:	89a3      	ldrh	r3, [r4, #12]
 8006318:	059b      	lsls	r3, r3, #22
 800631a:	d4e1      	bmi.n	80062e0 <_fflush_r+0xc>
 800631c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800631e:	f7ff fb77 	bl	8005a10 <__retarget_lock_release_recursive>
 8006322:	e7dd      	b.n	80062e0 <_fflush_r+0xc>

08006324 <__swbuf_r>:
 8006324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006326:	460e      	mov	r6, r1
 8006328:	4614      	mov	r4, r2
 800632a:	4605      	mov	r5, r0
 800632c:	b118      	cbz	r0, 8006336 <__swbuf_r+0x12>
 800632e:	6a03      	ldr	r3, [r0, #32]
 8006330:	b90b      	cbnz	r3, 8006336 <__swbuf_r+0x12>
 8006332:	f7ff fa67 	bl	8005804 <__sinit>
 8006336:	69a3      	ldr	r3, [r4, #24]
 8006338:	60a3      	str	r3, [r4, #8]
 800633a:	89a3      	ldrh	r3, [r4, #12]
 800633c:	071a      	lsls	r2, r3, #28
 800633e:	d525      	bpl.n	800638c <__swbuf_r+0x68>
 8006340:	6923      	ldr	r3, [r4, #16]
 8006342:	b31b      	cbz	r3, 800638c <__swbuf_r+0x68>
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	6922      	ldr	r2, [r4, #16]
 8006348:	1a98      	subs	r0, r3, r2
 800634a:	6963      	ldr	r3, [r4, #20]
 800634c:	b2f6      	uxtb	r6, r6
 800634e:	4283      	cmp	r3, r0
 8006350:	4637      	mov	r7, r6
 8006352:	dc04      	bgt.n	800635e <__swbuf_r+0x3a>
 8006354:	4621      	mov	r1, r4
 8006356:	4628      	mov	r0, r5
 8006358:	f7ff ffbc 	bl	80062d4 <_fflush_r>
 800635c:	b9e0      	cbnz	r0, 8006398 <__swbuf_r+0x74>
 800635e:	68a3      	ldr	r3, [r4, #8]
 8006360:	3b01      	subs	r3, #1
 8006362:	60a3      	str	r3, [r4, #8]
 8006364:	6823      	ldr	r3, [r4, #0]
 8006366:	1c5a      	adds	r2, r3, #1
 8006368:	6022      	str	r2, [r4, #0]
 800636a:	701e      	strb	r6, [r3, #0]
 800636c:	6962      	ldr	r2, [r4, #20]
 800636e:	1c43      	adds	r3, r0, #1
 8006370:	429a      	cmp	r2, r3
 8006372:	d004      	beq.n	800637e <__swbuf_r+0x5a>
 8006374:	89a3      	ldrh	r3, [r4, #12]
 8006376:	07db      	lsls	r3, r3, #31
 8006378:	d506      	bpl.n	8006388 <__swbuf_r+0x64>
 800637a:	2e0a      	cmp	r6, #10
 800637c:	d104      	bne.n	8006388 <__swbuf_r+0x64>
 800637e:	4621      	mov	r1, r4
 8006380:	4628      	mov	r0, r5
 8006382:	f7ff ffa7 	bl	80062d4 <_fflush_r>
 8006386:	b938      	cbnz	r0, 8006398 <__swbuf_r+0x74>
 8006388:	4638      	mov	r0, r7
 800638a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800638c:	4621      	mov	r1, r4
 800638e:	4628      	mov	r0, r5
 8006390:	f000 f806 	bl	80063a0 <__swsetup_r>
 8006394:	2800      	cmp	r0, #0
 8006396:	d0d5      	beq.n	8006344 <__swbuf_r+0x20>
 8006398:	f04f 37ff 	mov.w	r7, #4294967295
 800639c:	e7f4      	b.n	8006388 <__swbuf_r+0x64>
	...

080063a0 <__swsetup_r>:
 80063a0:	b538      	push	{r3, r4, r5, lr}
 80063a2:	4b2a      	ldr	r3, [pc, #168]	; (800644c <__swsetup_r+0xac>)
 80063a4:	4605      	mov	r5, r0
 80063a6:	6818      	ldr	r0, [r3, #0]
 80063a8:	460c      	mov	r4, r1
 80063aa:	b118      	cbz	r0, 80063b4 <__swsetup_r+0x14>
 80063ac:	6a03      	ldr	r3, [r0, #32]
 80063ae:	b90b      	cbnz	r3, 80063b4 <__swsetup_r+0x14>
 80063b0:	f7ff fa28 	bl	8005804 <__sinit>
 80063b4:	89a3      	ldrh	r3, [r4, #12]
 80063b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063ba:	0718      	lsls	r0, r3, #28
 80063bc:	d422      	bmi.n	8006404 <__swsetup_r+0x64>
 80063be:	06d9      	lsls	r1, r3, #27
 80063c0:	d407      	bmi.n	80063d2 <__swsetup_r+0x32>
 80063c2:	2309      	movs	r3, #9
 80063c4:	602b      	str	r3, [r5, #0]
 80063c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80063ca:	81a3      	strh	r3, [r4, #12]
 80063cc:	f04f 30ff 	mov.w	r0, #4294967295
 80063d0:	e034      	b.n	800643c <__swsetup_r+0x9c>
 80063d2:	0758      	lsls	r0, r3, #29
 80063d4:	d512      	bpl.n	80063fc <__swsetup_r+0x5c>
 80063d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063d8:	b141      	cbz	r1, 80063ec <__swsetup_r+0x4c>
 80063da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063de:	4299      	cmp	r1, r3
 80063e0:	d002      	beq.n	80063e8 <__swsetup_r+0x48>
 80063e2:	4628      	mov	r0, r5
 80063e4:	f7ff fb24 	bl	8005a30 <_free_r>
 80063e8:	2300      	movs	r3, #0
 80063ea:	6363      	str	r3, [r4, #52]	; 0x34
 80063ec:	89a3      	ldrh	r3, [r4, #12]
 80063ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063f2:	81a3      	strh	r3, [r4, #12]
 80063f4:	2300      	movs	r3, #0
 80063f6:	6063      	str	r3, [r4, #4]
 80063f8:	6923      	ldr	r3, [r4, #16]
 80063fa:	6023      	str	r3, [r4, #0]
 80063fc:	89a3      	ldrh	r3, [r4, #12]
 80063fe:	f043 0308 	orr.w	r3, r3, #8
 8006402:	81a3      	strh	r3, [r4, #12]
 8006404:	6923      	ldr	r3, [r4, #16]
 8006406:	b94b      	cbnz	r3, 800641c <__swsetup_r+0x7c>
 8006408:	89a3      	ldrh	r3, [r4, #12]
 800640a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800640e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006412:	d003      	beq.n	800641c <__swsetup_r+0x7c>
 8006414:	4621      	mov	r1, r4
 8006416:	4628      	mov	r0, r5
 8006418:	f000 f850 	bl	80064bc <__smakebuf_r>
 800641c:	89a0      	ldrh	r0, [r4, #12]
 800641e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006422:	f010 0301 	ands.w	r3, r0, #1
 8006426:	d00a      	beq.n	800643e <__swsetup_r+0x9e>
 8006428:	2300      	movs	r3, #0
 800642a:	60a3      	str	r3, [r4, #8]
 800642c:	6963      	ldr	r3, [r4, #20]
 800642e:	425b      	negs	r3, r3
 8006430:	61a3      	str	r3, [r4, #24]
 8006432:	6923      	ldr	r3, [r4, #16]
 8006434:	b943      	cbnz	r3, 8006448 <__swsetup_r+0xa8>
 8006436:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800643a:	d1c4      	bne.n	80063c6 <__swsetup_r+0x26>
 800643c:	bd38      	pop	{r3, r4, r5, pc}
 800643e:	0781      	lsls	r1, r0, #30
 8006440:	bf58      	it	pl
 8006442:	6963      	ldrpl	r3, [r4, #20]
 8006444:	60a3      	str	r3, [r4, #8]
 8006446:	e7f4      	b.n	8006432 <__swsetup_r+0x92>
 8006448:	2000      	movs	r0, #0
 800644a:	e7f7      	b.n	800643c <__swsetup_r+0x9c>
 800644c:	20000068 	.word	0x20000068

08006450 <_sbrk_r>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	4d06      	ldr	r5, [pc, #24]	; (800646c <_sbrk_r+0x1c>)
 8006454:	2300      	movs	r3, #0
 8006456:	4604      	mov	r4, r0
 8006458:	4608      	mov	r0, r1
 800645a:	602b      	str	r3, [r5, #0]
 800645c:	f7fa fb88 	bl	8000b70 <_sbrk>
 8006460:	1c43      	adds	r3, r0, #1
 8006462:	d102      	bne.n	800646a <_sbrk_r+0x1a>
 8006464:	682b      	ldr	r3, [r5, #0]
 8006466:	b103      	cbz	r3, 800646a <_sbrk_r+0x1a>
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	bd38      	pop	{r3, r4, r5, pc}
 800646c:	20004210 	.word	0x20004210

08006470 <__swhatbuf_r>:
 8006470:	b570      	push	{r4, r5, r6, lr}
 8006472:	460c      	mov	r4, r1
 8006474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006478:	2900      	cmp	r1, #0
 800647a:	b096      	sub	sp, #88	; 0x58
 800647c:	4615      	mov	r5, r2
 800647e:	461e      	mov	r6, r3
 8006480:	da0d      	bge.n	800649e <__swhatbuf_r+0x2e>
 8006482:	89a3      	ldrh	r3, [r4, #12]
 8006484:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006488:	f04f 0100 	mov.w	r1, #0
 800648c:	bf0c      	ite	eq
 800648e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006492:	2340      	movne	r3, #64	; 0x40
 8006494:	2000      	movs	r0, #0
 8006496:	6031      	str	r1, [r6, #0]
 8006498:	602b      	str	r3, [r5, #0]
 800649a:	b016      	add	sp, #88	; 0x58
 800649c:	bd70      	pop	{r4, r5, r6, pc}
 800649e:	466a      	mov	r2, sp
 80064a0:	f000 f848 	bl	8006534 <_fstat_r>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	dbec      	blt.n	8006482 <__swhatbuf_r+0x12>
 80064a8:	9901      	ldr	r1, [sp, #4]
 80064aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80064ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80064b2:	4259      	negs	r1, r3
 80064b4:	4159      	adcs	r1, r3
 80064b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064ba:	e7eb      	b.n	8006494 <__swhatbuf_r+0x24>

080064bc <__smakebuf_r>:
 80064bc:	898b      	ldrh	r3, [r1, #12]
 80064be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80064c0:	079d      	lsls	r5, r3, #30
 80064c2:	4606      	mov	r6, r0
 80064c4:	460c      	mov	r4, r1
 80064c6:	d507      	bpl.n	80064d8 <__smakebuf_r+0x1c>
 80064c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80064cc:	6023      	str	r3, [r4, #0]
 80064ce:	6123      	str	r3, [r4, #16]
 80064d0:	2301      	movs	r3, #1
 80064d2:	6163      	str	r3, [r4, #20]
 80064d4:	b002      	add	sp, #8
 80064d6:	bd70      	pop	{r4, r5, r6, pc}
 80064d8:	ab01      	add	r3, sp, #4
 80064da:	466a      	mov	r2, sp
 80064dc:	f7ff ffc8 	bl	8006470 <__swhatbuf_r>
 80064e0:	9900      	ldr	r1, [sp, #0]
 80064e2:	4605      	mov	r5, r0
 80064e4:	4630      	mov	r0, r6
 80064e6:	f7ff fb0f 	bl	8005b08 <_malloc_r>
 80064ea:	b948      	cbnz	r0, 8006500 <__smakebuf_r+0x44>
 80064ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064f0:	059a      	lsls	r2, r3, #22
 80064f2:	d4ef      	bmi.n	80064d4 <__smakebuf_r+0x18>
 80064f4:	f023 0303 	bic.w	r3, r3, #3
 80064f8:	f043 0302 	orr.w	r3, r3, #2
 80064fc:	81a3      	strh	r3, [r4, #12]
 80064fe:	e7e3      	b.n	80064c8 <__smakebuf_r+0xc>
 8006500:	89a3      	ldrh	r3, [r4, #12]
 8006502:	6020      	str	r0, [r4, #0]
 8006504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006508:	81a3      	strh	r3, [r4, #12]
 800650a:	9b00      	ldr	r3, [sp, #0]
 800650c:	6163      	str	r3, [r4, #20]
 800650e:	9b01      	ldr	r3, [sp, #4]
 8006510:	6120      	str	r0, [r4, #16]
 8006512:	b15b      	cbz	r3, 800652c <__smakebuf_r+0x70>
 8006514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006518:	4630      	mov	r0, r6
 800651a:	f000 f81d 	bl	8006558 <_isatty_r>
 800651e:	b128      	cbz	r0, 800652c <__smakebuf_r+0x70>
 8006520:	89a3      	ldrh	r3, [r4, #12]
 8006522:	f023 0303 	bic.w	r3, r3, #3
 8006526:	f043 0301 	orr.w	r3, r3, #1
 800652a:	81a3      	strh	r3, [r4, #12]
 800652c:	89a3      	ldrh	r3, [r4, #12]
 800652e:	431d      	orrs	r5, r3
 8006530:	81a5      	strh	r5, [r4, #12]
 8006532:	e7cf      	b.n	80064d4 <__smakebuf_r+0x18>

08006534 <_fstat_r>:
 8006534:	b538      	push	{r3, r4, r5, lr}
 8006536:	4d07      	ldr	r5, [pc, #28]	; (8006554 <_fstat_r+0x20>)
 8006538:	2300      	movs	r3, #0
 800653a:	4604      	mov	r4, r0
 800653c:	4608      	mov	r0, r1
 800653e:	4611      	mov	r1, r2
 8006540:	602b      	str	r3, [r5, #0]
 8006542:	f7fa faec 	bl	8000b1e <_fstat>
 8006546:	1c43      	adds	r3, r0, #1
 8006548:	d102      	bne.n	8006550 <_fstat_r+0x1c>
 800654a:	682b      	ldr	r3, [r5, #0]
 800654c:	b103      	cbz	r3, 8006550 <_fstat_r+0x1c>
 800654e:	6023      	str	r3, [r4, #0]
 8006550:	bd38      	pop	{r3, r4, r5, pc}
 8006552:	bf00      	nop
 8006554:	20004210 	.word	0x20004210

08006558 <_isatty_r>:
 8006558:	b538      	push	{r3, r4, r5, lr}
 800655a:	4d06      	ldr	r5, [pc, #24]	; (8006574 <_isatty_r+0x1c>)
 800655c:	2300      	movs	r3, #0
 800655e:	4604      	mov	r4, r0
 8006560:	4608      	mov	r0, r1
 8006562:	602b      	str	r3, [r5, #0]
 8006564:	f7fa faeb 	bl	8000b3e <_isatty>
 8006568:	1c43      	adds	r3, r0, #1
 800656a:	d102      	bne.n	8006572 <_isatty_r+0x1a>
 800656c:	682b      	ldr	r3, [r5, #0]
 800656e:	b103      	cbz	r3, 8006572 <_isatty_r+0x1a>
 8006570:	6023      	str	r3, [r4, #0]
 8006572:	bd38      	pop	{r3, r4, r5, pc}
 8006574:	20004210 	.word	0x20004210

08006578 <_init>:
 8006578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657a:	bf00      	nop
 800657c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800657e:	bc08      	pop	{r3}
 8006580:	469e      	mov	lr, r3
 8006582:	4770      	bx	lr

08006584 <_fini>:
 8006584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006586:	bf00      	nop
 8006588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800658a:	bc08      	pop	{r3}
 800658c:	469e      	mov	lr, r3
 800658e:	4770      	bx	lr
