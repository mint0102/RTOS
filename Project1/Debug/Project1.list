
Project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800453c  0800453c  0001453c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045d0  080045d0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080045d0  080045d0  000145d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045d8  080045d8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045d8  080045d8  000145d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045dc  080045dc  000145dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080045e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004060  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004070  20004070  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   000121b4  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002d95  00000000  00000000  00032237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001128  00000000  00000000  00034fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d4d  00000000  00000000  000360f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002226b  00000000  00000000  00036e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000151eb  00000000  00000000  000590b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d3288  00000000  00000000  0006e29b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000046c4  00000000  00000000  00141524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  00145be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004524 	.word	0x08004524

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004524 	.word	0x08004524

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <vApplicationGetIdleTaskMemory+0x30>)
 80004f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000034 	.word	0x20000034
 800050c:	20000088 	.word	0x20000088

08000510 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000510:	b5b0      	push	{r4, r5, r7, lr}
 8000512:	b08e      	sub	sp, #56	; 0x38
 8000514:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000516:	4b14      	ldr	r3, [pc, #80]	; (8000568 <MX_FREERTOS_Init+0x58>)
 8000518:	f107 041c 	add.w	r4, r7, #28
 800051c:	461d      	mov	r5, r3
 800051e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000522:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000526:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800052a:	f107 031c 	add.w	r3, r7, #28
 800052e:	2100      	movs	r1, #0
 8000530:	4618      	mov	r0, r3
 8000532:	f002 fd9e 	bl	8003072 <osThreadCreate>
 8000536:	4603      	mov	r3, r0
 8000538:	4a0c      	ldr	r2, [pc, #48]	; (800056c <MX_FREERTOS_Init+0x5c>)
 800053a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <MX_FREERTOS_Init+0x60>)
 800053e:	463c      	mov	r4, r7
 8000540:	461d      	mov	r5, r3
 8000542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000546:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800054a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800054e:	463b      	mov	r3, r7
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f002 fd8d 	bl	8003072 <osThreadCreate>
 8000558:	4603      	mov	r3, r0
 800055a:	4a06      	ldr	r2, [pc, #24]	; (8000574 <MX_FREERTOS_Init+0x64>)
 800055c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800055e:	bf00      	nop
 8000560:	3738      	adds	r7, #56	; 0x38
 8000562:	46bd      	mov	sp, r7
 8000564:	bdb0      	pop	{r4, r5, r7, pc}
 8000566:	bf00      	nop
 8000568:	08004548 	.word	0x08004548
 800056c:	2000002c 	.word	0x2000002c
 8000570:	08004570 	.word	0x08004570
 8000574:	20000030 	.word	0x20000030

08000578 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000580:	2001      	movs	r0, #1
 8000582:	f002 fdc2 	bl	800310a <osDelay>
 8000586:	e7fb      	b.n	8000580 <StartDefaultTask+0x8>

08000588 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	stm32_log("The first RTOS project with STM32!");
 8000590:	4805      	ldr	r0, [pc, #20]	; (80005a8 <StartTask02+0x20>)
 8000592:	f000 f841 	bl	8000618 <stm32_log>
	HAL_Delay(1000);
 8000596:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059a:	f000 faa9 	bl	8000af0 <HAL_Delay>
    osDelay(1);
 800059e:	2001      	movs	r0, #1
 80005a0:	f002 fdb3 	bl	800310a <osDelay>
  {
 80005a4:	e7f4      	b.n	8000590 <StartTask02+0x8>
 80005a6:	bf00      	nop
 80005a8:	0800458c 	.word	0x0800458c

080005ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	4b17      	ldr	r3, [pc, #92]	; (8000614 <MX_GPIO_Init+0x68>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a16      	ldr	r2, [pc, #88]	; (8000614 <MX_GPIO_Init+0x68>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4b14      	ldr	r3, [pc, #80]	; (8000614 <MX_GPIO_Init+0x68>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	4b10      	ldr	r3, [pc, #64]	; (8000614 <MX_GPIO_Init+0x68>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4a0f      	ldr	r2, [pc, #60]	; (8000614 <MX_GPIO_Init+0x68>)
 80005d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <MX_GPIO_Init+0x68>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <MX_GPIO_Init+0x68>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a08      	ldr	r2, [pc, #32]	; (8000614 <MX_GPIO_Init+0x68>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <MX_GPIO_Init+0x68>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]

}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800

08000618 <stm32_log>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void stm32_log(char *s){
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)s, strlen(s), 10);
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f7ff fdd5 	bl	80001d0 <strlen>
 8000626:	4603      	mov	r3, r0
 8000628:	b29a      	uxth	r2, r3
 800062a:	230a      	movs	r3, #10
 800062c:	6879      	ldr	r1, [r7, #4]
 800062e:	4803      	ldr	r0, [pc, #12]	; (800063c <stm32_log+0x24>)
 8000630:	f001 fd4e 	bl	80020d0 <HAL_UART_Transmit>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200002d0 	.word	0x200002d0

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fa12 	bl	8000a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f80a 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f7ff ffae 	bl	80005ac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000650:	f000 f968 	bl	8000924 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000654:	f7ff ff5c 	bl	8000510 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000658:	f002 fd04 	bl	8003064 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065c:	e7fe      	b.n	800065c <main+0x1c>
	...

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	; 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f003 ff2c 	bl	80044cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b28      	ldr	r3, [pc, #160]	; (800072c <SystemClock_Config+0xcc>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a27      	ldr	r2, [pc, #156]	; (800072c <SystemClock_Config+0xcc>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b25      	ldr	r3, [pc, #148]	; (800072c <SystemClock_Config+0xcc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <SystemClock_Config+0xd0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a21      	ldr	r2, [pc, #132]	; (8000730 <SystemClock_Config+0xd0>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <SystemClock_Config+0xd0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d0:	2308      	movs	r3, #8
 80006d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006d4:	23a8      	movs	r3, #168	; 0xa8
 80006d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006dc:	2304      	movs	r3, #4
 80006de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 fd37 	bl	8001158 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f0:	f000 f82f 	bl	8000752 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	2302      	movs	r3, #2
 80006fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000700:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2105      	movs	r1, #5
 8000712:	4618      	mov	r0, r3
 8000714:	f000 ff98 	bl	8001648 <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800071e:	f000 f818 	bl	8000752 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3750      	adds	r7, #80	; 0x50
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000744:	d101      	bne.n	800074a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000746:	f000 f9b3 	bl	8000ab0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000756:	b672      	cpsid	i
}
 8000758:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075a:	e7fe      	b.n	800075a <Error_Handler+0x8>

0800075c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <HAL_MspInit+0x54>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076a:	4a11      	ldr	r2, [pc, #68]	; (80007b0 <HAL_MspInit+0x54>)
 800076c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000770:	6453      	str	r3, [r2, #68]	; 0x44
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <HAL_MspInit+0x54>)
 8000774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <HAL_MspInit+0x54>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <HAL_MspInit+0x54>)
 8000788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078c:	6413      	str	r3, [r2, #64]	; 0x40
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <HAL_MspInit+0x54>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	210f      	movs	r1, #15
 800079e:	f06f 0001 	mvn.w	r0, #1
 80007a2:	f000 fa81 	bl	8000ca8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800

080007b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08e      	sub	sp, #56	; 0x38
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007bc:	2300      	movs	r3, #0
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80007c0:	2300      	movs	r3, #0
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	4b34      	ldr	r3, [pc, #208]	; (800089c <HAL_InitTick+0xe8>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007cc:	4a33      	ldr	r2, [pc, #204]	; (800089c <HAL_InitTick+0xe8>)
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	6413      	str	r3, [r2, #64]	; 0x40
 80007d4:	4b31      	ldr	r3, [pc, #196]	; (800089c <HAL_InitTick+0xe8>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007e0:	f107 0210 	add.w	r2, r7, #16
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4611      	mov	r1, r2
 80007ea:	4618      	mov	r0, r3
 80007ec:	f001 f94c 	bl	8001a88 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007f0:	6a3b      	ldr	r3, [r7, #32]
 80007f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d103      	bne.n	8000802 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007fa:	f001 f91d 	bl	8001a38 <HAL_RCC_GetPCLK1Freq>
 80007fe:	6378      	str	r0, [r7, #52]	; 0x34
 8000800:	e004      	b.n	800080c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000802:	f001 f919 	bl	8001a38 <HAL_RCC_GetPCLK1Freq>
 8000806:	4603      	mov	r3, r0
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800080c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800080e:	4a24      	ldr	r2, [pc, #144]	; (80008a0 <HAL_InitTick+0xec>)
 8000810:	fba2 2303 	umull	r2, r3, r2, r3
 8000814:	0c9b      	lsrs	r3, r3, #18
 8000816:	3b01      	subs	r3, #1
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800081a:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <HAL_InitTick+0xf0>)
 800081c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000820:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000822:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <HAL_InitTick+0xf0>)
 8000824:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000828:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800082a:	4a1e      	ldr	r2, [pc, #120]	; (80008a4 <HAL_InitTick+0xf0>)
 800082c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800082e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <HAL_InitTick+0xf0>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000836:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <HAL_InitTick+0xf0>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <HAL_InitTick+0xf0>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000842:	4818      	ldr	r0, [pc, #96]	; (80008a4 <HAL_InitTick+0xf0>)
 8000844:	f001 f952 	bl	8001aec <HAL_TIM_Base_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800084e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000852:	2b00      	cmp	r3, #0
 8000854:	d11b      	bne.n	800088e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000856:	4813      	ldr	r0, [pc, #76]	; (80008a4 <HAL_InitTick+0xf0>)
 8000858:	f001 f9a2 	bl	8001ba0 <HAL_TIM_Base_Start_IT>
 800085c:	4603      	mov	r3, r0
 800085e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000862:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000866:	2b00      	cmp	r3, #0
 8000868:	d111      	bne.n	800088e <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800086a:	201c      	movs	r0, #28
 800086c:	f000 fa38 	bl	8000ce0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2b0f      	cmp	r3, #15
 8000874:	d808      	bhi.n	8000888 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000876:	2200      	movs	r2, #0
 8000878:	6879      	ldr	r1, [r7, #4]
 800087a:	201c      	movs	r0, #28
 800087c:	f000 fa14 	bl	8000ca8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000880:	4a09      	ldr	r2, [pc, #36]	; (80008a8 <HAL_InitTick+0xf4>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6013      	str	r3, [r2, #0]
 8000886:	e002      	b.n	800088e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000888:	2301      	movs	r3, #1
 800088a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800088e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000892:	4618      	mov	r0, r3
 8000894:	3738      	adds	r7, #56	; 0x38
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800
 80008a0:	431bde83 	.word	0x431bde83
 80008a4:	20000288 	.word	0x20000288
 80008a8:	20000004 	.word	0x20000004

080008ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b0:	e7fe      	b.n	80008b0 <NMI_Handler+0x4>

080008b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <HardFault_Handler+0x4>

080008b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <MemManage_Handler+0x4>

080008be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <BusFault_Handler+0x4>

080008c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <UsageFault_Handler+0x4>

080008ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <TIM2_IRQHandler+0x10>)
 80008de:	f001 f9cf 	bl	8001c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000288 	.word	0x20000288

080008ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008f0:	4802      	ldr	r0, [pc, #8]	; (80008fc <USART1_IRQHandler+0x10>)
 80008f2:	f001 fc79 	bl	80021e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200002d0 	.word	0x200002d0

08000900 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <SystemInit+0x20>)
 8000906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800090a:	4a05      	ldr	r2, [pc, #20]	; (8000920 <SystemInit+0x20>)
 800090c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 800092a:	4a12      	ldr	r2, [pc, #72]	; (8000974 <MX_USART1_UART_Init+0x50>)
 800092c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 8000930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000934:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 800095c:	f001 fb68 	bl	8002030 <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000966:	f7ff fef4 	bl	8000752 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200002d0 	.word	0x200002d0
 8000974:	40011000 	.word	0x40011000

08000978 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a1d      	ldr	r2, [pc, #116]	; (8000a0c <HAL_UART_MspInit+0x94>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d134      	bne.n	8000a04 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <HAL_UART_MspInit+0x98>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a1b      	ldr	r2, [pc, #108]	; (8000a10 <HAL_UART_MspInit+0x98>)
 80009a4:	f043 0310 	orr.w	r3, r3, #16
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <HAL_UART_MspInit+0x98>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f003 0310 	and.w	r3, r3, #16
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <HAL_UART_MspInit+0x98>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <HAL_UART_MspInit+0x98>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_UART_MspInit+0x98>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e0:	2303      	movs	r3, #3
 80009e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009e4:	2307      	movs	r3, #7
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4619      	mov	r1, r3
 80009ee:	4809      	ldr	r0, [pc, #36]	; (8000a14 <HAL_UART_MspInit+0x9c>)
 80009f0:	f000 fa16 	bl	8000e20 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2105      	movs	r1, #5
 80009f8:	2025      	movs	r0, #37	; 0x25
 80009fa:	f000 f955 	bl	8000ca8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009fe:	2025      	movs	r0, #37	; 0x25
 8000a00:	f000 f96e 	bl	8000ce0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a04:	bf00      	nop
 8000a06:	3728      	adds	r7, #40	; 0x28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40011000 	.word	0x40011000
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020000 	.word	0x40020000

08000a18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a1c:	f7ff ff70 	bl	8000900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a20:	480c      	ldr	r0, [pc, #48]	; (8000a54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a22:	490d      	ldr	r1, [pc, #52]	; (8000a58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a24:	4a0d      	ldr	r2, [pc, #52]	; (8000a5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a28:	e002      	b.n	8000a30 <LoopCopyDataInit>

08000a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2e:	3304      	adds	r3, #4

08000a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a34:	d3f9      	bcc.n	8000a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a36:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a38:	4c0a      	ldr	r4, [pc, #40]	; (8000a64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a3c:	e001      	b.n	8000a42 <LoopFillZerobss>

08000a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a40:	3204      	adds	r2, #4

08000a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a44:	d3fb      	bcc.n	8000a3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a46:	f003 fd49 	bl	80044dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a4a:	f7ff fdf9 	bl	8000640 <main>
  bx  lr    
 8000a4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a58:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a5c:	080045e0 	.word	0x080045e0
  ldr r2, =_sbss
 8000a60:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a64:	20004070 	.word	0x20004070

08000a68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a68:	e7fe      	b.n	8000a68 <ADC_IRQHandler>
	...

08000a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <HAL_Init+0x40>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0d      	ldr	r2, [pc, #52]	; (8000aac <HAL_Init+0x40>)
 8000a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a7c:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <HAL_Init+0x40>)
 8000a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <HAL_Init+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a07      	ldr	r2, [pc, #28]	; (8000aac <HAL_Init+0x40>)
 8000a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a94:	2003      	movs	r0, #3
 8000a96:	f000 f8fc 	bl	8000c92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9a:	200f      	movs	r0, #15
 8000a9c:	f7ff fe8a 	bl	80007b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa0:	f7ff fe5c 	bl	800075c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023c00 	.word	0x40023c00

08000ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_IncTick+0x20>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_IncTick+0x24>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <HAL_IncTick+0x24>)
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	20000318 	.word	0x20000318

08000ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return uwTick;
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <HAL_GetTick+0x14>)
 8000ade:	681b      	ldr	r3, [r3, #0]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000318 	.word	0x20000318

08000af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af8:	f7ff ffee 	bl	8000ad8 <HAL_GetTick>
 8000afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b08:	d005      	beq.n	8000b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <HAL_Delay+0x44>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4413      	add	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b16:	bf00      	nop
 8000b18:	f7ff ffde 	bl	8000ad8 <HAL_GetTick>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d8f7      	bhi.n	8000b18 <HAL_Delay+0x28>
  {
  }
}
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000008 	.word	0x20000008

08000b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	60d3      	str	r3, [r2, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <__NVIC_GetPriorityGrouping+0x18>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	f003 0307 	and.w	r3, r3, #7
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	db0b      	blt.n	8000bc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f003 021f 	and.w	r2, r3, #31
 8000bb4:	4907      	ldr	r1, [pc, #28]	; (8000bd4 <__NVIC_EnableIRQ+0x38>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	095b      	lsrs	r3, r3, #5
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000e100 	.word	0xe000e100

08000bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	db0a      	blt.n	8000c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	490c      	ldr	r1, [pc, #48]	; (8000c24 <__NVIC_SetPriority+0x4c>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	0112      	lsls	r2, r2, #4
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c00:	e00a      	b.n	8000c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4908      	ldr	r1, [pc, #32]	; (8000c28 <__NVIC_SetPriority+0x50>)
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	f003 030f 	and.w	r3, r3, #15
 8000c0e:	3b04      	subs	r3, #4
 8000c10:	0112      	lsls	r2, r2, #4
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	440b      	add	r3, r1
 8000c16:	761a      	strb	r2, [r3, #24]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000e100 	.word	0xe000e100
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b089      	sub	sp, #36	; 0x24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	f1c3 0307 	rsb	r3, r3, #7
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	bf28      	it	cs
 8000c4a:	2304      	movcs	r3, #4
 8000c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3304      	adds	r3, #4
 8000c52:	2b06      	cmp	r3, #6
 8000c54:	d902      	bls.n	8000c5c <NVIC_EncodePriority+0x30>
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3b03      	subs	r3, #3
 8000c5a:	e000      	b.n	8000c5e <NVIC_EncodePriority+0x32>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	f04f 32ff 	mov.w	r2, #4294967295
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	401a      	ands	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c74:	f04f 31ff 	mov.w	r1, #4294967295
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7e:	43d9      	mvns	r1, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	4313      	orrs	r3, r2
         );
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3724      	adds	r7, #36	; 0x24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ff4c 	bl	8000b38 <__NVIC_SetPriorityGrouping>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
 8000cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cba:	f7ff ff61 	bl	8000b80 <__NVIC_GetPriorityGrouping>
 8000cbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	68b9      	ldr	r1, [r7, #8]
 8000cc4:	6978      	ldr	r0, [r7, #20]
 8000cc6:	f7ff ffb1 	bl	8000c2c <NVIC_EncodePriority>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff80 	bl	8000bd8 <__NVIC_SetPriority>
}
 8000cd8:	bf00      	nop
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ff54 	bl	8000b9c <__NVIC_EnableIRQ>
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d08:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d0a:	f7ff fee5 	bl	8000ad8 <HAL_GetTick>
 8000d0e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d008      	beq.n	8000d2e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2280      	movs	r2, #128	; 0x80
 8000d20:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e052      	b.n	8000dd4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f022 0216 	bic.w	r2, r2, #22
 8000d3c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	695a      	ldr	r2, [r3, #20]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d4c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d103      	bne.n	8000d5e <HAL_DMA_Abort+0x62>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d007      	beq.n	8000d6e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f022 0208 	bic.w	r2, r2, #8
 8000d6c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f022 0201 	bic.w	r2, r2, #1
 8000d7c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d7e:	e013      	b.n	8000da8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d80:	f7ff feaa 	bl	8000ad8 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	2b05      	cmp	r3, #5
 8000d8c:	d90c      	bls.n	8000da8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2220      	movs	r2, #32
 8000d92:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2203      	movs	r2, #3
 8000d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000da4:	2303      	movs	r3, #3
 8000da6:	e015      	b.n	8000dd4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1e4      	bne.n	8000d80 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dba:	223f      	movs	r2, #63	; 0x3f
 8000dbc:	409a      	lsls	r2, r3
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d004      	beq.n	8000dfa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2280      	movs	r2, #128	; 0x80
 8000df4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e00c      	b.n	8000e14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2205      	movs	r2, #5
 8000dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f022 0201 	bic.w	r2, r2, #1
 8000e10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e12:	2300      	movs	r3, #0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	; 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
 8000e3a:	e16b      	b.n	8001114 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	f040 815a 	bne.w	800110e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d005      	beq.n	8000e72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d130      	bne.n	8000ed4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4013      	ands	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	68da      	ldr	r2, [r3, #12]
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	091b      	lsrs	r3, r3, #4
 8000ebe:	f003 0201 	and.w	r2, r3, #1
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0303 	and.w	r3, r3, #3
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	d017      	beq.n	8000f10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	2203      	movs	r2, #3
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d123      	bne.n	8000f64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	08da      	lsrs	r2, r3, #3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3208      	adds	r2, #8
 8000f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	220f      	movs	r2, #15
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	691a      	ldr	r2, [r3, #16]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	08da      	lsrs	r2, r3, #3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3208      	adds	r2, #8
 8000f5e:	69b9      	ldr	r1, [r7, #24]
 8000f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	2203      	movs	r2, #3
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0203 	and.w	r2, r3, #3
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f000 80b4 	beq.w	800110e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	4b60      	ldr	r3, [pc, #384]	; (800112c <HAL_GPIO_Init+0x30c>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	4a5f      	ldr	r2, [pc, #380]	; (800112c <HAL_GPIO_Init+0x30c>)
 8000fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb6:	4b5d      	ldr	r3, [pc, #372]	; (800112c <HAL_GPIO_Init+0x30c>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fc2:	4a5b      	ldr	r2, [pc, #364]	; (8001130 <HAL_GPIO_Init+0x310>)
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	089b      	lsrs	r3, r3, #2
 8000fc8:	3302      	adds	r3, #2
 8000fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	220f      	movs	r2, #15
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a52      	ldr	r2, [pc, #328]	; (8001134 <HAL_GPIO_Init+0x314>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d02b      	beq.n	8001046 <HAL_GPIO_Init+0x226>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a51      	ldr	r2, [pc, #324]	; (8001138 <HAL_GPIO_Init+0x318>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d025      	beq.n	8001042 <HAL_GPIO_Init+0x222>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a50      	ldr	r2, [pc, #320]	; (800113c <HAL_GPIO_Init+0x31c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d01f      	beq.n	800103e <HAL_GPIO_Init+0x21e>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4f      	ldr	r2, [pc, #316]	; (8001140 <HAL_GPIO_Init+0x320>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d019      	beq.n	800103a <HAL_GPIO_Init+0x21a>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4e      	ldr	r2, [pc, #312]	; (8001144 <HAL_GPIO_Init+0x324>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d013      	beq.n	8001036 <HAL_GPIO_Init+0x216>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4d      	ldr	r2, [pc, #308]	; (8001148 <HAL_GPIO_Init+0x328>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d00d      	beq.n	8001032 <HAL_GPIO_Init+0x212>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4c      	ldr	r2, [pc, #304]	; (800114c <HAL_GPIO_Init+0x32c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d007      	beq.n	800102e <HAL_GPIO_Init+0x20e>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4b      	ldr	r2, [pc, #300]	; (8001150 <HAL_GPIO_Init+0x330>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d101      	bne.n	800102a <HAL_GPIO_Init+0x20a>
 8001026:	2307      	movs	r3, #7
 8001028:	e00e      	b.n	8001048 <HAL_GPIO_Init+0x228>
 800102a:	2308      	movs	r3, #8
 800102c:	e00c      	b.n	8001048 <HAL_GPIO_Init+0x228>
 800102e:	2306      	movs	r3, #6
 8001030:	e00a      	b.n	8001048 <HAL_GPIO_Init+0x228>
 8001032:	2305      	movs	r3, #5
 8001034:	e008      	b.n	8001048 <HAL_GPIO_Init+0x228>
 8001036:	2304      	movs	r3, #4
 8001038:	e006      	b.n	8001048 <HAL_GPIO_Init+0x228>
 800103a:	2303      	movs	r3, #3
 800103c:	e004      	b.n	8001048 <HAL_GPIO_Init+0x228>
 800103e:	2302      	movs	r3, #2
 8001040:	e002      	b.n	8001048 <HAL_GPIO_Init+0x228>
 8001042:	2301      	movs	r3, #1
 8001044:	e000      	b.n	8001048 <HAL_GPIO_Init+0x228>
 8001046:	2300      	movs	r3, #0
 8001048:	69fa      	ldr	r2, [r7, #28]
 800104a:	f002 0203 	and.w	r2, r2, #3
 800104e:	0092      	lsls	r2, r2, #2
 8001050:	4093      	lsls	r3, r2
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001058:	4935      	ldr	r1, [pc, #212]	; (8001130 <HAL_GPIO_Init+0x310>)
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	089b      	lsrs	r3, r3, #2
 800105e:	3302      	adds	r3, #2
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001066:	4b3b      	ldr	r3, [pc, #236]	; (8001154 <HAL_GPIO_Init+0x334>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800108a:	4a32      	ldr	r2, [pc, #200]	; (8001154 <HAL_GPIO_Init+0x334>)
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001090:	4b30      	ldr	r3, [pc, #192]	; (8001154 <HAL_GPIO_Init+0x334>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b4:	4a27      	ldr	r2, [pc, #156]	; (8001154 <HAL_GPIO_Init+0x334>)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ba:	4b26      	ldr	r3, [pc, #152]	; (8001154 <HAL_GPIO_Init+0x334>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010de:	4a1d      	ldr	r2, [pc, #116]	; (8001154 <HAL_GPIO_Init+0x334>)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <HAL_GPIO_Init+0x334>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001108:	4a12      	ldr	r2, [pc, #72]	; (8001154 <HAL_GPIO_Init+0x334>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3301      	adds	r3, #1
 8001112:	61fb      	str	r3, [r7, #28]
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	2b0f      	cmp	r3, #15
 8001118:	f67f ae90 	bls.w	8000e3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3724      	adds	r7, #36	; 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	40013800 	.word	0x40013800
 8001134:	40020000 	.word	0x40020000
 8001138:	40020400 	.word	0x40020400
 800113c:	40020800 	.word	0x40020800
 8001140:	40020c00 	.word	0x40020c00
 8001144:	40021000 	.word	0x40021000
 8001148:	40021400 	.word	0x40021400
 800114c:	40021800 	.word	0x40021800
 8001150:	40021c00 	.word	0x40021c00
 8001154:	40013c00 	.word	0x40013c00

08001158 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e267      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d075      	beq.n	8001262 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001176:	4b88      	ldr	r3, [pc, #544]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	2b04      	cmp	r3, #4
 8001180:	d00c      	beq.n	800119c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001182:	4b85      	ldr	r3, [pc, #532]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800118a:	2b08      	cmp	r3, #8
 800118c:	d112      	bne.n	80011b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800118e:	4b82      	ldr	r3, [pc, #520]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800119a:	d10b      	bne.n	80011b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800119c:	4b7e      	ldr	r3, [pc, #504]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d05b      	beq.n	8001260 <HAL_RCC_OscConfig+0x108>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d157      	bne.n	8001260 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e242      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011bc:	d106      	bne.n	80011cc <HAL_RCC_OscConfig+0x74>
 80011be:	4b76      	ldr	r3, [pc, #472]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a75      	ldr	r2, [pc, #468]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80011c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	e01d      	b.n	8001208 <HAL_RCC_OscConfig+0xb0>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011d4:	d10c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x98>
 80011d6:	4b70      	ldr	r3, [pc, #448]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a6f      	ldr	r2, [pc, #444]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80011dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	4b6d      	ldr	r3, [pc, #436]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a6c      	ldr	r2, [pc, #432]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80011e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e00b      	b.n	8001208 <HAL_RCC_OscConfig+0xb0>
 80011f0:	4b69      	ldr	r3, [pc, #420]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a68      	ldr	r2, [pc, #416]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80011f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	4b66      	ldr	r3, [pc, #408]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a65      	ldr	r2, [pc, #404]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 8001202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d013      	beq.n	8001238 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001210:	f7ff fc62 	bl	8000ad8 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001218:	f7ff fc5e 	bl	8000ad8 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b64      	cmp	r3, #100	; 0x64
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e207      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122a:	4b5b      	ldr	r3, [pc, #364]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f0      	beq.n	8001218 <HAL_RCC_OscConfig+0xc0>
 8001236:	e014      	b.n	8001262 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001238:	f7ff fc4e 	bl	8000ad8 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001240:	f7ff fc4a 	bl	8000ad8 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b64      	cmp	r3, #100	; 0x64
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e1f3      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001252:	4b51      	ldr	r3, [pc, #324]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f0      	bne.n	8001240 <HAL_RCC_OscConfig+0xe8>
 800125e:	e000      	b.n	8001262 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d063      	beq.n	8001336 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800126e:	4b4a      	ldr	r3, [pc, #296]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00b      	beq.n	8001292 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800127a:	4b47      	ldr	r3, [pc, #284]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001282:	2b08      	cmp	r3, #8
 8001284:	d11c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001286:	4b44      	ldr	r3, [pc, #272]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d116      	bne.n	80012c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001292:	4b41      	ldr	r3, [pc, #260]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d005      	beq.n	80012aa <HAL_RCC_OscConfig+0x152>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d001      	beq.n	80012aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e1c7      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012aa:	4b3b      	ldr	r3, [pc, #236]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	4937      	ldr	r1, [pc, #220]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012be:	e03a      	b.n	8001336 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d020      	beq.n	800130a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c8:	4b34      	ldr	r3, [pc, #208]	; (800139c <HAL_RCC_OscConfig+0x244>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ce:	f7ff fc03 	bl	8000ad8 <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d4:	e008      	b.n	80012e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d6:	f7ff fbff 	bl	8000ad8 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e1a8      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e8:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0f0      	beq.n	80012d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f4:	4b28      	ldr	r3, [pc, #160]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	4925      	ldr	r1, [pc, #148]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 8001304:	4313      	orrs	r3, r2
 8001306:	600b      	str	r3, [r1, #0]
 8001308:	e015      	b.n	8001336 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800130a:	4b24      	ldr	r3, [pc, #144]	; (800139c <HAL_RCC_OscConfig+0x244>)
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001310:	f7ff fbe2 	bl	8000ad8 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001318:	f7ff fbde 	bl	8000ad8 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e187      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132a:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b00      	cmp	r3, #0
 8001340:	d036      	beq.n	80013b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d016      	beq.n	8001378 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_RCC_OscConfig+0x248>)
 800134c:	2201      	movs	r2, #1
 800134e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001350:	f7ff fbc2 	bl	8000ad8 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001358:	f7ff fbbe 	bl	8000ad8 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e167      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 800136c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0x200>
 8001376:	e01b      	b.n	80013b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_RCC_OscConfig+0x248>)
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137e:	f7ff fbab 	bl	8000ad8 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001384:	e00e      	b.n	80013a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001386:	f7ff fba7 	bl	8000ad8 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d907      	bls.n	80013a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e150      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
 8001398:	40023800 	.word	0x40023800
 800139c:	42470000 	.word	0x42470000
 80013a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a4:	4b88      	ldr	r3, [pc, #544]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80013a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1ea      	bne.n	8001386 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8097 	beq.w	80014ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013c2:	4b81      	ldr	r3, [pc, #516]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10f      	bne.n	80013ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	4b7d      	ldr	r3, [pc, #500]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	4a7c      	ldr	r2, [pc, #496]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013dc:	6413      	str	r3, [r2, #64]	; 0x40
 80013de:	4b7a      	ldr	r3, [pc, #488]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ea:	2301      	movs	r3, #1
 80013ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ee:	4b77      	ldr	r3, [pc, #476]	; (80015cc <HAL_RCC_OscConfig+0x474>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d118      	bne.n	800142c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013fa:	4b74      	ldr	r3, [pc, #464]	; (80015cc <HAL_RCC_OscConfig+0x474>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a73      	ldr	r2, [pc, #460]	; (80015cc <HAL_RCC_OscConfig+0x474>)
 8001400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001406:	f7ff fb67 	bl	8000ad8 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800140e:	f7ff fb63 	bl	8000ad8 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e10c      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001420:	4b6a      	ldr	r3, [pc, #424]	; (80015cc <HAL_RCC_OscConfig+0x474>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f0      	beq.n	800140e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d106      	bne.n	8001442 <HAL_RCC_OscConfig+0x2ea>
 8001434:	4b64      	ldr	r3, [pc, #400]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 8001436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001438:	4a63      	ldr	r2, [pc, #396]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6713      	str	r3, [r2, #112]	; 0x70
 8001440:	e01c      	b.n	800147c <HAL_RCC_OscConfig+0x324>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b05      	cmp	r3, #5
 8001448:	d10c      	bne.n	8001464 <HAL_RCC_OscConfig+0x30c>
 800144a:	4b5f      	ldr	r3, [pc, #380]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 800144c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144e:	4a5e      	ldr	r2, [pc, #376]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6713      	str	r3, [r2, #112]	; 0x70
 8001456:	4b5c      	ldr	r3, [pc, #368]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 8001458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800145a:	4a5b      	ldr	r2, [pc, #364]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6713      	str	r3, [r2, #112]	; 0x70
 8001462:	e00b      	b.n	800147c <HAL_RCC_OscConfig+0x324>
 8001464:	4b58      	ldr	r3, [pc, #352]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 8001466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001468:	4a57      	ldr	r2, [pc, #348]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 800146a:	f023 0301 	bic.w	r3, r3, #1
 800146e:	6713      	str	r3, [r2, #112]	; 0x70
 8001470:	4b55      	ldr	r3, [pc, #340]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 8001472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001474:	4a54      	ldr	r2, [pc, #336]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 8001476:	f023 0304 	bic.w	r3, r3, #4
 800147a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d015      	beq.n	80014b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001484:	f7ff fb28 	bl	8000ad8 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800148a:	e00a      	b.n	80014a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800148c:	f7ff fb24 	bl	8000ad8 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	f241 3288 	movw	r2, #5000	; 0x1388
 800149a:	4293      	cmp	r3, r2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e0cb      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a2:	4b49      	ldr	r3, [pc, #292]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80014a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0ee      	beq.n	800148c <HAL_RCC_OscConfig+0x334>
 80014ae:	e014      	b.n	80014da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b0:	f7ff fb12 	bl	8000ad8 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014b6:	e00a      	b.n	80014ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b8:	f7ff fb0e 	bl	8000ad8 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e0b5      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ce:	4b3e      	ldr	r3, [pc, #248]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1ee      	bne.n	80014b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014da:	7dfb      	ldrb	r3, [r7, #23]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d105      	bne.n	80014ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014e0:	4b39      	ldr	r3, [pc, #228]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	4a38      	ldr	r2, [pc, #224]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80014e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 80a1 	beq.w	8001638 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014f6:	4b34      	ldr	r3, [pc, #208]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d05c      	beq.n	80015bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	2b02      	cmp	r3, #2
 8001508:	d141      	bne.n	800158e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150a:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <HAL_RCC_OscConfig+0x478>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fae2 	bl	8000ad8 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001518:	f7ff fade 	bl	8000ad8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e087      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152a:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69da      	ldr	r2, [r3, #28]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001544:	019b      	lsls	r3, r3, #6
 8001546:	431a      	orrs	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154c:	085b      	lsrs	r3, r3, #1
 800154e:	3b01      	subs	r3, #1
 8001550:	041b      	lsls	r3, r3, #16
 8001552:	431a      	orrs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	061b      	lsls	r3, r3, #24
 800155a:	491b      	ldr	r1, [pc, #108]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 800155c:	4313      	orrs	r3, r2
 800155e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001560:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <HAL_RCC_OscConfig+0x478>)
 8001562:	2201      	movs	r2, #1
 8001564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001566:	f7ff fab7 	bl	8000ad8 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800156e:	f7ff fab3 	bl	8000ad8 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e05c      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0f0      	beq.n	800156e <HAL_RCC_OscConfig+0x416>
 800158c:	e054      	b.n	8001638 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <HAL_RCC_OscConfig+0x478>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7ff faa0 	bl	8000ad8 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800159c:	f7ff fa9c 	bl	8000ad8 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e045      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0x444>
 80015ba:	e03d      	b.n	8001638 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d107      	bne.n	80015d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e038      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40007000 	.word	0x40007000
 80015d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <HAL_RCC_OscConfig+0x4ec>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d028      	beq.n	8001634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d121      	bne.n	8001634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d11a      	bne.n	8001634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001604:	4013      	ands	r3, r2
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800160a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800160c:	4293      	cmp	r3, r2
 800160e:	d111      	bne.n	8001634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161a:	085b      	lsrs	r3, r3, #1
 800161c:	3b01      	subs	r3, #1
 800161e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001620:	429a      	cmp	r2, r3
 8001622:	d107      	bne.n	8001634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001630:	429a      	cmp	r2, r3
 8001632:	d001      	beq.n	8001638 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800

08001648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e0cc      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800165c:	4b68      	ldr	r3, [pc, #416]	; (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	d90c      	bls.n	8001684 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166a:	4b65      	ldr	r3, [pc, #404]	; (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001672:	4b63      	ldr	r3, [pc, #396]	; (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d001      	beq.n	8001684 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0b8      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d020      	beq.n	80016d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800169c:	4b59      	ldr	r3, [pc, #356]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	4a58      	ldr	r2, [pc, #352]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016b4:	4b53      	ldr	r3, [pc, #332]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4a52      	ldr	r2, [pc, #328]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c0:	4b50      	ldr	r3, [pc, #320]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	494d      	ldr	r1, [pc, #308]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d044      	beq.n	8001768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d107      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	4b47      	ldr	r3, [pc, #284]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d119      	bne.n	8001726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e07f      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d003      	beq.n	8001706 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001702:	2b03      	cmp	r3, #3
 8001704:	d107      	bne.n	8001716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001706:	4b3f      	ldr	r3, [pc, #252]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d109      	bne.n	8001726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e06f      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001716:	4b3b      	ldr	r3, [pc, #236]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e067      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001726:	4b37      	ldr	r3, [pc, #220]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f023 0203 	bic.w	r2, r3, #3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	4934      	ldr	r1, [pc, #208]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 8001734:	4313      	orrs	r3, r2
 8001736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001738:	f7ff f9ce 	bl	8000ad8 <HAL_GetTick>
 800173c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173e:	e00a      	b.n	8001756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001740:	f7ff f9ca 	bl	8000ad8 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	f241 3288 	movw	r2, #5000	; 0x1388
 800174e:	4293      	cmp	r3, r2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e04f      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001756:	4b2b      	ldr	r3, [pc, #172]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 020c 	and.w	r2, r3, #12
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	429a      	cmp	r2, r3
 8001766:	d1eb      	bne.n	8001740 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001768:	4b25      	ldr	r3, [pc, #148]	; (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d20c      	bcs.n	8001790 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001776:	4b22      	ldr	r3, [pc, #136]	; (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800177e:	4b20      	ldr	r3, [pc, #128]	; (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d001      	beq.n	8001790 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e032      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	d008      	beq.n	80017ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	4916      	ldr	r1, [pc, #88]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d009      	beq.n	80017ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ba:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	490e      	ldr	r1, [pc, #56]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017ce:	f000 f821 	bl	8001814 <HAL_RCC_GetSysClockFreq>
 80017d2:	4602      	mov	r2, r0
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	490a      	ldr	r1, [pc, #40]	; (8001808 <HAL_RCC_ClockConfig+0x1c0>)
 80017e0:	5ccb      	ldrb	r3, [r1, r3]
 80017e2:	fa22 f303 	lsr.w	r3, r2, r3
 80017e6:	4a09      	ldr	r2, [pc, #36]	; (800180c <HAL_RCC_ClockConfig+0x1c4>)
 80017e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_RCC_ClockConfig+0x1c8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe ffe0 	bl	80007b4 <HAL_InitTick>

  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40023c00 	.word	0x40023c00
 8001804:	40023800 	.word	0x40023800
 8001808:	080045b8 	.word	0x080045b8
 800180c:	20000000 	.word	0x20000000
 8001810:	20000004 	.word	0x20000004

08001814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001818:	b094      	sub	sp, #80	; 0x50
 800181a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	647b      	str	r3, [r7, #68]	; 0x44
 8001820:	2300      	movs	r3, #0
 8001822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001824:	2300      	movs	r3, #0
 8001826:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001828:	2300      	movs	r3, #0
 800182a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800182c:	4b79      	ldr	r3, [pc, #484]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x200>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b08      	cmp	r3, #8
 8001836:	d00d      	beq.n	8001854 <HAL_RCC_GetSysClockFreq+0x40>
 8001838:	2b08      	cmp	r3, #8
 800183a:	f200 80e1 	bhi.w	8001a00 <HAL_RCC_GetSysClockFreq+0x1ec>
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <HAL_RCC_GetSysClockFreq+0x34>
 8001842:	2b04      	cmp	r3, #4
 8001844:	d003      	beq.n	800184e <HAL_RCC_GetSysClockFreq+0x3a>
 8001846:	e0db      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001848:	4b73      	ldr	r3, [pc, #460]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x204>)
 800184a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800184c:	e0db      	b.n	8001a06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800184e:	4b73      	ldr	r3, [pc, #460]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x208>)
 8001850:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001852:	e0d8      	b.n	8001a06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001854:	4b6f      	ldr	r3, [pc, #444]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800185c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800185e:	4b6d      	ldr	r3, [pc, #436]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d063      	beq.n	8001932 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800186a:	4b6a      	ldr	r3, [pc, #424]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x200>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	099b      	lsrs	r3, r3, #6
 8001870:	2200      	movs	r2, #0
 8001872:	63bb      	str	r3, [r7, #56]	; 0x38
 8001874:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800187c:	633b      	str	r3, [r7, #48]	; 0x30
 800187e:	2300      	movs	r3, #0
 8001880:	637b      	str	r3, [r7, #52]	; 0x34
 8001882:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001886:	4622      	mov	r2, r4
 8001888:	462b      	mov	r3, r5
 800188a:	f04f 0000 	mov.w	r0, #0
 800188e:	f04f 0100 	mov.w	r1, #0
 8001892:	0159      	lsls	r1, r3, #5
 8001894:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001898:	0150      	lsls	r0, r2, #5
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4621      	mov	r1, r4
 80018a0:	1a51      	subs	r1, r2, r1
 80018a2:	6139      	str	r1, [r7, #16]
 80018a4:	4629      	mov	r1, r5
 80018a6:	eb63 0301 	sbc.w	r3, r3, r1
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018b8:	4659      	mov	r1, fp
 80018ba:	018b      	lsls	r3, r1, #6
 80018bc:	4651      	mov	r1, sl
 80018be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018c2:	4651      	mov	r1, sl
 80018c4:	018a      	lsls	r2, r1, #6
 80018c6:	4651      	mov	r1, sl
 80018c8:	ebb2 0801 	subs.w	r8, r2, r1
 80018cc:	4659      	mov	r1, fp
 80018ce:	eb63 0901 	sbc.w	r9, r3, r1
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018e6:	4690      	mov	r8, r2
 80018e8:	4699      	mov	r9, r3
 80018ea:	4623      	mov	r3, r4
 80018ec:	eb18 0303 	adds.w	r3, r8, r3
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	462b      	mov	r3, r5
 80018f4:	eb49 0303 	adc.w	r3, r9, r3
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001906:	4629      	mov	r1, r5
 8001908:	024b      	lsls	r3, r1, #9
 800190a:	4621      	mov	r1, r4
 800190c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001910:	4621      	mov	r1, r4
 8001912:	024a      	lsls	r2, r1, #9
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800191a:	2200      	movs	r2, #0
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
 800191e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001920:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001924:	f7fe fc5c 	bl	80001e0 <__aeabi_uldivmod>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4613      	mov	r3, r2
 800192e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001930:	e058      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001932:	4b38      	ldr	r3, [pc, #224]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	099b      	lsrs	r3, r3, #6
 8001938:	2200      	movs	r2, #0
 800193a:	4618      	mov	r0, r3
 800193c:	4611      	mov	r1, r2
 800193e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001942:	623b      	str	r3, [r7, #32]
 8001944:	2300      	movs	r3, #0
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
 8001948:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800194c:	4642      	mov	r2, r8
 800194e:	464b      	mov	r3, r9
 8001950:	f04f 0000 	mov.w	r0, #0
 8001954:	f04f 0100 	mov.w	r1, #0
 8001958:	0159      	lsls	r1, r3, #5
 800195a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800195e:	0150      	lsls	r0, r2, #5
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4641      	mov	r1, r8
 8001966:	ebb2 0a01 	subs.w	sl, r2, r1
 800196a:	4649      	mov	r1, r9
 800196c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800197c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001980:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001984:	ebb2 040a 	subs.w	r4, r2, sl
 8001988:	eb63 050b 	sbc.w	r5, r3, fp
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	00eb      	lsls	r3, r5, #3
 8001996:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800199a:	00e2      	lsls	r2, r4, #3
 800199c:	4614      	mov	r4, r2
 800199e:	461d      	mov	r5, r3
 80019a0:	4643      	mov	r3, r8
 80019a2:	18e3      	adds	r3, r4, r3
 80019a4:	603b      	str	r3, [r7, #0]
 80019a6:	464b      	mov	r3, r9
 80019a8:	eb45 0303 	adc.w	r3, r5, r3
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019ba:	4629      	mov	r1, r5
 80019bc:	028b      	lsls	r3, r1, #10
 80019be:	4621      	mov	r1, r4
 80019c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019c4:	4621      	mov	r1, r4
 80019c6:	028a      	lsls	r2, r1, #10
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ce:	2200      	movs	r2, #0
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	61fa      	str	r2, [r7, #28]
 80019d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019d8:	f7fe fc02 	bl	80001e0 <__aeabi_uldivmod>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4613      	mov	r3, r2
 80019e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x200>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	0c1b      	lsrs	r3, r3, #16
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	3301      	adds	r3, #1
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80019f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019fe:	e002      	b.n	8001a06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a00:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3750      	adds	r7, #80	; 0x50
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	00f42400 	.word	0x00f42400
 8001a1c:	007a1200 	.word	0x007a1200

08001a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a24:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000000 	.word	0x20000000

08001a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a3c:	f7ff fff0 	bl	8001a20 <HAL_RCC_GetHCLKFreq>
 8001a40:	4602      	mov	r2, r0
 8001a42:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	0a9b      	lsrs	r3, r3, #10
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	4903      	ldr	r1, [pc, #12]	; (8001a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a4e:	5ccb      	ldrb	r3, [r1, r3]
 8001a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	080045c8 	.word	0x080045c8

08001a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a64:	f7ff ffdc 	bl	8001a20 <HAL_RCC_GetHCLKFreq>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	0b5b      	lsrs	r3, r3, #13
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	4903      	ldr	r1, [pc, #12]	; (8001a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a76:	5ccb      	ldrb	r3, [r1, r3]
 8001a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40023800 	.word	0x40023800
 8001a84:	080045c8 	.word	0x080045c8

08001a88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	220f      	movs	r2, #15
 8001a96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 0203 	and.w	r2, r3, #3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <HAL_RCC_GetClockConfig+0x5c>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <HAL_RCC_GetClockConfig+0x5c>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_RCC_GetClockConfig+0x5c>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	08db      	lsrs	r3, r3, #3
 8001ac2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001aca:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <HAL_RCC_GetClockConfig+0x60>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0207 	and.w	r2, r3, #7
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	601a      	str	r2, [r3, #0]
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40023c00 	.word	0x40023c00

08001aec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e041      	b.n	8001b82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d106      	bne.n	8001b18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f839 	bl	8001b8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3304      	adds	r3, #4
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	f000 f9c0 	bl	8001eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d001      	beq.n	8001bb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e04e      	b.n	8001c56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a23      	ldr	r2, [pc, #140]	; (8001c64 <HAL_TIM_Base_Start_IT+0xc4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d022      	beq.n	8001c20 <HAL_TIM_Base_Start_IT+0x80>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be2:	d01d      	beq.n	8001c20 <HAL_TIM_Base_Start_IT+0x80>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1f      	ldr	r2, [pc, #124]	; (8001c68 <HAL_TIM_Base_Start_IT+0xc8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d018      	beq.n	8001c20 <HAL_TIM_Base_Start_IT+0x80>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a1e      	ldr	r2, [pc, #120]	; (8001c6c <HAL_TIM_Base_Start_IT+0xcc>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d013      	beq.n	8001c20 <HAL_TIM_Base_Start_IT+0x80>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a1c      	ldr	r2, [pc, #112]	; (8001c70 <HAL_TIM_Base_Start_IT+0xd0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d00e      	beq.n	8001c20 <HAL_TIM_Base_Start_IT+0x80>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a1b      	ldr	r2, [pc, #108]	; (8001c74 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d009      	beq.n	8001c20 <HAL_TIM_Base_Start_IT+0x80>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a19      	ldr	r2, [pc, #100]	; (8001c78 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d004      	beq.n	8001c20 <HAL_TIM_Base_Start_IT+0x80>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a18      	ldr	r2, [pc, #96]	; (8001c7c <HAL_TIM_Base_Start_IT+0xdc>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d111      	bne.n	8001c44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b06      	cmp	r3, #6
 8001c30:	d010      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f042 0201 	orr.w	r2, r2, #1
 8001c40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c42:	e007      	b.n	8001c54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0201 	orr.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40010000 	.word	0x40010000
 8001c68:	40000400 	.word	0x40000400
 8001c6c:	40000800 	.word	0x40000800
 8001c70:	40000c00 	.word	0x40000c00
 8001c74:	40010400 	.word	0x40010400
 8001c78:	40014000 	.word	0x40014000
 8001c7c:	40001800 	.word	0x40001800

08001c80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d020      	beq.n	8001ce4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d01b      	beq.n	8001ce4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 0202 	mvn.w	r2, #2
 8001cb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f8d2 	bl	8001e74 <HAL_TIM_IC_CaptureCallback>
 8001cd0:	e005      	b.n	8001cde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f8c4 	bl	8001e60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f8d5 	bl	8001e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d020      	beq.n	8001d30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d01b      	beq.n	8001d30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0204 	mvn.w	r2, #4
 8001d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2202      	movs	r2, #2
 8001d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f8ac 	bl	8001e74 <HAL_TIM_IC_CaptureCallback>
 8001d1c:	e005      	b.n	8001d2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f89e 	bl	8001e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f8af 	bl	8001e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d020      	beq.n	8001d7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d01b      	beq.n	8001d7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f06f 0208 	mvn.w	r2, #8
 8001d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2204      	movs	r2, #4
 8001d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f886 	bl	8001e74 <HAL_TIM_IC_CaptureCallback>
 8001d68:	e005      	b.n	8001d76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f878 	bl	8001e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f889 	bl	8001e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d020      	beq.n	8001dc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d01b      	beq.n	8001dc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0210 	mvn.w	r2, #16
 8001d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2208      	movs	r2, #8
 8001d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f860 	bl	8001e74 <HAL_TIM_IC_CaptureCallback>
 8001db4:	e005      	b.n	8001dc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f852 	bl	8001e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f863 	bl	8001e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00c      	beq.n	8001dec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d007      	beq.n	8001dec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0201 	mvn.w	r2, #1
 8001de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7fe fca4 	bl	8000734 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00c      	beq.n	8001e10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d007      	beq.n	8001e10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f906 	bl	800201c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00c      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d007      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f834 	bl	8001e9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f003 0320 	and.w	r3, r3, #32
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00c      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f003 0320 	and.w	r3, r3, #32
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d007      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0220 	mvn.w	r2, #32
 8001e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f8d8 	bl	8002008 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e58:	bf00      	nop
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a46      	ldr	r2, [pc, #280]	; (8001fdc <TIM_Base_SetConfig+0x12c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d013      	beq.n	8001ef0 <TIM_Base_SetConfig+0x40>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ece:	d00f      	beq.n	8001ef0 <TIM_Base_SetConfig+0x40>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a43      	ldr	r2, [pc, #268]	; (8001fe0 <TIM_Base_SetConfig+0x130>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d00b      	beq.n	8001ef0 <TIM_Base_SetConfig+0x40>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a42      	ldr	r2, [pc, #264]	; (8001fe4 <TIM_Base_SetConfig+0x134>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d007      	beq.n	8001ef0 <TIM_Base_SetConfig+0x40>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a41      	ldr	r2, [pc, #260]	; (8001fe8 <TIM_Base_SetConfig+0x138>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d003      	beq.n	8001ef0 <TIM_Base_SetConfig+0x40>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a40      	ldr	r2, [pc, #256]	; (8001fec <TIM_Base_SetConfig+0x13c>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d108      	bne.n	8001f02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a35      	ldr	r2, [pc, #212]	; (8001fdc <TIM_Base_SetConfig+0x12c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d02b      	beq.n	8001f62 <TIM_Base_SetConfig+0xb2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f10:	d027      	beq.n	8001f62 <TIM_Base_SetConfig+0xb2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a32      	ldr	r2, [pc, #200]	; (8001fe0 <TIM_Base_SetConfig+0x130>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d023      	beq.n	8001f62 <TIM_Base_SetConfig+0xb2>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a31      	ldr	r2, [pc, #196]	; (8001fe4 <TIM_Base_SetConfig+0x134>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d01f      	beq.n	8001f62 <TIM_Base_SetConfig+0xb2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a30      	ldr	r2, [pc, #192]	; (8001fe8 <TIM_Base_SetConfig+0x138>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d01b      	beq.n	8001f62 <TIM_Base_SetConfig+0xb2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a2f      	ldr	r2, [pc, #188]	; (8001fec <TIM_Base_SetConfig+0x13c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d017      	beq.n	8001f62 <TIM_Base_SetConfig+0xb2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a2e      	ldr	r2, [pc, #184]	; (8001ff0 <TIM_Base_SetConfig+0x140>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <TIM_Base_SetConfig+0xb2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a2d      	ldr	r2, [pc, #180]	; (8001ff4 <TIM_Base_SetConfig+0x144>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00f      	beq.n	8001f62 <TIM_Base_SetConfig+0xb2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a2c      	ldr	r2, [pc, #176]	; (8001ff8 <TIM_Base_SetConfig+0x148>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00b      	beq.n	8001f62 <TIM_Base_SetConfig+0xb2>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a2b      	ldr	r2, [pc, #172]	; (8001ffc <TIM_Base_SetConfig+0x14c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d007      	beq.n	8001f62 <TIM_Base_SetConfig+0xb2>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a2a      	ldr	r2, [pc, #168]	; (8002000 <TIM_Base_SetConfig+0x150>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d003      	beq.n	8001f62 <TIM_Base_SetConfig+0xb2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a29      	ldr	r2, [pc, #164]	; (8002004 <TIM_Base_SetConfig+0x154>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d108      	bne.n	8001f74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a10      	ldr	r2, [pc, #64]	; (8001fdc <TIM_Base_SetConfig+0x12c>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d003      	beq.n	8001fa8 <TIM_Base_SetConfig+0xf8>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a12      	ldr	r2, [pc, #72]	; (8001fec <TIM_Base_SetConfig+0x13c>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d103      	bne.n	8001fb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	691a      	ldr	r2, [r3, #16]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d105      	bne.n	8001fce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f023 0201 	bic.w	r2, r3, #1
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	611a      	str	r2, [r3, #16]
  }
}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40010000 	.word	0x40010000
 8001fe0:	40000400 	.word	0x40000400
 8001fe4:	40000800 	.word	0x40000800
 8001fe8:	40000c00 	.word	0x40000c00
 8001fec:	40010400 	.word	0x40010400
 8001ff0:	40014000 	.word	0x40014000
 8001ff4:	40014400 	.word	0x40014400
 8001ff8:	40014800 	.word	0x40014800
 8001ffc:	40001800 	.word	0x40001800
 8002000:	40001c00 	.word	0x40001c00
 8002004:	40002000 	.word	0x40002000

08002008 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e042      	b.n	80020c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d106      	bne.n	800205c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7fe fc8e 	bl	8000978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2224      	movs	r2, #36	; 0x24
 8002060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002072:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 fd69 	bl	8002b4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002088:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695a      	ldr	r2, [r3, #20]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002098:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2220      	movs	r2, #32
 80020b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2220      	movs	r2, #32
 80020bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	; 0x28
 80020d4:	af02      	add	r7, sp, #8
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	4613      	mov	r3, r2
 80020de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b20      	cmp	r3, #32
 80020ee:	d175      	bne.n	80021dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d002      	beq.n	80020fc <HAL_UART_Transmit+0x2c>
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e06e      	b.n	80021de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2221      	movs	r2, #33	; 0x21
 800210a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800210e:	f7fe fce3 	bl	8000ad8 <HAL_GetTick>
 8002112:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	88fa      	ldrh	r2, [r7, #6]
 8002118:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	88fa      	ldrh	r2, [r7, #6]
 800211e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002128:	d108      	bne.n	800213c <HAL_UART_Transmit+0x6c>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d104      	bne.n	800213c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	61bb      	str	r3, [r7, #24]
 800213a:	e003      	b.n	8002144 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002140:	2300      	movs	r3, #0
 8002142:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002144:	e02e      	b.n	80021a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2200      	movs	r2, #0
 800214e:	2180      	movs	r1, #128	; 0x80
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 fb05 	bl	8002760 <UART_WaitOnFlagUntilTimeout>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2220      	movs	r2, #32
 8002160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e03a      	b.n	80021de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10b      	bne.n	8002186 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800217c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	3302      	adds	r3, #2
 8002182:	61bb      	str	r3, [r7, #24]
 8002184:	e007      	b.n	8002196 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	781a      	ldrb	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	3301      	adds	r3, #1
 8002194:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800219a:	b29b      	uxth	r3, r3
 800219c:	3b01      	subs	r3, #1
 800219e:	b29a      	uxth	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1cb      	bne.n	8002146 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2200      	movs	r2, #0
 80021b6:	2140      	movs	r1, #64	; 0x40
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 fad1 	bl	8002760 <UART_WaitOnFlagUntilTimeout>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2220      	movs	r2, #32
 80021c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e006      	b.n	80021de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2220      	movs	r2, #32
 80021d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	e000      	b.n	80021de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80021dc:	2302      	movs	r3, #2
  }
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3720      	adds	r7, #32
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b0ba      	sub	sp, #232	; 0xe8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800220e:	2300      	movs	r3, #0
 8002210:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002214:	2300      	movs	r3, #0
 8002216:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800221a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002226:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10f      	bne.n	800224e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800222e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002232:	f003 0320 	and.w	r3, r3, #32
 8002236:	2b00      	cmp	r3, #0
 8002238:	d009      	beq.n	800224e <HAL_UART_IRQHandler+0x66>
 800223a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800223e:	f003 0320 	and.w	r3, r3, #32
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 fbc2 	bl	80029d0 <UART_Receive_IT>
      return;
 800224c:	e25b      	b.n	8002706 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800224e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 80de 	beq.w	8002414 <HAL_UART_IRQHandler+0x22c>
 8002258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d106      	bne.n	8002272 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002268:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 80d1 	beq.w	8002414 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00b      	beq.n	8002296 <HAL_UART_IRQHandler+0xae>
 800227e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002286:	2b00      	cmp	r3, #0
 8002288:	d005      	beq.n	8002296 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	f043 0201 	orr.w	r2, r3, #1
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00b      	beq.n	80022ba <HAL_UART_IRQHandler+0xd2>
 80022a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d005      	beq.n	80022ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	f043 0202 	orr.w	r2, r3, #2
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00b      	beq.n	80022de <HAL_UART_IRQHandler+0xf6>
 80022c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d005      	beq.n	80022de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	f043 0204 	orr.w	r2, r3, #4
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80022de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d011      	beq.n	800230e <HAL_UART_IRQHandler+0x126>
 80022ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022ee:	f003 0320 	and.w	r3, r3, #32
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d105      	bne.n	8002302 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80022f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d005      	beq.n	800230e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	f043 0208 	orr.w	r2, r3, #8
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 81f2 	beq.w	80026fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800231c:	f003 0320 	and.w	r3, r3, #32
 8002320:	2b00      	cmp	r3, #0
 8002322:	d008      	beq.n	8002336 <HAL_UART_IRQHandler+0x14e>
 8002324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002328:	f003 0320 	and.w	r3, r3, #32
 800232c:	2b00      	cmp	r3, #0
 800232e:	d002      	beq.n	8002336 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 fb4d 	bl	80029d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002340:	2b40      	cmp	r3, #64	; 0x40
 8002342:	bf0c      	ite	eq
 8002344:	2301      	moveq	r3, #1
 8002346:	2300      	movne	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d103      	bne.n	8002362 <HAL_UART_IRQHandler+0x17a>
 800235a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800235e:	2b00      	cmp	r3, #0
 8002360:	d04f      	beq.n	8002402 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 fa55 	bl	8002812 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002372:	2b40      	cmp	r3, #64	; 0x40
 8002374:	d141      	bne.n	80023fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3314      	adds	r3, #20
 800237c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002380:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002384:	e853 3f00 	ldrex	r3, [r3]
 8002388:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800238c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002394:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	3314      	adds	r3, #20
 800239e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80023a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80023a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80023ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80023b2:	e841 2300 	strex	r3, r2, [r1]
 80023b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80023ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1d9      	bne.n	8002376 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d013      	beq.n	80023f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ce:	4a7e      	ldr	r2, [pc, #504]	; (80025c8 <HAL_UART_IRQHandler+0x3e0>)
 80023d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe fd00 	bl	8000ddc <HAL_DMA_Abort_IT>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d016      	beq.n	8002410 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023ec:	4610      	mov	r0, r2
 80023ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023f0:	e00e      	b.n	8002410 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f99e 	bl	8002734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023f8:	e00a      	b.n	8002410 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f99a 	bl	8002734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002400:	e006      	b.n	8002410 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f996 	bl	8002734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800240e:	e175      	b.n	80026fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002410:	bf00      	nop
    return;
 8002412:	e173      	b.n	80026fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	2b01      	cmp	r3, #1
 800241a:	f040 814f 	bne.w	80026bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800241e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 8148 	beq.w	80026bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800242c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002430:	f003 0310 	and.w	r3, r3, #16
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 8141 	beq.w	80026bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800243a:	2300      	movs	r3, #0
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245a:	2b40      	cmp	r3, #64	; 0x40
 800245c:	f040 80b6 	bne.w	80025cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800246c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 8145 	beq.w	8002700 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800247a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800247e:	429a      	cmp	r2, r3
 8002480:	f080 813e 	bcs.w	8002700 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800248a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002496:	f000 8088 	beq.w	80025aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	330c      	adds	r3, #12
 80024a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024a8:	e853 3f00 	ldrex	r3, [r3]
 80024ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80024b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	330c      	adds	r3, #12
 80024c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80024c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80024ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80024d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80024d6:	e841 2300 	strex	r3, r2, [r1]
 80024da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80024de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1d9      	bne.n	800249a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	3314      	adds	r3, #20
 80024ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024f0:	e853 3f00 	ldrex	r3, [r3]
 80024f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80024f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024f8:	f023 0301 	bic.w	r3, r3, #1
 80024fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	3314      	adds	r3, #20
 8002506:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800250a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800250e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002510:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002512:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002516:	e841 2300 	strex	r3, r2, [r1]
 800251a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800251c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1e1      	bne.n	80024e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	3314      	adds	r3, #20
 8002528:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800252a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800252c:	e853 3f00 	ldrex	r3, [r3]
 8002530:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002534:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002538:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	3314      	adds	r3, #20
 8002542:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002546:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002548:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800254a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800254c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800254e:	e841 2300 	strex	r3, r2, [r1]
 8002552:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1e3      	bne.n	8002522 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2220      	movs	r2, #32
 800255e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	330c      	adds	r3, #12
 800256e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002572:	e853 3f00 	ldrex	r3, [r3]
 8002576:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800257a:	f023 0310 	bic.w	r3, r3, #16
 800257e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	330c      	adds	r3, #12
 8002588:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800258c:	65ba      	str	r2, [r7, #88]	; 0x58
 800258e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002590:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002592:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002594:	e841 2300 	strex	r3, r2, [r1]
 8002598:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800259a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1e3      	bne.n	8002568 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe fba9 	bl	8000cfc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2202      	movs	r2, #2
 80025ae:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	b29b      	uxth	r3, r3
 80025be:	4619      	mov	r1, r3
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f8c1 	bl	8002748 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025c6:	e09b      	b.n	8002700 <HAL_UART_IRQHandler+0x518>
 80025c8:	080028d9 	.word	0x080028d9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 808e 	beq.w	8002704 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80025e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 8089 	beq.w	8002704 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	330c      	adds	r3, #12
 80025f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fc:	e853 3f00 	ldrex	r3, [r3]
 8002600:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002604:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002608:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	330c      	adds	r3, #12
 8002612:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002616:	647a      	str	r2, [r7, #68]	; 0x44
 8002618:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800261a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800261c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800261e:	e841 2300 	strex	r3, r2, [r1]
 8002622:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1e3      	bne.n	80025f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	3314      	adds	r3, #20
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	e853 3f00 	ldrex	r3, [r3]
 8002638:	623b      	str	r3, [r7, #32]
   return(result);
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	f023 0301 	bic.w	r3, r3, #1
 8002640:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	3314      	adds	r3, #20
 800264a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800264e:	633a      	str	r2, [r7, #48]	; 0x30
 8002650:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002652:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002656:	e841 2300 	strex	r3, r2, [r1]
 800265a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800265c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1e3      	bne.n	800262a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2220      	movs	r2, #32
 8002666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	330c      	adds	r3, #12
 8002676:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	e853 3f00 	ldrex	r3, [r3]
 800267e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f023 0310 	bic.w	r3, r3, #16
 8002686:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	330c      	adds	r3, #12
 8002690:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002694:	61fa      	str	r2, [r7, #28]
 8002696:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002698:	69b9      	ldr	r1, [r7, #24]
 800269a:	69fa      	ldr	r2, [r7, #28]
 800269c:	e841 2300 	strex	r3, r2, [r1]
 80026a0:	617b      	str	r3, [r7, #20]
   return(result);
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1e3      	bne.n	8002670 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2202      	movs	r2, #2
 80026ac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80026b2:	4619      	mov	r1, r3
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f847 	bl	8002748 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026ba:	e023      	b.n	8002704 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d009      	beq.n	80026dc <HAL_UART_IRQHandler+0x4f4>
 80026c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f913 	bl	8002900 <UART_Transmit_IT>
    return;
 80026da:	e014      	b.n	8002706 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00e      	beq.n	8002706 <HAL_UART_IRQHandler+0x51e>
 80026e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f953 	bl	80029a0 <UART_EndTransmit_IT>
    return;
 80026fa:	e004      	b.n	8002706 <HAL_UART_IRQHandler+0x51e>
    return;
 80026fc:	bf00      	nop
 80026fe:	e002      	b.n	8002706 <HAL_UART_IRQHandler+0x51e>
      return;
 8002700:	bf00      	nop
 8002702:	e000      	b.n	8002706 <HAL_UART_IRQHandler+0x51e>
      return;
 8002704:	bf00      	nop
  }
}
 8002706:	37e8      	adds	r7, #232	; 0xe8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	4613      	mov	r3, r2
 800276e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002770:	e03b      	b.n	80027ea <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d037      	beq.n	80027ea <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277a:	f7fe f9ad 	bl	8000ad8 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	6a3a      	ldr	r2, [r7, #32]
 8002786:	429a      	cmp	r2, r3
 8002788:	d302      	bcc.n	8002790 <UART_WaitOnFlagUntilTimeout+0x30>
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e03a      	b.n	800280a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d023      	beq.n	80027ea <UART_WaitOnFlagUntilTimeout+0x8a>
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b80      	cmp	r3, #128	; 0x80
 80027a6:	d020      	beq.n	80027ea <UART_WaitOnFlagUntilTimeout+0x8a>
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b40      	cmp	r3, #64	; 0x40
 80027ac:	d01d      	beq.n	80027ea <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d116      	bne.n	80027ea <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f81d 	bl	8002812 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2208      	movs	r2, #8
 80027dc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e00f      	b.n	800280a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4013      	ands	r3, r2
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	bf0c      	ite	eq
 80027fa:	2301      	moveq	r3, #1
 80027fc:	2300      	movne	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	429a      	cmp	r2, r3
 8002806:	d0b4      	beq.n	8002772 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002812:	b480      	push	{r7}
 8002814:	b095      	sub	sp, #84	; 0x54
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	330c      	adds	r3, #12
 8002820:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002824:	e853 3f00 	ldrex	r3, [r3]
 8002828:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800282a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002830:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	330c      	adds	r3, #12
 8002838:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800283a:	643a      	str	r2, [r7, #64]	; 0x40
 800283c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002840:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002842:	e841 2300 	strex	r3, r2, [r1]
 8002846:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1e5      	bne.n	800281a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	3314      	adds	r3, #20
 8002854:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	e853 3f00 	ldrex	r3, [r3]
 800285c:	61fb      	str	r3, [r7, #28]
   return(result);
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	f023 0301 	bic.w	r3, r3, #1
 8002864:	64bb      	str	r3, [r7, #72]	; 0x48
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	3314      	adds	r3, #20
 800286c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800286e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002870:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002872:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002876:	e841 2300 	strex	r3, r2, [r1]
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1e5      	bne.n	800284e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	2b01      	cmp	r3, #1
 8002888:	d119      	bne.n	80028be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	330c      	adds	r3, #12
 8002890:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	e853 3f00 	ldrex	r3, [r3]
 8002898:	60bb      	str	r3, [r7, #8]
   return(result);
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	f023 0310 	bic.w	r3, r3, #16
 80028a0:	647b      	str	r3, [r7, #68]	; 0x44
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	330c      	adds	r3, #12
 80028a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028aa:	61ba      	str	r2, [r7, #24]
 80028ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ae:	6979      	ldr	r1, [r7, #20]
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	e841 2300 	strex	r3, r2, [r1]
 80028b6:	613b      	str	r3, [r7, #16]
   return(result);
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1e5      	bne.n	800288a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2220      	movs	r2, #32
 80028c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	631a      	str	r2, [r3, #48]	; 0x30
}
 80028cc:	bf00      	nop
 80028ce:	3754      	adds	r7, #84	; 0x54
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f7ff ff1e 	bl	8002734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028f8:	bf00      	nop
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b21      	cmp	r3, #33	; 0x21
 8002912:	d13e      	bne.n	8002992 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800291c:	d114      	bne.n	8002948 <UART_Transmit_IT+0x48>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d110      	bne.n	8002948 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	461a      	mov	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800293a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	1c9a      	adds	r2, r3, #2
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	621a      	str	r2, [r3, #32]
 8002946:	e008      	b.n	800295a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	1c59      	adds	r1, r3, #1
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6211      	str	r1, [r2, #32]
 8002952:	781a      	ldrb	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800295e:	b29b      	uxth	r3, r3
 8002960:	3b01      	subs	r3, #1
 8002962:	b29b      	uxth	r3, r3
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	4619      	mov	r1, r3
 8002968:	84d1      	strh	r1, [r2, #38]	; 0x26
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10f      	bne.n	800298e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800297c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800298c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	e000      	b.n	8002994 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002992:	2302      	movs	r3, #2
  }
}
 8002994:	4618      	mov	r0, r3
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff fea3 	bl	800270c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08c      	sub	sp, #48	; 0x30
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b22      	cmp	r3, #34	; 0x22
 80029e2:	f040 80ae 	bne.w	8002b42 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ee:	d117      	bne.n	8002a20 <UART_Receive_IT+0x50>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d113      	bne.n	8002a20 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a00:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a12:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	1c9a      	adds	r2, r3, #2
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	629a      	str	r2, [r3, #40]	; 0x28
 8002a1e:	e026      	b.n	8002a6e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a32:	d007      	beq.n	8002a44 <UART_Receive_IT+0x74>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10a      	bne.n	8002a52 <UART_Receive_IT+0x82>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d106      	bne.n	8002a52 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4e:	701a      	strb	r2, [r3, #0]
 8002a50:	e008      	b.n	8002a64 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a62:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d15d      	bne.n	8002b3e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68da      	ldr	r2, [r3, #12]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0220 	bic.w	r2, r2, #32
 8002a90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002aa0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695a      	ldr	r2, [r3, #20]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0201 	bic.w	r2, r2, #1
 8002ab0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d135      	bne.n	8002b34 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	330c      	adds	r3, #12
 8002ad4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	e853 3f00 	ldrex	r3, [r3]
 8002adc:	613b      	str	r3, [r7, #16]
   return(result);
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	f023 0310 	bic.w	r3, r3, #16
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	330c      	adds	r3, #12
 8002aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aee:	623a      	str	r2, [r7, #32]
 8002af0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af2:	69f9      	ldr	r1, [r7, #28]
 8002af4:	6a3a      	ldr	r2, [r7, #32]
 8002af6:	e841 2300 	strex	r3, r2, [r1]
 8002afa:	61bb      	str	r3, [r7, #24]
   return(result);
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1e5      	bne.n	8002ace <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	2b10      	cmp	r3, #16
 8002b0e:	d10a      	bne.n	8002b26 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff fe0b 	bl	8002748 <HAL_UARTEx_RxEventCallback>
 8002b32:	e002      	b.n	8002b3a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff fdf3 	bl	8002720 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	e002      	b.n	8002b44 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	e000      	b.n	8002b44 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002b42:	2302      	movs	r3, #2
  }
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3730      	adds	r7, #48	; 0x30
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b50:	b0c0      	sub	sp, #256	; 0x100
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b68:	68d9      	ldr	r1, [r3, #12]
 8002b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	ea40 0301 	orr.w	r3, r0, r1
 8002b74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	431a      	orrs	r2, r3
 8002b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ba4:	f021 010c 	bic.w	r1, r1, #12
 8002ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002bb2:	430b      	orrs	r3, r1
 8002bb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc6:	6999      	ldr	r1, [r3, #24]
 8002bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	ea40 0301 	orr.w	r3, r0, r1
 8002bd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	4b8f      	ldr	r3, [pc, #572]	; (8002e18 <UART_SetConfig+0x2cc>)
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d005      	beq.n	8002bec <UART_SetConfig+0xa0>
 8002be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	4b8d      	ldr	r3, [pc, #564]	; (8002e1c <UART_SetConfig+0x2d0>)
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d104      	bne.n	8002bf6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bec:	f7fe ff38 	bl	8001a60 <HAL_RCC_GetPCLK2Freq>
 8002bf0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002bf4:	e003      	b.n	8002bfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bf6:	f7fe ff1f 	bl	8001a38 <HAL_RCC_GetPCLK1Freq>
 8002bfa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c08:	f040 810c 	bne.w	8002e24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c10:	2200      	movs	r2, #0
 8002c12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c1e:	4622      	mov	r2, r4
 8002c20:	462b      	mov	r3, r5
 8002c22:	1891      	adds	r1, r2, r2
 8002c24:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c26:	415b      	adcs	r3, r3
 8002c28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c2e:	4621      	mov	r1, r4
 8002c30:	eb12 0801 	adds.w	r8, r2, r1
 8002c34:	4629      	mov	r1, r5
 8002c36:	eb43 0901 	adc.w	r9, r3, r1
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c4e:	4690      	mov	r8, r2
 8002c50:	4699      	mov	r9, r3
 8002c52:	4623      	mov	r3, r4
 8002c54:	eb18 0303 	adds.w	r3, r8, r3
 8002c58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c5c:	462b      	mov	r3, r5
 8002c5e:	eb49 0303 	adc.w	r3, r9, r3
 8002c62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	18db      	adds	r3, r3, r3
 8002c7e:	653b      	str	r3, [r7, #80]	; 0x50
 8002c80:	4613      	mov	r3, r2
 8002c82:	eb42 0303 	adc.w	r3, r2, r3
 8002c86:	657b      	str	r3, [r7, #84]	; 0x54
 8002c88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c90:	f7fd faa6 	bl	80001e0 <__aeabi_uldivmod>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	4b61      	ldr	r3, [pc, #388]	; (8002e20 <UART_SetConfig+0x2d4>)
 8002c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	011c      	lsls	r4, r3, #4
 8002ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002cb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002cb4:	4642      	mov	r2, r8
 8002cb6:	464b      	mov	r3, r9
 8002cb8:	1891      	adds	r1, r2, r2
 8002cba:	64b9      	str	r1, [r7, #72]	; 0x48
 8002cbc:	415b      	adcs	r3, r3
 8002cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002cc4:	4641      	mov	r1, r8
 8002cc6:	eb12 0a01 	adds.w	sl, r2, r1
 8002cca:	4649      	mov	r1, r9
 8002ccc:	eb43 0b01 	adc.w	fp, r3, r1
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cdc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ce0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ce4:	4692      	mov	sl, r2
 8002ce6:	469b      	mov	fp, r3
 8002ce8:	4643      	mov	r3, r8
 8002cea:	eb1a 0303 	adds.w	r3, sl, r3
 8002cee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cf2:	464b      	mov	r3, r9
 8002cf4:	eb4b 0303 	adc.w	r3, fp, r3
 8002cf8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d10:	460b      	mov	r3, r1
 8002d12:	18db      	adds	r3, r3, r3
 8002d14:	643b      	str	r3, [r7, #64]	; 0x40
 8002d16:	4613      	mov	r3, r2
 8002d18:	eb42 0303 	adc.w	r3, r2, r3
 8002d1c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d26:	f7fd fa5b 	bl	80001e0 <__aeabi_uldivmod>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	4611      	mov	r1, r2
 8002d30:	4b3b      	ldr	r3, [pc, #236]	; (8002e20 <UART_SetConfig+0x2d4>)
 8002d32:	fba3 2301 	umull	r2, r3, r3, r1
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	2264      	movs	r2, #100	; 0x64
 8002d3a:	fb02 f303 	mul.w	r3, r2, r3
 8002d3e:	1acb      	subs	r3, r1, r3
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d46:	4b36      	ldr	r3, [pc, #216]	; (8002e20 <UART_SetConfig+0x2d4>)
 8002d48:	fba3 2302 	umull	r2, r3, r3, r2
 8002d4c:	095b      	lsrs	r3, r3, #5
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d54:	441c      	add	r4, r3
 8002d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d60:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d68:	4642      	mov	r2, r8
 8002d6a:	464b      	mov	r3, r9
 8002d6c:	1891      	adds	r1, r2, r2
 8002d6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d70:	415b      	adcs	r3, r3
 8002d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d78:	4641      	mov	r1, r8
 8002d7a:	1851      	adds	r1, r2, r1
 8002d7c:	6339      	str	r1, [r7, #48]	; 0x30
 8002d7e:	4649      	mov	r1, r9
 8002d80:	414b      	adcs	r3, r1
 8002d82:	637b      	str	r3, [r7, #52]	; 0x34
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d90:	4659      	mov	r1, fp
 8002d92:	00cb      	lsls	r3, r1, #3
 8002d94:	4651      	mov	r1, sl
 8002d96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d9a:	4651      	mov	r1, sl
 8002d9c:	00ca      	lsls	r2, r1, #3
 8002d9e:	4610      	mov	r0, r2
 8002da0:	4619      	mov	r1, r3
 8002da2:	4603      	mov	r3, r0
 8002da4:	4642      	mov	r2, r8
 8002da6:	189b      	adds	r3, r3, r2
 8002da8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002dac:	464b      	mov	r3, r9
 8002dae:	460a      	mov	r2, r1
 8002db0:	eb42 0303 	adc.w	r3, r2, r3
 8002db4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002dc4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002dc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002dcc:	460b      	mov	r3, r1
 8002dce:	18db      	adds	r3, r3, r3
 8002dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	eb42 0303 	adc.w	r3, r2, r3
 8002dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002de2:	f7fd f9fd 	bl	80001e0 <__aeabi_uldivmod>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <UART_SetConfig+0x2d4>)
 8002dec:	fba3 1302 	umull	r1, r3, r3, r2
 8002df0:	095b      	lsrs	r3, r3, #5
 8002df2:	2164      	movs	r1, #100	; 0x64
 8002df4:	fb01 f303 	mul.w	r3, r1, r3
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	3332      	adds	r3, #50	; 0x32
 8002dfe:	4a08      	ldr	r2, [pc, #32]	; (8002e20 <UART_SetConfig+0x2d4>)
 8002e00:	fba2 2303 	umull	r2, r3, r2, r3
 8002e04:	095b      	lsrs	r3, r3, #5
 8002e06:	f003 0207 	and.w	r2, r3, #7
 8002e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4422      	add	r2, r4
 8002e12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e14:	e106      	b.n	8003024 <UART_SetConfig+0x4d8>
 8002e16:	bf00      	nop
 8002e18:	40011000 	.word	0x40011000
 8002e1c:	40011400 	.word	0x40011400
 8002e20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e36:	4642      	mov	r2, r8
 8002e38:	464b      	mov	r3, r9
 8002e3a:	1891      	adds	r1, r2, r2
 8002e3c:	6239      	str	r1, [r7, #32]
 8002e3e:	415b      	adcs	r3, r3
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24
 8002e42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e46:	4641      	mov	r1, r8
 8002e48:	1854      	adds	r4, r2, r1
 8002e4a:	4649      	mov	r1, r9
 8002e4c:	eb43 0501 	adc.w	r5, r3, r1
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	00eb      	lsls	r3, r5, #3
 8002e5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e5e:	00e2      	lsls	r2, r4, #3
 8002e60:	4614      	mov	r4, r2
 8002e62:	461d      	mov	r5, r3
 8002e64:	4643      	mov	r3, r8
 8002e66:	18e3      	adds	r3, r4, r3
 8002e68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e6c:	464b      	mov	r3, r9
 8002e6e:	eb45 0303 	adc.w	r3, r5, r3
 8002e72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	f04f 0300 	mov.w	r3, #0
 8002e8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e92:	4629      	mov	r1, r5
 8002e94:	008b      	lsls	r3, r1, #2
 8002e96:	4621      	mov	r1, r4
 8002e98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e9c:	4621      	mov	r1, r4
 8002e9e:	008a      	lsls	r2, r1, #2
 8002ea0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002ea4:	f7fd f99c 	bl	80001e0 <__aeabi_uldivmod>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4b60      	ldr	r3, [pc, #384]	; (8003030 <UART_SetConfig+0x4e4>)
 8002eae:	fba3 2302 	umull	r2, r3, r3, r2
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	011c      	lsls	r4, r3, #4
 8002eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ec0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ec4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002ec8:	4642      	mov	r2, r8
 8002eca:	464b      	mov	r3, r9
 8002ecc:	1891      	adds	r1, r2, r2
 8002ece:	61b9      	str	r1, [r7, #24]
 8002ed0:	415b      	adcs	r3, r3
 8002ed2:	61fb      	str	r3, [r7, #28]
 8002ed4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ed8:	4641      	mov	r1, r8
 8002eda:	1851      	adds	r1, r2, r1
 8002edc:	6139      	str	r1, [r7, #16]
 8002ede:	4649      	mov	r1, r9
 8002ee0:	414b      	adcs	r3, r1
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ef0:	4659      	mov	r1, fp
 8002ef2:	00cb      	lsls	r3, r1, #3
 8002ef4:	4651      	mov	r1, sl
 8002ef6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002efa:	4651      	mov	r1, sl
 8002efc:	00ca      	lsls	r2, r1, #3
 8002efe:	4610      	mov	r0, r2
 8002f00:	4619      	mov	r1, r3
 8002f02:	4603      	mov	r3, r0
 8002f04:	4642      	mov	r2, r8
 8002f06:	189b      	adds	r3, r3, r2
 8002f08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f0c:	464b      	mov	r3, r9
 8002f0e:	460a      	mov	r2, r1
 8002f10:	eb42 0303 	adc.w	r3, r2, r3
 8002f14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f30:	4649      	mov	r1, r9
 8002f32:	008b      	lsls	r3, r1, #2
 8002f34:	4641      	mov	r1, r8
 8002f36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f3a:	4641      	mov	r1, r8
 8002f3c:	008a      	lsls	r2, r1, #2
 8002f3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f42:	f7fd f94d 	bl	80001e0 <__aeabi_uldivmod>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4b38      	ldr	r3, [pc, #224]	; (8003030 <UART_SetConfig+0x4e4>)
 8002f4e:	fba3 2301 	umull	r2, r3, r3, r1
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	2264      	movs	r2, #100	; 0x64
 8002f56:	fb02 f303 	mul.w	r3, r2, r3
 8002f5a:	1acb      	subs	r3, r1, r3
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	3332      	adds	r3, #50	; 0x32
 8002f60:	4a33      	ldr	r2, [pc, #204]	; (8003030 <UART_SetConfig+0x4e4>)
 8002f62:	fba2 2303 	umull	r2, r3, r2, r3
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f6c:	441c      	add	r4, r3
 8002f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f72:	2200      	movs	r2, #0
 8002f74:	673b      	str	r3, [r7, #112]	; 0x70
 8002f76:	677a      	str	r2, [r7, #116]	; 0x74
 8002f78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f7c:	4642      	mov	r2, r8
 8002f7e:	464b      	mov	r3, r9
 8002f80:	1891      	adds	r1, r2, r2
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	415b      	adcs	r3, r3
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f8c:	4641      	mov	r1, r8
 8002f8e:	1851      	adds	r1, r2, r1
 8002f90:	6039      	str	r1, [r7, #0]
 8002f92:	4649      	mov	r1, r9
 8002f94:	414b      	adcs	r3, r1
 8002f96:	607b      	str	r3, [r7, #4]
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002fa4:	4659      	mov	r1, fp
 8002fa6:	00cb      	lsls	r3, r1, #3
 8002fa8:	4651      	mov	r1, sl
 8002faa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fae:	4651      	mov	r1, sl
 8002fb0:	00ca      	lsls	r2, r1, #3
 8002fb2:	4610      	mov	r0, r2
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	4642      	mov	r2, r8
 8002fba:	189b      	adds	r3, r3, r2
 8002fbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fbe:	464b      	mov	r3, r9
 8002fc0:	460a      	mov	r2, r1
 8002fc2:	eb42 0303 	adc.w	r3, r2, r3
 8002fc6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	663b      	str	r3, [r7, #96]	; 0x60
 8002fd2:	667a      	str	r2, [r7, #100]	; 0x64
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002fe0:	4649      	mov	r1, r9
 8002fe2:	008b      	lsls	r3, r1, #2
 8002fe4:	4641      	mov	r1, r8
 8002fe6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fea:	4641      	mov	r1, r8
 8002fec:	008a      	lsls	r2, r1, #2
 8002fee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002ff2:	f7fd f8f5 	bl	80001e0 <__aeabi_uldivmod>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4b0d      	ldr	r3, [pc, #52]	; (8003030 <UART_SetConfig+0x4e4>)
 8002ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8003000:	095b      	lsrs	r3, r3, #5
 8003002:	2164      	movs	r1, #100	; 0x64
 8003004:	fb01 f303 	mul.w	r3, r1, r3
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	3332      	adds	r3, #50	; 0x32
 800300e:	4a08      	ldr	r2, [pc, #32]	; (8003030 <UART_SetConfig+0x4e4>)
 8003010:	fba2 2303 	umull	r2, r3, r2, r3
 8003014:	095b      	lsrs	r3, r3, #5
 8003016:	f003 020f 	and.w	r2, r3, #15
 800301a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4422      	add	r2, r4
 8003022:	609a      	str	r2, [r3, #8]
}
 8003024:	bf00      	nop
 8003026:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800302a:	46bd      	mov	sp, r7
 800302c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003030:	51eb851f 	.word	0x51eb851f

08003034 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	4603      	mov	r3, r0
 800303c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003046:	2b84      	cmp	r3, #132	; 0x84
 8003048:	d005      	beq.n	8003056 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800304a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4413      	add	r3, r2
 8003052:	3303      	adds	r3, #3
 8003054:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003056:	68fb      	ldr	r3, [r7, #12]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003068:	f000 fade 	bl	8003628 <vTaskStartScheduler>
  
  return osOK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	bd80      	pop	{r7, pc}

08003072 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003072:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003074:	b089      	sub	sp, #36	; 0x24
 8003076:	af04      	add	r7, sp, #16
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d020      	beq.n	80030c6 <osThreadCreate+0x54>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d01c      	beq.n	80030c6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685c      	ldr	r4, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691e      	ldr	r6, [r3, #16]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff ffc8 	bl	8003034 <makeFreeRtosPriority>
 80030a4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030ae:	9202      	str	r2, [sp, #8]
 80030b0:	9301      	str	r3, [sp, #4]
 80030b2:	9100      	str	r1, [sp, #0]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4632      	mov	r2, r6
 80030b8:	4629      	mov	r1, r5
 80030ba:	4620      	mov	r0, r4
 80030bc:	f000 f8ed 	bl	800329a <xTaskCreateStatic>
 80030c0:	4603      	mov	r3, r0
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	e01c      	b.n	8003100 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685c      	ldr	r4, [r3, #4]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030d2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff ffaa 	bl	8003034 <makeFreeRtosPriority>
 80030e0:	4602      	mov	r2, r0
 80030e2:	f107 030c 	add.w	r3, r7, #12
 80030e6:	9301      	str	r3, [sp, #4]
 80030e8:	9200      	str	r2, [sp, #0]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	4632      	mov	r2, r6
 80030ee:	4629      	mov	r1, r5
 80030f0:	4620      	mov	r0, r4
 80030f2:	f000 f92f 	bl	8003354 <xTaskCreate>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d001      	beq.n	8003100 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80030fc:	2300      	movs	r3, #0
 80030fe:	e000      	b.n	8003102 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003100:	68fb      	ldr	r3, [r7, #12]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800310a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b084      	sub	sp, #16
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <osDelay+0x16>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	e000      	b.n	8003122 <osDelay+0x18>
 8003120:	2301      	movs	r3, #1
 8003122:	4618      	mov	r0, r3
 8003124:	f000 fa4c 	bl	80035c0 <vTaskDelay>
  
  return osOK;
 8003128:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f103 0208 	add.w	r2, r3, #8
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f04f 32ff 	mov.w	r2, #4294967295
 800314a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f103 0208 	add.w	r2, r3, #8
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f103 0208 	add.w	r2, r3, #8
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	601a      	str	r2, [r3, #0]
}
 80031c8:	bf00      	nop
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ea:	d103      	bne.n	80031f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	e00c      	b.n	800320e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3308      	adds	r3, #8
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	e002      	b.n	8003202 <vListInsert+0x2e>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	429a      	cmp	r2, r3
 800320c:	d2f6      	bcs.n	80031fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	601a      	str	r2, [r3, #0]
}
 800323a:	bf00      	nop
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003246:	b480      	push	{r7}
 8003248:	b085      	sub	sp, #20
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6892      	ldr	r2, [r2, #8]
 800325c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6852      	ldr	r2, [r2, #4]
 8003266:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	429a      	cmp	r2, r3
 8003270:	d103      	bne.n	800327a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	1e5a      	subs	r2, r3, #1
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800329a:	b580      	push	{r7, lr}
 800329c:	b08e      	sub	sp, #56	; 0x38
 800329e:	af04      	add	r7, sp, #16
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80032a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10a      	bne.n	80032c4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80032ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b2:	f383 8811 	msr	BASEPRI, r3
 80032b6:	f3bf 8f6f 	isb	sy
 80032ba:	f3bf 8f4f 	dsb	sy
 80032be:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80032c0:	bf00      	nop
 80032c2:	e7fe      	b.n	80032c2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80032c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10a      	bne.n	80032e0 <xTaskCreateStatic+0x46>
	__asm volatile
 80032ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ce:	f383 8811 	msr	BASEPRI, r3
 80032d2:	f3bf 8f6f 	isb	sy
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	61fb      	str	r3, [r7, #28]
}
 80032dc:	bf00      	nop
 80032de:	e7fe      	b.n	80032de <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80032e0:	2354      	movs	r3, #84	; 0x54
 80032e2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	2b54      	cmp	r3, #84	; 0x54
 80032e8:	d00a      	beq.n	8003300 <xTaskCreateStatic+0x66>
	__asm volatile
 80032ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ee:	f383 8811 	msr	BASEPRI, r3
 80032f2:	f3bf 8f6f 	isb	sy
 80032f6:	f3bf 8f4f 	dsb	sy
 80032fa:	61bb      	str	r3, [r7, #24]
}
 80032fc:	bf00      	nop
 80032fe:	e7fe      	b.n	80032fe <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003300:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01e      	beq.n	8003346 <xTaskCreateStatic+0xac>
 8003308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800330a:	2b00      	cmp	r3, #0
 800330c:	d01b      	beq.n	8003346 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800330e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003316:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	2202      	movs	r2, #2
 800331c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003320:	2300      	movs	r3, #0
 8003322:	9303      	str	r3, [sp, #12]
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	9302      	str	r3, [sp, #8]
 8003328:	f107 0314 	add.w	r3, r7, #20
 800332c:	9301      	str	r3, [sp, #4]
 800332e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 f850 	bl	80033de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800333e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003340:	f000 f8d4 	bl	80034ec <prvAddNewTaskToReadyList>
 8003344:	e001      	b.n	800334a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003346:	2300      	movs	r3, #0
 8003348:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800334a:	697b      	ldr	r3, [r7, #20]
	}
 800334c:	4618      	mov	r0, r3
 800334e:	3728      	adds	r7, #40	; 0x28
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08c      	sub	sp, #48	; 0x30
 8003358:	af04      	add	r7, sp, #16
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	4613      	mov	r3, r2
 8003362:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003364:	88fb      	ldrh	r3, [r7, #6]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fec5 	bl	80040f8 <pvPortMalloc>
 800336e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00e      	beq.n	8003394 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003376:	2054      	movs	r0, #84	; 0x54
 8003378:	f000 febe 	bl	80040f8 <pvPortMalloc>
 800337c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
 800338a:	e005      	b.n	8003398 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800338c:	6978      	ldr	r0, [r7, #20]
 800338e:	f000 ff7f 	bl	8004290 <vPortFree>
 8003392:	e001      	b.n	8003398 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003394:	2300      	movs	r3, #0
 8003396:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d017      	beq.n	80033ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80033a6:	88fa      	ldrh	r2, [r7, #6]
 80033a8:	2300      	movs	r3, #0
 80033aa:	9303      	str	r3, [sp, #12]
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	9302      	str	r3, [sp, #8]
 80033b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b2:	9301      	str	r3, [sp, #4]
 80033b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	68b9      	ldr	r1, [r7, #8]
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f80e 	bl	80033de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033c2:	69f8      	ldr	r0, [r7, #28]
 80033c4:	f000 f892 	bl	80034ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80033c8:	2301      	movs	r3, #1
 80033ca:	61bb      	str	r3, [r7, #24]
 80033cc:	e002      	b.n	80033d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80033ce:	f04f 33ff 	mov.w	r3, #4294967295
 80033d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80033d4:	69bb      	ldr	r3, [r7, #24]
	}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3720      	adds	r7, #32
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b088      	sub	sp, #32
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	607a      	str	r2, [r7, #4]
 80033ea:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80033ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80033f6:	3b01      	subs	r3, #1
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	f023 0307 	bic.w	r3, r3, #7
 8003404:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00a      	beq.n	8003426 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003414:	f383 8811 	msr	BASEPRI, r3
 8003418:	f3bf 8f6f 	isb	sy
 800341c:	f3bf 8f4f 	dsb	sy
 8003420:	617b      	str	r3, [r7, #20]
}
 8003422:	bf00      	nop
 8003424:	e7fe      	b.n	8003424 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01f      	beq.n	800346c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800342c:	2300      	movs	r3, #0
 800342e:	61fb      	str	r3, [r7, #28]
 8003430:	e012      	b.n	8003458 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	4413      	add	r3, r2
 8003438:	7819      	ldrb	r1, [r3, #0]
 800343a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	4413      	add	r3, r2
 8003440:	3334      	adds	r3, #52	; 0x34
 8003442:	460a      	mov	r2, r1
 8003444:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	4413      	add	r3, r2
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d006      	beq.n	8003460 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	3301      	adds	r3, #1
 8003456:	61fb      	str	r3, [r7, #28]
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	2b0f      	cmp	r3, #15
 800345c:	d9e9      	bls.n	8003432 <prvInitialiseNewTask+0x54>
 800345e:	e000      	b.n	8003462 <prvInitialiseNewTask+0x84>
			{
				break;
 8003460:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800346a:	e003      	b.n	8003474 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800346c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003476:	2b06      	cmp	r3, #6
 8003478:	d901      	bls.n	800347e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800347a:	2306      	movs	r3, #6
 800347c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800347e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003482:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003488:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800348a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348c:	2200      	movs	r2, #0
 800348e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003492:	3304      	adds	r3, #4
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff fe6c 	bl	8003172 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349c:	3318      	adds	r3, #24
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff fe67 	bl	8003172 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80034a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ac:	f1c3 0207 	rsb	r2, r3, #7
 80034b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80034b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034b8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80034ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034bc:	2200      	movs	r2, #0
 80034be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80034c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	68f9      	ldr	r1, [r7, #12]
 80034cc:	69b8      	ldr	r0, [r7, #24]
 80034ce:	f000 fc05 	bl	8003cdc <pxPortInitialiseStack>
 80034d2:	4602      	mov	r2, r0
 80034d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80034d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80034de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034e4:	bf00      	nop
 80034e6:	3720      	adds	r7, #32
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80034f4:	f000 fd1e 	bl	8003f34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80034f8:	4b2a      	ldr	r3, [pc, #168]	; (80035a4 <prvAddNewTaskToReadyList+0xb8>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	3301      	adds	r3, #1
 80034fe:	4a29      	ldr	r2, [pc, #164]	; (80035a4 <prvAddNewTaskToReadyList+0xb8>)
 8003500:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003502:	4b29      	ldr	r3, [pc, #164]	; (80035a8 <prvAddNewTaskToReadyList+0xbc>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d109      	bne.n	800351e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800350a:	4a27      	ldr	r2, [pc, #156]	; (80035a8 <prvAddNewTaskToReadyList+0xbc>)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003510:	4b24      	ldr	r3, [pc, #144]	; (80035a4 <prvAddNewTaskToReadyList+0xb8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d110      	bne.n	800353a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003518:	f000 fabc 	bl	8003a94 <prvInitialiseTaskLists>
 800351c:	e00d      	b.n	800353a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800351e:	4b23      	ldr	r3, [pc, #140]	; (80035ac <prvAddNewTaskToReadyList+0xc0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003526:	4b20      	ldr	r3, [pc, #128]	; (80035a8 <prvAddNewTaskToReadyList+0xbc>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003530:	429a      	cmp	r2, r3
 8003532:	d802      	bhi.n	800353a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003534:	4a1c      	ldr	r2, [pc, #112]	; (80035a8 <prvAddNewTaskToReadyList+0xbc>)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800353a:	4b1d      	ldr	r3, [pc, #116]	; (80035b0 <prvAddNewTaskToReadyList+0xc4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3301      	adds	r3, #1
 8003540:	4a1b      	ldr	r2, [pc, #108]	; (80035b0 <prvAddNewTaskToReadyList+0xc4>)
 8003542:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003548:	2201      	movs	r2, #1
 800354a:	409a      	lsls	r2, r3
 800354c:	4b19      	ldr	r3, [pc, #100]	; (80035b4 <prvAddNewTaskToReadyList+0xc8>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4313      	orrs	r3, r2
 8003552:	4a18      	ldr	r2, [pc, #96]	; (80035b4 <prvAddNewTaskToReadyList+0xc8>)
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800355a:	4613      	mov	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4a15      	ldr	r2, [pc, #84]	; (80035b8 <prvAddNewTaskToReadyList+0xcc>)
 8003564:	441a      	add	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3304      	adds	r3, #4
 800356a:	4619      	mov	r1, r3
 800356c:	4610      	mov	r0, r2
 800356e:	f7ff fe0d 	bl	800318c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003572:	f000 fd0f 	bl	8003f94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003576:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <prvAddNewTaskToReadyList+0xc0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00e      	beq.n	800359c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800357e:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <prvAddNewTaskToReadyList+0xbc>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	429a      	cmp	r2, r3
 800358a:	d207      	bcs.n	800359c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800358c:	4b0b      	ldr	r3, [pc, #44]	; (80035bc <prvAddNewTaskToReadyList+0xd0>)
 800358e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800359c:	bf00      	nop
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	2000041c 	.word	0x2000041c
 80035a8:	2000031c 	.word	0x2000031c
 80035ac:	20000428 	.word	0x20000428
 80035b0:	20000438 	.word	0x20000438
 80035b4:	20000424 	.word	0x20000424
 80035b8:	20000320 	.word	0x20000320
 80035bc:	e000ed04 	.word	0xe000ed04

080035c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d017      	beq.n	8003602 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80035d2:	4b13      	ldr	r3, [pc, #76]	; (8003620 <vTaskDelay+0x60>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <vTaskDelay+0x30>
	__asm volatile
 80035da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035de:	f383 8811 	msr	BASEPRI, r3
 80035e2:	f3bf 8f6f 	isb	sy
 80035e6:	f3bf 8f4f 	dsb	sy
 80035ea:	60bb      	str	r3, [r7, #8]
}
 80035ec:	bf00      	nop
 80035ee:	e7fe      	b.n	80035ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80035f0:	f000 f87a 	bl	80036e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80035f4:	2100      	movs	r1, #0
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 fb0a 	bl	8003c10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80035fc:	f000 f882 	bl	8003704 <xTaskResumeAll>
 8003600:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d107      	bne.n	8003618 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003608:	4b06      	ldr	r3, [pc, #24]	; (8003624 <vTaskDelay+0x64>)
 800360a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003618:	bf00      	nop
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	20000444 	.word	0x20000444
 8003624:	e000ed04 	.word	0xe000ed04

08003628 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08a      	sub	sp, #40	; 0x28
 800362c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800362e:	2300      	movs	r3, #0
 8003630:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003632:	2300      	movs	r3, #0
 8003634:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003636:	463a      	mov	r2, r7
 8003638:	1d39      	adds	r1, r7, #4
 800363a:	f107 0308 	add.w	r3, r7, #8
 800363e:	4618      	mov	r0, r3
 8003640:	f7fc ff4c 	bl	80004dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003644:	6839      	ldr	r1, [r7, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	9202      	str	r2, [sp, #8]
 800364c:	9301      	str	r3, [sp, #4]
 800364e:	2300      	movs	r3, #0
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	2300      	movs	r3, #0
 8003654:	460a      	mov	r2, r1
 8003656:	491e      	ldr	r1, [pc, #120]	; (80036d0 <vTaskStartScheduler+0xa8>)
 8003658:	481e      	ldr	r0, [pc, #120]	; (80036d4 <vTaskStartScheduler+0xac>)
 800365a:	f7ff fe1e 	bl	800329a <xTaskCreateStatic>
 800365e:	4603      	mov	r3, r0
 8003660:	4a1d      	ldr	r2, [pc, #116]	; (80036d8 <vTaskStartScheduler+0xb0>)
 8003662:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003664:	4b1c      	ldr	r3, [pc, #112]	; (80036d8 <vTaskStartScheduler+0xb0>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d002      	beq.n	8003672 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800366c:	2301      	movs	r3, #1
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	e001      	b.n	8003676 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d116      	bne.n	80036aa <vTaskStartScheduler+0x82>
	__asm volatile
 800367c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003680:	f383 8811 	msr	BASEPRI, r3
 8003684:	f3bf 8f6f 	isb	sy
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	613b      	str	r3, [r7, #16]
}
 800368e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003690:	4b12      	ldr	r3, [pc, #72]	; (80036dc <vTaskStartScheduler+0xb4>)
 8003692:	f04f 32ff 	mov.w	r2, #4294967295
 8003696:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003698:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <vTaskStartScheduler+0xb8>)
 800369a:	2201      	movs	r2, #1
 800369c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800369e:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <vTaskStartScheduler+0xbc>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80036a4:	f000 fba4 	bl	8003df0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80036a8:	e00e      	b.n	80036c8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b0:	d10a      	bne.n	80036c8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80036b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b6:	f383 8811 	msr	BASEPRI, r3
 80036ba:	f3bf 8f6f 	isb	sy
 80036be:	f3bf 8f4f 	dsb	sy
 80036c2:	60fb      	str	r3, [r7, #12]
}
 80036c4:	bf00      	nop
 80036c6:	e7fe      	b.n	80036c6 <vTaskStartScheduler+0x9e>
}
 80036c8:	bf00      	nop
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	080045b0 	.word	0x080045b0
 80036d4:	08003a65 	.word	0x08003a65
 80036d8:	20000440 	.word	0x20000440
 80036dc:	2000043c 	.word	0x2000043c
 80036e0:	20000428 	.word	0x20000428
 80036e4:	20000420 	.word	0x20000420

080036e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80036ec:	4b04      	ldr	r3, [pc, #16]	; (8003700 <vTaskSuspendAll+0x18>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3301      	adds	r3, #1
 80036f2:	4a03      	ldr	r2, [pc, #12]	; (8003700 <vTaskSuspendAll+0x18>)
 80036f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80036f6:	bf00      	nop
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	20000444 	.word	0x20000444

08003704 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800370e:	2300      	movs	r3, #0
 8003710:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003712:	4b41      	ldr	r3, [pc, #260]	; (8003818 <xTaskResumeAll+0x114>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10a      	bne.n	8003730 <xTaskResumeAll+0x2c>
	__asm volatile
 800371a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371e:	f383 8811 	msr	BASEPRI, r3
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	f3bf 8f4f 	dsb	sy
 800372a:	603b      	str	r3, [r7, #0]
}
 800372c:	bf00      	nop
 800372e:	e7fe      	b.n	800372e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003730:	f000 fc00 	bl	8003f34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003734:	4b38      	ldr	r3, [pc, #224]	; (8003818 <xTaskResumeAll+0x114>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	3b01      	subs	r3, #1
 800373a:	4a37      	ldr	r2, [pc, #220]	; (8003818 <xTaskResumeAll+0x114>)
 800373c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800373e:	4b36      	ldr	r3, [pc, #216]	; (8003818 <xTaskResumeAll+0x114>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d161      	bne.n	800380a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003746:	4b35      	ldr	r3, [pc, #212]	; (800381c <xTaskResumeAll+0x118>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d05d      	beq.n	800380a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800374e:	e02e      	b.n	80037ae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003750:	4b33      	ldr	r3, [pc, #204]	; (8003820 <xTaskResumeAll+0x11c>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	3318      	adds	r3, #24
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff fd72 	bl	8003246 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	3304      	adds	r3, #4
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff fd6d 	bl	8003246 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	2201      	movs	r2, #1
 8003772:	409a      	lsls	r2, r3
 8003774:	4b2b      	ldr	r3, [pc, #172]	; (8003824 <xTaskResumeAll+0x120>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4313      	orrs	r3, r2
 800377a:	4a2a      	ldr	r2, [pc, #168]	; (8003824 <xTaskResumeAll+0x120>)
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4a27      	ldr	r2, [pc, #156]	; (8003828 <xTaskResumeAll+0x124>)
 800378c:	441a      	add	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	3304      	adds	r3, #4
 8003792:	4619      	mov	r1, r3
 8003794:	4610      	mov	r0, r2
 8003796:	f7ff fcf9 	bl	800318c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379e:	4b23      	ldr	r3, [pc, #140]	; (800382c <xTaskResumeAll+0x128>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d302      	bcc.n	80037ae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80037a8:	4b21      	ldr	r3, [pc, #132]	; (8003830 <xTaskResumeAll+0x12c>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037ae:	4b1c      	ldr	r3, [pc, #112]	; (8003820 <xTaskResumeAll+0x11c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1cc      	bne.n	8003750 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80037bc:	f000 fa08 	bl	8003bd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80037c0:	4b1c      	ldr	r3, [pc, #112]	; (8003834 <xTaskResumeAll+0x130>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d010      	beq.n	80037ee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80037cc:	f000 f836 	bl	800383c <xTaskIncrementTick>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80037d6:	4b16      	ldr	r3, [pc, #88]	; (8003830 <xTaskResumeAll+0x12c>)
 80037d8:	2201      	movs	r2, #1
 80037da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3b01      	subs	r3, #1
 80037e0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1f1      	bne.n	80037cc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80037e8:	4b12      	ldr	r3, [pc, #72]	; (8003834 <xTaskResumeAll+0x130>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80037ee:	4b10      	ldr	r3, [pc, #64]	; (8003830 <xTaskResumeAll+0x12c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80037f6:	2301      	movs	r3, #1
 80037f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80037fa:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <xTaskResumeAll+0x134>)
 80037fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800380a:	f000 fbc3 	bl	8003f94 <vPortExitCritical>

	return xAlreadyYielded;
 800380e:	68bb      	ldr	r3, [r7, #8]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	20000444 	.word	0x20000444
 800381c:	2000041c 	.word	0x2000041c
 8003820:	200003dc 	.word	0x200003dc
 8003824:	20000424 	.word	0x20000424
 8003828:	20000320 	.word	0x20000320
 800382c:	2000031c 	.word	0x2000031c
 8003830:	20000430 	.word	0x20000430
 8003834:	2000042c 	.word	0x2000042c
 8003838:	e000ed04 	.word	0xe000ed04

0800383c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003842:	2300      	movs	r3, #0
 8003844:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003846:	4b4e      	ldr	r3, [pc, #312]	; (8003980 <xTaskIncrementTick+0x144>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	f040 808e 	bne.w	800396c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003850:	4b4c      	ldr	r3, [pc, #304]	; (8003984 <xTaskIncrementTick+0x148>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3301      	adds	r3, #1
 8003856:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003858:	4a4a      	ldr	r2, [pc, #296]	; (8003984 <xTaskIncrementTick+0x148>)
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d120      	bne.n	80038a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003864:	4b48      	ldr	r3, [pc, #288]	; (8003988 <xTaskIncrementTick+0x14c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <xTaskIncrementTick+0x48>
	__asm volatile
 800386e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003872:	f383 8811 	msr	BASEPRI, r3
 8003876:	f3bf 8f6f 	isb	sy
 800387a:	f3bf 8f4f 	dsb	sy
 800387e:	603b      	str	r3, [r7, #0]
}
 8003880:	bf00      	nop
 8003882:	e7fe      	b.n	8003882 <xTaskIncrementTick+0x46>
 8003884:	4b40      	ldr	r3, [pc, #256]	; (8003988 <xTaskIncrementTick+0x14c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	4b40      	ldr	r3, [pc, #256]	; (800398c <xTaskIncrementTick+0x150>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a3e      	ldr	r2, [pc, #248]	; (8003988 <xTaskIncrementTick+0x14c>)
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	4a3e      	ldr	r2, [pc, #248]	; (800398c <xTaskIncrementTick+0x150>)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	4b3d      	ldr	r3, [pc, #244]	; (8003990 <xTaskIncrementTick+0x154>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3301      	adds	r3, #1
 800389e:	4a3c      	ldr	r2, [pc, #240]	; (8003990 <xTaskIncrementTick+0x154>)
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	f000 f995 	bl	8003bd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80038a6:	4b3b      	ldr	r3, [pc, #236]	; (8003994 <xTaskIncrementTick+0x158>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d348      	bcc.n	8003942 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038b0:	4b35      	ldr	r3, [pc, #212]	; (8003988 <xTaskIncrementTick+0x14c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d104      	bne.n	80038c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038ba:	4b36      	ldr	r3, [pc, #216]	; (8003994 <xTaskIncrementTick+0x158>)
 80038bc:	f04f 32ff 	mov.w	r2, #4294967295
 80038c0:	601a      	str	r2, [r3, #0]
					break;
 80038c2:	e03e      	b.n	8003942 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038c4:	4b30      	ldr	r3, [pc, #192]	; (8003988 <xTaskIncrementTick+0x14c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d203      	bcs.n	80038e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80038dc:	4a2d      	ldr	r2, [pc, #180]	; (8003994 <xTaskIncrementTick+0x158>)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80038e2:	e02e      	b.n	8003942 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	3304      	adds	r3, #4
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff fcac 	bl	8003246 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d004      	beq.n	8003900 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	3318      	adds	r3, #24
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff fca3 	bl	8003246 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	2201      	movs	r2, #1
 8003906:	409a      	lsls	r2, r3
 8003908:	4b23      	ldr	r3, [pc, #140]	; (8003998 <xTaskIncrementTick+0x15c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4313      	orrs	r3, r2
 800390e:	4a22      	ldr	r2, [pc, #136]	; (8003998 <xTaskIncrementTick+0x15c>)
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4a1f      	ldr	r2, [pc, #124]	; (800399c <xTaskIncrementTick+0x160>)
 8003920:	441a      	add	r2, r3
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	3304      	adds	r3, #4
 8003926:	4619      	mov	r1, r3
 8003928:	4610      	mov	r0, r2
 800392a:	f7ff fc2f 	bl	800318c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003932:	4b1b      	ldr	r3, [pc, #108]	; (80039a0 <xTaskIncrementTick+0x164>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003938:	429a      	cmp	r2, r3
 800393a:	d3b9      	bcc.n	80038b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800393c:	2301      	movs	r3, #1
 800393e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003940:	e7b6      	b.n	80038b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003942:	4b17      	ldr	r3, [pc, #92]	; (80039a0 <xTaskIncrementTick+0x164>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003948:	4914      	ldr	r1, [pc, #80]	; (800399c <xTaskIncrementTick+0x160>)
 800394a:	4613      	mov	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d901      	bls.n	800395e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800395a:	2301      	movs	r3, #1
 800395c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800395e:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <xTaskIncrementTick+0x168>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d007      	beq.n	8003976 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003966:	2301      	movs	r3, #1
 8003968:	617b      	str	r3, [r7, #20]
 800396a:	e004      	b.n	8003976 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800396c:	4b0e      	ldr	r3, [pc, #56]	; (80039a8 <xTaskIncrementTick+0x16c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3301      	adds	r3, #1
 8003972:	4a0d      	ldr	r2, [pc, #52]	; (80039a8 <xTaskIncrementTick+0x16c>)
 8003974:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003976:	697b      	ldr	r3, [r7, #20]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	20000444 	.word	0x20000444
 8003984:	20000420 	.word	0x20000420
 8003988:	200003d4 	.word	0x200003d4
 800398c:	200003d8 	.word	0x200003d8
 8003990:	20000434 	.word	0x20000434
 8003994:	2000043c 	.word	0x2000043c
 8003998:	20000424 	.word	0x20000424
 800399c:	20000320 	.word	0x20000320
 80039a0:	2000031c 	.word	0x2000031c
 80039a4:	20000430 	.word	0x20000430
 80039a8:	2000042c 	.word	0x2000042c

080039ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039b2:	4b27      	ldr	r3, [pc, #156]	; (8003a50 <vTaskSwitchContext+0xa4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80039ba:	4b26      	ldr	r3, [pc, #152]	; (8003a54 <vTaskSwitchContext+0xa8>)
 80039bc:	2201      	movs	r2, #1
 80039be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80039c0:	e03f      	b.n	8003a42 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80039c2:	4b24      	ldr	r3, [pc, #144]	; (8003a54 <vTaskSwitchContext+0xa8>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039c8:	4b23      	ldr	r3, [pc, #140]	; (8003a58 <vTaskSwitchContext+0xac>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	fab3 f383 	clz	r3, r3
 80039d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80039d6:	7afb      	ldrb	r3, [r7, #11]
 80039d8:	f1c3 031f 	rsb	r3, r3, #31
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	491f      	ldr	r1, [pc, #124]	; (8003a5c <vTaskSwitchContext+0xb0>)
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	4613      	mov	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	440b      	add	r3, r1
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10a      	bne.n	8003a08 <vTaskSwitchContext+0x5c>
	__asm volatile
 80039f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f6:	f383 8811 	msr	BASEPRI, r3
 80039fa:	f3bf 8f6f 	isb	sy
 80039fe:	f3bf 8f4f 	dsb	sy
 8003a02:	607b      	str	r3, [r7, #4]
}
 8003a04:	bf00      	nop
 8003a06:	e7fe      	b.n	8003a06 <vTaskSwitchContext+0x5a>
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4a12      	ldr	r2, [pc, #72]	; (8003a5c <vTaskSwitchContext+0xb0>)
 8003a14:	4413      	add	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	605a      	str	r2, [r3, #4]
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	3308      	adds	r3, #8
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d104      	bne.n	8003a38 <vTaskSwitchContext+0x8c>
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	605a      	str	r2, [r3, #4]
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	4a08      	ldr	r2, [pc, #32]	; (8003a60 <vTaskSwitchContext+0xb4>)
 8003a40:	6013      	str	r3, [r2, #0]
}
 8003a42:	bf00      	nop
 8003a44:	371c      	adds	r7, #28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	20000444 	.word	0x20000444
 8003a54:	20000430 	.word	0x20000430
 8003a58:	20000424 	.word	0x20000424
 8003a5c:	20000320 	.word	0x20000320
 8003a60:	2000031c 	.word	0x2000031c

08003a64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a6c:	f000 f852 	bl	8003b14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a70:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <prvIdleTask+0x28>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d9f9      	bls.n	8003a6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003a78:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <prvIdleTask+0x2c>)
 8003a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a88:	e7f0      	b.n	8003a6c <prvIdleTask+0x8>
 8003a8a:	bf00      	nop
 8003a8c:	20000320 	.word	0x20000320
 8003a90:	e000ed04 	.word	0xe000ed04

08003a94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	607b      	str	r3, [r7, #4]
 8003a9e:	e00c      	b.n	8003aba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4413      	add	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4a12      	ldr	r2, [pc, #72]	; (8003af4 <prvInitialiseTaskLists+0x60>)
 8003aac:	4413      	add	r3, r2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff fb3f 	bl	8003132 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	607b      	str	r3, [r7, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b06      	cmp	r3, #6
 8003abe:	d9ef      	bls.n	8003aa0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ac0:	480d      	ldr	r0, [pc, #52]	; (8003af8 <prvInitialiseTaskLists+0x64>)
 8003ac2:	f7ff fb36 	bl	8003132 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ac6:	480d      	ldr	r0, [pc, #52]	; (8003afc <prvInitialiseTaskLists+0x68>)
 8003ac8:	f7ff fb33 	bl	8003132 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003acc:	480c      	ldr	r0, [pc, #48]	; (8003b00 <prvInitialiseTaskLists+0x6c>)
 8003ace:	f7ff fb30 	bl	8003132 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003ad2:	480c      	ldr	r0, [pc, #48]	; (8003b04 <prvInitialiseTaskLists+0x70>)
 8003ad4:	f7ff fb2d 	bl	8003132 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ad8:	480b      	ldr	r0, [pc, #44]	; (8003b08 <prvInitialiseTaskLists+0x74>)
 8003ada:	f7ff fb2a 	bl	8003132 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ade:	4b0b      	ldr	r3, [pc, #44]	; (8003b0c <prvInitialiseTaskLists+0x78>)
 8003ae0:	4a05      	ldr	r2, [pc, #20]	; (8003af8 <prvInitialiseTaskLists+0x64>)
 8003ae2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ae4:	4b0a      	ldr	r3, [pc, #40]	; (8003b10 <prvInitialiseTaskLists+0x7c>)
 8003ae6:	4a05      	ldr	r2, [pc, #20]	; (8003afc <prvInitialiseTaskLists+0x68>)
 8003ae8:	601a      	str	r2, [r3, #0]
}
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000320 	.word	0x20000320
 8003af8:	200003ac 	.word	0x200003ac
 8003afc:	200003c0 	.word	0x200003c0
 8003b00:	200003dc 	.word	0x200003dc
 8003b04:	200003f0 	.word	0x200003f0
 8003b08:	20000408 	.word	0x20000408
 8003b0c:	200003d4 	.word	0x200003d4
 8003b10:	200003d8 	.word	0x200003d8

08003b14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b1a:	e019      	b.n	8003b50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003b1c:	f000 fa0a 	bl	8003f34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b20:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <prvCheckTasksWaitingTermination+0x50>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff fb8a 	bl	8003246 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003b32:	4b0d      	ldr	r3, [pc, #52]	; (8003b68 <prvCheckTasksWaitingTermination+0x54>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	4a0b      	ldr	r2, [pc, #44]	; (8003b68 <prvCheckTasksWaitingTermination+0x54>)
 8003b3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003b3c:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <prvCheckTasksWaitingTermination+0x58>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	4a0a      	ldr	r2, [pc, #40]	; (8003b6c <prvCheckTasksWaitingTermination+0x58>)
 8003b44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003b46:	f000 fa25 	bl	8003f94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f810 	bl	8003b70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b50:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <prvCheckTasksWaitingTermination+0x58>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1e1      	bne.n	8003b1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b58:	bf00      	nop
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	200003f0 	.word	0x200003f0
 8003b68:	2000041c 	.word	0x2000041c
 8003b6c:	20000404 	.word	0x20000404

08003b70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d108      	bne.n	8003b94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fb82 	bl	8004290 <vPortFree>
				vPortFree( pxTCB );
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 fb7f 	bl	8004290 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b92:	e018      	b.n	8003bc6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d103      	bne.n	8003ba6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 fb76 	bl	8004290 <vPortFree>
	}
 8003ba4:	e00f      	b.n	8003bc6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d00a      	beq.n	8003bc6 <prvDeleteTCB+0x56>
	__asm volatile
 8003bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	60fb      	str	r3, [r7, #12]
}
 8003bc2:	bf00      	nop
 8003bc4:	e7fe      	b.n	8003bc4 <prvDeleteTCB+0x54>
	}
 8003bc6:	bf00      	nop
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bd6:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <prvResetNextTaskUnblockTime+0x38>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d104      	bne.n	8003bea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003be0:	4b0a      	ldr	r3, [pc, #40]	; (8003c0c <prvResetNextTaskUnblockTime+0x3c>)
 8003be2:	f04f 32ff 	mov.w	r2, #4294967295
 8003be6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003be8:	e008      	b.n	8003bfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bea:	4b07      	ldr	r3, [pc, #28]	; (8003c08 <prvResetNextTaskUnblockTime+0x38>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	4a04      	ldr	r2, [pc, #16]	; (8003c0c <prvResetNextTaskUnblockTime+0x3c>)
 8003bfa:	6013      	str	r3, [r2, #0]
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	200003d4 	.word	0x200003d4
 8003c0c:	2000043c 	.word	0x2000043c

08003c10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c1a:	4b29      	ldr	r3, [pc, #164]	; (8003cc0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c20:	4b28      	ldr	r3, [pc, #160]	; (8003cc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3304      	adds	r3, #4
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff fb0d 	bl	8003246 <uxListRemove>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10b      	bne.n	8003c4a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003c32:	4b24      	ldr	r3, [pc, #144]	; (8003cc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	2201      	movs	r2, #1
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43da      	mvns	r2, r3
 8003c40:	4b21      	ldr	r3, [pc, #132]	; (8003cc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4013      	ands	r3, r2
 8003c46:	4a20      	ldr	r2, [pc, #128]	; (8003cc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003c48:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c50:	d10a      	bne.n	8003c68 <prvAddCurrentTaskToDelayedList+0x58>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d007      	beq.n	8003c68 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c58:	4b1a      	ldr	r3, [pc, #104]	; (8003cc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	4619      	mov	r1, r3
 8003c60:	481a      	ldr	r0, [pc, #104]	; (8003ccc <prvAddCurrentTaskToDelayedList+0xbc>)
 8003c62:	f7ff fa93 	bl	800318c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003c66:	e026      	b.n	8003cb6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c70:	4b14      	ldr	r3, [pc, #80]	; (8003cc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d209      	bcs.n	8003c94 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c80:	4b13      	ldr	r3, [pc, #76]	; (8003cd0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	f7ff faa1 	bl	80031d4 <vListInsert>
}
 8003c92:	e010      	b.n	8003cb6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c94:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	f7ff fa97 	bl	80031d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003ca6:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d202      	bcs.n	8003cb6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003cb0:	4a09      	ldr	r2, [pc, #36]	; (8003cd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	6013      	str	r3, [r2, #0]
}
 8003cb6:	bf00      	nop
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	20000420 	.word	0x20000420
 8003cc4:	2000031c 	.word	0x2000031c
 8003cc8:	20000424 	.word	0x20000424
 8003ccc:	20000408 	.word	0x20000408
 8003cd0:	200003d8 	.word	0x200003d8
 8003cd4:	200003d4 	.word	0x200003d4
 8003cd8:	2000043c 	.word	0x2000043c

08003cdc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3b04      	subs	r3, #4
 8003cec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	3b04      	subs	r3, #4
 8003cfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f023 0201 	bic.w	r2, r3, #1
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	3b04      	subs	r3, #4
 8003d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d0c:	4a0c      	ldr	r2, [pc, #48]	; (8003d40 <pxPortInitialiseStack+0x64>)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	3b14      	subs	r3, #20
 8003d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	3b04      	subs	r3, #4
 8003d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f06f 0202 	mvn.w	r2, #2
 8003d2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	3b20      	subs	r3, #32
 8003d30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003d32:	68fb      	ldr	r3, [r7, #12]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	08003d45 	.word	0x08003d45

08003d44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003d4e:	4b12      	ldr	r3, [pc, #72]	; (8003d98 <prvTaskExitError+0x54>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d56:	d00a      	beq.n	8003d6e <prvTaskExitError+0x2a>
	__asm volatile
 8003d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	60fb      	str	r3, [r7, #12]
}
 8003d6a:	bf00      	nop
 8003d6c:	e7fe      	b.n	8003d6c <prvTaskExitError+0x28>
	__asm volatile
 8003d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	60bb      	str	r3, [r7, #8]
}
 8003d80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003d82:	bf00      	nop
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0fc      	beq.n	8003d84 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003d8a:	bf00      	nop
 8003d8c:	bf00      	nop
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	2000000c 	.word	0x2000000c
 8003d9c:	00000000 	.word	0x00000000

08003da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003da0:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <pxCurrentTCBConst2>)
 8003da2:	6819      	ldr	r1, [r3, #0]
 8003da4:	6808      	ldr	r0, [r1, #0]
 8003da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003daa:	f380 8809 	msr	PSP, r0
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f04f 0000 	mov.w	r0, #0
 8003db6:	f380 8811 	msr	BASEPRI, r0
 8003dba:	4770      	bx	lr
 8003dbc:	f3af 8000 	nop.w

08003dc0 <pxCurrentTCBConst2>:
 8003dc0:	2000031c 	.word	0x2000031c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop

08003dc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003dc8:	4808      	ldr	r0, [pc, #32]	; (8003dec <prvPortStartFirstTask+0x24>)
 8003dca:	6800      	ldr	r0, [r0, #0]
 8003dcc:	6800      	ldr	r0, [r0, #0]
 8003dce:	f380 8808 	msr	MSP, r0
 8003dd2:	f04f 0000 	mov.w	r0, #0
 8003dd6:	f380 8814 	msr	CONTROL, r0
 8003dda:	b662      	cpsie	i
 8003ddc:	b661      	cpsie	f
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	df00      	svc	0
 8003de8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003dea:	bf00      	nop
 8003dec:	e000ed08 	.word	0xe000ed08

08003df0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003df6:	4b46      	ldr	r3, [pc, #280]	; (8003f10 <xPortStartScheduler+0x120>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a46      	ldr	r2, [pc, #280]	; (8003f14 <xPortStartScheduler+0x124>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d10a      	bne.n	8003e16 <xPortStartScheduler+0x26>
	__asm volatile
 8003e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e04:	f383 8811 	msr	BASEPRI, r3
 8003e08:	f3bf 8f6f 	isb	sy
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	613b      	str	r3, [r7, #16]
}
 8003e12:	bf00      	nop
 8003e14:	e7fe      	b.n	8003e14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e16:	4b3e      	ldr	r3, [pc, #248]	; (8003f10 <xPortStartScheduler+0x120>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a3f      	ldr	r2, [pc, #252]	; (8003f18 <xPortStartScheduler+0x128>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d10a      	bne.n	8003e36 <xPortStartScheduler+0x46>
	__asm volatile
 8003e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	60fb      	str	r3, [r7, #12]
}
 8003e32:	bf00      	nop
 8003e34:	e7fe      	b.n	8003e34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e36:	4b39      	ldr	r3, [pc, #228]	; (8003f1c <xPortStartScheduler+0x12c>)
 8003e38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	22ff      	movs	r2, #255	; 0xff
 8003e46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	4b31      	ldr	r3, [pc, #196]	; (8003f20 <xPortStartScheduler+0x130>)
 8003e5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e5e:	4b31      	ldr	r3, [pc, #196]	; (8003f24 <xPortStartScheduler+0x134>)
 8003e60:	2207      	movs	r2, #7
 8003e62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e64:	e009      	b.n	8003e7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003e66:	4b2f      	ldr	r3, [pc, #188]	; (8003f24 <xPortStartScheduler+0x134>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	4a2d      	ldr	r2, [pc, #180]	; (8003f24 <xPortStartScheduler+0x134>)
 8003e6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e70:	78fb      	ldrb	r3, [r7, #3]
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e7a:	78fb      	ldrb	r3, [r7, #3]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e82:	2b80      	cmp	r3, #128	; 0x80
 8003e84:	d0ef      	beq.n	8003e66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e86:	4b27      	ldr	r3, [pc, #156]	; (8003f24 <xPortStartScheduler+0x134>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f1c3 0307 	rsb	r3, r3, #7
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d00a      	beq.n	8003ea8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e96:	f383 8811 	msr	BASEPRI, r3
 8003e9a:	f3bf 8f6f 	isb	sy
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	60bb      	str	r3, [r7, #8]
}
 8003ea4:	bf00      	nop
 8003ea6:	e7fe      	b.n	8003ea6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ea8:	4b1e      	ldr	r3, [pc, #120]	; (8003f24 <xPortStartScheduler+0x134>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	021b      	lsls	r3, r3, #8
 8003eae:	4a1d      	ldr	r2, [pc, #116]	; (8003f24 <xPortStartScheduler+0x134>)
 8003eb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003eb2:	4b1c      	ldr	r3, [pc, #112]	; (8003f24 <xPortStartScheduler+0x134>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003eba:	4a1a      	ldr	r2, [pc, #104]	; (8003f24 <xPortStartScheduler+0x134>)
 8003ebc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003ec6:	4b18      	ldr	r3, [pc, #96]	; (8003f28 <xPortStartScheduler+0x138>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a17      	ldr	r2, [pc, #92]	; (8003f28 <xPortStartScheduler+0x138>)
 8003ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ed0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003ed2:	4b15      	ldr	r3, [pc, #84]	; (8003f28 <xPortStartScheduler+0x138>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a14      	ldr	r2, [pc, #80]	; (8003f28 <xPortStartScheduler+0x138>)
 8003ed8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003edc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ede:	f000 f8dd 	bl	800409c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003ee2:	4b12      	ldr	r3, [pc, #72]	; (8003f2c <xPortStartScheduler+0x13c>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003ee8:	f000 f8fc 	bl	80040e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003eec:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <xPortStartScheduler+0x140>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a0f      	ldr	r2, [pc, #60]	; (8003f30 <xPortStartScheduler+0x140>)
 8003ef2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003ef6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003ef8:	f7ff ff66 	bl	8003dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003efc:	f7ff fd56 	bl	80039ac <vTaskSwitchContext>
	prvTaskExitError();
 8003f00:	f7ff ff20 	bl	8003d44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	e000ed00 	.word	0xe000ed00
 8003f14:	410fc271 	.word	0x410fc271
 8003f18:	410fc270 	.word	0x410fc270
 8003f1c:	e000e400 	.word	0xe000e400
 8003f20:	20000448 	.word	0x20000448
 8003f24:	2000044c 	.word	0x2000044c
 8003f28:	e000ed20 	.word	0xe000ed20
 8003f2c:	2000000c 	.word	0x2000000c
 8003f30:	e000ef34 	.word	0xe000ef34

08003f34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
	__asm volatile
 8003f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3e:	f383 8811 	msr	BASEPRI, r3
 8003f42:	f3bf 8f6f 	isb	sy
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	607b      	str	r3, [r7, #4]
}
 8003f4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003f4e:	4b0f      	ldr	r3, [pc, #60]	; (8003f8c <vPortEnterCritical+0x58>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3301      	adds	r3, #1
 8003f54:	4a0d      	ldr	r2, [pc, #52]	; (8003f8c <vPortEnterCritical+0x58>)
 8003f56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003f58:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <vPortEnterCritical+0x58>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d10f      	bne.n	8003f80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f60:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <vPortEnterCritical+0x5c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <vPortEnterCritical+0x4c>
	__asm volatile
 8003f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	603b      	str	r3, [r7, #0]
}
 8003f7c:	bf00      	nop
 8003f7e:	e7fe      	b.n	8003f7e <vPortEnterCritical+0x4a>
	}
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	2000000c 	.word	0x2000000c
 8003f90:	e000ed04 	.word	0xe000ed04

08003f94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003f9a:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <vPortExitCritical+0x50>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10a      	bne.n	8003fb8 <vPortExitCritical+0x24>
	__asm volatile
 8003fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa6:	f383 8811 	msr	BASEPRI, r3
 8003faa:	f3bf 8f6f 	isb	sy
 8003fae:	f3bf 8f4f 	dsb	sy
 8003fb2:	607b      	str	r3, [r7, #4]
}
 8003fb4:	bf00      	nop
 8003fb6:	e7fe      	b.n	8003fb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003fb8:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <vPortExitCritical+0x50>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	4a09      	ldr	r2, [pc, #36]	; (8003fe4 <vPortExitCritical+0x50>)
 8003fc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003fc2:	4b08      	ldr	r3, [pc, #32]	; (8003fe4 <vPortExitCritical+0x50>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d105      	bne.n	8003fd6 <vPortExitCritical+0x42>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003fd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	2000000c 	.word	0x2000000c
	...

08003ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003ff0:	f3ef 8009 	mrs	r0, PSP
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	4b15      	ldr	r3, [pc, #84]	; (8004050 <pxCurrentTCBConst>)
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	f01e 0f10 	tst.w	lr, #16
 8004000:	bf08      	it	eq
 8004002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800400a:	6010      	str	r0, [r2, #0]
 800400c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004010:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004014:	f380 8811 	msr	BASEPRI, r0
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f7ff fcc4 	bl	80039ac <vTaskSwitchContext>
 8004024:	f04f 0000 	mov.w	r0, #0
 8004028:	f380 8811 	msr	BASEPRI, r0
 800402c:	bc09      	pop	{r0, r3}
 800402e:	6819      	ldr	r1, [r3, #0]
 8004030:	6808      	ldr	r0, [r1, #0]
 8004032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004036:	f01e 0f10 	tst.w	lr, #16
 800403a:	bf08      	it	eq
 800403c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004040:	f380 8809 	msr	PSP, r0
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	f3af 8000 	nop.w

08004050 <pxCurrentTCBConst>:
 8004050:	2000031c 	.word	0x2000031c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004054:	bf00      	nop
 8004056:	bf00      	nop

08004058 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
	__asm volatile
 800405e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	607b      	str	r3, [r7, #4]
}
 8004070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004072:	f7ff fbe3 	bl	800383c <xTaskIncrementTick>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800407c:	4b06      	ldr	r3, [pc, #24]	; (8004098 <SysTick_Handler+0x40>)
 800407e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	2300      	movs	r3, #0
 8004086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	f383 8811 	msr	BASEPRI, r3
}
 800408e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004090:	bf00      	nop
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	e000ed04 	.word	0xe000ed04

0800409c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <vPortSetupTimerInterrupt+0x34>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80040a6:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <vPortSetupTimerInterrupt+0x38>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80040ac:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <vPortSetupTimerInterrupt+0x3c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a0a      	ldr	r2, [pc, #40]	; (80040dc <vPortSetupTimerInterrupt+0x40>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	099b      	lsrs	r3, r3, #6
 80040b8:	4a09      	ldr	r2, [pc, #36]	; (80040e0 <vPortSetupTimerInterrupt+0x44>)
 80040ba:	3b01      	subs	r3, #1
 80040bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80040be:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <vPortSetupTimerInterrupt+0x34>)
 80040c0:	2207      	movs	r2, #7
 80040c2:	601a      	str	r2, [r3, #0]
}
 80040c4:	bf00      	nop
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	e000e010 	.word	0xe000e010
 80040d4:	e000e018 	.word	0xe000e018
 80040d8:	20000000 	.word	0x20000000
 80040dc:	10624dd3 	.word	0x10624dd3
 80040e0:	e000e014 	.word	0xe000e014

080040e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80040e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80040f4 <vPortEnableVFP+0x10>
 80040e8:	6801      	ldr	r1, [r0, #0]
 80040ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80040ee:	6001      	str	r1, [r0, #0]
 80040f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80040f2:	bf00      	nop
 80040f4:	e000ed88 	.word	0xe000ed88

080040f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08a      	sub	sp, #40	; 0x28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004100:	2300      	movs	r3, #0
 8004102:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004104:	f7ff faf0 	bl	80036e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004108:	4b5b      	ldr	r3, [pc, #364]	; (8004278 <pvPortMalloc+0x180>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004110:	f000 f920 	bl	8004354 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004114:	4b59      	ldr	r3, [pc, #356]	; (800427c <pvPortMalloc+0x184>)
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4013      	ands	r3, r2
 800411c:	2b00      	cmp	r3, #0
 800411e:	f040 8093 	bne.w	8004248 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d01d      	beq.n	8004164 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004128:	2208      	movs	r2, #8
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4413      	add	r3, r2
 800412e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f003 0307 	and.w	r3, r3, #7
 8004136:	2b00      	cmp	r3, #0
 8004138:	d014      	beq.n	8004164 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f023 0307 	bic.w	r3, r3, #7
 8004140:	3308      	adds	r3, #8
 8004142:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <pvPortMalloc+0x6c>
	__asm volatile
 800414e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004152:	f383 8811 	msr	BASEPRI, r3
 8004156:	f3bf 8f6f 	isb	sy
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	617b      	str	r3, [r7, #20]
}
 8004160:	bf00      	nop
 8004162:	e7fe      	b.n	8004162 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d06e      	beq.n	8004248 <pvPortMalloc+0x150>
 800416a:	4b45      	ldr	r3, [pc, #276]	; (8004280 <pvPortMalloc+0x188>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	429a      	cmp	r2, r3
 8004172:	d869      	bhi.n	8004248 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004174:	4b43      	ldr	r3, [pc, #268]	; (8004284 <pvPortMalloc+0x18c>)
 8004176:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004178:	4b42      	ldr	r3, [pc, #264]	; (8004284 <pvPortMalloc+0x18c>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800417e:	e004      	b.n	800418a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	429a      	cmp	r2, r3
 8004192:	d903      	bls.n	800419c <pvPortMalloc+0xa4>
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1f1      	bne.n	8004180 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800419c:	4b36      	ldr	r3, [pc, #216]	; (8004278 <pvPortMalloc+0x180>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d050      	beq.n	8004248 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2208      	movs	r2, #8
 80041ac:	4413      	add	r3, r2
 80041ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	1ad2      	subs	r2, r2, r3
 80041c0:	2308      	movs	r3, #8
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d91f      	bls.n	8004208 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80041c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4413      	add	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <pvPortMalloc+0xf8>
	__asm volatile
 80041da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	613b      	str	r3, [r7, #16]
}
 80041ec:	bf00      	nop
 80041ee:	e7fe      	b.n	80041ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	1ad2      	subs	r2, r2, r3
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004202:	69b8      	ldr	r0, [r7, #24]
 8004204:	f000 f908 	bl	8004418 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004208:	4b1d      	ldr	r3, [pc, #116]	; (8004280 <pvPortMalloc+0x188>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	4a1b      	ldr	r2, [pc, #108]	; (8004280 <pvPortMalloc+0x188>)
 8004214:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004216:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <pvPortMalloc+0x188>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	4b1b      	ldr	r3, [pc, #108]	; (8004288 <pvPortMalloc+0x190>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d203      	bcs.n	800422a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004222:	4b17      	ldr	r3, [pc, #92]	; (8004280 <pvPortMalloc+0x188>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a18      	ldr	r2, [pc, #96]	; (8004288 <pvPortMalloc+0x190>)
 8004228:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	4b13      	ldr	r3, [pc, #76]	; (800427c <pvPortMalloc+0x184>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	431a      	orrs	r2, r3
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800423e:	4b13      	ldr	r3, [pc, #76]	; (800428c <pvPortMalloc+0x194>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	3301      	adds	r3, #1
 8004244:	4a11      	ldr	r2, [pc, #68]	; (800428c <pvPortMalloc+0x194>)
 8004246:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004248:	f7ff fa5c 	bl	8003704 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <pvPortMalloc+0x174>
	__asm volatile
 8004256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	60fb      	str	r3, [r7, #12]
}
 8004268:	bf00      	nop
 800426a:	e7fe      	b.n	800426a <pvPortMalloc+0x172>
	return pvReturn;
 800426c:	69fb      	ldr	r3, [r7, #28]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3728      	adds	r7, #40	; 0x28
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	20004058 	.word	0x20004058
 800427c:	2000406c 	.word	0x2000406c
 8004280:	2000405c 	.word	0x2000405c
 8004284:	20004050 	.word	0x20004050
 8004288:	20004060 	.word	0x20004060
 800428c:	20004064 	.word	0x20004064

08004290 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d04d      	beq.n	800433e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80042a2:	2308      	movs	r3, #8
 80042a4:	425b      	negs	r3, r3
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	4413      	add	r3, r2
 80042aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	4b24      	ldr	r3, [pc, #144]	; (8004348 <vPortFree+0xb8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4013      	ands	r3, r2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10a      	bne.n	80042d4 <vPortFree+0x44>
	__asm volatile
 80042be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	60fb      	str	r3, [r7, #12]
}
 80042d0:	bf00      	nop
 80042d2:	e7fe      	b.n	80042d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00a      	beq.n	80042f2 <vPortFree+0x62>
	__asm volatile
 80042dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	60bb      	str	r3, [r7, #8]
}
 80042ee:	bf00      	nop
 80042f0:	e7fe      	b.n	80042f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	4b14      	ldr	r3, [pc, #80]	; (8004348 <vPortFree+0xb8>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4013      	ands	r3, r2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d01e      	beq.n	800433e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d11a      	bne.n	800433e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	4b0e      	ldr	r3, [pc, #56]	; (8004348 <vPortFree+0xb8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	43db      	mvns	r3, r3
 8004312:	401a      	ands	r2, r3
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004318:	f7ff f9e6 	bl	80036e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	4b0a      	ldr	r3, [pc, #40]	; (800434c <vPortFree+0xbc>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4413      	add	r3, r2
 8004326:	4a09      	ldr	r2, [pc, #36]	; (800434c <vPortFree+0xbc>)
 8004328:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800432a:	6938      	ldr	r0, [r7, #16]
 800432c:	f000 f874 	bl	8004418 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004330:	4b07      	ldr	r3, [pc, #28]	; (8004350 <vPortFree+0xc0>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3301      	adds	r3, #1
 8004336:	4a06      	ldr	r2, [pc, #24]	; (8004350 <vPortFree+0xc0>)
 8004338:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800433a:	f7ff f9e3 	bl	8003704 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800433e:	bf00      	nop
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	2000406c 	.word	0x2000406c
 800434c:	2000405c 	.word	0x2000405c
 8004350:	20004068 	.word	0x20004068

08004354 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800435a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800435e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004360:	4b27      	ldr	r3, [pc, #156]	; (8004400 <prvHeapInit+0xac>)
 8004362:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00c      	beq.n	8004388 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	3307      	adds	r3, #7
 8004372:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f023 0307 	bic.w	r3, r3, #7
 800437a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	4a1f      	ldr	r2, [pc, #124]	; (8004400 <prvHeapInit+0xac>)
 8004384:	4413      	add	r3, r2
 8004386:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800438c:	4a1d      	ldr	r2, [pc, #116]	; (8004404 <prvHeapInit+0xb0>)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004392:	4b1c      	ldr	r3, [pc, #112]	; (8004404 <prvHeapInit+0xb0>)
 8004394:	2200      	movs	r2, #0
 8004396:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	4413      	add	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80043a0:	2208      	movs	r2, #8
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	1a9b      	subs	r3, r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0307 	bic.w	r3, r3, #7
 80043ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4a15      	ldr	r2, [pc, #84]	; (8004408 <prvHeapInit+0xb4>)
 80043b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80043b6:	4b14      	ldr	r3, [pc, #80]	; (8004408 <prvHeapInit+0xb4>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2200      	movs	r2, #0
 80043bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80043be:	4b12      	ldr	r3, [pc, #72]	; (8004408 <prvHeapInit+0xb4>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	1ad2      	subs	r2, r2, r3
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80043d4:	4b0c      	ldr	r3, [pc, #48]	; (8004408 <prvHeapInit+0xb4>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	4a0a      	ldr	r2, [pc, #40]	; (800440c <prvHeapInit+0xb8>)
 80043e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	4a09      	ldr	r2, [pc, #36]	; (8004410 <prvHeapInit+0xbc>)
 80043ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80043ec:	4b09      	ldr	r3, [pc, #36]	; (8004414 <prvHeapInit+0xc0>)
 80043ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80043f2:	601a      	str	r2, [r3, #0]
}
 80043f4:	bf00      	nop
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	20000450 	.word	0x20000450
 8004404:	20004050 	.word	0x20004050
 8004408:	20004058 	.word	0x20004058
 800440c:	20004060 	.word	0x20004060
 8004410:	2000405c 	.word	0x2000405c
 8004414:	2000406c 	.word	0x2000406c

08004418 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004420:	4b28      	ldr	r3, [pc, #160]	; (80044c4 <prvInsertBlockIntoFreeList+0xac>)
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	e002      	b.n	800442c <prvInsertBlockIntoFreeList+0x14>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	429a      	cmp	r2, r3
 8004434:	d8f7      	bhi.n	8004426 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	4413      	add	r3, r2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	429a      	cmp	r2, r3
 8004446:	d108      	bne.n	800445a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	441a      	add	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	441a      	add	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d118      	bne.n	80044a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	4b15      	ldr	r3, [pc, #84]	; (80044c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d00d      	beq.n	8004496 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	441a      	add	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	e008      	b.n	80044a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004496:	4b0c      	ldr	r3, [pc, #48]	; (80044c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	e003      	b.n	80044a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d002      	beq.n	80044b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044b6:	bf00      	nop
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	20004050 	.word	0x20004050
 80044c8:	20004058 	.word	0x20004058

080044cc <memset>:
 80044cc:	4402      	add	r2, r0
 80044ce:	4603      	mov	r3, r0
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d100      	bne.n	80044d6 <memset+0xa>
 80044d4:	4770      	bx	lr
 80044d6:	f803 1b01 	strb.w	r1, [r3], #1
 80044da:	e7f9      	b.n	80044d0 <memset+0x4>

080044dc <__libc_init_array>:
 80044dc:	b570      	push	{r4, r5, r6, lr}
 80044de:	4d0d      	ldr	r5, [pc, #52]	; (8004514 <__libc_init_array+0x38>)
 80044e0:	4c0d      	ldr	r4, [pc, #52]	; (8004518 <__libc_init_array+0x3c>)
 80044e2:	1b64      	subs	r4, r4, r5
 80044e4:	10a4      	asrs	r4, r4, #2
 80044e6:	2600      	movs	r6, #0
 80044e8:	42a6      	cmp	r6, r4
 80044ea:	d109      	bne.n	8004500 <__libc_init_array+0x24>
 80044ec:	4d0b      	ldr	r5, [pc, #44]	; (800451c <__libc_init_array+0x40>)
 80044ee:	4c0c      	ldr	r4, [pc, #48]	; (8004520 <__libc_init_array+0x44>)
 80044f0:	f000 f818 	bl	8004524 <_init>
 80044f4:	1b64      	subs	r4, r4, r5
 80044f6:	10a4      	asrs	r4, r4, #2
 80044f8:	2600      	movs	r6, #0
 80044fa:	42a6      	cmp	r6, r4
 80044fc:	d105      	bne.n	800450a <__libc_init_array+0x2e>
 80044fe:	bd70      	pop	{r4, r5, r6, pc}
 8004500:	f855 3b04 	ldr.w	r3, [r5], #4
 8004504:	4798      	blx	r3
 8004506:	3601      	adds	r6, #1
 8004508:	e7ee      	b.n	80044e8 <__libc_init_array+0xc>
 800450a:	f855 3b04 	ldr.w	r3, [r5], #4
 800450e:	4798      	blx	r3
 8004510:	3601      	adds	r6, #1
 8004512:	e7f2      	b.n	80044fa <__libc_init_array+0x1e>
 8004514:	080045d8 	.word	0x080045d8
 8004518:	080045d8 	.word	0x080045d8
 800451c:	080045d8 	.word	0x080045d8
 8004520:	080045dc 	.word	0x080045dc

08004524 <_init>:
 8004524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004526:	bf00      	nop
 8004528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452a:	bc08      	pop	{r3}
 800452c:	469e      	mov	lr, r3
 800452e:	4770      	bx	lr

08004530 <_fini>:
 8004530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004532:	bf00      	nop
 8004534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004536:	bc08      	pop	{r3}
 8004538:	469e      	mov	lr, r3
 800453a:	4770      	bx	lr
