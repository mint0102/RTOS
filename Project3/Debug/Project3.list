
Project3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08006654  08006654  00016654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006754  08006754  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08006754  08006754  00016754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800675c  0800675c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800675c  0800675c  0001675c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006760  08006760  00016760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          000041b4  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004220  20004220  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013e89  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003156  00000000  00000000  00033f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012c0  00000000  00000000  000370c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e87  00000000  00000000  00038380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023b45  00000000  00000000  00039207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016a6a  00000000  00000000  0005cd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5dcb  00000000  00000000  000737b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000055bc  00000000  00000000  00149584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  0014eb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800663c 	.word	0x0800663c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800663c 	.word	0x0800663c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	4a07      	ldr	r2, [pc, #28]	; (8000598 <vApplicationGetIdleTaskMemory+0x2c>)
 800057c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <vApplicationGetIdleTaskMemory+0x30>)
 8000582:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000088 	.word	0x20000088
 800059c:	200000dc 	.word	0x200000dc

080005a0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005a8:	1d39      	adds	r1, r7, #4
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	2201      	movs	r2, #1
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <__io_putchar+0x20>)
 80005b2:	f001 fe7f 	bl	80022b4 <HAL_UART_Transmit>
	return ch;
 80005b6:	687b      	ldr	r3, [r7, #4]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	200002dc 	.word	0x200002dc

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b092      	sub	sp, #72	; 0x48
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fb65 	bl	8000c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f84b 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f8dd 	bl	8000790 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005d6:	f000 f8b1 	bl	800073c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Application start %d\n");
 80005da:	481c      	ldr	r0, [pc, #112]	; (800064c <main+0x88>)
 80005dc:	f005 f950 	bl	8005880 <iprintf>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of Queue01 */
  osMessageQDef(Queue01, 256, uint8_t);
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <main+0x8c>)
 80005e2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue01Handle = osMessageCreate(osMessageQ(Queue01), NULL);
 80005ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 fea1 	bl	800333a <osMessageCreate>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a16      	ldr	r2, [pc, #88]	; (8000654 <main+0x90>)
 80005fc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Sender1 */
  osThreadDef(Sender1, StartSender1, osPriorityNormal, 0, 512);
 80005fe:	4b16      	ldr	r3, [pc, #88]	; (8000658 <main+0x94>)
 8000600:	f107 041c 	add.w	r4, r7, #28
 8000604:	461d      	mov	r5, r3
 8000606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Sender1Handle = osThreadCreate(osThread(Sender1), NULL);
 8000612:	f107 031c 	add.w	r3, r7, #28
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f002 fe2e 	bl	800327a <osThreadCreate>
 800061e:	4603      	mov	r3, r0
 8000620:	4a0e      	ldr	r2, [pc, #56]	; (800065c <main+0x98>)
 8000622:	6013      	str	r3, [r2, #0]

  /* definition and creation of Receiver */
  osThreadDef(Receiver, StartReceiver, osPriorityNormal, 0, 512);
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <main+0x9c>)
 8000626:	463c      	mov	r4, r7
 8000628:	461d      	mov	r5, r3
 800062a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000632:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReceiverHandle = osThreadCreate(osThread(Receiver), NULL);
 8000636:	463b      	mov	r3, r7
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fe1d 	bl	800327a <osThreadCreate>
 8000640:	4603      	mov	r3, r0
 8000642:	4a08      	ldr	r2, [pc, #32]	; (8000664 <main+0xa0>)
 8000644:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000646:	f002 fe11 	bl	800326c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064a:	e7fe      	b.n	800064a <main+0x86>
 800064c:	08006654 	.word	0x08006654
 8000650:	0800666c 	.word	0x0800666c
 8000654:	2000032c 	.word	0x2000032c
 8000658:	08006684 	.word	0x08006684
 800065c:	20000324 	.word	0x20000324
 8000660:	080066ac 	.word	0x080066ac
 8000664:	20000328 	.word	0x20000328

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	; 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	2230      	movs	r2, #48	; 0x30
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f005 fa48 	bl	8005b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	4b28      	ldr	r3, [pc, #160]	; (8000734 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	4a27      	ldr	r2, [pc, #156]	; (8000734 <SystemClock_Config+0xcc>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	; 0x40
 800069c:	4b25      	ldr	r3, [pc, #148]	; (8000734 <SystemClock_Config+0xcc>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b22      	ldr	r3, [pc, #136]	; (8000738 <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a21      	ldr	r2, [pc, #132]	; (8000738 <SystemClock_Config+0xd0>)
 80006b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <SystemClock_Config+0xd0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c4:	2302      	movs	r3, #2
 80006c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006cc:	2310      	movs	r3, #16
 80006ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d0:	2302      	movs	r3, #2
 80006d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d4:	2300      	movs	r3, #0
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d8:	2308      	movs	r3, #8
 80006da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006dc:	23a8      	movs	r3, #168	; 0xa8
 80006de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e4:	2304      	movs	r3, #4
 80006e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 0320 	add.w	r3, r7, #32
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 fe25 	bl	800133c <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f8:	f000 f8c7 	bl	800088a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	230f      	movs	r3, #15
 80006fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000700:	2302      	movs	r3, #2
 8000702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000708:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800070c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800070e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000712:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2105      	movs	r1, #5
 800071a:	4618      	mov	r0, r3
 800071c:	f001 f886 	bl	800182c <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000726:	f000 f8b0 	bl	800088a <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	3750      	adds	r7, #80	; 0x50
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <MX_USART1_UART_Init+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000774:	f001 fd4e 	bl	8002214 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800077e:	f000 f884 	bl	800088a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200002dc 	.word	0x200002dc
 800078c:	40011000 	.word	0x40011000

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_GPIO_Init+0x68>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a16      	ldr	r2, [pc, #88]	; (80007f8 <MX_GPIO_Init+0x68>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_GPIO_Init+0x68>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_GPIO_Init+0x68>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a0f      	ldr	r2, [pc, #60]	; (80007f8 <MX_GPIO_Init+0x68>)
 80007bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <MX_GPIO_Init+0x68>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_GPIO_Init+0x68>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <MX_GPIO_Init+0x68>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_GPIO_Init+0x68>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ea:	bf00      	nop
 80007ec:	3714      	adds	r7, #20
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800

080007fc <StartSender1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSender1 */
void StartSender1(void const * argument)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	for(;;)
	  {
		  printf("Task1 \n");
 8000804:	4808      	ldr	r0, [pc, #32]	; (8000828 <StartSender1+0x2c>)
 8000806:	f005 f8a1 	bl	800594c <puts>
		  osMessagePut(Queue01Handle,0x1,200);
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <StartSender1+0x30>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	22c8      	movs	r2, #200	; 0xc8
 8000810:	2101      	movs	r1, #1
 8000812:	4618      	mov	r0, r3
 8000814:	f002 fdba 	bl	800338c <osMessagePut>
		  printf("Task1 delay \n");
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <StartSender1+0x34>)
 800081a:	f005 f897 	bl	800594c <puts>
		  osDelay(1000);
 800081e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000822:	f002 fd76 	bl	8003312 <osDelay>
		  printf("Task1 \n");
 8000826:	e7ed      	b.n	8000804 <StartSender1+0x8>
 8000828:	080066c8 	.word	0x080066c8
 800082c:	2000032c 	.word	0x2000032c
 8000830:	080066d0 	.word	0x080066d0

08000834 <StartReceiver>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiver */
void StartReceiver(void const * argument)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceiver */
	osEvent retvalue;
  /* Infinite loop */
  for(;;)
  {
	  printf("Task2 \n");
 800083c:	4808      	ldr	r0, [pc, #32]	; (8000860 <StartReceiver+0x2c>)
 800083e:	f005 f885 	bl	800594c <puts>
	  retvalue=osMessageGet(Queue01Handle,4000);
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <StartReceiver+0x30>)
 8000844:	6819      	ldr	r1, [r3, #0]
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800084e:	4618      	mov	r0, r3
 8000850:	f002 fddc 	bl	800340c <osMessageGet>
	  printf("Received value: %lu\n",retvalue.value.p);
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	4619      	mov	r1, r3
 8000858:	4803      	ldr	r0, [pc, #12]	; (8000868 <StartReceiver+0x34>)
 800085a:	f005 f811 	bl	8005880 <iprintf>
	  printf("Task2 \n");
 800085e:	e7ed      	b.n	800083c <StartReceiver+0x8>
 8000860:	080066e0 	.word	0x080066e0
 8000864:	2000032c 	.word	0x2000032c
 8000868:	080066e8 	.word	0x080066e8

0800086c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800087c:	d101      	bne.n	8000882 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800087e:	f000 fa2d 	bl	8000cdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088e:	b672      	cpsid	i
}
 8000890:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000892:	e7fe      	b.n	8000892 <Error_Handler+0x8>

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <HAL_MspInit+0x54>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	4a11      	ldr	r2, [pc, #68]	; (80008e8 <HAL_MspInit+0x54>)
 80008a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a8:	6453      	str	r3, [r2, #68]	; 0x44
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <HAL_MspInit+0x54>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <HAL_MspInit+0x54>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <HAL_MspInit+0x54>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c4:	6413      	str	r3, [r2, #64]	; 0x40
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <HAL_MspInit+0x54>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	210f      	movs	r1, #15
 80008d6:	f06f 0001 	mvn.w	r0, #1
 80008da:	f000 fad7 	bl	8000e8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a1d      	ldr	r2, [pc, #116]	; (8000980 <HAL_UART_MspInit+0x94>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d134      	bne.n	8000978 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <HAL_UART_MspInit+0x98>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	4a1b      	ldr	r2, [pc, #108]	; (8000984 <HAL_UART_MspInit+0x98>)
 8000918:	f043 0310 	orr.w	r3, r3, #16
 800091c:	6453      	str	r3, [r2, #68]	; 0x44
 800091e:	4b19      	ldr	r3, [pc, #100]	; (8000984 <HAL_UART_MspInit+0x98>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	f003 0310 	and.w	r3, r3, #16
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <HAL_UART_MspInit+0x98>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a14      	ldr	r2, [pc, #80]	; (8000984 <HAL_UART_MspInit+0x98>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_UART_MspInit+0x98>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000946:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800094a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000954:	2303      	movs	r3, #3
 8000956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000958:	2307      	movs	r3, #7
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4619      	mov	r1, r3
 8000962:	4809      	ldr	r0, [pc, #36]	; (8000988 <HAL_UART_MspInit+0x9c>)
 8000964:	f000 fb4e 	bl	8001004 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000968:	2200      	movs	r2, #0
 800096a:	2105      	movs	r1, #5
 800096c:	2025      	movs	r0, #37	; 0x25
 800096e:	f000 fa8d 	bl	8000e8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000972:	2025      	movs	r0, #37	; 0x25
 8000974:	f000 faa6 	bl	8000ec4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000978:	bf00      	nop
 800097a:	3728      	adds	r7, #40	; 0x28
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40011000 	.word	0x40011000
 8000984:	40023800 	.word	0x40023800
 8000988:	40020000 	.word	0x40020000

0800098c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08e      	sub	sp, #56	; 0x38
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000998:	2300      	movs	r3, #0
 800099a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	4b34      	ldr	r3, [pc, #208]	; (8000a74 <HAL_InitTick+0xe8>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a4:	4a33      	ldr	r2, [pc, #204]	; (8000a74 <HAL_InitTick+0xe8>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6413      	str	r3, [r2, #64]	; 0x40
 80009ac:	4b31      	ldr	r3, [pc, #196]	; (8000a74 <HAL_InitTick+0xe8>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009b8:	f107 0210 	add.w	r2, r7, #16
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4611      	mov	r1, r2
 80009c2:	4618      	mov	r0, r3
 80009c4:	f001 f952 	bl	8001c6c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009c8:	6a3b      	ldr	r3, [r7, #32]
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d103      	bne.n	80009da <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009d2:	f001 f923 	bl	8001c1c <HAL_RCC_GetPCLK1Freq>
 80009d6:	6378      	str	r0, [r7, #52]	; 0x34
 80009d8:	e004      	b.n	80009e4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009da:	f001 f91f 	bl	8001c1c <HAL_RCC_GetPCLK1Freq>
 80009de:	4603      	mov	r3, r0
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e6:	4a24      	ldr	r2, [pc, #144]	; (8000a78 <HAL_InitTick+0xec>)
 80009e8:	fba2 2303 	umull	r2, r3, r2, r3
 80009ec:	0c9b      	lsrs	r3, r3, #18
 80009ee:	3b01      	subs	r3, #1
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80009f2:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <HAL_InitTick+0xf0>)
 80009f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80009fa:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <HAL_InitTick+0xf0>)
 80009fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a00:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000a02:	4a1e      	ldr	r2, [pc, #120]	; (8000a7c <HAL_InitTick+0xf0>)
 8000a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a06:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000a08:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <HAL_InitTick+0xf0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0e:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <HAL_InitTick+0xf0>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a14:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <HAL_InitTick+0xf0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000a1a:	4818      	ldr	r0, [pc, #96]	; (8000a7c <HAL_InitTick+0xf0>)
 8000a1c:	f001 f958 	bl	8001cd0 <HAL_TIM_Base_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d11b      	bne.n	8000a66 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000a2e:	4813      	ldr	r0, [pc, #76]	; (8000a7c <HAL_InitTick+0xf0>)
 8000a30:	f001 f9a8 	bl	8001d84 <HAL_TIM_Base_Start_IT>
 8000a34:	4603      	mov	r3, r0
 8000a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d111      	bne.n	8000a66 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a42:	201c      	movs	r0, #28
 8000a44:	f000 fa3e 	bl	8000ec4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b0f      	cmp	r3, #15
 8000a4c:	d808      	bhi.n	8000a60 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	6879      	ldr	r1, [r7, #4]
 8000a52:	201c      	movs	r0, #28
 8000a54:	f000 fa1a 	bl	8000e8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a58:	4a09      	ldr	r2, [pc, #36]	; (8000a80 <HAL_InitTick+0xf4>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6013      	str	r3, [r2, #0]
 8000a5e:	e002      	b.n	8000a66 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000a60:	2301      	movs	r3, #1
 8000a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3738      	adds	r7, #56	; 0x38
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800
 8000a78:	431bde83 	.word	0x431bde83
 8000a7c:	20000330 	.word	0x20000330
 8000a80:	20000004 	.word	0x20000004

08000a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a88:	e7fe      	b.n	8000a88 <NMI_Handler+0x4>

08000a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <HardFault_Handler+0x4>

08000a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <MemManage_Handler+0x4>

08000a96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <BusFault_Handler+0x4>

08000a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <UsageFault_Handler+0x4>

08000aa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ab4:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <TIM2_IRQHandler+0x10>)
 8000ab6:	f001 f9d5 	bl	8001e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000330 	.word	0x20000330

08000ac4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ac8:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <USART1_IRQHandler+0x10>)
 8000aca:	f001 fc7f 	bl	80023cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200002dc 	.word	0x200002dc

08000ad8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	e00a      	b.n	8000b00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aea:	f3af 8000 	nop.w
 8000aee:	4601      	mov	r1, r0
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	1c5a      	adds	r2, r3, #1
 8000af4:	60ba      	str	r2, [r7, #8]
 8000af6:	b2ca      	uxtb	r2, r1
 8000af8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	3301      	adds	r3, #1
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	697a      	ldr	r2, [r7, #20]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	dbf0      	blt.n	8000aea <_read+0x12>
  }

  return len;
 8000b08:	687b      	ldr	r3, [r7, #4]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b086      	sub	sp, #24
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	60f8      	str	r0, [r7, #12]
 8000b1a:	60b9      	str	r1, [r7, #8]
 8000b1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	e009      	b.n	8000b38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	1c5a      	adds	r2, r3, #1
 8000b28:	60ba      	str	r2, [r7, #8]
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fd37 	bl	80005a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	3301      	adds	r3, #1
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	697a      	ldr	r2, [r7, #20]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	dbf1      	blt.n	8000b24 <_write+0x12>
  }
  return len;
 8000b40:	687b      	ldr	r3, [r7, #4]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <_close>:

int _close(int file)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
 8000b6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b72:	605a      	str	r2, [r3, #4]
  return 0;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <_isatty>:

int _isatty(int file)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b083      	sub	sp, #12
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b8a:	2301      	movs	r3, #1
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
	...

08000bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bbc:	4a14      	ldr	r2, [pc, #80]	; (8000c10 <_sbrk+0x5c>)
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <_sbrk+0x60>)
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc8:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <_sbrk+0x64>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d102      	bne.n	8000bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <_sbrk+0x64>)
 8000bd2:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <_sbrk+0x68>)
 8000bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d207      	bcs.n	8000bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be4:	f004 ffe0 	bl	8005ba8 <__errno>
 8000be8:	4603      	mov	r3, r0
 8000bea:	220c      	movs	r2, #12
 8000bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf2:	e009      	b.n	8000c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <_sbrk+0x64>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bfa:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <_sbrk+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <_sbrk+0x64>)
 8000c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c06:	68fb      	ldr	r3, [r7, #12]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20020000 	.word	0x20020000
 8000c14:	00000400 	.word	0x00000400
 8000c18:	20000378 	.word	0x20000378
 8000c1c:	20004220 	.word	0x20004220

08000c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <SystemInit+0x20>)
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <SystemInit+0x20>)
 8000c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c48:	f7ff ffea 	bl	8000c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c4c:	480c      	ldr	r0, [pc, #48]	; (8000c80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c4e:	490d      	ldr	r1, [pc, #52]	; (8000c84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c50:	4a0d      	ldr	r2, [pc, #52]	; (8000c88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c54:	e002      	b.n	8000c5c <LoopCopyDataInit>

08000c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5a:	3304      	adds	r3, #4

08000c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c60:	d3f9      	bcc.n	8000c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c62:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c64:	4c0a      	ldr	r4, [pc, #40]	; (8000c90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c68:	e001      	b.n	8000c6e <LoopFillZerobss>

08000c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c6c:	3204      	adds	r2, #4

08000c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c70:	d3fb      	bcc.n	8000c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c72:	f004 ff9f 	bl	8005bb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c76:	f7ff fca5 	bl	80005c4 <main>
  bx  lr    
 8000c7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c84:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c88:	08006764 	.word	0x08006764
  ldr r2, =_sbss
 8000c8c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c90:	20004220 	.word	0x20004220

08000c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC_IRQHandler>
	...

08000c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	; (8000cd8 <HAL_Init+0x40>)
 8000ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_Init+0x40>)
 8000cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <HAL_Init+0x40>)
 8000cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f8d8 	bl	8000e76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc6:	200f      	movs	r0, #15
 8000cc8:	f7ff fe60 	bl	800098c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ccc:	f7ff fde2 	bl	8000894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023c00 	.word	0x40023c00

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	2000037c 	.word	0x2000037c

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	2000037c 	.word	0x2000037c

08000d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db0b      	blt.n	8000daa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	4907      	ldr	r1, [pc, #28]	; (8000db8 <__NVIC_EnableIRQ+0x38>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	2001      	movs	r0, #1
 8000da2:	fa00 f202 	lsl.w	r2, r0, r2
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	; (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	; (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	; 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ff4c 	bl	8000d1c <__NVIC_SetPriorityGrouping>
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9e:	f7ff ff61 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8000ea2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	68b9      	ldr	r1, [r7, #8]
 8000ea8:	6978      	ldr	r0, [r7, #20]
 8000eaa:	f7ff ffb1 	bl	8000e10 <NVIC_EncodePriority>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ff80 	bl	8000dbc <__NVIC_SetPriority>
}
 8000ebc:	bf00      	nop
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff54 	bl	8000d80 <__NVIC_EnableIRQ>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000eee:	f7ff ff09 	bl	8000d04 <HAL_GetTick>
 8000ef2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d008      	beq.n	8000f12 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2280      	movs	r2, #128	; 0x80
 8000f04:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e052      	b.n	8000fb8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f022 0216 	bic.w	r2, r2, #22
 8000f20:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	695a      	ldr	r2, [r3, #20]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f30:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d103      	bne.n	8000f42 <HAL_DMA_Abort+0x62>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d007      	beq.n	8000f52 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f022 0208 	bic.w	r2, r2, #8
 8000f50:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f022 0201 	bic.w	r2, r2, #1
 8000f60:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f62:	e013      	b.n	8000f8c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f64:	f7ff fece 	bl	8000d04 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b05      	cmp	r3, #5
 8000f70:	d90c      	bls.n	8000f8c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2220      	movs	r2, #32
 8000f76:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e015      	b.n	8000fb8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1e4      	bne.n	8000f64 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f9e:	223f      	movs	r2, #63	; 0x3f
 8000fa0:	409a      	lsls	r2, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d004      	beq.n	8000fde <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2280      	movs	r2, #128	; 0x80
 8000fd8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00c      	b.n	8000ff8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2205      	movs	r2, #5
 8000fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 0201 	bic.w	r2, r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	; 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
 800101e:	e16b      	b.n	80012f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001020:	2201      	movs	r2, #1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	429a      	cmp	r2, r3
 800103a:	f040 815a 	bne.w	80012f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	2b01      	cmp	r3, #1
 8001048:	d005      	beq.n	8001056 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001052:	2b02      	cmp	r3, #2
 8001054:	d130      	bne.n	80010b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	2203      	movs	r2, #3
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	68da      	ldr	r2, [r3, #12]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800108c:	2201      	movs	r2, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	091b      	lsrs	r3, r3, #4
 80010a2:	f003 0201 	and.w	r2, r3, #1
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d017      	beq.n	80010f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d123      	bne.n	8001148 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	08da      	lsrs	r2, r3, #3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3208      	adds	r2, #8
 8001108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	f003 0307 	and.w	r3, r3, #7
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	220f      	movs	r2, #15
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	691a      	ldr	r2, [r3, #16]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	08da      	lsrs	r2, r3, #3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3208      	adds	r2, #8
 8001142:	69b9      	ldr	r1, [r7, #24]
 8001144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0203 	and.w	r2, r3, #3
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 80b4 	beq.w	80012f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b60      	ldr	r3, [pc, #384]	; (8001310 <HAL_GPIO_Init+0x30c>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	4a5f      	ldr	r2, [pc, #380]	; (8001310 <HAL_GPIO_Init+0x30c>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001198:	6453      	str	r3, [r2, #68]	; 0x44
 800119a:	4b5d      	ldr	r3, [pc, #372]	; (8001310 <HAL_GPIO_Init+0x30c>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011a6:	4a5b      	ldr	r2, [pc, #364]	; (8001314 <HAL_GPIO_Init+0x310>)
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	3302      	adds	r3, #2
 80011ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	220f      	movs	r2, #15
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a52      	ldr	r2, [pc, #328]	; (8001318 <HAL_GPIO_Init+0x314>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d02b      	beq.n	800122a <HAL_GPIO_Init+0x226>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a51      	ldr	r2, [pc, #324]	; (800131c <HAL_GPIO_Init+0x318>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d025      	beq.n	8001226 <HAL_GPIO_Init+0x222>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a50      	ldr	r2, [pc, #320]	; (8001320 <HAL_GPIO_Init+0x31c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d01f      	beq.n	8001222 <HAL_GPIO_Init+0x21e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4f      	ldr	r2, [pc, #316]	; (8001324 <HAL_GPIO_Init+0x320>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d019      	beq.n	800121e <HAL_GPIO_Init+0x21a>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4e      	ldr	r2, [pc, #312]	; (8001328 <HAL_GPIO_Init+0x324>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d013      	beq.n	800121a <HAL_GPIO_Init+0x216>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4d      	ldr	r2, [pc, #308]	; (800132c <HAL_GPIO_Init+0x328>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d00d      	beq.n	8001216 <HAL_GPIO_Init+0x212>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4c      	ldr	r2, [pc, #304]	; (8001330 <HAL_GPIO_Init+0x32c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d007      	beq.n	8001212 <HAL_GPIO_Init+0x20e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4b      	ldr	r2, [pc, #300]	; (8001334 <HAL_GPIO_Init+0x330>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d101      	bne.n	800120e <HAL_GPIO_Init+0x20a>
 800120a:	2307      	movs	r3, #7
 800120c:	e00e      	b.n	800122c <HAL_GPIO_Init+0x228>
 800120e:	2308      	movs	r3, #8
 8001210:	e00c      	b.n	800122c <HAL_GPIO_Init+0x228>
 8001212:	2306      	movs	r3, #6
 8001214:	e00a      	b.n	800122c <HAL_GPIO_Init+0x228>
 8001216:	2305      	movs	r3, #5
 8001218:	e008      	b.n	800122c <HAL_GPIO_Init+0x228>
 800121a:	2304      	movs	r3, #4
 800121c:	e006      	b.n	800122c <HAL_GPIO_Init+0x228>
 800121e:	2303      	movs	r3, #3
 8001220:	e004      	b.n	800122c <HAL_GPIO_Init+0x228>
 8001222:	2302      	movs	r3, #2
 8001224:	e002      	b.n	800122c <HAL_GPIO_Init+0x228>
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <HAL_GPIO_Init+0x228>
 800122a:	2300      	movs	r3, #0
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	f002 0203 	and.w	r2, r2, #3
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	4093      	lsls	r3, r2
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800123c:	4935      	ldr	r1, [pc, #212]	; (8001314 <HAL_GPIO_Init+0x310>)
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	089b      	lsrs	r3, r3, #2
 8001242:	3302      	adds	r3, #2
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124a:	4b3b      	ldr	r3, [pc, #236]	; (8001338 <HAL_GPIO_Init+0x334>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800126e:	4a32      	ldr	r2, [pc, #200]	; (8001338 <HAL_GPIO_Init+0x334>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001274:	4b30      	ldr	r3, [pc, #192]	; (8001338 <HAL_GPIO_Init+0x334>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001298:	4a27      	ldr	r2, [pc, #156]	; (8001338 <HAL_GPIO_Init+0x334>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800129e:	4b26      	ldr	r3, [pc, #152]	; (8001338 <HAL_GPIO_Init+0x334>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012c2:	4a1d      	ldr	r2, [pc, #116]	; (8001338 <HAL_GPIO_Init+0x334>)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012c8:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <HAL_GPIO_Init+0x334>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ec:	4a12      	ldr	r2, [pc, #72]	; (8001338 <HAL_GPIO_Init+0x334>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3301      	adds	r3, #1
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	2b0f      	cmp	r3, #15
 80012fc:	f67f ae90 	bls.w	8001020 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	3724      	adds	r7, #36	; 0x24
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	40013800 	.word	0x40013800
 8001318:	40020000 	.word	0x40020000
 800131c:	40020400 	.word	0x40020400
 8001320:	40020800 	.word	0x40020800
 8001324:	40020c00 	.word	0x40020c00
 8001328:	40021000 	.word	0x40021000
 800132c:	40021400 	.word	0x40021400
 8001330:	40021800 	.word	0x40021800
 8001334:	40021c00 	.word	0x40021c00
 8001338:	40013c00 	.word	0x40013c00

0800133c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e267      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d075      	beq.n	8001446 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800135a:	4b88      	ldr	r3, [pc, #544]	; (800157c <HAL_RCC_OscConfig+0x240>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b04      	cmp	r3, #4
 8001364:	d00c      	beq.n	8001380 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001366:	4b85      	ldr	r3, [pc, #532]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800136e:	2b08      	cmp	r3, #8
 8001370:	d112      	bne.n	8001398 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001372:	4b82      	ldr	r3, [pc, #520]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800137e:	d10b      	bne.n	8001398 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001380:	4b7e      	ldr	r3, [pc, #504]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d05b      	beq.n	8001444 <HAL_RCC_OscConfig+0x108>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d157      	bne.n	8001444 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e242      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a0:	d106      	bne.n	80013b0 <HAL_RCC_OscConfig+0x74>
 80013a2:	4b76      	ldr	r3, [pc, #472]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a75      	ldr	r2, [pc, #468]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e01d      	b.n	80013ec <HAL_RCC_OscConfig+0xb0>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013b8:	d10c      	bne.n	80013d4 <HAL_RCC_OscConfig+0x98>
 80013ba:	4b70      	ldr	r3, [pc, #448]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a6f      	ldr	r2, [pc, #444]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	4b6d      	ldr	r3, [pc, #436]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a6c      	ldr	r2, [pc, #432]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e00b      	b.n	80013ec <HAL_RCC_OscConfig+0xb0>
 80013d4:	4b69      	ldr	r3, [pc, #420]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a68      	ldr	r2, [pc, #416]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	4b66      	ldr	r3, [pc, #408]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a65      	ldr	r2, [pc, #404]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d013      	beq.n	800141c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fc86 	bl	8000d04 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013fc:	f7ff fc82 	bl	8000d04 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b64      	cmp	r3, #100	; 0x64
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e207      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140e:	4b5b      	ldr	r3, [pc, #364]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0f0      	beq.n	80013fc <HAL_RCC_OscConfig+0xc0>
 800141a:	e014      	b.n	8001446 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff fc72 	bl	8000d04 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001424:	f7ff fc6e 	bl	8000d04 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b64      	cmp	r3, #100	; 0x64
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e1f3      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001436:	4b51      	ldr	r3, [pc, #324]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0xe8>
 8001442:	e000      	b.n	8001446 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d063      	beq.n	800151a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001452:	4b4a      	ldr	r3, [pc, #296]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00b      	beq.n	8001476 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800145e:	4b47      	ldr	r3, [pc, #284]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001466:	2b08      	cmp	r3, #8
 8001468:	d11c      	bne.n	80014a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800146a:	4b44      	ldr	r3, [pc, #272]	; (800157c <HAL_RCC_OscConfig+0x240>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d116      	bne.n	80014a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001476:	4b41      	ldr	r3, [pc, #260]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d005      	beq.n	800148e <HAL_RCC_OscConfig+0x152>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d001      	beq.n	800148e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e1c7      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148e:	4b3b      	ldr	r3, [pc, #236]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4937      	ldr	r1, [pc, #220]	; (800157c <HAL_RCC_OscConfig+0x240>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a2:	e03a      	b.n	800151a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d020      	beq.n	80014ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ac:	4b34      	ldr	r3, [pc, #208]	; (8001580 <HAL_RCC_OscConfig+0x244>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b2:	f7ff fc27 	bl	8000d04 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ba:	f7ff fc23 	bl	8000d04 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e1a8      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014cc:	4b2b      	ldr	r3, [pc, #172]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d8:	4b28      	ldr	r3, [pc, #160]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	4925      	ldr	r1, [pc, #148]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	600b      	str	r3, [r1, #0]
 80014ec:	e015      	b.n	800151a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ee:	4b24      	ldr	r3, [pc, #144]	; (8001580 <HAL_RCC_OscConfig+0x244>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff fc06 	bl	8000d04 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014fc:	f7ff fc02 	bl	8000d04 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e187      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b00      	cmp	r3, #0
 8001524:	d036      	beq.n	8001594 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d016      	beq.n	800155c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <HAL_RCC_OscConfig+0x248>)
 8001530:	2201      	movs	r2, #1
 8001532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001534:	f7ff fbe6 	bl	8000d04 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800153c:	f7ff fbe2 	bl	8000d04 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e167      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x200>
 800155a:	e01b      	b.n	8001594 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_RCC_OscConfig+0x248>)
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001562:	f7ff fbcf 	bl	8000d04 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001568:	e00e      	b.n	8001588 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800156a:	f7ff fbcb 	bl	8000d04 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d907      	bls.n	8001588 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e150      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
 800157c:	40023800 	.word	0x40023800
 8001580:	42470000 	.word	0x42470000
 8001584:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001588:	4b88      	ldr	r3, [pc, #544]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 800158a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1ea      	bne.n	800156a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 8097 	beq.w	80016d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015a6:	4b81      	ldr	r3, [pc, #516]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10f      	bne.n	80015d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	4b7d      	ldr	r3, [pc, #500]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	4a7c      	ldr	r2, [pc, #496]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80015bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c0:	6413      	str	r3, [r2, #64]	; 0x40
 80015c2:	4b7a      	ldr	r3, [pc, #488]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ce:	2301      	movs	r3, #1
 80015d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d2:	4b77      	ldr	r3, [pc, #476]	; (80017b0 <HAL_RCC_OscConfig+0x474>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d118      	bne.n	8001610 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015de:	4b74      	ldr	r3, [pc, #464]	; (80017b0 <HAL_RCC_OscConfig+0x474>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a73      	ldr	r2, [pc, #460]	; (80017b0 <HAL_RCC_OscConfig+0x474>)
 80015e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ea:	f7ff fb8b 	bl	8000d04 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f2:	f7ff fb87 	bl	8000d04 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e10c      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001604:	4b6a      	ldr	r3, [pc, #424]	; (80017b0 <HAL_RCC_OscConfig+0x474>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d106      	bne.n	8001626 <HAL_RCC_OscConfig+0x2ea>
 8001618:	4b64      	ldr	r3, [pc, #400]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 800161a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161c:	4a63      	ldr	r2, [pc, #396]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6713      	str	r3, [r2, #112]	; 0x70
 8001624:	e01c      	b.n	8001660 <HAL_RCC_OscConfig+0x324>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2b05      	cmp	r3, #5
 800162c:	d10c      	bne.n	8001648 <HAL_RCC_OscConfig+0x30c>
 800162e:	4b5f      	ldr	r3, [pc, #380]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001632:	4a5e      	ldr	r2, [pc, #376]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001634:	f043 0304 	orr.w	r3, r3, #4
 8001638:	6713      	str	r3, [r2, #112]	; 0x70
 800163a:	4b5c      	ldr	r3, [pc, #368]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 800163c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163e:	4a5b      	ldr	r2, [pc, #364]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6713      	str	r3, [r2, #112]	; 0x70
 8001646:	e00b      	b.n	8001660 <HAL_RCC_OscConfig+0x324>
 8001648:	4b58      	ldr	r3, [pc, #352]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 800164a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164c:	4a57      	ldr	r2, [pc, #348]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 800164e:	f023 0301 	bic.w	r3, r3, #1
 8001652:	6713      	str	r3, [r2, #112]	; 0x70
 8001654:	4b55      	ldr	r3, [pc, #340]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001658:	4a54      	ldr	r2, [pc, #336]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 800165a:	f023 0304 	bic.w	r3, r3, #4
 800165e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d015      	beq.n	8001694 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001668:	f7ff fb4c 	bl	8000d04 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800166e:	e00a      	b.n	8001686 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001670:	f7ff fb48 	bl	8000d04 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	f241 3288 	movw	r2, #5000	; 0x1388
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e0cb      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001686:	4b49      	ldr	r3, [pc, #292]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0ee      	beq.n	8001670 <HAL_RCC_OscConfig+0x334>
 8001692:	e014      	b.n	80016be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001694:	f7ff fb36 	bl	8000d04 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800169a:	e00a      	b.n	80016b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800169c:	f7ff fb32 	bl	8000d04 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e0b5      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b2:	4b3e      	ldr	r3, [pc, #248]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80016b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1ee      	bne.n	800169c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016be:	7dfb      	ldrb	r3, [r7, #23]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d105      	bne.n	80016d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c4:	4b39      	ldr	r3, [pc, #228]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	4a38      	ldr	r2, [pc, #224]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80016ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 80a1 	beq.w	800181c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016da:	4b34      	ldr	r3, [pc, #208]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d05c      	beq.n	80017a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d141      	bne.n	8001772 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ee:	4b31      	ldr	r3, [pc, #196]	; (80017b4 <HAL_RCC_OscConfig+0x478>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff fb06 	bl	8000d04 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fc:	f7ff fb02 	bl	8000d04 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e087      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170e:	4b27      	ldr	r3, [pc, #156]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69da      	ldr	r2, [r3, #28]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001728:	019b      	lsls	r3, r3, #6
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001730:	085b      	lsrs	r3, r3, #1
 8001732:	3b01      	subs	r3, #1
 8001734:	041b      	lsls	r3, r3, #16
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	061b      	lsls	r3, r3, #24
 800173e:	491b      	ldr	r1, [pc, #108]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_RCC_OscConfig+0x478>)
 8001746:	2201      	movs	r2, #1
 8001748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174a:	f7ff fadb 	bl	8000d04 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001752:	f7ff fad7 	bl	8000d04 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e05c      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x416>
 8001770:	e054      	b.n	800181c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <HAL_RCC_OscConfig+0x478>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff fac4 	bl	8000d04 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001780:	f7ff fac0 	bl	8000d04 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e045      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x444>
 800179e:	e03d      	b.n	800181c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d107      	bne.n	80017b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e038      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40007000 	.word	0x40007000
 80017b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <HAL_RCC_OscConfig+0x4ec>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d028      	beq.n	8001818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d121      	bne.n	8001818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017de:	429a      	cmp	r2, r3
 80017e0:	d11a      	bne.n	8001818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017e8:	4013      	ands	r3, r2
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d111      	bne.n	8001818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fe:	085b      	lsrs	r3, r3, #1
 8001800:	3b01      	subs	r3, #1
 8001802:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001804:	429a      	cmp	r2, r3
 8001806:	d107      	bne.n	8001818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001812:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001814:	429a      	cmp	r2, r3
 8001816:	d001      	beq.n	800181c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e000      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40023800 	.word	0x40023800

0800182c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e0cc      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001840:	4b68      	ldr	r3, [pc, #416]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d90c      	bls.n	8001868 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184e:	4b65      	ldr	r3, [pc, #404]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001856:	4b63      	ldr	r3, [pc, #396]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0b8      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d020      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001880:	4b59      	ldr	r3, [pc, #356]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	4a58      	ldr	r2, [pc, #352]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800188a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001898:	4b53      	ldr	r3, [pc, #332]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	4a52      	ldr	r2, [pc, #328]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a4:	4b50      	ldr	r3, [pc, #320]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	494d      	ldr	r1, [pc, #308]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d044      	beq.n	800194c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d107      	bne.n	80018da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ca:	4b47      	ldr	r3, [pc, #284]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d119      	bne.n	800190a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e07f      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d003      	beq.n	80018ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d107      	bne.n	80018fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ea:	4b3f      	ldr	r3, [pc, #252]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d109      	bne.n	800190a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e06f      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fa:	4b3b      	ldr	r3, [pc, #236]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e067      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800190a:	4b37      	ldr	r3, [pc, #220]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f023 0203 	bic.w	r2, r3, #3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	4934      	ldr	r1, [pc, #208]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	4313      	orrs	r3, r2
 800191a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800191c:	f7ff f9f2 	bl	8000d04 <HAL_GetTick>
 8001920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001922:	e00a      	b.n	800193a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001924:	f7ff f9ee 	bl	8000d04 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e04f      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193a:	4b2b      	ldr	r3, [pc, #172]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 020c 	and.w	r2, r3, #12
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	429a      	cmp	r2, r3
 800194a:	d1eb      	bne.n	8001924 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800194c:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d20c      	bcs.n	8001974 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195a:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001962:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e032      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001980:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	4916      	ldr	r1, [pc, #88]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	4313      	orrs	r3, r2
 8001990:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b00      	cmp	r3, #0
 800199c:	d009      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	490e      	ldr	r1, [pc, #56]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019b2:	f000 f821 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 80019b6:	4602      	mov	r2, r0
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	091b      	lsrs	r3, r3, #4
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	490a      	ldr	r1, [pc, #40]	; (80019ec <HAL_RCC_ClockConfig+0x1c0>)
 80019c4:	5ccb      	ldrb	r3, [r1, r3]
 80019c6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ca:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_RCC_ClockConfig+0x1c8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe ffda 	bl	800098c <HAL_InitTick>

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40023c00 	.word	0x40023c00
 80019e8:	40023800 	.word	0x40023800
 80019ec:	08006708 	.word	0x08006708
 80019f0:	20000000 	.word	0x20000000
 80019f4:	20000004 	.word	0x20000004

080019f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019fc:	b094      	sub	sp, #80	; 0x50
 80019fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	647b      	str	r3, [r7, #68]	; 0x44
 8001a04:	2300      	movs	r3, #0
 8001a06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a08:	2300      	movs	r3, #0
 8001a0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a10:	4b79      	ldr	r3, [pc, #484]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 030c 	and.w	r3, r3, #12
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d00d      	beq.n	8001a38 <HAL_RCC_GetSysClockFreq+0x40>
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	f200 80e1 	bhi.w	8001be4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d002      	beq.n	8001a2c <HAL_RCC_GetSysClockFreq+0x34>
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d003      	beq.n	8001a32 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a2a:	e0db      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a2c:	4b73      	ldr	r3, [pc, #460]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x204>)
 8001a2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a30:	e0db      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a32:	4b73      	ldr	r3, [pc, #460]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a36:	e0d8      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a38:	4b6f      	ldr	r3, [pc, #444]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a42:	4b6d      	ldr	r3, [pc, #436]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d063      	beq.n	8001b16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4e:	4b6a      	ldr	r3, [pc, #424]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	099b      	lsrs	r3, r3, #6
 8001a54:	2200      	movs	r2, #0
 8001a56:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a60:	633b      	str	r3, [r7, #48]	; 0x30
 8001a62:	2300      	movs	r3, #0
 8001a64:	637b      	str	r3, [r7, #52]	; 0x34
 8001a66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a6a:	4622      	mov	r2, r4
 8001a6c:	462b      	mov	r3, r5
 8001a6e:	f04f 0000 	mov.w	r0, #0
 8001a72:	f04f 0100 	mov.w	r1, #0
 8001a76:	0159      	lsls	r1, r3, #5
 8001a78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a7c:	0150      	lsls	r0, r2, #5
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4621      	mov	r1, r4
 8001a84:	1a51      	subs	r1, r2, r1
 8001a86:	6139      	str	r1, [r7, #16]
 8001a88:	4629      	mov	r1, r5
 8001a8a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	f04f 0300 	mov.w	r3, #0
 8001a98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a9c:	4659      	mov	r1, fp
 8001a9e:	018b      	lsls	r3, r1, #6
 8001aa0:	4651      	mov	r1, sl
 8001aa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aa6:	4651      	mov	r1, sl
 8001aa8:	018a      	lsls	r2, r1, #6
 8001aaa:	4651      	mov	r1, sl
 8001aac:	ebb2 0801 	subs.w	r8, r2, r1
 8001ab0:	4659      	mov	r1, fp
 8001ab2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	f04f 0300 	mov.w	r3, #0
 8001abe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ac2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ac6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001aca:	4690      	mov	r8, r2
 8001acc:	4699      	mov	r9, r3
 8001ace:	4623      	mov	r3, r4
 8001ad0:	eb18 0303 	adds.w	r3, r8, r3
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	462b      	mov	r3, r5
 8001ad8:	eb49 0303 	adc.w	r3, r9, r3
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001aea:	4629      	mov	r1, r5
 8001aec:	024b      	lsls	r3, r1, #9
 8001aee:	4621      	mov	r1, r4
 8001af0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001af4:	4621      	mov	r1, r4
 8001af6:	024a      	lsls	r2, r1, #9
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001afe:	2200      	movs	r2, #0
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b08:	f7fe fbb2 	bl	8000270 <__aeabi_uldivmod>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4613      	mov	r3, r2
 8001b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b14:	e058      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b16:	4b38      	ldr	r3, [pc, #224]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	099b      	lsrs	r3, r3, #6
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	4611      	mov	r1, r2
 8001b22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b26:	623b      	str	r3, [r7, #32]
 8001b28:	2300      	movs	r3, #0
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b30:	4642      	mov	r2, r8
 8001b32:	464b      	mov	r3, r9
 8001b34:	f04f 0000 	mov.w	r0, #0
 8001b38:	f04f 0100 	mov.w	r1, #0
 8001b3c:	0159      	lsls	r1, r3, #5
 8001b3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b42:	0150      	lsls	r0, r2, #5
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4641      	mov	r1, r8
 8001b4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b4e:	4649      	mov	r1, r9
 8001b50:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	f04f 0300 	mov.w	r3, #0
 8001b5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b68:	ebb2 040a 	subs.w	r4, r2, sl
 8001b6c:	eb63 050b 	sbc.w	r5, r3, fp
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	00eb      	lsls	r3, r5, #3
 8001b7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b7e:	00e2      	lsls	r2, r4, #3
 8001b80:	4614      	mov	r4, r2
 8001b82:	461d      	mov	r5, r3
 8001b84:	4643      	mov	r3, r8
 8001b86:	18e3      	adds	r3, r4, r3
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	464b      	mov	r3, r9
 8001b8c:	eb45 0303 	adc.w	r3, r5, r3
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	028b      	lsls	r3, r1, #10
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ba8:	4621      	mov	r1, r4
 8001baa:	028a      	lsls	r2, r1, #10
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
 8001bb6:	61fa      	str	r2, [r7, #28]
 8001bb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bbc:	f7fe fb58 	bl	8000270 <__aeabi_uldivmod>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	0c1b      	lsrs	r3, r3, #16
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001bd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001be2:	e002      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x204>)
 8001be6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3750      	adds	r7, #80	; 0x50
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	00f42400 	.word	0x00f42400
 8001c00:	007a1200 	.word	0x007a1200

08001c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c08:	4b03      	ldr	r3, [pc, #12]	; (8001c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000000 	.word	0x20000000

08001c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c20:	f7ff fff0 	bl	8001c04 <HAL_RCC_GetHCLKFreq>
 8001c24:	4602      	mov	r2, r0
 8001c26:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	0a9b      	lsrs	r3, r3, #10
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	4903      	ldr	r1, [pc, #12]	; (8001c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c32:	5ccb      	ldrb	r3, [r1, r3]
 8001c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	08006718 	.word	0x08006718

08001c44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c48:	f7ff ffdc 	bl	8001c04 <HAL_RCC_GetHCLKFreq>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	0b5b      	lsrs	r3, r3, #13
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	4903      	ldr	r1, [pc, #12]	; (8001c68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c5a:	5ccb      	ldrb	r3, [r1, r3]
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40023800 	.word	0x40023800
 8001c68:	08006718 	.word	0x08006718

08001c6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	220f      	movs	r2, #15
 8001c7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c7c:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 0203 	and.w	r2, r3, #3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c88:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	08db      	lsrs	r3, r3, #3
 8001ca6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <HAL_RCC_GetClockConfig+0x60>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0207 	and.w	r2, r3, #7
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	601a      	str	r2, [r3, #0]
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40023c00 	.word	0x40023c00

08001cd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e041      	b.n	8001d66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d106      	bne.n	8001cfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f839 	bl	8001d6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2202      	movs	r2, #2
 8001d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3304      	adds	r3, #4
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4610      	mov	r0, r2
 8001d10:	f000 f9c0 	bl	8002094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d001      	beq.n	8001d9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e04e      	b.n	8001e3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a23      	ldr	r2, [pc, #140]	; (8001e48 <HAL_TIM_Base_Start_IT+0xc4>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d022      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x80>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc6:	d01d      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x80>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a1f      	ldr	r2, [pc, #124]	; (8001e4c <HAL_TIM_Base_Start_IT+0xc8>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d018      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x80>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a1e      	ldr	r2, [pc, #120]	; (8001e50 <HAL_TIM_Base_Start_IT+0xcc>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d013      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x80>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a1c      	ldr	r2, [pc, #112]	; (8001e54 <HAL_TIM_Base_Start_IT+0xd0>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00e      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x80>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a1b      	ldr	r2, [pc, #108]	; (8001e58 <HAL_TIM_Base_Start_IT+0xd4>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d009      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x80>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a19      	ldr	r2, [pc, #100]	; (8001e5c <HAL_TIM_Base_Start_IT+0xd8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d004      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x80>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a18      	ldr	r2, [pc, #96]	; (8001e60 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d111      	bne.n	8001e28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2b06      	cmp	r3, #6
 8001e14:	d010      	beq.n	8001e38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f042 0201 	orr.w	r2, r2, #1
 8001e24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e26:	e007      	b.n	8001e38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40010000 	.word	0x40010000
 8001e4c:	40000400 	.word	0x40000400
 8001e50:	40000800 	.word	0x40000800
 8001e54:	40000c00 	.word	0x40000c00
 8001e58:	40010400 	.word	0x40010400
 8001e5c:	40014000 	.word	0x40014000
 8001e60:	40001800 	.word	0x40001800

08001e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d020      	beq.n	8001ec8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d01b      	beq.n	8001ec8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0202 	mvn.w	r2, #2
 8001e98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f8d2 	bl	8002058 <HAL_TIM_IC_CaptureCallback>
 8001eb4:	e005      	b.n	8001ec2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f8c4 	bl	8002044 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f8d5 	bl	800206c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d020      	beq.n	8001f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d01b      	beq.n	8001f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f06f 0204 	mvn.w	r2, #4
 8001ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f8ac 	bl	8002058 <HAL_TIM_IC_CaptureCallback>
 8001f00:	e005      	b.n	8001f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f89e 	bl	8002044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f8af 	bl	800206c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d020      	beq.n	8001f60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f003 0308 	and.w	r3, r3, #8
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d01b      	beq.n	8001f60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0208 	mvn.w	r2, #8
 8001f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2204      	movs	r2, #4
 8001f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f886 	bl	8002058 <HAL_TIM_IC_CaptureCallback>
 8001f4c:	e005      	b.n	8001f5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f878 	bl	8002044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f889 	bl	800206c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d020      	beq.n	8001fac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f003 0310 	and.w	r3, r3, #16
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d01b      	beq.n	8001fac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0210 	mvn.w	r2, #16
 8001f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2208      	movs	r2, #8
 8001f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f860 	bl	8002058 <HAL_TIM_IC_CaptureCallback>
 8001f98:	e005      	b.n	8001fa6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f852 	bl	8002044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f863 	bl	800206c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00c      	beq.n	8001fd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d007      	beq.n	8001fd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f06f 0201 	mvn.w	r2, #1
 8001fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7fe fc4e 	bl	800086c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00c      	beq.n	8001ff4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d007      	beq.n	8001ff4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f906 	bl	8002200 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00c      	beq.n	8002018 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002004:	2b00      	cmp	r3, #0
 8002006:	d007      	beq.n	8002018 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f834 	bl	8002080 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f003 0320 	and.w	r3, r3, #32
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00c      	beq.n	800203c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f003 0320 	and.w	r3, r3, #32
 8002028:	2b00      	cmp	r3, #0
 800202a:	d007      	beq.n	800203c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0220 	mvn.w	r2, #32
 8002034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f8d8 	bl	80021ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a46      	ldr	r2, [pc, #280]	; (80021c0 <TIM_Base_SetConfig+0x12c>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d013      	beq.n	80020d4 <TIM_Base_SetConfig+0x40>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b2:	d00f      	beq.n	80020d4 <TIM_Base_SetConfig+0x40>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a43      	ldr	r2, [pc, #268]	; (80021c4 <TIM_Base_SetConfig+0x130>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d00b      	beq.n	80020d4 <TIM_Base_SetConfig+0x40>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a42      	ldr	r2, [pc, #264]	; (80021c8 <TIM_Base_SetConfig+0x134>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d007      	beq.n	80020d4 <TIM_Base_SetConfig+0x40>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a41      	ldr	r2, [pc, #260]	; (80021cc <TIM_Base_SetConfig+0x138>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d003      	beq.n	80020d4 <TIM_Base_SetConfig+0x40>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a40      	ldr	r2, [pc, #256]	; (80021d0 <TIM_Base_SetConfig+0x13c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d108      	bne.n	80020e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a35      	ldr	r2, [pc, #212]	; (80021c0 <TIM_Base_SetConfig+0x12c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d02b      	beq.n	8002146 <TIM_Base_SetConfig+0xb2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f4:	d027      	beq.n	8002146 <TIM_Base_SetConfig+0xb2>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a32      	ldr	r2, [pc, #200]	; (80021c4 <TIM_Base_SetConfig+0x130>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d023      	beq.n	8002146 <TIM_Base_SetConfig+0xb2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a31      	ldr	r2, [pc, #196]	; (80021c8 <TIM_Base_SetConfig+0x134>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d01f      	beq.n	8002146 <TIM_Base_SetConfig+0xb2>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a30      	ldr	r2, [pc, #192]	; (80021cc <TIM_Base_SetConfig+0x138>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d01b      	beq.n	8002146 <TIM_Base_SetConfig+0xb2>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a2f      	ldr	r2, [pc, #188]	; (80021d0 <TIM_Base_SetConfig+0x13c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d017      	beq.n	8002146 <TIM_Base_SetConfig+0xb2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a2e      	ldr	r2, [pc, #184]	; (80021d4 <TIM_Base_SetConfig+0x140>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d013      	beq.n	8002146 <TIM_Base_SetConfig+0xb2>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a2d      	ldr	r2, [pc, #180]	; (80021d8 <TIM_Base_SetConfig+0x144>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d00f      	beq.n	8002146 <TIM_Base_SetConfig+0xb2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a2c      	ldr	r2, [pc, #176]	; (80021dc <TIM_Base_SetConfig+0x148>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d00b      	beq.n	8002146 <TIM_Base_SetConfig+0xb2>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a2b      	ldr	r2, [pc, #172]	; (80021e0 <TIM_Base_SetConfig+0x14c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d007      	beq.n	8002146 <TIM_Base_SetConfig+0xb2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a2a      	ldr	r2, [pc, #168]	; (80021e4 <TIM_Base_SetConfig+0x150>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d003      	beq.n	8002146 <TIM_Base_SetConfig+0xb2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a29      	ldr	r2, [pc, #164]	; (80021e8 <TIM_Base_SetConfig+0x154>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d108      	bne.n	8002158 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800214c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	4313      	orrs	r3, r2
 8002156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	4313      	orrs	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a10      	ldr	r2, [pc, #64]	; (80021c0 <TIM_Base_SetConfig+0x12c>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d003      	beq.n	800218c <TIM_Base_SetConfig+0xf8>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a12      	ldr	r2, [pc, #72]	; (80021d0 <TIM_Base_SetConfig+0x13c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d103      	bne.n	8002194 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d105      	bne.n	80021b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	f023 0201 	bic.w	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	611a      	str	r2, [r3, #16]
  }
}
 80021b2:	bf00      	nop
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40010000 	.word	0x40010000
 80021c4:	40000400 	.word	0x40000400
 80021c8:	40000800 	.word	0x40000800
 80021cc:	40000c00 	.word	0x40000c00
 80021d0:	40010400 	.word	0x40010400
 80021d4:	40014000 	.word	0x40014000
 80021d8:	40014400 	.word	0x40014400
 80021dc:	40014800 	.word	0x40014800
 80021e0:	40001800 	.word	0x40001800
 80021e4:	40001c00 	.word	0x40001c00
 80021e8:	40002000 	.word	0x40002000

080021ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e042      	b.n	80022ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d106      	bne.n	8002240 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7fe fb56 	bl	80008ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2224      	movs	r2, #36	; 0x24
 8002244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002256:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 fd69 	bl	8002d30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800226c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	695a      	ldr	r2, [r3, #20]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800227c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800228c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2220      	movs	r2, #32
 80022a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08a      	sub	sp, #40	; 0x28
 80022b8:	af02      	add	r7, sp, #8
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	4613      	mov	r3, r2
 80022c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b20      	cmp	r3, #32
 80022d2:	d175      	bne.n	80023c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <HAL_UART_Transmit+0x2c>
 80022da:	88fb      	ldrh	r3, [r7, #6]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e06e      	b.n	80023c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2221      	movs	r2, #33	; 0x21
 80022ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022f2:	f7fe fd07 	bl	8000d04 <HAL_GetTick>
 80022f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	88fa      	ldrh	r2, [r7, #6]
 80022fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	88fa      	ldrh	r2, [r7, #6]
 8002302:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800230c:	d108      	bne.n	8002320 <HAL_UART_Transmit+0x6c>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d104      	bne.n	8002320 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	61bb      	str	r3, [r7, #24]
 800231e:	e003      	b.n	8002328 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002324:	2300      	movs	r3, #0
 8002326:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002328:	e02e      	b.n	8002388 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2200      	movs	r2, #0
 8002332:	2180      	movs	r1, #128	; 0x80
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f000 fb05 	bl	8002944 <UART_WaitOnFlagUntilTimeout>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e03a      	b.n	80023c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10b      	bne.n	800236a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002360:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	3302      	adds	r3, #2
 8002366:	61bb      	str	r3, [r7, #24]
 8002368:	e007      	b.n	800237a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	781a      	ldrb	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	3301      	adds	r3, #1
 8002378:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800237e:	b29b      	uxth	r3, r3
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800238c:	b29b      	uxth	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1cb      	bne.n	800232a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2200      	movs	r2, #0
 800239a:	2140      	movs	r1, #64	; 0x40
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 fad1 	bl	8002944 <UART_WaitOnFlagUntilTimeout>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2220      	movs	r2, #32
 80023ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e006      	b.n	80023c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	e000      	b.n	80023c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80023c0:	2302      	movs	r3, #2
  }
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3720      	adds	r7, #32
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b0ba      	sub	sp, #232	; 0xe8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80023fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800240a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10f      	bne.n	8002432 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002416:	f003 0320 	and.w	r3, r3, #32
 800241a:	2b00      	cmp	r3, #0
 800241c:	d009      	beq.n	8002432 <HAL_UART_IRQHandler+0x66>
 800241e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002422:	f003 0320 	and.w	r3, r3, #32
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 fbc2 	bl	8002bb4 <UART_Receive_IT>
      return;
 8002430:	e25b      	b.n	80028ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002432:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 80de 	beq.w	80025f8 <HAL_UART_IRQHandler+0x22c>
 800243c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	d106      	bne.n	8002456 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800244c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 80d1 	beq.w	80025f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00b      	beq.n	800247a <HAL_UART_IRQHandler+0xae>
 8002462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246a:	2b00      	cmp	r3, #0
 800246c:	d005      	beq.n	800247a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	f043 0201 	orr.w	r2, r3, #1
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800247a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00b      	beq.n	800249e <HAL_UART_IRQHandler+0xd2>
 8002486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d005      	beq.n	800249e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	f043 0202 	orr.w	r2, r3, #2
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800249e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00b      	beq.n	80024c2 <HAL_UART_IRQHandler+0xf6>
 80024aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d005      	beq.n	80024c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	f043 0204 	orr.w	r2, r3, #4
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80024c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d011      	beq.n	80024f2 <HAL_UART_IRQHandler+0x126>
 80024ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024d2:	f003 0320 	and.w	r3, r3, #32
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d105      	bne.n	80024e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80024da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d005      	beq.n	80024f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	f043 0208 	orr.w	r2, r3, #8
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 81f2 	beq.w	80028e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002500:	f003 0320 	and.w	r3, r3, #32
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <HAL_UART_IRQHandler+0x14e>
 8002508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800250c:	f003 0320 	and.w	r3, r3, #32
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 fb4d 	bl	8002bb4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002524:	2b40      	cmp	r3, #64	; 0x40
 8002526:	bf0c      	ite	eq
 8002528:	2301      	moveq	r3, #1
 800252a:	2300      	movne	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b00      	cmp	r3, #0
 800253c:	d103      	bne.n	8002546 <HAL_UART_IRQHandler+0x17a>
 800253e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002542:	2b00      	cmp	r3, #0
 8002544:	d04f      	beq.n	80025e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fa55 	bl	80029f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002556:	2b40      	cmp	r3, #64	; 0x40
 8002558:	d141      	bne.n	80025de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	3314      	adds	r3, #20
 8002560:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002564:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002568:	e853 3f00 	ldrex	r3, [r3]
 800256c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002570:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002578:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	3314      	adds	r3, #20
 8002582:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002586:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800258a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800258e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002592:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002596:	e841 2300 	strex	r3, r2, [r1]
 800259a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800259e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1d9      	bne.n	800255a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d013      	beq.n	80025d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b2:	4a7e      	ldr	r2, [pc, #504]	; (80027ac <HAL_UART_IRQHandler+0x3e0>)
 80025b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe fd00 	bl	8000fc0 <HAL_DMA_Abort_IT>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d016      	beq.n	80025f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025d0:	4610      	mov	r0, r2
 80025d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d4:	e00e      	b.n	80025f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f99e 	bl	8002918 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025dc:	e00a      	b.n	80025f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f99a 	bl	8002918 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e4:	e006      	b.n	80025f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f996 	bl	8002918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80025f2:	e175      	b.n	80028e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025f4:	bf00      	nop
    return;
 80025f6:	e173      	b.n	80028e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	f040 814f 	bne.w	80028a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002606:	f003 0310 	and.w	r3, r3, #16
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 8148 	beq.w	80028a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002614:	f003 0310 	and.w	r3, r3, #16
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 8141 	beq.w	80028a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800261e:	2300      	movs	r3, #0
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263e:	2b40      	cmp	r3, #64	; 0x40
 8002640:	f040 80b6 	bne.w	80027b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002650:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 8145 	beq.w	80028e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800265e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002662:	429a      	cmp	r2, r3
 8002664:	f080 813e 	bcs.w	80028e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800266e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800267a:	f000 8088 	beq.w	800278e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	330c      	adds	r3, #12
 8002684:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002688:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800268c:	e853 3f00 	ldrex	r3, [r3]
 8002690:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002694:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800269c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	330c      	adds	r3, #12
 80026a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80026aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80026ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80026b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80026ba:	e841 2300 	strex	r3, r2, [r1]
 80026be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80026c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1d9      	bne.n	800267e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	3314      	adds	r3, #20
 80026d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026d4:	e853 3f00 	ldrex	r3, [r3]
 80026d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80026da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026dc:	f023 0301 	bic.w	r3, r3, #1
 80026e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	3314      	adds	r3, #20
 80026ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80026ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80026f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80026f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80026fa:	e841 2300 	strex	r3, r2, [r1]
 80026fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002700:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1e1      	bne.n	80026ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	3314      	adds	r3, #20
 800270c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800270e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002710:	e853 3f00 	ldrex	r3, [r3]
 8002714:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800271c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	3314      	adds	r3, #20
 8002726:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800272a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800272c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002730:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002732:	e841 2300 	strex	r3, r2, [r1]
 8002736:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002738:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1e3      	bne.n	8002706 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2220      	movs	r2, #32
 8002742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	330c      	adds	r3, #12
 8002752:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002756:	e853 3f00 	ldrex	r3, [r3]
 800275a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800275c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800275e:	f023 0310 	bic.w	r3, r3, #16
 8002762:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	330c      	adds	r3, #12
 800276c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002770:	65ba      	str	r2, [r7, #88]	; 0x58
 8002772:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002774:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002776:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002778:	e841 2300 	strex	r3, r2, [r1]
 800277c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800277e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1e3      	bne.n	800274c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe fba9 	bl	8000ee0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2202      	movs	r2, #2
 8002792:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800279c:	b29b      	uxth	r3, r3
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	4619      	mov	r1, r3
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f8c1 	bl	800292c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027aa:	e09b      	b.n	80028e4 <HAL_UART_IRQHandler+0x518>
 80027ac:	08002abd 	.word	0x08002abd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 808e 	beq.w	80028e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80027cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 8089 	beq.w	80028e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	330c      	adds	r3, #12
 80027dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e0:	e853 3f00 	ldrex	r3, [r3]
 80027e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80027e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	330c      	adds	r3, #12
 80027f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80027fa:	647a      	str	r2, [r7, #68]	; 0x44
 80027fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002800:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002802:	e841 2300 	strex	r3, r2, [r1]
 8002806:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1e3      	bne.n	80027d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	3314      	adds	r3, #20
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	e853 3f00 	ldrex	r3, [r3]
 800281c:	623b      	str	r3, [r7, #32]
   return(result);
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	f023 0301 	bic.w	r3, r3, #1
 8002824:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	3314      	adds	r3, #20
 800282e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002832:	633a      	str	r2, [r7, #48]	; 0x30
 8002834:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002836:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800283a:	e841 2300 	strex	r3, r2, [r1]
 800283e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1e3      	bne.n	800280e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2220      	movs	r2, #32
 800284a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	330c      	adds	r3, #12
 800285a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	e853 3f00 	ldrex	r3, [r3]
 8002862:	60fb      	str	r3, [r7, #12]
   return(result);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f023 0310 	bic.w	r3, r3, #16
 800286a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	330c      	adds	r3, #12
 8002874:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002878:	61fa      	str	r2, [r7, #28]
 800287a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287c:	69b9      	ldr	r1, [r7, #24]
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	e841 2300 	strex	r3, r2, [r1]
 8002884:	617b      	str	r3, [r7, #20]
   return(result);
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1e3      	bne.n	8002854 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002892:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002896:	4619      	mov	r1, r3
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f847 	bl	800292c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800289e:	e023      	b.n	80028e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d009      	beq.n	80028c0 <HAL_UART_IRQHandler+0x4f4>
 80028ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f913 	bl	8002ae4 <UART_Transmit_IT>
    return;
 80028be:	e014      	b.n	80028ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00e      	beq.n	80028ea <HAL_UART_IRQHandler+0x51e>
 80028cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f953 	bl	8002b84 <UART_EndTransmit_IT>
    return;
 80028de:	e004      	b.n	80028ea <HAL_UART_IRQHandler+0x51e>
    return;
 80028e0:	bf00      	nop
 80028e2:	e002      	b.n	80028ea <HAL_UART_IRQHandler+0x51e>
      return;
 80028e4:	bf00      	nop
 80028e6:	e000      	b.n	80028ea <HAL_UART_IRQHandler+0x51e>
      return;
 80028e8:	bf00      	nop
  }
}
 80028ea:	37e8      	adds	r7, #232	; 0xe8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	4613      	mov	r3, r2
 8002952:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002954:	e03b      	b.n	80029ce <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295c:	d037      	beq.n	80029ce <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800295e:	f7fe f9d1 	bl	8000d04 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	6a3a      	ldr	r2, [r7, #32]
 800296a:	429a      	cmp	r2, r3
 800296c:	d302      	bcc.n	8002974 <UART_WaitOnFlagUntilTimeout+0x30>
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e03a      	b.n	80029ee <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	2b00      	cmp	r3, #0
 8002984:	d023      	beq.n	80029ce <UART_WaitOnFlagUntilTimeout+0x8a>
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2b80      	cmp	r3, #128	; 0x80
 800298a:	d020      	beq.n	80029ce <UART_WaitOnFlagUntilTimeout+0x8a>
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2b40      	cmp	r3, #64	; 0x40
 8002990:	d01d      	beq.n	80029ce <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b08      	cmp	r3, #8
 800299e:	d116      	bne.n	80029ce <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 f81d 	bl	80029f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2208      	movs	r2, #8
 80029c0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e00f      	b.n	80029ee <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4013      	ands	r3, r2
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	429a      	cmp	r2, r3
 80029dc:	bf0c      	ite	eq
 80029de:	2301      	moveq	r3, #1
 80029e0:	2300      	movne	r3, #0
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d0b4      	beq.n	8002956 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b095      	sub	sp, #84	; 0x54
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	330c      	adds	r3, #12
 8002a04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a08:	e853 3f00 	ldrex	r3, [r3]
 8002a0c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	330c      	adds	r3, #12
 8002a1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a1e:	643a      	str	r2, [r7, #64]	; 0x40
 8002a20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a26:	e841 2300 	strex	r3, r2, [r1]
 8002a2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1e5      	bne.n	80029fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	3314      	adds	r3, #20
 8002a38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	e853 3f00 	ldrex	r3, [r3]
 8002a40:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f023 0301 	bic.w	r3, r3, #1
 8002a48:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	3314      	adds	r3, #20
 8002a50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a5a:	e841 2300 	strex	r3, r2, [r1]
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1e5      	bne.n	8002a32 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d119      	bne.n	8002aa2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	330c      	adds	r3, #12
 8002a74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	e853 3f00 	ldrex	r3, [r3]
 8002a7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f023 0310 	bic.w	r3, r3, #16
 8002a84:	647b      	str	r3, [r7, #68]	; 0x44
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	330c      	adds	r3, #12
 8002a8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a8e:	61ba      	str	r2, [r7, #24]
 8002a90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a92:	6979      	ldr	r1, [r7, #20]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	e841 2300 	strex	r3, r2, [r1]
 8002a9a:	613b      	str	r3, [r7, #16]
   return(result);
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1e5      	bne.n	8002a6e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002ab0:	bf00      	nop
 8002ab2:	3754      	adds	r7, #84	; 0x54
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f7ff ff1e 	bl	8002918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b21      	cmp	r3, #33	; 0x21
 8002af6:	d13e      	bne.n	8002b76 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b00:	d114      	bne.n	8002b2c <UART_Transmit_IT+0x48>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d110      	bne.n	8002b2c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b1e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	1c9a      	adds	r2, r3, #2
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	621a      	str	r2, [r3, #32]
 8002b2a:	e008      	b.n	8002b3e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	1c59      	adds	r1, r3, #1
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6211      	str	r1, [r2, #32]
 8002b36:	781a      	ldrb	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10f      	bne.n	8002b72 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b60:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b70:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	e000      	b.n	8002b78 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b76:	2302      	movs	r3, #2
  }
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b9a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff fea3 	bl	80028f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08c      	sub	sp, #48	; 0x30
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b22      	cmp	r3, #34	; 0x22
 8002bc6:	f040 80ae 	bne.w	8002d26 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd2:	d117      	bne.n	8002c04 <UART_Receive_IT+0x50>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d113      	bne.n	8002c04 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfc:	1c9a      	adds	r2, r3, #2
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	629a      	str	r2, [r3, #40]	; 0x28
 8002c02:	e026      	b.n	8002c52 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c08:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c16:	d007      	beq.n	8002c28 <UART_Receive_IT+0x74>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10a      	bne.n	8002c36 <UART_Receive_IT+0x82>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d106      	bne.n	8002c36 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c32:	701a      	strb	r2, [r3, #0]
 8002c34:	e008      	b.n	8002c48 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c46:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	4619      	mov	r1, r3
 8002c60:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d15d      	bne.n	8002d22 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0220 	bic.w	r2, r2, #32
 8002c74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695a      	ldr	r2, [r3, #20]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0201 	bic.w	r2, r2, #1
 8002c94:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d135      	bne.n	8002d18 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	330c      	adds	r3, #12
 8002cb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	e853 3f00 	ldrex	r3, [r3]
 8002cc0:	613b      	str	r3, [r7, #16]
   return(result);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f023 0310 	bic.w	r3, r3, #16
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	330c      	adds	r3, #12
 8002cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd2:	623a      	str	r2, [r7, #32]
 8002cd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd6:	69f9      	ldr	r1, [r7, #28]
 8002cd8:	6a3a      	ldr	r2, [r7, #32]
 8002cda:	e841 2300 	strex	r3, r2, [r1]
 8002cde:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1e5      	bne.n	8002cb2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0310 	and.w	r3, r3, #16
 8002cf0:	2b10      	cmp	r3, #16
 8002cf2:	d10a      	bne.n	8002d0a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d0e:	4619      	mov	r1, r3
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f7ff fe0b 	bl	800292c <HAL_UARTEx_RxEventCallback>
 8002d16:	e002      	b.n	8002d1e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff fdf3 	bl	8002904 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	e002      	b.n	8002d28 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	e000      	b.n	8002d28 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002d26:	2302      	movs	r3, #2
  }
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3730      	adds	r7, #48	; 0x30
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d34:	b0c0      	sub	sp, #256	; 0x100
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4c:	68d9      	ldr	r1, [r3, #12]
 8002d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	ea40 0301 	orr.w	r3, r0, r1
 8002d58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	431a      	orrs	r2, r3
 8002d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d88:	f021 010c 	bic.w	r1, r1, #12
 8002d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d96:	430b      	orrs	r3, r1
 8002d98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002daa:	6999      	ldr	r1, [r3, #24]
 8002dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	ea40 0301 	orr.w	r3, r0, r1
 8002db6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4b8f      	ldr	r3, [pc, #572]	; (8002ffc <UART_SetConfig+0x2cc>)
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d005      	beq.n	8002dd0 <UART_SetConfig+0xa0>
 8002dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	4b8d      	ldr	r3, [pc, #564]	; (8003000 <UART_SetConfig+0x2d0>)
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d104      	bne.n	8002dda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002dd0:	f7fe ff38 	bl	8001c44 <HAL_RCC_GetPCLK2Freq>
 8002dd4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002dd8:	e003      	b.n	8002de2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002dda:	f7fe ff1f 	bl	8001c1c <HAL_RCC_GetPCLK1Freq>
 8002dde:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dec:	f040 810c 	bne.w	8003008 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002df4:	2200      	movs	r2, #0
 8002df6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002dfa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002dfe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e02:	4622      	mov	r2, r4
 8002e04:	462b      	mov	r3, r5
 8002e06:	1891      	adds	r1, r2, r2
 8002e08:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e0a:	415b      	adcs	r3, r3
 8002e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e12:	4621      	mov	r1, r4
 8002e14:	eb12 0801 	adds.w	r8, r2, r1
 8002e18:	4629      	mov	r1, r5
 8002e1a:	eb43 0901 	adc.w	r9, r3, r1
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e32:	4690      	mov	r8, r2
 8002e34:	4699      	mov	r9, r3
 8002e36:	4623      	mov	r3, r4
 8002e38:	eb18 0303 	adds.w	r3, r8, r3
 8002e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e40:	462b      	mov	r3, r5
 8002e42:	eb49 0303 	adc.w	r3, r9, r3
 8002e46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e5e:	460b      	mov	r3, r1
 8002e60:	18db      	adds	r3, r3, r3
 8002e62:	653b      	str	r3, [r7, #80]	; 0x50
 8002e64:	4613      	mov	r3, r2
 8002e66:	eb42 0303 	adc.w	r3, r2, r3
 8002e6a:	657b      	str	r3, [r7, #84]	; 0x54
 8002e6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e74:	f7fd f9fc 	bl	8000270 <__aeabi_uldivmod>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4b61      	ldr	r3, [pc, #388]	; (8003004 <UART_SetConfig+0x2d4>)
 8002e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e82:	095b      	lsrs	r3, r3, #5
 8002e84:	011c      	lsls	r4, r3, #4
 8002e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e98:	4642      	mov	r2, r8
 8002e9a:	464b      	mov	r3, r9
 8002e9c:	1891      	adds	r1, r2, r2
 8002e9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ea0:	415b      	adcs	r3, r3
 8002ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ea4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ea8:	4641      	mov	r1, r8
 8002eaa:	eb12 0a01 	adds.w	sl, r2, r1
 8002eae:	4649      	mov	r1, r9
 8002eb0:	eb43 0b01 	adc.w	fp, r3, r1
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ec0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ec4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ec8:	4692      	mov	sl, r2
 8002eca:	469b      	mov	fp, r3
 8002ecc:	4643      	mov	r3, r8
 8002ece:	eb1a 0303 	adds.w	r3, sl, r3
 8002ed2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ed6:	464b      	mov	r3, r9
 8002ed8:	eb4b 0303 	adc.w	r3, fp, r3
 8002edc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002eec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ef0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	18db      	adds	r3, r3, r3
 8002ef8:	643b      	str	r3, [r7, #64]	; 0x40
 8002efa:	4613      	mov	r3, r2
 8002efc:	eb42 0303 	adc.w	r3, r2, r3
 8002f00:	647b      	str	r3, [r7, #68]	; 0x44
 8002f02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f0a:	f7fd f9b1 	bl	8000270 <__aeabi_uldivmod>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4611      	mov	r1, r2
 8002f14:	4b3b      	ldr	r3, [pc, #236]	; (8003004 <UART_SetConfig+0x2d4>)
 8002f16:	fba3 2301 	umull	r2, r3, r3, r1
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	2264      	movs	r2, #100	; 0x64
 8002f1e:	fb02 f303 	mul.w	r3, r2, r3
 8002f22:	1acb      	subs	r3, r1, r3
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f2a:	4b36      	ldr	r3, [pc, #216]	; (8003004 <UART_SetConfig+0x2d4>)
 8002f2c:	fba3 2302 	umull	r2, r3, r3, r2
 8002f30:	095b      	lsrs	r3, r3, #5
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f38:	441c      	add	r4, r3
 8002f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f4c:	4642      	mov	r2, r8
 8002f4e:	464b      	mov	r3, r9
 8002f50:	1891      	adds	r1, r2, r2
 8002f52:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f54:	415b      	adcs	r3, r3
 8002f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f5c:	4641      	mov	r1, r8
 8002f5e:	1851      	adds	r1, r2, r1
 8002f60:	6339      	str	r1, [r7, #48]	; 0x30
 8002f62:	4649      	mov	r1, r9
 8002f64:	414b      	adcs	r3, r1
 8002f66:	637b      	str	r3, [r7, #52]	; 0x34
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f74:	4659      	mov	r1, fp
 8002f76:	00cb      	lsls	r3, r1, #3
 8002f78:	4651      	mov	r1, sl
 8002f7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f7e:	4651      	mov	r1, sl
 8002f80:	00ca      	lsls	r2, r1, #3
 8002f82:	4610      	mov	r0, r2
 8002f84:	4619      	mov	r1, r3
 8002f86:	4603      	mov	r3, r0
 8002f88:	4642      	mov	r2, r8
 8002f8a:	189b      	adds	r3, r3, r2
 8002f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f90:	464b      	mov	r3, r9
 8002f92:	460a      	mov	r2, r1
 8002f94:	eb42 0303 	adc.w	r3, r2, r3
 8002f98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002fa8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002fac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	18db      	adds	r3, r3, r3
 8002fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	eb42 0303 	adc.w	r3, r2, r3
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002fc6:	f7fd f953 	bl	8000270 <__aeabi_uldivmod>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4b0d      	ldr	r3, [pc, #52]	; (8003004 <UART_SetConfig+0x2d4>)
 8002fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8002fd4:	095b      	lsrs	r3, r3, #5
 8002fd6:	2164      	movs	r1, #100	; 0x64
 8002fd8:	fb01 f303 	mul.w	r3, r1, r3
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	3332      	adds	r3, #50	; 0x32
 8002fe2:	4a08      	ldr	r2, [pc, #32]	; (8003004 <UART_SetConfig+0x2d4>)
 8002fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	f003 0207 	and.w	r2, r3, #7
 8002fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4422      	add	r2, r4
 8002ff6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ff8:	e106      	b.n	8003208 <UART_SetConfig+0x4d8>
 8002ffa:	bf00      	nop
 8002ffc:	40011000 	.word	0x40011000
 8003000:	40011400 	.word	0x40011400
 8003004:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003008:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800300c:	2200      	movs	r2, #0
 800300e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003012:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003016:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800301a:	4642      	mov	r2, r8
 800301c:	464b      	mov	r3, r9
 800301e:	1891      	adds	r1, r2, r2
 8003020:	6239      	str	r1, [r7, #32]
 8003022:	415b      	adcs	r3, r3
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
 8003026:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800302a:	4641      	mov	r1, r8
 800302c:	1854      	adds	r4, r2, r1
 800302e:	4649      	mov	r1, r9
 8003030:	eb43 0501 	adc.w	r5, r3, r1
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	00eb      	lsls	r3, r5, #3
 800303e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003042:	00e2      	lsls	r2, r4, #3
 8003044:	4614      	mov	r4, r2
 8003046:	461d      	mov	r5, r3
 8003048:	4643      	mov	r3, r8
 800304a:	18e3      	adds	r3, r4, r3
 800304c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003050:	464b      	mov	r3, r9
 8003052:	eb45 0303 	adc.w	r3, r5, r3
 8003056:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800305a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003066:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003076:	4629      	mov	r1, r5
 8003078:	008b      	lsls	r3, r1, #2
 800307a:	4621      	mov	r1, r4
 800307c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003080:	4621      	mov	r1, r4
 8003082:	008a      	lsls	r2, r1, #2
 8003084:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003088:	f7fd f8f2 	bl	8000270 <__aeabi_uldivmod>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4b60      	ldr	r3, [pc, #384]	; (8003214 <UART_SetConfig+0x4e4>)
 8003092:	fba3 2302 	umull	r2, r3, r3, r2
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	011c      	lsls	r4, r3, #4
 800309a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800309e:	2200      	movs	r2, #0
 80030a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80030a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80030a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80030ac:	4642      	mov	r2, r8
 80030ae:	464b      	mov	r3, r9
 80030b0:	1891      	adds	r1, r2, r2
 80030b2:	61b9      	str	r1, [r7, #24]
 80030b4:	415b      	adcs	r3, r3
 80030b6:	61fb      	str	r3, [r7, #28]
 80030b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030bc:	4641      	mov	r1, r8
 80030be:	1851      	adds	r1, r2, r1
 80030c0:	6139      	str	r1, [r7, #16]
 80030c2:	4649      	mov	r1, r9
 80030c4:	414b      	adcs	r3, r1
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030d4:	4659      	mov	r1, fp
 80030d6:	00cb      	lsls	r3, r1, #3
 80030d8:	4651      	mov	r1, sl
 80030da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030de:	4651      	mov	r1, sl
 80030e0:	00ca      	lsls	r2, r1, #3
 80030e2:	4610      	mov	r0, r2
 80030e4:	4619      	mov	r1, r3
 80030e6:	4603      	mov	r3, r0
 80030e8:	4642      	mov	r2, r8
 80030ea:	189b      	adds	r3, r3, r2
 80030ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030f0:	464b      	mov	r3, r9
 80030f2:	460a      	mov	r2, r1
 80030f4:	eb42 0303 	adc.w	r3, r2, r3
 80030f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	67bb      	str	r3, [r7, #120]	; 0x78
 8003106:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003114:	4649      	mov	r1, r9
 8003116:	008b      	lsls	r3, r1, #2
 8003118:	4641      	mov	r1, r8
 800311a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800311e:	4641      	mov	r1, r8
 8003120:	008a      	lsls	r2, r1, #2
 8003122:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003126:	f7fd f8a3 	bl	8000270 <__aeabi_uldivmod>
 800312a:	4602      	mov	r2, r0
 800312c:	460b      	mov	r3, r1
 800312e:	4611      	mov	r1, r2
 8003130:	4b38      	ldr	r3, [pc, #224]	; (8003214 <UART_SetConfig+0x4e4>)
 8003132:	fba3 2301 	umull	r2, r3, r3, r1
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	2264      	movs	r2, #100	; 0x64
 800313a:	fb02 f303 	mul.w	r3, r2, r3
 800313e:	1acb      	subs	r3, r1, r3
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	3332      	adds	r3, #50	; 0x32
 8003144:	4a33      	ldr	r2, [pc, #204]	; (8003214 <UART_SetConfig+0x4e4>)
 8003146:	fba2 2303 	umull	r2, r3, r2, r3
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003150:	441c      	add	r4, r3
 8003152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003156:	2200      	movs	r2, #0
 8003158:	673b      	str	r3, [r7, #112]	; 0x70
 800315a:	677a      	str	r2, [r7, #116]	; 0x74
 800315c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003160:	4642      	mov	r2, r8
 8003162:	464b      	mov	r3, r9
 8003164:	1891      	adds	r1, r2, r2
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	415b      	adcs	r3, r3
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003170:	4641      	mov	r1, r8
 8003172:	1851      	adds	r1, r2, r1
 8003174:	6039      	str	r1, [r7, #0]
 8003176:	4649      	mov	r1, r9
 8003178:	414b      	adcs	r3, r1
 800317a:	607b      	str	r3, [r7, #4]
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003188:	4659      	mov	r1, fp
 800318a:	00cb      	lsls	r3, r1, #3
 800318c:	4651      	mov	r1, sl
 800318e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003192:	4651      	mov	r1, sl
 8003194:	00ca      	lsls	r2, r1, #3
 8003196:	4610      	mov	r0, r2
 8003198:	4619      	mov	r1, r3
 800319a:	4603      	mov	r3, r0
 800319c:	4642      	mov	r2, r8
 800319e:	189b      	adds	r3, r3, r2
 80031a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80031a2:	464b      	mov	r3, r9
 80031a4:	460a      	mov	r2, r1
 80031a6:	eb42 0303 	adc.w	r3, r2, r3
 80031aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	663b      	str	r3, [r7, #96]	; 0x60
 80031b6:	667a      	str	r2, [r7, #100]	; 0x64
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	f04f 0300 	mov.w	r3, #0
 80031c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80031c4:	4649      	mov	r1, r9
 80031c6:	008b      	lsls	r3, r1, #2
 80031c8:	4641      	mov	r1, r8
 80031ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031ce:	4641      	mov	r1, r8
 80031d0:	008a      	lsls	r2, r1, #2
 80031d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80031d6:	f7fd f84b 	bl	8000270 <__aeabi_uldivmod>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4b0d      	ldr	r3, [pc, #52]	; (8003214 <UART_SetConfig+0x4e4>)
 80031e0:	fba3 1302 	umull	r1, r3, r3, r2
 80031e4:	095b      	lsrs	r3, r3, #5
 80031e6:	2164      	movs	r1, #100	; 0x64
 80031e8:	fb01 f303 	mul.w	r3, r1, r3
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	3332      	adds	r3, #50	; 0x32
 80031f2:	4a08      	ldr	r2, [pc, #32]	; (8003214 <UART_SetConfig+0x4e4>)
 80031f4:	fba2 2303 	umull	r2, r3, r2, r3
 80031f8:	095b      	lsrs	r3, r3, #5
 80031fa:	f003 020f 	and.w	r2, r3, #15
 80031fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4422      	add	r2, r4
 8003206:	609a      	str	r2, [r3, #8]
}
 8003208:	bf00      	nop
 800320a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800320e:	46bd      	mov	sp, r7
 8003210:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003214:	51eb851f 	.word	0x51eb851f

08003218 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003222:	2300      	movs	r3, #0
 8003224:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800322a:	2b84      	cmp	r3, #132	; 0x84
 800322c:	d005      	beq.n	800323a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800322e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4413      	add	r3, r2
 8003236:	3303      	adds	r3, #3
 8003238:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800323a:	68fb      	ldr	r3, [r7, #12]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800324e:	f3ef 8305 	mrs	r3, IPSR
 8003252:	607b      	str	r3, [r7, #4]
  return(result);
 8003254:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003256:	2b00      	cmp	r3, #0
 8003258:	bf14      	ite	ne
 800325a:	2301      	movne	r3, #1
 800325c:	2300      	moveq	r3, #0
 800325e:	b2db      	uxtb	r3, r3
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003270:	f001 f900 	bl	8004474 <vTaskStartScheduler>
  
  return osOK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	bd80      	pop	{r7, pc}

0800327a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800327a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800327c:	b089      	sub	sp, #36	; 0x24
 800327e:	af04      	add	r7, sp, #16
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d020      	beq.n	80032ce <osThreadCreate+0x54>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d01c      	beq.n	80032ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685c      	ldr	r4, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691e      	ldr	r6, [r3, #16]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff ffb6 	bl	8003218 <makeFreeRtosPriority>
 80032ac:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032b6:	9202      	str	r2, [sp, #8]
 80032b8:	9301      	str	r3, [sp, #4]
 80032ba:	9100      	str	r1, [sp, #0]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	4632      	mov	r2, r6
 80032c0:	4629      	mov	r1, r5
 80032c2:	4620      	mov	r0, r4
 80032c4:	f000 ff0e 	bl	80040e4 <xTaskCreateStatic>
 80032c8:	4603      	mov	r3, r0
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	e01c      	b.n	8003308 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685c      	ldr	r4, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032da:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff ff98 	bl	8003218 <makeFreeRtosPriority>
 80032e8:	4602      	mov	r2, r0
 80032ea:	f107 030c 	add.w	r3, r7, #12
 80032ee:	9301      	str	r3, [sp, #4]
 80032f0:	9200      	str	r2, [sp, #0]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	4632      	mov	r2, r6
 80032f6:	4629      	mov	r1, r5
 80032f8:	4620      	mov	r0, r4
 80032fa:	f000 ff50 	bl	800419e <xTaskCreate>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b01      	cmp	r3, #1
 8003302:	d001      	beq.n	8003308 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003304:	2300      	movs	r3, #0
 8003306:	e000      	b.n	800330a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003308:	68fb      	ldr	r3, [r7, #12]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003312 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <osDelay+0x16>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	e000      	b.n	800332a <osDelay+0x18>
 8003328:	2301      	movs	r3, #1
 800332a:	4618      	mov	r0, r3
 800332c:	f001 f86e 	bl	800440c <vTaskDelay>
  
  return osOK;
 8003330:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800333a:	b590      	push	{r4, r7, lr}
 800333c:	b085      	sub	sp, #20
 800333e:	af02      	add	r7, sp, #8
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d011      	beq.n	8003370 <osMessageCreate+0x36>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00d      	beq.n	8003370 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6818      	ldr	r0, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6859      	ldr	r1, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	2400      	movs	r4, #0
 8003366:	9400      	str	r4, [sp, #0]
 8003368:	f000 f9e0 	bl	800372c <xQueueGenericCreateStatic>
 800336c:	4603      	mov	r3, r0
 800336e:	e008      	b.n	8003382 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6818      	ldr	r0, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	4619      	mov	r1, r3
 800337c:	f000 fa4e 	bl	800381c <xQueueGenericCreate>
 8003380:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003382:	4618      	mov	r0, r3
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	bd90      	pop	{r4, r7, pc}
	...

0800338c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003398:	2300      	movs	r3, #0
 800339a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <osMessagePut+0x1e>
    ticks = 1;
 80033a6:	2301      	movs	r3, #1
 80033a8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80033aa:	f7ff ff4d 	bl	8003248 <inHandlerMode>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d018      	beq.n	80033e6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80033b4:	f107 0210 	add.w	r2, r7, #16
 80033b8:	f107 0108 	add.w	r1, r7, #8
 80033bc:	2300      	movs	r3, #0
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 fb84 	bl	8003acc <xQueueGenericSendFromISR>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d001      	beq.n	80033ce <osMessagePut+0x42>
      return osErrorOS;
 80033ca:	23ff      	movs	r3, #255	; 0xff
 80033cc:	e018      	b.n	8003400 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d014      	beq.n	80033fe <osMessagePut+0x72>
 80033d4:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <osMessagePut+0x7c>)
 80033d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	f3bf 8f4f 	dsb	sy
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	e00b      	b.n	80033fe <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80033e6:	f107 0108 	add.w	r1, r7, #8
 80033ea:	2300      	movs	r3, #0
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 fa6e 	bl	80038d0 <xQueueGenericSend>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d001      	beq.n	80033fe <osMessagePut+0x72>
      return osErrorOS;
 80033fa:	23ff      	movs	r3, #255	; 0xff
 80033fc:	e000      	b.n	8003400 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	e000ed04 	.word	0xe000ed04

0800340c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800340c:	b590      	push	{r4, r7, lr}
 800340e:	b08b      	sub	sp, #44	; 0x2c
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800341c:	2300      	movs	r3, #0
 800341e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10a      	bne.n	800343c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8003426:	2380      	movs	r3, #128	; 0x80
 8003428:	617b      	str	r3, [r7, #20]
    return event;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	461c      	mov	r4, r3
 800342e:	f107 0314 	add.w	r3, r7, #20
 8003432:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003436:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800343a:	e054      	b.n	80034e6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800343c:	2300      	movs	r3, #0
 800343e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003440:	2300      	movs	r3, #0
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344a:	d103      	bne.n	8003454 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800344c:	f04f 33ff 	mov.w	r3, #4294967295
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
 8003452:	e009      	b.n	8003468 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d006      	beq.n	8003468 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <osMessageGet+0x5c>
      ticks = 1;
 8003464:	2301      	movs	r3, #1
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003468:	f7ff feee 	bl	8003248 <inHandlerMode>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d01c      	beq.n	80034ac <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003472:	f107 0220 	add.w	r2, r7, #32
 8003476:	f107 0314 	add.w	r3, r7, #20
 800347a:	3304      	adds	r3, #4
 800347c:	4619      	mov	r1, r3
 800347e:	68b8      	ldr	r0, [r7, #8]
 8003480:	f000 fca0 	bl	8003dc4 <xQueueReceiveFromISR>
 8003484:	4603      	mov	r3, r0
 8003486:	2b01      	cmp	r3, #1
 8003488:	d102      	bne.n	8003490 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800348a:	2310      	movs	r3, #16
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	e001      	b.n	8003494 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d01d      	beq.n	80034d6 <osMessageGet+0xca>
 800349a:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <osMessageGet+0xe4>)
 800349c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	f3bf 8f4f 	dsb	sy
 80034a6:	f3bf 8f6f 	isb	sy
 80034aa:	e014      	b.n	80034d6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80034ac:	f107 0314 	add.w	r3, r7, #20
 80034b0:	3304      	adds	r3, #4
 80034b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b4:	4619      	mov	r1, r3
 80034b6:	68b8      	ldr	r0, [r7, #8]
 80034b8:	f000 fba4 	bl	8003c04 <xQueueReceive>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d102      	bne.n	80034c8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80034c2:	2310      	movs	r3, #16
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	e006      	b.n	80034d6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <osMessageGet+0xc6>
 80034ce:	2300      	movs	r3, #0
 80034d0:	e000      	b.n	80034d4 <osMessageGet+0xc8>
 80034d2:	2340      	movs	r3, #64	; 0x40
 80034d4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	461c      	mov	r4, r3
 80034da:	f107 0314 	add.w	r3, r7, #20
 80034de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80034e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	372c      	adds	r7, #44	; 0x2c
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd90      	pop	{r4, r7, pc}
 80034ee:	bf00      	nop
 80034f0:	e000ed04 	.word	0xe000ed04

080034f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f103 0208 	add.w	r2, r3, #8
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f04f 32ff 	mov.w	r2, #4294967295
 800350c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f103 0208 	add.w	r2, r3, #8
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f103 0208 	add.w	r2, r3, #8
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800354e:	b480      	push	{r7}
 8003550:	b085      	sub	sp, #20
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	601a      	str	r2, [r3, #0]
}
 800358a:	bf00      	nop
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003596:	b480      	push	{r7}
 8003598:	b085      	sub	sp, #20
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
 800359e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ac:	d103      	bne.n	80035b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	e00c      	b.n	80035d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3308      	adds	r3, #8
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	e002      	b.n	80035c4 <vListInsert+0x2e>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d2f6      	bcs.n	80035be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	601a      	str	r2, [r3, #0]
}
 80035fc:	bf00      	nop
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6892      	ldr	r2, [r2, #8]
 800361e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6852      	ldr	r2, [r2, #4]
 8003628:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	429a      	cmp	r2, r3
 8003632:	d103      	bne.n	800363c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	1e5a      	subs	r2, r3, #1
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10a      	bne.n	8003686 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003674:	f383 8811 	msr	BASEPRI, r3
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003682:	bf00      	nop
 8003684:	e7fe      	b.n	8003684 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003686:	f001 fd2d 	bl	80050e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003692:	68f9      	ldr	r1, [r7, #12]
 8003694:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003696:	fb01 f303 	mul.w	r3, r1, r3
 800369a:	441a      	add	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b6:	3b01      	subs	r3, #1
 80036b8:	68f9      	ldr	r1, [r7, #12]
 80036ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036bc:	fb01 f303 	mul.w	r3, r1, r3
 80036c0:	441a      	add	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	22ff      	movs	r2, #255	; 0xff
 80036ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	22ff      	movs	r2, #255	; 0xff
 80036d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d114      	bne.n	8003706 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d01a      	beq.n	800371a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	3310      	adds	r3, #16
 80036e8:	4618      	mov	r0, r3
 80036ea:	f001 f905 	bl	80048f8 <xTaskRemoveFromEventList>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d012      	beq.n	800371a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80036f4:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <xQueueGenericReset+0xcc>)
 80036f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	e009      	b.n	800371a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	3310      	adds	r3, #16
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff fef2 	bl	80034f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3324      	adds	r3, #36	; 0x24
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff feed 	bl	80034f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800371a:	f001 fd13 	bl	8005144 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800371e:	2301      	movs	r3, #1
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	e000ed04 	.word	0xe000ed04

0800372c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08e      	sub	sp, #56	; 0x38
 8003730:	af02      	add	r7, sp, #8
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10a      	bne.n	8003756 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003744:	f383 8811 	msr	BASEPRI, r3
 8003748:	f3bf 8f6f 	isb	sy
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003752:	bf00      	nop
 8003754:	e7fe      	b.n	8003754 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10a      	bne.n	8003772 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800375c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003760:	f383 8811 	msr	BASEPRI, r3
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800376e:	bf00      	nop
 8003770:	e7fe      	b.n	8003770 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d002      	beq.n	800377e <xQueueGenericCreateStatic+0x52>
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <xQueueGenericCreateStatic+0x56>
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <xQueueGenericCreateStatic+0x58>
 8003782:	2300      	movs	r3, #0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10a      	bne.n	800379e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378c:	f383 8811 	msr	BASEPRI, r3
 8003790:	f3bf 8f6f 	isb	sy
 8003794:	f3bf 8f4f 	dsb	sy
 8003798:	623b      	str	r3, [r7, #32]
}
 800379a:	bf00      	nop
 800379c:	e7fe      	b.n	800379c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d102      	bne.n	80037aa <xQueueGenericCreateStatic+0x7e>
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <xQueueGenericCreateStatic+0x82>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <xQueueGenericCreateStatic+0x84>
 80037ae:	2300      	movs	r3, #0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80037b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	61fb      	str	r3, [r7, #28]
}
 80037c6:	bf00      	nop
 80037c8:	e7fe      	b.n	80037c8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80037ca:	2348      	movs	r3, #72	; 0x48
 80037cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b48      	cmp	r3, #72	; 0x48
 80037d2:	d00a      	beq.n	80037ea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80037d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d8:	f383 8811 	msr	BASEPRI, r3
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	61bb      	str	r3, [r7, #24]
}
 80037e6:	bf00      	nop
 80037e8:	e7fe      	b.n	80037e8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80037ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80037f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00d      	beq.n	8003812 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80037f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	4613      	mov	r3, r2
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	68b9      	ldr	r1, [r7, #8]
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f83f 	bl	8003890 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003814:	4618      	mov	r0, r3
 8003816:	3730      	adds	r7, #48	; 0x30
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08a      	sub	sp, #40	; 0x28
 8003820:	af02      	add	r7, sp, #8
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	4613      	mov	r3, r2
 8003828:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10a      	bne.n	8003846 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	613b      	str	r3, [r7, #16]
}
 8003842:	bf00      	nop
 8003844:	e7fe      	b.n	8003844 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	fb02 f303 	mul.w	r3, r2, r3
 800384e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	3348      	adds	r3, #72	; 0x48
 8003854:	4618      	mov	r0, r3
 8003856:	f001 fd67 	bl	8005328 <pvPortMalloc>
 800385a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d011      	beq.n	8003886 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	3348      	adds	r3, #72	; 0x48
 800386a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003874:	79fa      	ldrb	r2, [r7, #7]
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	4613      	mov	r3, r2
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	68b9      	ldr	r1, [r7, #8]
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 f805 	bl	8003890 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003886:	69bb      	ldr	r3, [r7, #24]
	}
 8003888:	4618      	mov	r0, r3
 800388a:	3720      	adds	r7, #32
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d103      	bne.n	80038ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	e002      	b.n	80038b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038be:	2101      	movs	r1, #1
 80038c0:	69b8      	ldr	r0, [r7, #24]
 80038c2:	f7ff fecb 	bl	800365c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80038c6:	bf00      	nop
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08e      	sub	sp, #56	; 0x38
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038de:	2300      	movs	r3, #0
 80038e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80038e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10a      	bne.n	8003902 <xQueueGenericSend+0x32>
	__asm volatile
 80038ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f0:	f383 8811 	msr	BASEPRI, r3
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80038fe:	bf00      	nop
 8003900:	e7fe      	b.n	8003900 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d103      	bne.n	8003910 <xQueueGenericSend+0x40>
 8003908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <xQueueGenericSend+0x44>
 8003910:	2301      	movs	r3, #1
 8003912:	e000      	b.n	8003916 <xQueueGenericSend+0x46>
 8003914:	2300      	movs	r3, #0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10a      	bne.n	8003930 <xQueueGenericSend+0x60>
	__asm volatile
 800391a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800392c:	bf00      	nop
 800392e:	e7fe      	b.n	800392e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	2b02      	cmp	r3, #2
 8003934:	d103      	bne.n	800393e <xQueueGenericSend+0x6e>
 8003936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393a:	2b01      	cmp	r3, #1
 800393c:	d101      	bne.n	8003942 <xQueueGenericSend+0x72>
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <xQueueGenericSend+0x74>
 8003942:	2300      	movs	r3, #0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10a      	bne.n	800395e <xQueueGenericSend+0x8e>
	__asm volatile
 8003948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394c:	f383 8811 	msr	BASEPRI, r3
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	623b      	str	r3, [r7, #32]
}
 800395a:	bf00      	nop
 800395c:	e7fe      	b.n	800395c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800395e:	f001 f987 	bl	8004c70 <xTaskGetSchedulerState>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d102      	bne.n	800396e <xQueueGenericSend+0x9e>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <xQueueGenericSend+0xa2>
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <xQueueGenericSend+0xa4>
 8003972:	2300      	movs	r3, #0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10a      	bne.n	800398e <xQueueGenericSend+0xbe>
	__asm volatile
 8003978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397c:	f383 8811 	msr	BASEPRI, r3
 8003980:	f3bf 8f6f 	isb	sy
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	61fb      	str	r3, [r7, #28]
}
 800398a:	bf00      	nop
 800398c:	e7fe      	b.n	800398c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800398e:	f001 fba9 	bl	80050e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399a:	429a      	cmp	r2, r3
 800399c:	d302      	bcc.n	80039a4 <xQueueGenericSend+0xd4>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d129      	bne.n	80039f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	68b9      	ldr	r1, [r7, #8]
 80039a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039aa:	f000 fa8b 	bl	8003ec4 <prvCopyDataToQueue>
 80039ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d010      	beq.n	80039da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ba:	3324      	adds	r3, #36	; 0x24
 80039bc:	4618      	mov	r0, r3
 80039be:	f000 ff9b 	bl	80048f8 <xTaskRemoveFromEventList>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d013      	beq.n	80039f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039c8:	4b3f      	ldr	r3, [pc, #252]	; (8003ac8 <xQueueGenericSend+0x1f8>)
 80039ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	f3bf 8f4f 	dsb	sy
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	e00a      	b.n	80039f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d007      	beq.n	80039f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039e0:	4b39      	ldr	r3, [pc, #228]	; (8003ac8 <xQueueGenericSend+0x1f8>)
 80039e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	f3bf 8f4f 	dsb	sy
 80039ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80039f0:	f001 fba8 	bl	8005144 <vPortExitCritical>
				return pdPASS;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e063      	b.n	8003ac0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d103      	bne.n	8003a06 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039fe:	f001 fba1 	bl	8005144 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	e05c      	b.n	8003ac0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d106      	bne.n	8003a1a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a0c:	f107 0314 	add.w	r3, r7, #20
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 ffd3 	bl	80049bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a16:	2301      	movs	r3, #1
 8003a18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a1a:	f001 fb93 	bl	8005144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a1e:	f000 fd89 	bl	8004534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a22:	f001 fb5f 	bl	80050e4 <vPortEnterCritical>
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a2c:	b25b      	sxtb	r3, r3
 8003a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a32:	d103      	bne.n	8003a3c <xQueueGenericSend+0x16c>
 8003a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a42:	b25b      	sxtb	r3, r3
 8003a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a48:	d103      	bne.n	8003a52 <xQueueGenericSend+0x182>
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a52:	f001 fb77 	bl	8005144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a56:	1d3a      	adds	r2, r7, #4
 8003a58:	f107 0314 	add.w	r3, r7, #20
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 ffc2 	bl	80049e8 <xTaskCheckForTimeOut>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d124      	bne.n	8003ab4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a6c:	f000 fb22 	bl	80040b4 <prvIsQueueFull>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d018      	beq.n	8003aa8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a78:	3310      	adds	r3, #16
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 ff16 	bl	80048b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a86:	f000 faad 	bl	8003fe4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a8a:	f000 fd61 	bl	8004550 <xTaskResumeAll>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f47f af7c 	bne.w	800398e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003a96:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <xQueueGenericSend+0x1f8>)
 8003a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	f3bf 8f6f 	isb	sy
 8003aa6:	e772      	b.n	800398e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003aa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aaa:	f000 fa9b 	bl	8003fe4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003aae:	f000 fd4f 	bl	8004550 <xTaskResumeAll>
 8003ab2:	e76c      	b.n	800398e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ab6:	f000 fa95 	bl	8003fe4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003aba:	f000 fd49 	bl	8004550 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003abe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3738      	adds	r7, #56	; 0x38
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	e000ed04 	.word	0xe000ed04

08003acc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b090      	sub	sp, #64	; 0x40
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10a      	bne.n	8003afa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae8:	f383 8811 	msr	BASEPRI, r3
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003af6:	bf00      	nop
 8003af8:	e7fe      	b.n	8003af8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d103      	bne.n	8003b08 <xQueueGenericSendFromISR+0x3c>
 8003b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <xQueueGenericSendFromISR+0x40>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <xQueueGenericSendFromISR+0x42>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10a      	bne.n	8003b28 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b24:	bf00      	nop
 8003b26:	e7fe      	b.n	8003b26 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d103      	bne.n	8003b36 <xQueueGenericSendFromISR+0x6a>
 8003b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d101      	bne.n	8003b3a <xQueueGenericSendFromISR+0x6e>
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <xQueueGenericSendFromISR+0x70>
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10a      	bne.n	8003b56 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b44:	f383 8811 	msr	BASEPRI, r3
 8003b48:	f3bf 8f6f 	isb	sy
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	623b      	str	r3, [r7, #32]
}
 8003b52:	bf00      	nop
 8003b54:	e7fe      	b.n	8003b54 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b56:	f001 fba7 	bl	80052a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b5a:	f3ef 8211 	mrs	r2, BASEPRI
 8003b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b62:	f383 8811 	msr	BASEPRI, r3
 8003b66:	f3bf 8f6f 	isb	sy
 8003b6a:	f3bf 8f4f 	dsb	sy
 8003b6e:	61fa      	str	r2, [r7, #28]
 8003b70:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b72:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b74:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d302      	bcc.n	8003b88 <xQueueGenericSendFromISR+0xbc>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d12f      	bne.n	8003be8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b96:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	68b9      	ldr	r1, [r7, #8]
 8003b9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003b9e:	f000 f991 	bl	8003ec4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ba2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003baa:	d112      	bne.n	8003bd2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d016      	beq.n	8003be2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb6:	3324      	adds	r3, #36	; 0x24
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 fe9d 	bl	80048f8 <xTaskRemoveFromEventList>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00e      	beq.n	8003be2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00b      	beq.n	8003be2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	e007      	b.n	8003be2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	b25a      	sxtb	r2, r3
 8003bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003be2:	2301      	movs	r3, #1
 8003be4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003be6:	e001      	b.n	8003bec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003bf6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3740      	adds	r7, #64	; 0x40
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
	...

08003c04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08c      	sub	sp, #48	; 0x30
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c10:	2300      	movs	r3, #0
 8003c12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10a      	bne.n	8003c34 <xQueueReceive+0x30>
	__asm volatile
 8003c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c22:	f383 8811 	msr	BASEPRI, r3
 8003c26:	f3bf 8f6f 	isb	sy
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	623b      	str	r3, [r7, #32]
}
 8003c30:	bf00      	nop
 8003c32:	e7fe      	b.n	8003c32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d103      	bne.n	8003c42 <xQueueReceive+0x3e>
 8003c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <xQueueReceive+0x42>
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <xQueueReceive+0x44>
 8003c46:	2300      	movs	r3, #0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10a      	bne.n	8003c62 <xQueueReceive+0x5e>
	__asm volatile
 8003c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c50:	f383 8811 	msr	BASEPRI, r3
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	61fb      	str	r3, [r7, #28]
}
 8003c5e:	bf00      	nop
 8003c60:	e7fe      	b.n	8003c60 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c62:	f001 f805 	bl	8004c70 <xTaskGetSchedulerState>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d102      	bne.n	8003c72 <xQueueReceive+0x6e>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <xQueueReceive+0x72>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <xQueueReceive+0x74>
 8003c76:	2300      	movs	r3, #0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10a      	bne.n	8003c92 <xQueueReceive+0x8e>
	__asm volatile
 8003c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c80:	f383 8811 	msr	BASEPRI, r3
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	61bb      	str	r3, [r7, #24]
}
 8003c8e:	bf00      	nop
 8003c90:	e7fe      	b.n	8003c90 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c92:	f001 fa27 	bl	80050e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d01f      	beq.n	8003ce2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ca2:	68b9      	ldr	r1, [r7, #8]
 8003ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ca6:	f000 f977 	bl	8003f98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	1e5a      	subs	r2, r3, #1
 8003cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00f      	beq.n	8003cda <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	3310      	adds	r3, #16
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fe1a 	bl	80048f8 <xTaskRemoveFromEventList>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d007      	beq.n	8003cda <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003cca:	4b3d      	ldr	r3, [pc, #244]	; (8003dc0 <xQueueReceive+0x1bc>)
 8003ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003cda:	f001 fa33 	bl	8005144 <vPortExitCritical>
				return pdPASS;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e069      	b.n	8003db6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d103      	bne.n	8003cf0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ce8:	f001 fa2c 	bl	8005144 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003cec:	2300      	movs	r3, #0
 8003cee:	e062      	b.n	8003db6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d106      	bne.n	8003d04 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cf6:	f107 0310 	add.w	r3, r7, #16
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fe5e 	bl	80049bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d00:	2301      	movs	r3, #1
 8003d02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d04:	f001 fa1e 	bl	8005144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d08:	f000 fc14 	bl	8004534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d0c:	f001 f9ea 	bl	80050e4 <vPortEnterCritical>
 8003d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d16:	b25b      	sxtb	r3, r3
 8003d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1c:	d103      	bne.n	8003d26 <xQueueReceive+0x122>
 8003d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d2c:	b25b      	sxtb	r3, r3
 8003d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d32:	d103      	bne.n	8003d3c <xQueueReceive+0x138>
 8003d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d3c:	f001 fa02 	bl	8005144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d40:	1d3a      	adds	r2, r7, #4
 8003d42:	f107 0310 	add.w	r3, r7, #16
 8003d46:	4611      	mov	r1, r2
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 fe4d 	bl	80049e8 <xTaskCheckForTimeOut>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d123      	bne.n	8003d9c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d56:	f000 f997 	bl	8004088 <prvIsQueueEmpty>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d017      	beq.n	8003d90 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d62:	3324      	adds	r3, #36	; 0x24
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	4611      	mov	r1, r2
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fda1 	bl	80048b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d70:	f000 f938 	bl	8003fe4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d74:	f000 fbec 	bl	8004550 <xTaskResumeAll>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d189      	bne.n	8003c92 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003d7e:	4b10      	ldr	r3, [pc, #64]	; (8003dc0 <xQueueReceive+0x1bc>)
 8003d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	f3bf 8f4f 	dsb	sy
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	e780      	b.n	8003c92 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d92:	f000 f927 	bl	8003fe4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d96:	f000 fbdb 	bl	8004550 <xTaskResumeAll>
 8003d9a:	e77a      	b.n	8003c92 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d9e:	f000 f921 	bl	8003fe4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003da2:	f000 fbd5 	bl	8004550 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003da6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003da8:	f000 f96e 	bl	8004088 <prvIsQueueEmpty>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f43f af6f 	beq.w	8003c92 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003db4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3730      	adds	r7, #48	; 0x30
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	e000ed04 	.word	0xe000ed04

08003dc4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08e      	sub	sp, #56	; 0x38
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10a      	bne.n	8003df0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	623b      	str	r3, [r7, #32]
}
 8003dec:	bf00      	nop
 8003dee:	e7fe      	b.n	8003dee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d103      	bne.n	8003dfe <xQueueReceiveFromISR+0x3a>
 8003df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <xQueueReceiveFromISR+0x3e>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <xQueueReceiveFromISR+0x40>
 8003e02:	2300      	movs	r3, #0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10a      	bne.n	8003e1e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0c:	f383 8811 	msr	BASEPRI, r3
 8003e10:	f3bf 8f6f 	isb	sy
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	61fb      	str	r3, [r7, #28]
}
 8003e1a:	bf00      	nop
 8003e1c:	e7fe      	b.n	8003e1c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e1e:	f001 fa43 	bl	80052a8 <vPortValidateInterruptPriority>
	__asm volatile
 8003e22:	f3ef 8211 	mrs	r2, BASEPRI
 8003e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	61ba      	str	r2, [r7, #24]
 8003e38:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003e3a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e42:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d02f      	beq.n	8003eaa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e54:	68b9      	ldr	r1, [r7, #8]
 8003e56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e58:	f000 f89e 	bl	8003f98 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5e:	1e5a      	subs	r2, r3, #1
 8003e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e62:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003e64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6c:	d112      	bne.n	8003e94 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d016      	beq.n	8003ea4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e78:	3310      	adds	r3, #16
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 fd3c 	bl	80048f8 <xTaskRemoveFromEventList>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00e      	beq.n	8003ea4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00b      	beq.n	8003ea4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	e007      	b.n	8003ea4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003e94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e98:	3301      	adds	r3, #1
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	b25a      	sxtb	r2, r3
 8003e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ea8:	e001      	b.n	8003eae <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	637b      	str	r3, [r7, #52]	; 0x34
 8003eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f383 8811 	msr	BASEPRI, r3
}
 8003eb8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3738      	adds	r7, #56	; 0x38
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10d      	bne.n	8003efe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d14d      	bne.n	8003f86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fedc 	bl	8004cac <xTaskPriorityDisinherit>
 8003ef4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	609a      	str	r2, [r3, #8]
 8003efc:	e043      	b.n	8003f86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d119      	bne.n	8003f38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6858      	ldr	r0, [r3, #4]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	68b9      	ldr	r1, [r7, #8]
 8003f10:	f001 fe77 	bl	8005c02 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	441a      	add	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d32b      	bcc.n	8003f86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	605a      	str	r2, [r3, #4]
 8003f36:	e026      	b.n	8003f86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	68d8      	ldr	r0, [r3, #12]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	461a      	mov	r2, r3
 8003f42:	68b9      	ldr	r1, [r7, #8]
 8003f44:	f001 fe5d 	bl	8005c02 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	425b      	negs	r3, r3
 8003f52:	441a      	add	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d207      	bcs.n	8003f74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	425b      	negs	r3, r3
 8003f6e:	441a      	add	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d105      	bne.n	8003f86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003f8e:	697b      	ldr	r3, [r7, #20]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d018      	beq.n	8003fdc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	441a      	add	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d303      	bcc.n	8003fcc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68d9      	ldr	r1, [r3, #12]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	6838      	ldr	r0, [r7, #0]
 8003fd8:	f001 fe13 	bl	8005c02 <memcpy>
	}
}
 8003fdc:	bf00      	nop
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003fec:	f001 f87a 	bl	80050e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ff6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ff8:	e011      	b.n	800401e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d012      	beq.n	8004028 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3324      	adds	r3, #36	; 0x24
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fc76 	bl	80048f8 <xTaskRemoveFromEventList>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004012:	f000 fd4b 	bl	8004aac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004016:	7bfb      	ldrb	r3, [r7, #15]
 8004018:	3b01      	subs	r3, #1
 800401a:	b2db      	uxtb	r3, r3
 800401c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800401e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004022:	2b00      	cmp	r3, #0
 8004024:	dce9      	bgt.n	8003ffa <prvUnlockQueue+0x16>
 8004026:	e000      	b.n	800402a <prvUnlockQueue+0x46>
					break;
 8004028:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	22ff      	movs	r2, #255	; 0xff
 800402e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004032:	f001 f887 	bl	8005144 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004036:	f001 f855 	bl	80050e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004040:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004042:	e011      	b.n	8004068 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d012      	beq.n	8004072 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3310      	adds	r3, #16
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fc51 	bl	80048f8 <xTaskRemoveFromEventList>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800405c:	f000 fd26 	bl	8004aac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004060:	7bbb      	ldrb	r3, [r7, #14]
 8004062:	3b01      	subs	r3, #1
 8004064:	b2db      	uxtb	r3, r3
 8004066:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004068:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800406c:	2b00      	cmp	r3, #0
 800406e:	dce9      	bgt.n	8004044 <prvUnlockQueue+0x60>
 8004070:	e000      	b.n	8004074 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004072:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	22ff      	movs	r2, #255	; 0xff
 8004078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800407c:	f001 f862 	bl	8005144 <vPortExitCritical>
}
 8004080:	bf00      	nop
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004090:	f001 f828 	bl	80050e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004098:	2b00      	cmp	r3, #0
 800409a:	d102      	bne.n	80040a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800409c:	2301      	movs	r3, #1
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	e001      	b.n	80040a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80040a2:	2300      	movs	r3, #0
 80040a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040a6:	f001 f84d 	bl	8005144 <vPortExitCritical>

	return xReturn;
 80040aa:	68fb      	ldr	r3, [r7, #12]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040bc:	f001 f812 	bl	80050e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d102      	bne.n	80040d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80040cc:	2301      	movs	r3, #1
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	e001      	b.n	80040d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80040d2:	2300      	movs	r3, #0
 80040d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040d6:	f001 f835 	bl	8005144 <vPortExitCritical>

	return xReturn;
 80040da:	68fb      	ldr	r3, [r7, #12]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08e      	sub	sp, #56	; 0x38
 80040e8:	af04      	add	r7, sp, #16
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
 80040f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10a      	bne.n	800410e <xTaskCreateStatic+0x2a>
	__asm volatile
 80040f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	623b      	str	r3, [r7, #32]
}
 800410a:	bf00      	nop
 800410c:	e7fe      	b.n	800410c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800410e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10a      	bne.n	800412a <xTaskCreateStatic+0x46>
	__asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	61fb      	str	r3, [r7, #28]
}
 8004126:	bf00      	nop
 8004128:	e7fe      	b.n	8004128 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800412a:	2354      	movs	r3, #84	; 0x54
 800412c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	2b54      	cmp	r3, #84	; 0x54
 8004132:	d00a      	beq.n	800414a <xTaskCreateStatic+0x66>
	__asm volatile
 8004134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	61bb      	str	r3, [r7, #24]
}
 8004146:	bf00      	nop
 8004148:	e7fe      	b.n	8004148 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800414a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800414c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414e:	2b00      	cmp	r3, #0
 8004150:	d01e      	beq.n	8004190 <xTaskCreateStatic+0xac>
 8004152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004154:	2b00      	cmp	r3, #0
 8004156:	d01b      	beq.n	8004190 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004160:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	2202      	movs	r2, #2
 8004166:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800416a:	2300      	movs	r3, #0
 800416c:	9303      	str	r3, [sp, #12]
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	9302      	str	r3, [sp, #8]
 8004172:	f107 0314 	add.w	r3, r7, #20
 8004176:	9301      	str	r3, [sp, #4]
 8004178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	68b9      	ldr	r1, [r7, #8]
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f850 	bl	8004228 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004188:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800418a:	f000 f8d5 	bl	8004338 <prvAddNewTaskToReadyList>
 800418e:	e001      	b.n	8004194 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004194:	697b      	ldr	r3, [r7, #20]
	}
 8004196:	4618      	mov	r0, r3
 8004198:	3728      	adds	r7, #40	; 0x28
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b08c      	sub	sp, #48	; 0x30
 80041a2:	af04      	add	r7, sp, #16
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	603b      	str	r3, [r7, #0]
 80041aa:	4613      	mov	r3, r2
 80041ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4618      	mov	r0, r3
 80041b4:	f001 f8b8 	bl	8005328 <pvPortMalloc>
 80041b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00e      	beq.n	80041de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80041c0:	2054      	movs	r0, #84	; 0x54
 80041c2:	f001 f8b1 	bl	8005328 <pvPortMalloc>
 80041c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	631a      	str	r2, [r3, #48]	; 0x30
 80041d4:	e005      	b.n	80041e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041d6:	6978      	ldr	r0, [r7, #20]
 80041d8:	f001 f972 	bl	80054c0 <vPortFree>
 80041dc:	e001      	b.n	80041e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041de:	2300      	movs	r3, #0
 80041e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d017      	beq.n	8004218 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041f0:	88fa      	ldrh	r2, [r7, #6]
 80041f2:	2300      	movs	r3, #0
 80041f4:	9303      	str	r3, [sp, #12]
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	9302      	str	r3, [sp, #8]
 80041fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fc:	9301      	str	r3, [sp, #4]
 80041fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	68b9      	ldr	r1, [r7, #8]
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 f80e 	bl	8004228 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800420c:	69f8      	ldr	r0, [r7, #28]
 800420e:	f000 f893 	bl	8004338 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004212:	2301      	movs	r3, #1
 8004214:	61bb      	str	r3, [r7, #24]
 8004216:	e002      	b.n	800421e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004218:	f04f 33ff 	mov.w	r3, #4294967295
 800421c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800421e:	69bb      	ldr	r3, [r7, #24]
	}
 8004220:	4618      	mov	r0, r3
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004240:	3b01      	subs	r3, #1
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	f023 0307 	bic.w	r3, r3, #7
 800424e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <prvInitialiseNewTask+0x48>
	__asm volatile
 800425a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425e:	f383 8811 	msr	BASEPRI, r3
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	617b      	str	r3, [r7, #20]
}
 800426c:	bf00      	nop
 800426e:	e7fe      	b.n	800426e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d01f      	beq.n	80042b6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004276:	2300      	movs	r3, #0
 8004278:	61fb      	str	r3, [r7, #28]
 800427a:	e012      	b.n	80042a2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	4413      	add	r3, r2
 8004282:	7819      	ldrb	r1, [r3, #0]
 8004284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	4413      	add	r3, r2
 800428a:	3334      	adds	r3, #52	; 0x34
 800428c:	460a      	mov	r2, r1
 800428e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	4413      	add	r3, r2
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d006      	beq.n	80042aa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	3301      	adds	r3, #1
 80042a0:	61fb      	str	r3, [r7, #28]
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	2b0f      	cmp	r3, #15
 80042a6:	d9e9      	bls.n	800427c <prvInitialiseNewTask+0x54>
 80042a8:	e000      	b.n	80042ac <prvInitialiseNewTask+0x84>
			{
				break;
 80042aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042b4:	e003      	b.n	80042be <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80042b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c0:	2b06      	cmp	r3, #6
 80042c2:	d901      	bls.n	80042c8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042c4:	2306      	movs	r3, #6
 80042c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042d2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80042d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d6:	2200      	movs	r2, #0
 80042d8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	3304      	adds	r3, #4
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff f928 	bl	8003534 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e6:	3318      	adds	r3, #24
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff f923 	bl	8003534 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	f1c3 0207 	rsb	r2, r3, #7
 80042fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004302:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004306:	2200      	movs	r2, #0
 8004308:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800430a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	68f9      	ldr	r1, [r7, #12]
 8004316:	69b8      	ldr	r0, [r7, #24]
 8004318:	f000 fdb4 	bl	8004e84 <pxPortInitialiseStack>
 800431c:	4602      	mov	r2, r0
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800432c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800432e:	bf00      	nop
 8004330:	3720      	adds	r7, #32
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004340:	f000 fed0 	bl	80050e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004344:	4b2a      	ldr	r3, [pc, #168]	; (80043f0 <prvAddNewTaskToReadyList+0xb8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3301      	adds	r3, #1
 800434a:	4a29      	ldr	r2, [pc, #164]	; (80043f0 <prvAddNewTaskToReadyList+0xb8>)
 800434c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800434e:	4b29      	ldr	r3, [pc, #164]	; (80043f4 <prvAddNewTaskToReadyList+0xbc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d109      	bne.n	800436a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004356:	4a27      	ldr	r2, [pc, #156]	; (80043f4 <prvAddNewTaskToReadyList+0xbc>)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800435c:	4b24      	ldr	r3, [pc, #144]	; (80043f0 <prvAddNewTaskToReadyList+0xb8>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d110      	bne.n	8004386 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004364:	f000 fbc6 	bl	8004af4 <prvInitialiseTaskLists>
 8004368:	e00d      	b.n	8004386 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800436a:	4b23      	ldr	r3, [pc, #140]	; (80043f8 <prvAddNewTaskToReadyList+0xc0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d109      	bne.n	8004386 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004372:	4b20      	ldr	r3, [pc, #128]	; (80043f4 <prvAddNewTaskToReadyList+0xbc>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	429a      	cmp	r2, r3
 800437e:	d802      	bhi.n	8004386 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004380:	4a1c      	ldr	r2, [pc, #112]	; (80043f4 <prvAddNewTaskToReadyList+0xbc>)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004386:	4b1d      	ldr	r3, [pc, #116]	; (80043fc <prvAddNewTaskToReadyList+0xc4>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3301      	adds	r3, #1
 800438c:	4a1b      	ldr	r2, [pc, #108]	; (80043fc <prvAddNewTaskToReadyList+0xc4>)
 800438e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	2201      	movs	r2, #1
 8004396:	409a      	lsls	r2, r3
 8004398:	4b19      	ldr	r3, [pc, #100]	; (8004400 <prvAddNewTaskToReadyList+0xc8>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4313      	orrs	r3, r2
 800439e:	4a18      	ldr	r2, [pc, #96]	; (8004400 <prvAddNewTaskToReadyList+0xc8>)
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4a15      	ldr	r2, [pc, #84]	; (8004404 <prvAddNewTaskToReadyList+0xcc>)
 80043b0:	441a      	add	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3304      	adds	r3, #4
 80043b6:	4619      	mov	r1, r3
 80043b8:	4610      	mov	r0, r2
 80043ba:	f7ff f8c8 	bl	800354e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043be:	f000 fec1 	bl	8005144 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043c2:	4b0d      	ldr	r3, [pc, #52]	; (80043f8 <prvAddNewTaskToReadyList+0xc0>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00e      	beq.n	80043e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043ca:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <prvAddNewTaskToReadyList+0xbc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d207      	bcs.n	80043e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <prvAddNewTaskToReadyList+0xd0>)
 80043da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043e8:	bf00      	nop
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	20000480 	.word	0x20000480
 80043f4:	20000380 	.word	0x20000380
 80043f8:	2000048c 	.word	0x2000048c
 80043fc:	2000049c 	.word	0x2000049c
 8004400:	20000488 	.word	0x20000488
 8004404:	20000384 	.word	0x20000384
 8004408:	e000ed04 	.word	0xe000ed04

0800440c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004414:	2300      	movs	r3, #0
 8004416:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d017      	beq.n	800444e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800441e:	4b13      	ldr	r3, [pc, #76]	; (800446c <vTaskDelay+0x60>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00a      	beq.n	800443c <vTaskDelay+0x30>
	__asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	60bb      	str	r3, [r7, #8]
}
 8004438:	bf00      	nop
 800443a:	e7fe      	b.n	800443a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800443c:	f000 f87a 	bl	8004534 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004440:	2100      	movs	r1, #0
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fcb8 	bl	8004db8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004448:	f000 f882 	bl	8004550 <xTaskResumeAll>
 800444c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d107      	bne.n	8004464 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004454:	4b06      	ldr	r3, [pc, #24]	; (8004470 <vTaskDelay+0x64>)
 8004456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	200004a8 	.word	0x200004a8
 8004470:	e000ed04 	.word	0xe000ed04

08004474 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08a      	sub	sp, #40	; 0x28
 8004478:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800447a:	2300      	movs	r3, #0
 800447c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800447e:	2300      	movs	r3, #0
 8004480:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004482:	463a      	mov	r2, r7
 8004484:	1d39      	adds	r1, r7, #4
 8004486:	f107 0308 	add.w	r3, r7, #8
 800448a:	4618      	mov	r0, r3
 800448c:	f7fc f86e 	bl	800056c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004490:	6839      	ldr	r1, [r7, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	9202      	str	r2, [sp, #8]
 8004498:	9301      	str	r3, [sp, #4]
 800449a:	2300      	movs	r3, #0
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	2300      	movs	r3, #0
 80044a0:	460a      	mov	r2, r1
 80044a2:	491e      	ldr	r1, [pc, #120]	; (800451c <vTaskStartScheduler+0xa8>)
 80044a4:	481e      	ldr	r0, [pc, #120]	; (8004520 <vTaskStartScheduler+0xac>)
 80044a6:	f7ff fe1d 	bl	80040e4 <xTaskCreateStatic>
 80044aa:	4603      	mov	r3, r0
 80044ac:	4a1d      	ldr	r2, [pc, #116]	; (8004524 <vTaskStartScheduler+0xb0>)
 80044ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044b0:	4b1c      	ldr	r3, [pc, #112]	; (8004524 <vTaskStartScheduler+0xb0>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044b8:	2301      	movs	r3, #1
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	e001      	b.n	80044c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044be:	2300      	movs	r3, #0
 80044c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d116      	bne.n	80044f6 <vTaskStartScheduler+0x82>
	__asm volatile
 80044c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044cc:	f383 8811 	msr	BASEPRI, r3
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	613b      	str	r3, [r7, #16]
}
 80044da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044dc:	4b12      	ldr	r3, [pc, #72]	; (8004528 <vTaskStartScheduler+0xb4>)
 80044de:	f04f 32ff 	mov.w	r2, #4294967295
 80044e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80044e4:	4b11      	ldr	r3, [pc, #68]	; (800452c <vTaskStartScheduler+0xb8>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80044ea:	4b11      	ldr	r3, [pc, #68]	; (8004530 <vTaskStartScheduler+0xbc>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044f0:	f000 fd56 	bl	8004fa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044f4:	e00e      	b.n	8004514 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fc:	d10a      	bne.n	8004514 <vTaskStartScheduler+0xa0>
	__asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	60fb      	str	r3, [r7, #12]
}
 8004510:	bf00      	nop
 8004512:	e7fe      	b.n	8004512 <vTaskStartScheduler+0x9e>
}
 8004514:	bf00      	nop
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	08006700 	.word	0x08006700
 8004520:	08004ac5 	.word	0x08004ac5
 8004524:	200004a4 	.word	0x200004a4
 8004528:	200004a0 	.word	0x200004a0
 800452c:	2000048c 	.word	0x2000048c
 8004530:	20000484 	.word	0x20000484

08004534 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004538:	4b04      	ldr	r3, [pc, #16]	; (800454c <vTaskSuspendAll+0x18>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3301      	adds	r3, #1
 800453e:	4a03      	ldr	r2, [pc, #12]	; (800454c <vTaskSuspendAll+0x18>)
 8004540:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004542:	bf00      	nop
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	200004a8 	.word	0x200004a8

08004550 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004556:	2300      	movs	r3, #0
 8004558:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800455a:	2300      	movs	r3, #0
 800455c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800455e:	4b41      	ldr	r3, [pc, #260]	; (8004664 <xTaskResumeAll+0x114>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10a      	bne.n	800457c <xTaskResumeAll+0x2c>
	__asm volatile
 8004566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456a:	f383 8811 	msr	BASEPRI, r3
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	603b      	str	r3, [r7, #0]
}
 8004578:	bf00      	nop
 800457a:	e7fe      	b.n	800457a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800457c:	f000 fdb2 	bl	80050e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004580:	4b38      	ldr	r3, [pc, #224]	; (8004664 <xTaskResumeAll+0x114>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	3b01      	subs	r3, #1
 8004586:	4a37      	ldr	r2, [pc, #220]	; (8004664 <xTaskResumeAll+0x114>)
 8004588:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800458a:	4b36      	ldr	r3, [pc, #216]	; (8004664 <xTaskResumeAll+0x114>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d161      	bne.n	8004656 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004592:	4b35      	ldr	r3, [pc, #212]	; (8004668 <xTaskResumeAll+0x118>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d05d      	beq.n	8004656 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800459a:	e02e      	b.n	80045fa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800459c:	4b33      	ldr	r3, [pc, #204]	; (800466c <xTaskResumeAll+0x11c>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	3318      	adds	r3, #24
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff f82d 	bl	8003608 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	3304      	adds	r3, #4
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7ff f828 	bl	8003608 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	2201      	movs	r2, #1
 80045be:	409a      	lsls	r2, r3
 80045c0:	4b2b      	ldr	r3, [pc, #172]	; (8004670 <xTaskResumeAll+0x120>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	4a2a      	ldr	r2, [pc, #168]	; (8004670 <xTaskResumeAll+0x120>)
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ce:	4613      	mov	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4a27      	ldr	r2, [pc, #156]	; (8004674 <xTaskResumeAll+0x124>)
 80045d8:	441a      	add	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3304      	adds	r3, #4
 80045de:	4619      	mov	r1, r3
 80045e0:	4610      	mov	r0, r2
 80045e2:	f7fe ffb4 	bl	800354e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ea:	4b23      	ldr	r3, [pc, #140]	; (8004678 <xTaskResumeAll+0x128>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d302      	bcc.n	80045fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80045f4:	4b21      	ldr	r3, [pc, #132]	; (800467c <xTaskResumeAll+0x12c>)
 80045f6:	2201      	movs	r2, #1
 80045f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045fa:	4b1c      	ldr	r3, [pc, #112]	; (800466c <xTaskResumeAll+0x11c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1cc      	bne.n	800459c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004608:	f000 fb12 	bl	8004c30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800460c:	4b1c      	ldr	r3, [pc, #112]	; (8004680 <xTaskResumeAll+0x130>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d010      	beq.n	800463a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004618:	f000 f836 	bl	8004688 <xTaskIncrementTick>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004622:	4b16      	ldr	r3, [pc, #88]	; (800467c <xTaskResumeAll+0x12c>)
 8004624:	2201      	movs	r2, #1
 8004626:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3b01      	subs	r3, #1
 800462c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1f1      	bne.n	8004618 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004634:	4b12      	ldr	r3, [pc, #72]	; (8004680 <xTaskResumeAll+0x130>)
 8004636:	2200      	movs	r2, #0
 8004638:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800463a:	4b10      	ldr	r3, [pc, #64]	; (800467c <xTaskResumeAll+0x12c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d009      	beq.n	8004656 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004642:	2301      	movs	r3, #1
 8004644:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004646:	4b0f      	ldr	r3, [pc, #60]	; (8004684 <xTaskResumeAll+0x134>)
 8004648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004656:	f000 fd75 	bl	8005144 <vPortExitCritical>

	return xAlreadyYielded;
 800465a:	68bb      	ldr	r3, [r7, #8]
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	200004a8 	.word	0x200004a8
 8004668:	20000480 	.word	0x20000480
 800466c:	20000440 	.word	0x20000440
 8004670:	20000488 	.word	0x20000488
 8004674:	20000384 	.word	0x20000384
 8004678:	20000380 	.word	0x20000380
 800467c:	20000494 	.word	0x20000494
 8004680:	20000490 	.word	0x20000490
 8004684:	e000ed04 	.word	0xe000ed04

08004688 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004692:	4b4e      	ldr	r3, [pc, #312]	; (80047cc <xTaskIncrementTick+0x144>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	f040 808e 	bne.w	80047b8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800469c:	4b4c      	ldr	r3, [pc, #304]	; (80047d0 <xTaskIncrementTick+0x148>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3301      	adds	r3, #1
 80046a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046a4:	4a4a      	ldr	r2, [pc, #296]	; (80047d0 <xTaskIncrementTick+0x148>)
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d120      	bne.n	80046f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80046b0:	4b48      	ldr	r3, [pc, #288]	; (80047d4 <xTaskIncrementTick+0x14c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80046ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046be:	f383 8811 	msr	BASEPRI, r3
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	603b      	str	r3, [r7, #0]
}
 80046cc:	bf00      	nop
 80046ce:	e7fe      	b.n	80046ce <xTaskIncrementTick+0x46>
 80046d0:	4b40      	ldr	r3, [pc, #256]	; (80047d4 <xTaskIncrementTick+0x14c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	4b40      	ldr	r3, [pc, #256]	; (80047d8 <xTaskIncrementTick+0x150>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a3e      	ldr	r2, [pc, #248]	; (80047d4 <xTaskIncrementTick+0x14c>)
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	4a3e      	ldr	r2, [pc, #248]	; (80047d8 <xTaskIncrementTick+0x150>)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	4b3d      	ldr	r3, [pc, #244]	; (80047dc <xTaskIncrementTick+0x154>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3301      	adds	r3, #1
 80046ea:	4a3c      	ldr	r2, [pc, #240]	; (80047dc <xTaskIncrementTick+0x154>)
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	f000 fa9f 	bl	8004c30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046f2:	4b3b      	ldr	r3, [pc, #236]	; (80047e0 <xTaskIncrementTick+0x158>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d348      	bcc.n	800478e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046fc:	4b35      	ldr	r3, [pc, #212]	; (80047d4 <xTaskIncrementTick+0x14c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d104      	bne.n	8004710 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004706:	4b36      	ldr	r3, [pc, #216]	; (80047e0 <xTaskIncrementTick+0x158>)
 8004708:	f04f 32ff 	mov.w	r2, #4294967295
 800470c:	601a      	str	r2, [r3, #0]
					break;
 800470e:	e03e      	b.n	800478e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004710:	4b30      	ldr	r3, [pc, #192]	; (80047d4 <xTaskIncrementTick+0x14c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	429a      	cmp	r2, r3
 8004726:	d203      	bcs.n	8004730 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004728:	4a2d      	ldr	r2, [pc, #180]	; (80047e0 <xTaskIncrementTick+0x158>)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800472e:	e02e      	b.n	800478e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	3304      	adds	r3, #4
 8004734:	4618      	mov	r0, r3
 8004736:	f7fe ff67 	bl	8003608 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473e:	2b00      	cmp	r3, #0
 8004740:	d004      	beq.n	800474c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	3318      	adds	r3, #24
 8004746:	4618      	mov	r0, r3
 8004748:	f7fe ff5e 	bl	8003608 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004750:	2201      	movs	r2, #1
 8004752:	409a      	lsls	r2, r3
 8004754:	4b23      	ldr	r3, [pc, #140]	; (80047e4 <xTaskIncrementTick+0x15c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4313      	orrs	r3, r2
 800475a:	4a22      	ldr	r2, [pc, #136]	; (80047e4 <xTaskIncrementTick+0x15c>)
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004762:	4613      	mov	r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4413      	add	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4a1f      	ldr	r2, [pc, #124]	; (80047e8 <xTaskIncrementTick+0x160>)
 800476c:	441a      	add	r2, r3
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	3304      	adds	r3, #4
 8004772:	4619      	mov	r1, r3
 8004774:	4610      	mov	r0, r2
 8004776:	f7fe feea 	bl	800354e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800477e:	4b1b      	ldr	r3, [pc, #108]	; (80047ec <xTaskIncrementTick+0x164>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	429a      	cmp	r2, r3
 8004786:	d3b9      	bcc.n	80046fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004788:	2301      	movs	r3, #1
 800478a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800478c:	e7b6      	b.n	80046fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800478e:	4b17      	ldr	r3, [pc, #92]	; (80047ec <xTaskIncrementTick+0x164>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004794:	4914      	ldr	r1, [pc, #80]	; (80047e8 <xTaskIncrementTick+0x160>)
 8004796:	4613      	mov	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4413      	add	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	440b      	add	r3, r1
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d901      	bls.n	80047aa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80047a6:	2301      	movs	r3, #1
 80047a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80047aa:	4b11      	ldr	r3, [pc, #68]	; (80047f0 <xTaskIncrementTick+0x168>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d007      	beq.n	80047c2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80047b2:	2301      	movs	r3, #1
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	e004      	b.n	80047c2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80047b8:	4b0e      	ldr	r3, [pc, #56]	; (80047f4 <xTaskIncrementTick+0x16c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3301      	adds	r3, #1
 80047be:	4a0d      	ldr	r2, [pc, #52]	; (80047f4 <xTaskIncrementTick+0x16c>)
 80047c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80047c2:	697b      	ldr	r3, [r7, #20]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	200004a8 	.word	0x200004a8
 80047d0:	20000484 	.word	0x20000484
 80047d4:	20000438 	.word	0x20000438
 80047d8:	2000043c 	.word	0x2000043c
 80047dc:	20000498 	.word	0x20000498
 80047e0:	200004a0 	.word	0x200004a0
 80047e4:	20000488 	.word	0x20000488
 80047e8:	20000384 	.word	0x20000384
 80047ec:	20000380 	.word	0x20000380
 80047f0:	20000494 	.word	0x20000494
 80047f4:	20000490 	.word	0x20000490

080047f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047fe:	4b27      	ldr	r3, [pc, #156]	; (800489c <vTaskSwitchContext+0xa4>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004806:	4b26      	ldr	r3, [pc, #152]	; (80048a0 <vTaskSwitchContext+0xa8>)
 8004808:	2201      	movs	r2, #1
 800480a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800480c:	e03f      	b.n	800488e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800480e:	4b24      	ldr	r3, [pc, #144]	; (80048a0 <vTaskSwitchContext+0xa8>)
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004814:	4b23      	ldr	r3, [pc, #140]	; (80048a4 <vTaskSwitchContext+0xac>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	fab3 f383 	clz	r3, r3
 8004820:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004822:	7afb      	ldrb	r3, [r7, #11]
 8004824:	f1c3 031f 	rsb	r3, r3, #31
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	491f      	ldr	r1, [pc, #124]	; (80048a8 <vTaskSwitchContext+0xb0>)
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	4613      	mov	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	440b      	add	r3, r1
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10a      	bne.n	8004854 <vTaskSwitchContext+0x5c>
	__asm volatile
 800483e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	607b      	str	r3, [r7, #4]
}
 8004850:	bf00      	nop
 8004852:	e7fe      	b.n	8004852 <vTaskSwitchContext+0x5a>
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	4613      	mov	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4a12      	ldr	r2, [pc, #72]	; (80048a8 <vTaskSwitchContext+0xb0>)
 8004860:	4413      	add	r3, r2
 8004862:	613b      	str	r3, [r7, #16]
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	605a      	str	r2, [r3, #4]
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	3308      	adds	r3, #8
 8004876:	429a      	cmp	r2, r3
 8004878:	d104      	bne.n	8004884 <vTaskSwitchContext+0x8c>
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	605a      	str	r2, [r3, #4]
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	4a08      	ldr	r2, [pc, #32]	; (80048ac <vTaskSwitchContext+0xb4>)
 800488c:	6013      	str	r3, [r2, #0]
}
 800488e:	bf00      	nop
 8004890:	371c      	adds	r7, #28
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	200004a8 	.word	0x200004a8
 80048a0:	20000494 	.word	0x20000494
 80048a4:	20000488 	.word	0x20000488
 80048a8:	20000384 	.word	0x20000384
 80048ac:	20000380 	.word	0x20000380

080048b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10a      	bne.n	80048d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	60fb      	str	r3, [r7, #12]
}
 80048d2:	bf00      	nop
 80048d4:	e7fe      	b.n	80048d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048d6:	4b07      	ldr	r3, [pc, #28]	; (80048f4 <vTaskPlaceOnEventList+0x44>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	3318      	adds	r3, #24
 80048dc:	4619      	mov	r1, r3
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7fe fe59 	bl	8003596 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048e4:	2101      	movs	r1, #1
 80048e6:	6838      	ldr	r0, [r7, #0]
 80048e8:	f000 fa66 	bl	8004db8 <prvAddCurrentTaskToDelayedList>
}
 80048ec:	bf00      	nop
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	20000380 	.word	0x20000380

080048f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10a      	bne.n	8004924 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800490e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	60fb      	str	r3, [r7, #12]
}
 8004920:	bf00      	nop
 8004922:	e7fe      	b.n	8004922 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	3318      	adds	r3, #24
 8004928:	4618      	mov	r0, r3
 800492a:	f7fe fe6d 	bl	8003608 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800492e:	4b1d      	ldr	r3, [pc, #116]	; (80049a4 <xTaskRemoveFromEventList+0xac>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d11c      	bne.n	8004970 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	3304      	adds	r3, #4
 800493a:	4618      	mov	r0, r3
 800493c:	f7fe fe64 	bl	8003608 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	2201      	movs	r2, #1
 8004946:	409a      	lsls	r2, r3
 8004948:	4b17      	ldr	r3, [pc, #92]	; (80049a8 <xTaskRemoveFromEventList+0xb0>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4313      	orrs	r3, r2
 800494e:	4a16      	ldr	r2, [pc, #88]	; (80049a8 <xTaskRemoveFromEventList+0xb0>)
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004956:	4613      	mov	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4413      	add	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4a13      	ldr	r2, [pc, #76]	; (80049ac <xTaskRemoveFromEventList+0xb4>)
 8004960:	441a      	add	r2, r3
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	3304      	adds	r3, #4
 8004966:	4619      	mov	r1, r3
 8004968:	4610      	mov	r0, r2
 800496a:	f7fe fdf0 	bl	800354e <vListInsertEnd>
 800496e:	e005      	b.n	800497c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	3318      	adds	r3, #24
 8004974:	4619      	mov	r1, r3
 8004976:	480e      	ldr	r0, [pc, #56]	; (80049b0 <xTaskRemoveFromEventList+0xb8>)
 8004978:	f7fe fde9 	bl	800354e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004980:	4b0c      	ldr	r3, [pc, #48]	; (80049b4 <xTaskRemoveFromEventList+0xbc>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004986:	429a      	cmp	r2, r3
 8004988:	d905      	bls.n	8004996 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800498a:	2301      	movs	r3, #1
 800498c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800498e:	4b0a      	ldr	r3, [pc, #40]	; (80049b8 <xTaskRemoveFromEventList+0xc0>)
 8004990:	2201      	movs	r2, #1
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	e001      	b.n	800499a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004996:	2300      	movs	r3, #0
 8004998:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800499a:	697b      	ldr	r3, [r7, #20]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	200004a8 	.word	0x200004a8
 80049a8:	20000488 	.word	0x20000488
 80049ac:	20000384 	.word	0x20000384
 80049b0:	20000440 	.word	0x20000440
 80049b4:	20000380 	.word	0x20000380
 80049b8:	20000494 	.word	0x20000494

080049bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80049c4:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <vTaskInternalSetTimeOutState+0x24>)
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80049cc:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <vTaskInternalSetTimeOutState+0x28>)
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	605a      	str	r2, [r3, #4]
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	20000498 	.word	0x20000498
 80049e4:	20000484 	.word	0x20000484

080049e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b088      	sub	sp, #32
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10a      	bne.n	8004a0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80049f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fc:	f383 8811 	msr	BASEPRI, r3
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	613b      	str	r3, [r7, #16]
}
 8004a0a:	bf00      	nop
 8004a0c:	e7fe      	b.n	8004a0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10a      	bne.n	8004a2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	60fb      	str	r3, [r7, #12]
}
 8004a26:	bf00      	nop
 8004a28:	e7fe      	b.n	8004a28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004a2a:	f000 fb5b 	bl	80050e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a2e:	4b1d      	ldr	r3, [pc, #116]	; (8004aa4 <xTaskCheckForTimeOut+0xbc>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a46:	d102      	bne.n	8004a4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	61fb      	str	r3, [r7, #28]
 8004a4c:	e023      	b.n	8004a96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	4b15      	ldr	r3, [pc, #84]	; (8004aa8 <xTaskCheckForTimeOut+0xc0>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d007      	beq.n	8004a6a <xTaskCheckForTimeOut+0x82>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d302      	bcc.n	8004a6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a64:	2301      	movs	r3, #1
 8004a66:	61fb      	str	r3, [r7, #28]
 8004a68:	e015      	b.n	8004a96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d20b      	bcs.n	8004a8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	1ad2      	subs	r2, r2, r3
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff ff9b 	bl	80049bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a86:	2300      	movs	r3, #0
 8004a88:	61fb      	str	r3, [r7, #28]
 8004a8a:	e004      	b.n	8004a96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a92:	2301      	movs	r3, #1
 8004a94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a96:	f000 fb55 	bl	8005144 <vPortExitCritical>

	return xReturn;
 8004a9a:	69fb      	ldr	r3, [r7, #28]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3720      	adds	r7, #32
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	20000484 	.word	0x20000484
 8004aa8:	20000498 	.word	0x20000498

08004aac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ab0:	4b03      	ldr	r3, [pc, #12]	; (8004ac0 <vTaskMissedYield+0x14>)
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]
}
 8004ab6:	bf00      	nop
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	20000494 	.word	0x20000494

08004ac4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004acc:	f000 f852 	bl	8004b74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ad0:	4b06      	ldr	r3, [pc, #24]	; (8004aec <prvIdleTask+0x28>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d9f9      	bls.n	8004acc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ad8:	4b05      	ldr	r3, [pc, #20]	; (8004af0 <prvIdleTask+0x2c>)
 8004ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ae8:	e7f0      	b.n	8004acc <prvIdleTask+0x8>
 8004aea:	bf00      	nop
 8004aec:	20000384 	.word	0x20000384
 8004af0:	e000ed04 	.word	0xe000ed04

08004af4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004afa:	2300      	movs	r3, #0
 8004afc:	607b      	str	r3, [r7, #4]
 8004afe:	e00c      	b.n	8004b1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	4613      	mov	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4a12      	ldr	r2, [pc, #72]	; (8004b54 <prvInitialiseTaskLists+0x60>)
 8004b0c:	4413      	add	r3, r2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7fe fcf0 	bl	80034f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3301      	adds	r3, #1
 8004b18:	607b      	str	r3, [r7, #4]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b06      	cmp	r3, #6
 8004b1e:	d9ef      	bls.n	8004b00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b20:	480d      	ldr	r0, [pc, #52]	; (8004b58 <prvInitialiseTaskLists+0x64>)
 8004b22:	f7fe fce7 	bl	80034f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b26:	480d      	ldr	r0, [pc, #52]	; (8004b5c <prvInitialiseTaskLists+0x68>)
 8004b28:	f7fe fce4 	bl	80034f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b2c:	480c      	ldr	r0, [pc, #48]	; (8004b60 <prvInitialiseTaskLists+0x6c>)
 8004b2e:	f7fe fce1 	bl	80034f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b32:	480c      	ldr	r0, [pc, #48]	; (8004b64 <prvInitialiseTaskLists+0x70>)
 8004b34:	f7fe fcde 	bl	80034f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b38:	480b      	ldr	r0, [pc, #44]	; (8004b68 <prvInitialiseTaskLists+0x74>)
 8004b3a:	f7fe fcdb 	bl	80034f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b3e:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <prvInitialiseTaskLists+0x78>)
 8004b40:	4a05      	ldr	r2, [pc, #20]	; (8004b58 <prvInitialiseTaskLists+0x64>)
 8004b42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b44:	4b0a      	ldr	r3, [pc, #40]	; (8004b70 <prvInitialiseTaskLists+0x7c>)
 8004b46:	4a05      	ldr	r2, [pc, #20]	; (8004b5c <prvInitialiseTaskLists+0x68>)
 8004b48:	601a      	str	r2, [r3, #0]
}
 8004b4a:	bf00      	nop
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	20000384 	.word	0x20000384
 8004b58:	20000410 	.word	0x20000410
 8004b5c:	20000424 	.word	0x20000424
 8004b60:	20000440 	.word	0x20000440
 8004b64:	20000454 	.word	0x20000454
 8004b68:	2000046c 	.word	0x2000046c
 8004b6c:	20000438 	.word	0x20000438
 8004b70:	2000043c 	.word	0x2000043c

08004b74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b7a:	e019      	b.n	8004bb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b7c:	f000 fab2 	bl	80050e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b80:	4b10      	ldr	r3, [pc, #64]	; (8004bc4 <prvCheckTasksWaitingTermination+0x50>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fe fd3b 	bl	8003608 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b92:	4b0d      	ldr	r3, [pc, #52]	; (8004bc8 <prvCheckTasksWaitingTermination+0x54>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	3b01      	subs	r3, #1
 8004b98:	4a0b      	ldr	r2, [pc, #44]	; (8004bc8 <prvCheckTasksWaitingTermination+0x54>)
 8004b9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b9c:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <prvCheckTasksWaitingTermination+0x58>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	4a0a      	ldr	r2, [pc, #40]	; (8004bcc <prvCheckTasksWaitingTermination+0x58>)
 8004ba4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ba6:	f000 facd 	bl	8005144 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f810 	bl	8004bd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bb0:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <prvCheckTasksWaitingTermination+0x58>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1e1      	bne.n	8004b7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004bb8:	bf00      	nop
 8004bba:	bf00      	nop
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	20000454 	.word	0x20000454
 8004bc8:	20000480 	.word	0x20000480
 8004bcc:	20000468 	.word	0x20000468

08004bd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d108      	bne.n	8004bf4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 fc6a 	bl	80054c0 <vPortFree>
				vPortFree( pxTCB );
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 fc67 	bl	80054c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004bf2:	e018      	b.n	8004c26 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d103      	bne.n	8004c06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fc5e 	bl	80054c0 <vPortFree>
	}
 8004c04:	e00f      	b.n	8004c26 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d00a      	beq.n	8004c26 <prvDeleteTCB+0x56>
	__asm volatile
 8004c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	60fb      	str	r3, [r7, #12]
}
 8004c22:	bf00      	nop
 8004c24:	e7fe      	b.n	8004c24 <prvDeleteTCB+0x54>
	}
 8004c26:	bf00      	nop
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
	...

08004c30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c36:	4b0c      	ldr	r3, [pc, #48]	; (8004c68 <prvResetNextTaskUnblockTime+0x38>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d104      	bne.n	8004c4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c40:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <prvResetNextTaskUnblockTime+0x3c>)
 8004c42:	f04f 32ff 	mov.w	r2, #4294967295
 8004c46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c48:	e008      	b.n	8004c5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c4a:	4b07      	ldr	r3, [pc, #28]	; (8004c68 <prvResetNextTaskUnblockTime+0x38>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	4a04      	ldr	r2, [pc, #16]	; (8004c6c <prvResetNextTaskUnblockTime+0x3c>)
 8004c5a:	6013      	str	r3, [r2, #0]
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	20000438 	.word	0x20000438
 8004c6c:	200004a0 	.word	0x200004a0

08004c70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004c76:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <xTaskGetSchedulerState+0x34>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d102      	bne.n	8004c84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	607b      	str	r3, [r7, #4]
 8004c82:	e008      	b.n	8004c96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c84:	4b08      	ldr	r3, [pc, #32]	; (8004ca8 <xTaskGetSchedulerState+0x38>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d102      	bne.n	8004c92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	607b      	str	r3, [r7, #4]
 8004c90:	e001      	b.n	8004c96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c92:	2300      	movs	r3, #0
 8004c94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c96:	687b      	ldr	r3, [r7, #4]
	}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	2000048c 	.word	0x2000048c
 8004ca8:	200004a8 	.word	0x200004a8

08004cac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d06e      	beq.n	8004da0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004cc2:	4b3a      	ldr	r3, [pc, #232]	; (8004dac <xTaskPriorityDisinherit+0x100>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d00a      	beq.n	8004ce2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	60fb      	str	r3, [r7, #12]
}
 8004cde:	bf00      	nop
 8004ce0:	e7fe      	b.n	8004ce0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10a      	bne.n	8004d00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cee:	f383 8811 	msr	BASEPRI, r3
 8004cf2:	f3bf 8f6f 	isb	sy
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	60bb      	str	r3, [r7, #8]
}
 8004cfc:	bf00      	nop
 8004cfe:	e7fe      	b.n	8004cfe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d04:	1e5a      	subs	r2, r3, #1
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d044      	beq.n	8004da0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d140      	bne.n	8004da0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	3304      	adds	r3, #4
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7fe fc70 	bl	8003608 <uxListRemove>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d115      	bne.n	8004d5a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d32:	491f      	ldr	r1, [pc, #124]	; (8004db0 <xTaskPriorityDisinherit+0x104>)
 8004d34:	4613      	mov	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10a      	bne.n	8004d5a <xTaskPriorityDisinherit+0xae>
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d48:	2201      	movs	r2, #1
 8004d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4e:	43da      	mvns	r2, r3
 8004d50:	4b18      	ldr	r3, [pc, #96]	; (8004db4 <xTaskPriorityDisinherit+0x108>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4013      	ands	r3, r2
 8004d56:	4a17      	ldr	r2, [pc, #92]	; (8004db4 <xTaskPriorityDisinherit+0x108>)
 8004d58:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d66:	f1c3 0207 	rsb	r2, r3, #7
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d72:	2201      	movs	r2, #1
 8004d74:	409a      	lsls	r2, r3
 8004d76:	4b0f      	ldr	r3, [pc, #60]	; (8004db4 <xTaskPriorityDisinherit+0x108>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	4a0d      	ldr	r2, [pc, #52]	; (8004db4 <xTaskPriorityDisinherit+0x108>)
 8004d7e:	6013      	str	r3, [r2, #0]
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4a08      	ldr	r2, [pc, #32]	; (8004db0 <xTaskPriorityDisinherit+0x104>)
 8004d8e:	441a      	add	r2, r3
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	3304      	adds	r3, #4
 8004d94:	4619      	mov	r1, r3
 8004d96:	4610      	mov	r0, r2
 8004d98:	f7fe fbd9 	bl	800354e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004da0:	697b      	ldr	r3, [r7, #20]
	}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3718      	adds	r7, #24
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	20000380 	.word	0x20000380
 8004db0:	20000384 	.word	0x20000384
 8004db4:	20000488 	.word	0x20000488

08004db8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004dc2:	4b29      	ldr	r3, [pc, #164]	; (8004e68 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dc8:	4b28      	ldr	r3, [pc, #160]	; (8004e6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3304      	adds	r3, #4
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fe fc1a 	bl	8003608 <uxListRemove>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10b      	bne.n	8004df2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004dda:	4b24      	ldr	r3, [pc, #144]	; (8004e6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de0:	2201      	movs	r2, #1
 8004de2:	fa02 f303 	lsl.w	r3, r2, r3
 8004de6:	43da      	mvns	r2, r3
 8004de8:	4b21      	ldr	r3, [pc, #132]	; (8004e70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4013      	ands	r3, r2
 8004dee:	4a20      	ldr	r2, [pc, #128]	; (8004e70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004df0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df8:	d10a      	bne.n	8004e10 <prvAddCurrentTaskToDelayedList+0x58>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d007      	beq.n	8004e10 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e00:	4b1a      	ldr	r3, [pc, #104]	; (8004e6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3304      	adds	r3, #4
 8004e06:	4619      	mov	r1, r3
 8004e08:	481a      	ldr	r0, [pc, #104]	; (8004e74 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004e0a:	f7fe fba0 	bl	800354e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e0e:	e026      	b.n	8004e5e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4413      	add	r3, r2
 8004e16:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e18:	4b14      	ldr	r3, [pc, #80]	; (8004e6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d209      	bcs.n	8004e3c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e28:	4b13      	ldr	r3, [pc, #76]	; (8004e78 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	4b0f      	ldr	r3, [pc, #60]	; (8004e6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3304      	adds	r3, #4
 8004e32:	4619      	mov	r1, r3
 8004e34:	4610      	mov	r0, r2
 8004e36:	f7fe fbae 	bl	8003596 <vListInsert>
}
 8004e3a:	e010      	b.n	8004e5e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e3c:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3304      	adds	r3, #4
 8004e46:	4619      	mov	r1, r3
 8004e48:	4610      	mov	r0, r2
 8004e4a:	f7fe fba4 	bl	8003596 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e4e:	4b0c      	ldr	r3, [pc, #48]	; (8004e80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d202      	bcs.n	8004e5e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004e58:	4a09      	ldr	r2, [pc, #36]	; (8004e80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	6013      	str	r3, [r2, #0]
}
 8004e5e:	bf00      	nop
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	20000484 	.word	0x20000484
 8004e6c:	20000380 	.word	0x20000380
 8004e70:	20000488 	.word	0x20000488
 8004e74:	2000046c 	.word	0x2000046c
 8004e78:	2000043c 	.word	0x2000043c
 8004e7c:	20000438 	.word	0x20000438
 8004e80:	200004a0 	.word	0x200004a0

08004e84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	3b04      	subs	r3, #4
 8004e94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	3b04      	subs	r3, #4
 8004ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f023 0201 	bic.w	r2, r3, #1
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	3b04      	subs	r3, #4
 8004eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004eb4:	4a0c      	ldr	r2, [pc, #48]	; (8004ee8 <pxPortInitialiseStack+0x64>)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3b14      	subs	r3, #20
 8004ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	3b04      	subs	r3, #4
 8004eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f06f 0202 	mvn.w	r2, #2
 8004ed2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	3b20      	subs	r3, #32
 8004ed8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004eda:	68fb      	ldr	r3, [r7, #12]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3714      	adds	r7, #20
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	08004eed 	.word	0x08004eed

08004eec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ef6:	4b12      	ldr	r3, [pc, #72]	; (8004f40 <prvTaskExitError+0x54>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efe:	d00a      	beq.n	8004f16 <prvTaskExitError+0x2a>
	__asm volatile
 8004f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	60fb      	str	r3, [r7, #12]
}
 8004f12:	bf00      	nop
 8004f14:	e7fe      	b.n	8004f14 <prvTaskExitError+0x28>
	__asm volatile
 8004f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1a:	f383 8811 	msr	BASEPRI, r3
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f3bf 8f4f 	dsb	sy
 8004f26:	60bb      	str	r3, [r7, #8]
}
 8004f28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f2a:	bf00      	nop
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0fc      	beq.n	8004f2c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f32:	bf00      	nop
 8004f34:	bf00      	nop
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	2000000c 	.word	0x2000000c
	...

08004f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f50:	4b07      	ldr	r3, [pc, #28]	; (8004f70 <pxCurrentTCBConst2>)
 8004f52:	6819      	ldr	r1, [r3, #0]
 8004f54:	6808      	ldr	r0, [r1, #0]
 8004f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f5a:	f380 8809 	msr	PSP, r0
 8004f5e:	f3bf 8f6f 	isb	sy
 8004f62:	f04f 0000 	mov.w	r0, #0
 8004f66:	f380 8811 	msr	BASEPRI, r0
 8004f6a:	4770      	bx	lr
 8004f6c:	f3af 8000 	nop.w

08004f70 <pxCurrentTCBConst2>:
 8004f70:	20000380 	.word	0x20000380
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop

08004f78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f78:	4808      	ldr	r0, [pc, #32]	; (8004f9c <prvPortStartFirstTask+0x24>)
 8004f7a:	6800      	ldr	r0, [r0, #0]
 8004f7c:	6800      	ldr	r0, [r0, #0]
 8004f7e:	f380 8808 	msr	MSP, r0
 8004f82:	f04f 0000 	mov.w	r0, #0
 8004f86:	f380 8814 	msr	CONTROL, r0
 8004f8a:	b662      	cpsie	i
 8004f8c:	b661      	cpsie	f
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	df00      	svc	0
 8004f98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f9a:	bf00      	nop
 8004f9c:	e000ed08 	.word	0xe000ed08

08004fa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004fa6:	4b46      	ldr	r3, [pc, #280]	; (80050c0 <xPortStartScheduler+0x120>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a46      	ldr	r2, [pc, #280]	; (80050c4 <xPortStartScheduler+0x124>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d10a      	bne.n	8004fc6 <xPortStartScheduler+0x26>
	__asm volatile
 8004fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	613b      	str	r3, [r7, #16]
}
 8004fc2:	bf00      	nop
 8004fc4:	e7fe      	b.n	8004fc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004fc6:	4b3e      	ldr	r3, [pc, #248]	; (80050c0 <xPortStartScheduler+0x120>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a3f      	ldr	r2, [pc, #252]	; (80050c8 <xPortStartScheduler+0x128>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d10a      	bne.n	8004fe6 <xPortStartScheduler+0x46>
	__asm volatile
 8004fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	60fb      	str	r3, [r7, #12]
}
 8004fe2:	bf00      	nop
 8004fe4:	e7fe      	b.n	8004fe4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004fe6:	4b39      	ldr	r3, [pc, #228]	; (80050cc <xPortStartScheduler+0x12c>)
 8004fe8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	22ff      	movs	r2, #255	; 0xff
 8004ff6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005000:	78fb      	ldrb	r3, [r7, #3]
 8005002:	b2db      	uxtb	r3, r3
 8005004:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005008:	b2da      	uxtb	r2, r3
 800500a:	4b31      	ldr	r3, [pc, #196]	; (80050d0 <xPortStartScheduler+0x130>)
 800500c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800500e:	4b31      	ldr	r3, [pc, #196]	; (80050d4 <xPortStartScheduler+0x134>)
 8005010:	2207      	movs	r2, #7
 8005012:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005014:	e009      	b.n	800502a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005016:	4b2f      	ldr	r3, [pc, #188]	; (80050d4 <xPortStartScheduler+0x134>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	3b01      	subs	r3, #1
 800501c:	4a2d      	ldr	r2, [pc, #180]	; (80050d4 <xPortStartScheduler+0x134>)
 800501e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005020:	78fb      	ldrb	r3, [r7, #3]
 8005022:	b2db      	uxtb	r3, r3
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	b2db      	uxtb	r3, r3
 8005028:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800502a:	78fb      	ldrb	r3, [r7, #3]
 800502c:	b2db      	uxtb	r3, r3
 800502e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005032:	2b80      	cmp	r3, #128	; 0x80
 8005034:	d0ef      	beq.n	8005016 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005036:	4b27      	ldr	r3, [pc, #156]	; (80050d4 <xPortStartScheduler+0x134>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f1c3 0307 	rsb	r3, r3, #7
 800503e:	2b04      	cmp	r3, #4
 8005040:	d00a      	beq.n	8005058 <xPortStartScheduler+0xb8>
	__asm volatile
 8005042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005046:	f383 8811 	msr	BASEPRI, r3
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	60bb      	str	r3, [r7, #8]
}
 8005054:	bf00      	nop
 8005056:	e7fe      	b.n	8005056 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005058:	4b1e      	ldr	r3, [pc, #120]	; (80050d4 <xPortStartScheduler+0x134>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	021b      	lsls	r3, r3, #8
 800505e:	4a1d      	ldr	r2, [pc, #116]	; (80050d4 <xPortStartScheduler+0x134>)
 8005060:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005062:	4b1c      	ldr	r3, [pc, #112]	; (80050d4 <xPortStartScheduler+0x134>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800506a:	4a1a      	ldr	r2, [pc, #104]	; (80050d4 <xPortStartScheduler+0x134>)
 800506c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	b2da      	uxtb	r2, r3
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005076:	4b18      	ldr	r3, [pc, #96]	; (80050d8 <xPortStartScheduler+0x138>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a17      	ldr	r2, [pc, #92]	; (80050d8 <xPortStartScheduler+0x138>)
 800507c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005080:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005082:	4b15      	ldr	r3, [pc, #84]	; (80050d8 <xPortStartScheduler+0x138>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a14      	ldr	r2, [pc, #80]	; (80050d8 <xPortStartScheduler+0x138>)
 8005088:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800508c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800508e:	f000 f8dd 	bl	800524c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005092:	4b12      	ldr	r3, [pc, #72]	; (80050dc <xPortStartScheduler+0x13c>)
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005098:	f000 f8fc 	bl	8005294 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800509c:	4b10      	ldr	r3, [pc, #64]	; (80050e0 <xPortStartScheduler+0x140>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a0f      	ldr	r2, [pc, #60]	; (80050e0 <xPortStartScheduler+0x140>)
 80050a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80050a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80050a8:	f7ff ff66 	bl	8004f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80050ac:	f7ff fba4 	bl	80047f8 <vTaskSwitchContext>
	prvTaskExitError();
 80050b0:	f7ff ff1c 	bl	8004eec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	e000ed00 	.word	0xe000ed00
 80050c4:	410fc271 	.word	0x410fc271
 80050c8:	410fc270 	.word	0x410fc270
 80050cc:	e000e400 	.word	0xe000e400
 80050d0:	200004ac 	.word	0x200004ac
 80050d4:	200004b0 	.word	0x200004b0
 80050d8:	e000ed20 	.word	0xe000ed20
 80050dc:	2000000c 	.word	0x2000000c
 80050e0:	e000ef34 	.word	0xe000ef34

080050e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
	__asm volatile
 80050ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ee:	f383 8811 	msr	BASEPRI, r3
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	607b      	str	r3, [r7, #4]
}
 80050fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80050fe:	4b0f      	ldr	r3, [pc, #60]	; (800513c <vPortEnterCritical+0x58>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3301      	adds	r3, #1
 8005104:	4a0d      	ldr	r2, [pc, #52]	; (800513c <vPortEnterCritical+0x58>)
 8005106:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005108:	4b0c      	ldr	r3, [pc, #48]	; (800513c <vPortEnterCritical+0x58>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d10f      	bne.n	8005130 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005110:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <vPortEnterCritical+0x5c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <vPortEnterCritical+0x4c>
	__asm volatile
 800511a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511e:	f383 8811 	msr	BASEPRI, r3
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	f3bf 8f4f 	dsb	sy
 800512a:	603b      	str	r3, [r7, #0]
}
 800512c:	bf00      	nop
 800512e:	e7fe      	b.n	800512e <vPortEnterCritical+0x4a>
	}
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	2000000c 	.word	0x2000000c
 8005140:	e000ed04 	.word	0xe000ed04

08005144 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800514a:	4b12      	ldr	r3, [pc, #72]	; (8005194 <vPortExitCritical+0x50>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10a      	bne.n	8005168 <vPortExitCritical+0x24>
	__asm volatile
 8005152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	607b      	str	r3, [r7, #4]
}
 8005164:	bf00      	nop
 8005166:	e7fe      	b.n	8005166 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005168:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <vPortExitCritical+0x50>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3b01      	subs	r3, #1
 800516e:	4a09      	ldr	r2, [pc, #36]	; (8005194 <vPortExitCritical+0x50>)
 8005170:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005172:	4b08      	ldr	r3, [pc, #32]	; (8005194 <vPortExitCritical+0x50>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d105      	bne.n	8005186 <vPortExitCritical+0x42>
 800517a:	2300      	movs	r3, #0
 800517c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	f383 8811 	msr	BASEPRI, r3
}
 8005184:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	2000000c 	.word	0x2000000c
	...

080051a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051a0:	f3ef 8009 	mrs	r0, PSP
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	4b15      	ldr	r3, [pc, #84]	; (8005200 <pxCurrentTCBConst>)
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	f01e 0f10 	tst.w	lr, #16
 80051b0:	bf08      	it	eq
 80051b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ba:	6010      	str	r0, [r2, #0]
 80051bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80051c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80051c4:	f380 8811 	msr	BASEPRI, r0
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f7ff fb12 	bl	80047f8 <vTaskSwitchContext>
 80051d4:	f04f 0000 	mov.w	r0, #0
 80051d8:	f380 8811 	msr	BASEPRI, r0
 80051dc:	bc09      	pop	{r0, r3}
 80051de:	6819      	ldr	r1, [r3, #0]
 80051e0:	6808      	ldr	r0, [r1, #0]
 80051e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e6:	f01e 0f10 	tst.w	lr, #16
 80051ea:	bf08      	it	eq
 80051ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80051f0:	f380 8809 	msr	PSP, r0
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	f3af 8000 	nop.w

08005200 <pxCurrentTCBConst>:
 8005200:	20000380 	.word	0x20000380
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005204:	bf00      	nop
 8005206:	bf00      	nop

08005208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
	__asm volatile
 800520e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005212:	f383 8811 	msr	BASEPRI, r3
 8005216:	f3bf 8f6f 	isb	sy
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	607b      	str	r3, [r7, #4]
}
 8005220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005222:	f7ff fa31 	bl	8004688 <xTaskIncrementTick>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800522c:	4b06      	ldr	r3, [pc, #24]	; (8005248 <SysTick_Handler+0x40>)
 800522e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	2300      	movs	r3, #0
 8005236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	f383 8811 	msr	BASEPRI, r3
}
 800523e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005240:	bf00      	nop
 8005242:	3708      	adds	r7, #8
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	e000ed04 	.word	0xe000ed04

0800524c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005250:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <vPortSetupTimerInterrupt+0x34>)
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005256:	4b0b      	ldr	r3, [pc, #44]	; (8005284 <vPortSetupTimerInterrupt+0x38>)
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800525c:	4b0a      	ldr	r3, [pc, #40]	; (8005288 <vPortSetupTimerInterrupt+0x3c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a0a      	ldr	r2, [pc, #40]	; (800528c <vPortSetupTimerInterrupt+0x40>)
 8005262:	fba2 2303 	umull	r2, r3, r2, r3
 8005266:	099b      	lsrs	r3, r3, #6
 8005268:	4a09      	ldr	r2, [pc, #36]	; (8005290 <vPortSetupTimerInterrupt+0x44>)
 800526a:	3b01      	subs	r3, #1
 800526c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800526e:	4b04      	ldr	r3, [pc, #16]	; (8005280 <vPortSetupTimerInterrupt+0x34>)
 8005270:	2207      	movs	r2, #7
 8005272:	601a      	str	r2, [r3, #0]
}
 8005274:	bf00      	nop
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	e000e010 	.word	0xe000e010
 8005284:	e000e018 	.word	0xe000e018
 8005288:	20000000 	.word	0x20000000
 800528c:	10624dd3 	.word	0x10624dd3
 8005290:	e000e014 	.word	0xe000e014

08005294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005294:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80052a4 <vPortEnableVFP+0x10>
 8005298:	6801      	ldr	r1, [r0, #0]
 800529a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800529e:	6001      	str	r1, [r0, #0]
 80052a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80052a2:	bf00      	nop
 80052a4:	e000ed88 	.word	0xe000ed88

080052a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80052ae:	f3ef 8305 	mrs	r3, IPSR
 80052b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2b0f      	cmp	r3, #15
 80052b8:	d914      	bls.n	80052e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80052ba:	4a17      	ldr	r2, [pc, #92]	; (8005318 <vPortValidateInterruptPriority+0x70>)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4413      	add	r3, r2
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80052c4:	4b15      	ldr	r3, [pc, #84]	; (800531c <vPortValidateInterruptPriority+0x74>)
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	7afa      	ldrb	r2, [r7, #11]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d20a      	bcs.n	80052e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	607b      	str	r3, [r7, #4]
}
 80052e0:	bf00      	nop
 80052e2:	e7fe      	b.n	80052e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80052e4:	4b0e      	ldr	r3, [pc, #56]	; (8005320 <vPortValidateInterruptPriority+0x78>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052ec:	4b0d      	ldr	r3, [pc, #52]	; (8005324 <vPortValidateInterruptPriority+0x7c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d90a      	bls.n	800530a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80052f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f8:	f383 8811 	msr	BASEPRI, r3
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	603b      	str	r3, [r7, #0]
}
 8005306:	bf00      	nop
 8005308:	e7fe      	b.n	8005308 <vPortValidateInterruptPriority+0x60>
	}
 800530a:	bf00      	nop
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	e000e3f0 	.word	0xe000e3f0
 800531c:	200004ac 	.word	0x200004ac
 8005320:	e000ed0c 	.word	0xe000ed0c
 8005324:	200004b0 	.word	0x200004b0

08005328 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b08a      	sub	sp, #40	; 0x28
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005330:	2300      	movs	r3, #0
 8005332:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005334:	f7ff f8fe 	bl	8004534 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005338:	4b5b      	ldr	r3, [pc, #364]	; (80054a8 <pvPortMalloc+0x180>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005340:	f000 f920 	bl	8005584 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005344:	4b59      	ldr	r3, [pc, #356]	; (80054ac <pvPortMalloc+0x184>)
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4013      	ands	r3, r2
 800534c:	2b00      	cmp	r3, #0
 800534e:	f040 8093 	bne.w	8005478 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d01d      	beq.n	8005394 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005358:	2208      	movs	r2, #8
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4413      	add	r3, r2
 800535e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f003 0307 	and.w	r3, r3, #7
 8005366:	2b00      	cmp	r3, #0
 8005368:	d014      	beq.n	8005394 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f023 0307 	bic.w	r3, r3, #7
 8005370:	3308      	adds	r3, #8
 8005372:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <pvPortMalloc+0x6c>
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	617b      	str	r3, [r7, #20]
}
 8005390:	bf00      	nop
 8005392:	e7fe      	b.n	8005392 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d06e      	beq.n	8005478 <pvPortMalloc+0x150>
 800539a:	4b45      	ldr	r3, [pc, #276]	; (80054b0 <pvPortMalloc+0x188>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d869      	bhi.n	8005478 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053a4:	4b43      	ldr	r3, [pc, #268]	; (80054b4 <pvPortMalloc+0x18c>)
 80053a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80053a8:	4b42      	ldr	r3, [pc, #264]	; (80054b4 <pvPortMalloc+0x18c>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053ae:	e004      	b.n	80053ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d903      	bls.n	80053cc <pvPortMalloc+0xa4>
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1f1      	bne.n	80053b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80053cc:	4b36      	ldr	r3, [pc, #216]	; (80054a8 <pvPortMalloc+0x180>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d050      	beq.n	8005478 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2208      	movs	r2, #8
 80053dc:	4413      	add	r3, r2
 80053de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	1ad2      	subs	r2, r2, r3
 80053f0:	2308      	movs	r3, #8
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d91f      	bls.n	8005438 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4413      	add	r3, r2
 80053fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	f003 0307 	and.w	r3, r3, #7
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <pvPortMalloc+0xf8>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	613b      	str	r3, [r7, #16]
}
 800541c:	bf00      	nop
 800541e:	e7fe      	b.n	800541e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	1ad2      	subs	r2, r2, r3
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005432:	69b8      	ldr	r0, [r7, #24]
 8005434:	f000 f908 	bl	8005648 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005438:	4b1d      	ldr	r3, [pc, #116]	; (80054b0 <pvPortMalloc+0x188>)
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	4a1b      	ldr	r2, [pc, #108]	; (80054b0 <pvPortMalloc+0x188>)
 8005444:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005446:	4b1a      	ldr	r3, [pc, #104]	; (80054b0 <pvPortMalloc+0x188>)
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	4b1b      	ldr	r3, [pc, #108]	; (80054b8 <pvPortMalloc+0x190>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	429a      	cmp	r2, r3
 8005450:	d203      	bcs.n	800545a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005452:	4b17      	ldr	r3, [pc, #92]	; (80054b0 <pvPortMalloc+0x188>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a18      	ldr	r2, [pc, #96]	; (80054b8 <pvPortMalloc+0x190>)
 8005458:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	4b13      	ldr	r3, [pc, #76]	; (80054ac <pvPortMalloc+0x184>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	431a      	orrs	r2, r3
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	2200      	movs	r2, #0
 800546c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800546e:	4b13      	ldr	r3, [pc, #76]	; (80054bc <pvPortMalloc+0x194>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3301      	adds	r3, #1
 8005474:	4a11      	ldr	r2, [pc, #68]	; (80054bc <pvPortMalloc+0x194>)
 8005476:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005478:	f7ff f86a 	bl	8004550 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	f003 0307 	and.w	r3, r3, #7
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <pvPortMalloc+0x174>
	__asm volatile
 8005486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	60fb      	str	r3, [r7, #12]
}
 8005498:	bf00      	nop
 800549a:	e7fe      	b.n	800549a <pvPortMalloc+0x172>
	return pvReturn;
 800549c:	69fb      	ldr	r3, [r7, #28]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3728      	adds	r7, #40	; 0x28
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	200040bc 	.word	0x200040bc
 80054ac:	200040d0 	.word	0x200040d0
 80054b0:	200040c0 	.word	0x200040c0
 80054b4:	200040b4 	.word	0x200040b4
 80054b8:	200040c4 	.word	0x200040c4
 80054bc:	200040c8 	.word	0x200040c8

080054c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d04d      	beq.n	800556e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80054d2:	2308      	movs	r3, #8
 80054d4:	425b      	negs	r3, r3
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	4413      	add	r3, r2
 80054da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	4b24      	ldr	r3, [pc, #144]	; (8005578 <vPortFree+0xb8>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4013      	ands	r3, r2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10a      	bne.n	8005504 <vPortFree+0x44>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	60fb      	str	r3, [r7, #12]
}
 8005500:	bf00      	nop
 8005502:	e7fe      	b.n	8005502 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00a      	beq.n	8005522 <vPortFree+0x62>
	__asm volatile
 800550c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	60bb      	str	r3, [r7, #8]
}
 800551e:	bf00      	nop
 8005520:	e7fe      	b.n	8005520 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	4b14      	ldr	r3, [pc, #80]	; (8005578 <vPortFree+0xb8>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4013      	ands	r3, r2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d01e      	beq.n	800556e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d11a      	bne.n	800556e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	4b0e      	ldr	r3, [pc, #56]	; (8005578 <vPortFree+0xb8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	43db      	mvns	r3, r3
 8005542:	401a      	ands	r2, r3
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005548:	f7fe fff4 	bl	8004534 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	4b0a      	ldr	r3, [pc, #40]	; (800557c <vPortFree+0xbc>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4413      	add	r3, r2
 8005556:	4a09      	ldr	r2, [pc, #36]	; (800557c <vPortFree+0xbc>)
 8005558:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800555a:	6938      	ldr	r0, [r7, #16]
 800555c:	f000 f874 	bl	8005648 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005560:	4b07      	ldr	r3, [pc, #28]	; (8005580 <vPortFree+0xc0>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3301      	adds	r3, #1
 8005566:	4a06      	ldr	r2, [pc, #24]	; (8005580 <vPortFree+0xc0>)
 8005568:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800556a:	f7fe fff1 	bl	8004550 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800556e:	bf00      	nop
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	200040d0 	.word	0x200040d0
 800557c:	200040c0 	.word	0x200040c0
 8005580:	200040cc 	.word	0x200040cc

08005584 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800558a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800558e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005590:	4b27      	ldr	r3, [pc, #156]	; (8005630 <prvHeapInit+0xac>)
 8005592:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f003 0307 	and.w	r3, r3, #7
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00c      	beq.n	80055b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3307      	adds	r3, #7
 80055a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 0307 	bic.w	r3, r3, #7
 80055aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	4a1f      	ldr	r2, [pc, #124]	; (8005630 <prvHeapInit+0xac>)
 80055b4:	4413      	add	r3, r2
 80055b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055bc:	4a1d      	ldr	r2, [pc, #116]	; (8005634 <prvHeapInit+0xb0>)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80055c2:	4b1c      	ldr	r3, [pc, #112]	; (8005634 <prvHeapInit+0xb0>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	4413      	add	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80055d0:	2208      	movs	r2, #8
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	1a9b      	subs	r3, r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0307 	bic.w	r3, r3, #7
 80055de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4a15      	ldr	r2, [pc, #84]	; (8005638 <prvHeapInit+0xb4>)
 80055e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80055e6:	4b14      	ldr	r3, [pc, #80]	; (8005638 <prvHeapInit+0xb4>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2200      	movs	r2, #0
 80055ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055ee:	4b12      	ldr	r3, [pc, #72]	; (8005638 <prvHeapInit+0xb4>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2200      	movs	r2, #0
 80055f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	1ad2      	subs	r2, r2, r3
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005604:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <prvHeapInit+0xb4>)
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	4a0a      	ldr	r2, [pc, #40]	; (800563c <prvHeapInit+0xb8>)
 8005612:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	4a09      	ldr	r2, [pc, #36]	; (8005640 <prvHeapInit+0xbc>)
 800561a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800561c:	4b09      	ldr	r3, [pc, #36]	; (8005644 <prvHeapInit+0xc0>)
 800561e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005622:	601a      	str	r2, [r3, #0]
}
 8005624:	bf00      	nop
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	200004b4 	.word	0x200004b4
 8005634:	200040b4 	.word	0x200040b4
 8005638:	200040bc 	.word	0x200040bc
 800563c:	200040c4 	.word	0x200040c4
 8005640:	200040c0 	.word	0x200040c0
 8005644:	200040d0 	.word	0x200040d0

08005648 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005650:	4b28      	ldr	r3, [pc, #160]	; (80056f4 <prvInsertBlockIntoFreeList+0xac>)
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	e002      	b.n	800565c <prvInsertBlockIntoFreeList+0x14>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	429a      	cmp	r2, r3
 8005664:	d8f7      	bhi.n	8005656 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	4413      	add	r3, r2
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	429a      	cmp	r2, r3
 8005676:	d108      	bne.n	800568a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	441a      	add	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	441a      	add	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	429a      	cmp	r2, r3
 800569c:	d118      	bne.n	80056d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	4b15      	ldr	r3, [pc, #84]	; (80056f8 <prvInsertBlockIntoFreeList+0xb0>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d00d      	beq.n	80056c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	441a      	add	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	e008      	b.n	80056d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056c6:	4b0c      	ldr	r3, [pc, #48]	; (80056f8 <prvInsertBlockIntoFreeList+0xb0>)
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	e003      	b.n	80056d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d002      	beq.n	80056e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056e6:	bf00      	nop
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	200040b4 	.word	0x200040b4
 80056f8:	200040bc 	.word	0x200040bc

080056fc <std>:
 80056fc:	2300      	movs	r3, #0
 80056fe:	b510      	push	{r4, lr}
 8005700:	4604      	mov	r4, r0
 8005702:	e9c0 3300 	strd	r3, r3, [r0]
 8005706:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800570a:	6083      	str	r3, [r0, #8]
 800570c:	8181      	strh	r1, [r0, #12]
 800570e:	6643      	str	r3, [r0, #100]	; 0x64
 8005710:	81c2      	strh	r2, [r0, #14]
 8005712:	6183      	str	r3, [r0, #24]
 8005714:	4619      	mov	r1, r3
 8005716:	2208      	movs	r2, #8
 8005718:	305c      	adds	r0, #92	; 0x5c
 800571a:	f000 f9f7 	bl	8005b0c <memset>
 800571e:	4b0d      	ldr	r3, [pc, #52]	; (8005754 <std+0x58>)
 8005720:	6263      	str	r3, [r4, #36]	; 0x24
 8005722:	4b0d      	ldr	r3, [pc, #52]	; (8005758 <std+0x5c>)
 8005724:	62a3      	str	r3, [r4, #40]	; 0x28
 8005726:	4b0d      	ldr	r3, [pc, #52]	; (800575c <std+0x60>)
 8005728:	62e3      	str	r3, [r4, #44]	; 0x2c
 800572a:	4b0d      	ldr	r3, [pc, #52]	; (8005760 <std+0x64>)
 800572c:	6323      	str	r3, [r4, #48]	; 0x30
 800572e:	4b0d      	ldr	r3, [pc, #52]	; (8005764 <std+0x68>)
 8005730:	6224      	str	r4, [r4, #32]
 8005732:	429c      	cmp	r4, r3
 8005734:	d006      	beq.n	8005744 <std+0x48>
 8005736:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800573a:	4294      	cmp	r4, r2
 800573c:	d002      	beq.n	8005744 <std+0x48>
 800573e:	33d0      	adds	r3, #208	; 0xd0
 8005740:	429c      	cmp	r4, r3
 8005742:	d105      	bne.n	8005750 <std+0x54>
 8005744:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800574c:	f000 ba56 	b.w	8005bfc <__retarget_lock_init_recursive>
 8005750:	bd10      	pop	{r4, pc}
 8005752:	bf00      	nop
 8005754:	0800595d 	.word	0x0800595d
 8005758:	0800597f 	.word	0x0800597f
 800575c:	080059b7 	.word	0x080059b7
 8005760:	080059db 	.word	0x080059db
 8005764:	200040d4 	.word	0x200040d4

08005768 <stdio_exit_handler>:
 8005768:	4a02      	ldr	r2, [pc, #8]	; (8005774 <stdio_exit_handler+0xc>)
 800576a:	4903      	ldr	r1, [pc, #12]	; (8005778 <stdio_exit_handler+0x10>)
 800576c:	4803      	ldr	r0, [pc, #12]	; (800577c <stdio_exit_handler+0x14>)
 800576e:	f000 b869 	b.w	8005844 <_fwalk_sglue>
 8005772:	bf00      	nop
 8005774:	20000010 	.word	0x20000010
 8005778:	080064c5 	.word	0x080064c5
 800577c:	2000001c 	.word	0x2000001c

08005780 <cleanup_stdio>:
 8005780:	6841      	ldr	r1, [r0, #4]
 8005782:	4b0c      	ldr	r3, [pc, #48]	; (80057b4 <cleanup_stdio+0x34>)
 8005784:	4299      	cmp	r1, r3
 8005786:	b510      	push	{r4, lr}
 8005788:	4604      	mov	r4, r0
 800578a:	d001      	beq.n	8005790 <cleanup_stdio+0x10>
 800578c:	f000 fe9a 	bl	80064c4 <_fflush_r>
 8005790:	68a1      	ldr	r1, [r4, #8]
 8005792:	4b09      	ldr	r3, [pc, #36]	; (80057b8 <cleanup_stdio+0x38>)
 8005794:	4299      	cmp	r1, r3
 8005796:	d002      	beq.n	800579e <cleanup_stdio+0x1e>
 8005798:	4620      	mov	r0, r4
 800579a:	f000 fe93 	bl	80064c4 <_fflush_r>
 800579e:	68e1      	ldr	r1, [r4, #12]
 80057a0:	4b06      	ldr	r3, [pc, #24]	; (80057bc <cleanup_stdio+0x3c>)
 80057a2:	4299      	cmp	r1, r3
 80057a4:	d004      	beq.n	80057b0 <cleanup_stdio+0x30>
 80057a6:	4620      	mov	r0, r4
 80057a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057ac:	f000 be8a 	b.w	80064c4 <_fflush_r>
 80057b0:	bd10      	pop	{r4, pc}
 80057b2:	bf00      	nop
 80057b4:	200040d4 	.word	0x200040d4
 80057b8:	2000413c 	.word	0x2000413c
 80057bc:	200041a4 	.word	0x200041a4

080057c0 <global_stdio_init.part.0>:
 80057c0:	b510      	push	{r4, lr}
 80057c2:	4b0b      	ldr	r3, [pc, #44]	; (80057f0 <global_stdio_init.part.0+0x30>)
 80057c4:	4c0b      	ldr	r4, [pc, #44]	; (80057f4 <global_stdio_init.part.0+0x34>)
 80057c6:	4a0c      	ldr	r2, [pc, #48]	; (80057f8 <global_stdio_init.part.0+0x38>)
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	4620      	mov	r0, r4
 80057cc:	2200      	movs	r2, #0
 80057ce:	2104      	movs	r1, #4
 80057d0:	f7ff ff94 	bl	80056fc <std>
 80057d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80057d8:	2201      	movs	r2, #1
 80057da:	2109      	movs	r1, #9
 80057dc:	f7ff ff8e 	bl	80056fc <std>
 80057e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80057e4:	2202      	movs	r2, #2
 80057e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057ea:	2112      	movs	r1, #18
 80057ec:	f7ff bf86 	b.w	80056fc <std>
 80057f0:	2000420c 	.word	0x2000420c
 80057f4:	200040d4 	.word	0x200040d4
 80057f8:	08005769 	.word	0x08005769

080057fc <__sfp_lock_acquire>:
 80057fc:	4801      	ldr	r0, [pc, #4]	; (8005804 <__sfp_lock_acquire+0x8>)
 80057fe:	f000 b9fe 	b.w	8005bfe <__retarget_lock_acquire_recursive>
 8005802:	bf00      	nop
 8005804:	20004215 	.word	0x20004215

08005808 <__sfp_lock_release>:
 8005808:	4801      	ldr	r0, [pc, #4]	; (8005810 <__sfp_lock_release+0x8>)
 800580a:	f000 b9f9 	b.w	8005c00 <__retarget_lock_release_recursive>
 800580e:	bf00      	nop
 8005810:	20004215 	.word	0x20004215

08005814 <__sinit>:
 8005814:	b510      	push	{r4, lr}
 8005816:	4604      	mov	r4, r0
 8005818:	f7ff fff0 	bl	80057fc <__sfp_lock_acquire>
 800581c:	6a23      	ldr	r3, [r4, #32]
 800581e:	b11b      	cbz	r3, 8005828 <__sinit+0x14>
 8005820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005824:	f7ff bff0 	b.w	8005808 <__sfp_lock_release>
 8005828:	4b04      	ldr	r3, [pc, #16]	; (800583c <__sinit+0x28>)
 800582a:	6223      	str	r3, [r4, #32]
 800582c:	4b04      	ldr	r3, [pc, #16]	; (8005840 <__sinit+0x2c>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1f5      	bne.n	8005820 <__sinit+0xc>
 8005834:	f7ff ffc4 	bl	80057c0 <global_stdio_init.part.0>
 8005838:	e7f2      	b.n	8005820 <__sinit+0xc>
 800583a:	bf00      	nop
 800583c:	08005781 	.word	0x08005781
 8005840:	2000420c 	.word	0x2000420c

08005844 <_fwalk_sglue>:
 8005844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005848:	4607      	mov	r7, r0
 800584a:	4688      	mov	r8, r1
 800584c:	4614      	mov	r4, r2
 800584e:	2600      	movs	r6, #0
 8005850:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005854:	f1b9 0901 	subs.w	r9, r9, #1
 8005858:	d505      	bpl.n	8005866 <_fwalk_sglue+0x22>
 800585a:	6824      	ldr	r4, [r4, #0]
 800585c:	2c00      	cmp	r4, #0
 800585e:	d1f7      	bne.n	8005850 <_fwalk_sglue+0xc>
 8005860:	4630      	mov	r0, r6
 8005862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005866:	89ab      	ldrh	r3, [r5, #12]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d907      	bls.n	800587c <_fwalk_sglue+0x38>
 800586c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005870:	3301      	adds	r3, #1
 8005872:	d003      	beq.n	800587c <_fwalk_sglue+0x38>
 8005874:	4629      	mov	r1, r5
 8005876:	4638      	mov	r0, r7
 8005878:	47c0      	blx	r8
 800587a:	4306      	orrs	r6, r0
 800587c:	3568      	adds	r5, #104	; 0x68
 800587e:	e7e9      	b.n	8005854 <_fwalk_sglue+0x10>

08005880 <iprintf>:
 8005880:	b40f      	push	{r0, r1, r2, r3}
 8005882:	b507      	push	{r0, r1, r2, lr}
 8005884:	4906      	ldr	r1, [pc, #24]	; (80058a0 <iprintf+0x20>)
 8005886:	ab04      	add	r3, sp, #16
 8005888:	6808      	ldr	r0, [r1, #0]
 800588a:	f853 2b04 	ldr.w	r2, [r3], #4
 800588e:	6881      	ldr	r1, [r0, #8]
 8005890:	9301      	str	r3, [sp, #4]
 8005892:	f000 fae7 	bl	8005e64 <_vfiprintf_r>
 8005896:	b003      	add	sp, #12
 8005898:	f85d eb04 	ldr.w	lr, [sp], #4
 800589c:	b004      	add	sp, #16
 800589e:	4770      	bx	lr
 80058a0:	20000068 	.word	0x20000068

080058a4 <_puts_r>:
 80058a4:	6a03      	ldr	r3, [r0, #32]
 80058a6:	b570      	push	{r4, r5, r6, lr}
 80058a8:	6884      	ldr	r4, [r0, #8]
 80058aa:	4605      	mov	r5, r0
 80058ac:	460e      	mov	r6, r1
 80058ae:	b90b      	cbnz	r3, 80058b4 <_puts_r+0x10>
 80058b0:	f7ff ffb0 	bl	8005814 <__sinit>
 80058b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058b6:	07db      	lsls	r3, r3, #31
 80058b8:	d405      	bmi.n	80058c6 <_puts_r+0x22>
 80058ba:	89a3      	ldrh	r3, [r4, #12]
 80058bc:	0598      	lsls	r0, r3, #22
 80058be:	d402      	bmi.n	80058c6 <_puts_r+0x22>
 80058c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058c2:	f000 f99c 	bl	8005bfe <__retarget_lock_acquire_recursive>
 80058c6:	89a3      	ldrh	r3, [r4, #12]
 80058c8:	0719      	lsls	r1, r3, #28
 80058ca:	d513      	bpl.n	80058f4 <_puts_r+0x50>
 80058cc:	6923      	ldr	r3, [r4, #16]
 80058ce:	b18b      	cbz	r3, 80058f4 <_puts_r+0x50>
 80058d0:	3e01      	subs	r6, #1
 80058d2:	68a3      	ldr	r3, [r4, #8]
 80058d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80058d8:	3b01      	subs	r3, #1
 80058da:	60a3      	str	r3, [r4, #8]
 80058dc:	b9e9      	cbnz	r1, 800591a <_puts_r+0x76>
 80058de:	2b00      	cmp	r3, #0
 80058e0:	da2e      	bge.n	8005940 <_puts_r+0x9c>
 80058e2:	4622      	mov	r2, r4
 80058e4:	210a      	movs	r1, #10
 80058e6:	4628      	mov	r0, r5
 80058e8:	f000 f87b 	bl	80059e2 <__swbuf_r>
 80058ec:	3001      	adds	r0, #1
 80058ee:	d007      	beq.n	8005900 <_puts_r+0x5c>
 80058f0:	250a      	movs	r5, #10
 80058f2:	e007      	b.n	8005904 <_puts_r+0x60>
 80058f4:	4621      	mov	r1, r4
 80058f6:	4628      	mov	r0, r5
 80058f8:	f000 f8b0 	bl	8005a5c <__swsetup_r>
 80058fc:	2800      	cmp	r0, #0
 80058fe:	d0e7      	beq.n	80058d0 <_puts_r+0x2c>
 8005900:	f04f 35ff 	mov.w	r5, #4294967295
 8005904:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005906:	07da      	lsls	r2, r3, #31
 8005908:	d405      	bmi.n	8005916 <_puts_r+0x72>
 800590a:	89a3      	ldrh	r3, [r4, #12]
 800590c:	059b      	lsls	r3, r3, #22
 800590e:	d402      	bmi.n	8005916 <_puts_r+0x72>
 8005910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005912:	f000 f975 	bl	8005c00 <__retarget_lock_release_recursive>
 8005916:	4628      	mov	r0, r5
 8005918:	bd70      	pop	{r4, r5, r6, pc}
 800591a:	2b00      	cmp	r3, #0
 800591c:	da04      	bge.n	8005928 <_puts_r+0x84>
 800591e:	69a2      	ldr	r2, [r4, #24]
 8005920:	429a      	cmp	r2, r3
 8005922:	dc06      	bgt.n	8005932 <_puts_r+0x8e>
 8005924:	290a      	cmp	r1, #10
 8005926:	d004      	beq.n	8005932 <_puts_r+0x8e>
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	6022      	str	r2, [r4, #0]
 800592e:	7019      	strb	r1, [r3, #0]
 8005930:	e7cf      	b.n	80058d2 <_puts_r+0x2e>
 8005932:	4622      	mov	r2, r4
 8005934:	4628      	mov	r0, r5
 8005936:	f000 f854 	bl	80059e2 <__swbuf_r>
 800593a:	3001      	adds	r0, #1
 800593c:	d1c9      	bne.n	80058d2 <_puts_r+0x2e>
 800593e:	e7df      	b.n	8005900 <_puts_r+0x5c>
 8005940:	6823      	ldr	r3, [r4, #0]
 8005942:	250a      	movs	r5, #10
 8005944:	1c5a      	adds	r2, r3, #1
 8005946:	6022      	str	r2, [r4, #0]
 8005948:	701d      	strb	r5, [r3, #0]
 800594a:	e7db      	b.n	8005904 <_puts_r+0x60>

0800594c <puts>:
 800594c:	4b02      	ldr	r3, [pc, #8]	; (8005958 <puts+0xc>)
 800594e:	4601      	mov	r1, r0
 8005950:	6818      	ldr	r0, [r3, #0]
 8005952:	f7ff bfa7 	b.w	80058a4 <_puts_r>
 8005956:	bf00      	nop
 8005958:	20000068 	.word	0x20000068

0800595c <__sread>:
 800595c:	b510      	push	{r4, lr}
 800595e:	460c      	mov	r4, r1
 8005960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005964:	f000 f8fc 	bl	8005b60 <_read_r>
 8005968:	2800      	cmp	r0, #0
 800596a:	bfab      	itete	ge
 800596c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800596e:	89a3      	ldrhlt	r3, [r4, #12]
 8005970:	181b      	addge	r3, r3, r0
 8005972:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005976:	bfac      	ite	ge
 8005978:	6563      	strge	r3, [r4, #84]	; 0x54
 800597a:	81a3      	strhlt	r3, [r4, #12]
 800597c:	bd10      	pop	{r4, pc}

0800597e <__swrite>:
 800597e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005982:	461f      	mov	r7, r3
 8005984:	898b      	ldrh	r3, [r1, #12]
 8005986:	05db      	lsls	r3, r3, #23
 8005988:	4605      	mov	r5, r0
 800598a:	460c      	mov	r4, r1
 800598c:	4616      	mov	r6, r2
 800598e:	d505      	bpl.n	800599c <__swrite+0x1e>
 8005990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005994:	2302      	movs	r3, #2
 8005996:	2200      	movs	r2, #0
 8005998:	f000 f8d0 	bl	8005b3c <_lseek_r>
 800599c:	89a3      	ldrh	r3, [r4, #12]
 800599e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059a6:	81a3      	strh	r3, [r4, #12]
 80059a8:	4632      	mov	r2, r6
 80059aa:	463b      	mov	r3, r7
 80059ac:	4628      	mov	r0, r5
 80059ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059b2:	f000 b8e7 	b.w	8005b84 <_write_r>

080059b6 <__sseek>:
 80059b6:	b510      	push	{r4, lr}
 80059b8:	460c      	mov	r4, r1
 80059ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059be:	f000 f8bd 	bl	8005b3c <_lseek_r>
 80059c2:	1c43      	adds	r3, r0, #1
 80059c4:	89a3      	ldrh	r3, [r4, #12]
 80059c6:	bf15      	itete	ne
 80059c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80059ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80059ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80059d2:	81a3      	strheq	r3, [r4, #12]
 80059d4:	bf18      	it	ne
 80059d6:	81a3      	strhne	r3, [r4, #12]
 80059d8:	bd10      	pop	{r4, pc}

080059da <__sclose>:
 80059da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059de:	f000 b89d 	b.w	8005b1c <_close_r>

080059e2 <__swbuf_r>:
 80059e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e4:	460e      	mov	r6, r1
 80059e6:	4614      	mov	r4, r2
 80059e8:	4605      	mov	r5, r0
 80059ea:	b118      	cbz	r0, 80059f4 <__swbuf_r+0x12>
 80059ec:	6a03      	ldr	r3, [r0, #32]
 80059ee:	b90b      	cbnz	r3, 80059f4 <__swbuf_r+0x12>
 80059f0:	f7ff ff10 	bl	8005814 <__sinit>
 80059f4:	69a3      	ldr	r3, [r4, #24]
 80059f6:	60a3      	str	r3, [r4, #8]
 80059f8:	89a3      	ldrh	r3, [r4, #12]
 80059fa:	071a      	lsls	r2, r3, #28
 80059fc:	d525      	bpl.n	8005a4a <__swbuf_r+0x68>
 80059fe:	6923      	ldr	r3, [r4, #16]
 8005a00:	b31b      	cbz	r3, 8005a4a <__swbuf_r+0x68>
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	6922      	ldr	r2, [r4, #16]
 8005a06:	1a98      	subs	r0, r3, r2
 8005a08:	6963      	ldr	r3, [r4, #20]
 8005a0a:	b2f6      	uxtb	r6, r6
 8005a0c:	4283      	cmp	r3, r0
 8005a0e:	4637      	mov	r7, r6
 8005a10:	dc04      	bgt.n	8005a1c <__swbuf_r+0x3a>
 8005a12:	4621      	mov	r1, r4
 8005a14:	4628      	mov	r0, r5
 8005a16:	f000 fd55 	bl	80064c4 <_fflush_r>
 8005a1a:	b9e0      	cbnz	r0, 8005a56 <__swbuf_r+0x74>
 8005a1c:	68a3      	ldr	r3, [r4, #8]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	60a3      	str	r3, [r4, #8]
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	6022      	str	r2, [r4, #0]
 8005a28:	701e      	strb	r6, [r3, #0]
 8005a2a:	6962      	ldr	r2, [r4, #20]
 8005a2c:	1c43      	adds	r3, r0, #1
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d004      	beq.n	8005a3c <__swbuf_r+0x5a>
 8005a32:	89a3      	ldrh	r3, [r4, #12]
 8005a34:	07db      	lsls	r3, r3, #31
 8005a36:	d506      	bpl.n	8005a46 <__swbuf_r+0x64>
 8005a38:	2e0a      	cmp	r6, #10
 8005a3a:	d104      	bne.n	8005a46 <__swbuf_r+0x64>
 8005a3c:	4621      	mov	r1, r4
 8005a3e:	4628      	mov	r0, r5
 8005a40:	f000 fd40 	bl	80064c4 <_fflush_r>
 8005a44:	b938      	cbnz	r0, 8005a56 <__swbuf_r+0x74>
 8005a46:	4638      	mov	r0, r7
 8005a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a4a:	4621      	mov	r1, r4
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	f000 f805 	bl	8005a5c <__swsetup_r>
 8005a52:	2800      	cmp	r0, #0
 8005a54:	d0d5      	beq.n	8005a02 <__swbuf_r+0x20>
 8005a56:	f04f 37ff 	mov.w	r7, #4294967295
 8005a5a:	e7f4      	b.n	8005a46 <__swbuf_r+0x64>

08005a5c <__swsetup_r>:
 8005a5c:	b538      	push	{r3, r4, r5, lr}
 8005a5e:	4b2a      	ldr	r3, [pc, #168]	; (8005b08 <__swsetup_r+0xac>)
 8005a60:	4605      	mov	r5, r0
 8005a62:	6818      	ldr	r0, [r3, #0]
 8005a64:	460c      	mov	r4, r1
 8005a66:	b118      	cbz	r0, 8005a70 <__swsetup_r+0x14>
 8005a68:	6a03      	ldr	r3, [r0, #32]
 8005a6a:	b90b      	cbnz	r3, 8005a70 <__swsetup_r+0x14>
 8005a6c:	f7ff fed2 	bl	8005814 <__sinit>
 8005a70:	89a3      	ldrh	r3, [r4, #12]
 8005a72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a76:	0718      	lsls	r0, r3, #28
 8005a78:	d422      	bmi.n	8005ac0 <__swsetup_r+0x64>
 8005a7a:	06d9      	lsls	r1, r3, #27
 8005a7c:	d407      	bmi.n	8005a8e <__swsetup_r+0x32>
 8005a7e:	2309      	movs	r3, #9
 8005a80:	602b      	str	r3, [r5, #0]
 8005a82:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a86:	81a3      	strh	r3, [r4, #12]
 8005a88:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8c:	e034      	b.n	8005af8 <__swsetup_r+0x9c>
 8005a8e:	0758      	lsls	r0, r3, #29
 8005a90:	d512      	bpl.n	8005ab8 <__swsetup_r+0x5c>
 8005a92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a94:	b141      	cbz	r1, 8005aa8 <__swsetup_r+0x4c>
 8005a96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a9a:	4299      	cmp	r1, r3
 8005a9c:	d002      	beq.n	8005aa4 <__swsetup_r+0x48>
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	f000 f8be 	bl	8005c20 <_free_r>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	6363      	str	r3, [r4, #52]	; 0x34
 8005aa8:	89a3      	ldrh	r3, [r4, #12]
 8005aaa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005aae:	81a3      	strh	r3, [r4, #12]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	6063      	str	r3, [r4, #4]
 8005ab4:	6923      	ldr	r3, [r4, #16]
 8005ab6:	6023      	str	r3, [r4, #0]
 8005ab8:	89a3      	ldrh	r3, [r4, #12]
 8005aba:	f043 0308 	orr.w	r3, r3, #8
 8005abe:	81a3      	strh	r3, [r4, #12]
 8005ac0:	6923      	ldr	r3, [r4, #16]
 8005ac2:	b94b      	cbnz	r3, 8005ad8 <__swsetup_r+0x7c>
 8005ac4:	89a3      	ldrh	r3, [r4, #12]
 8005ac6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005aca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ace:	d003      	beq.n	8005ad8 <__swsetup_r+0x7c>
 8005ad0:	4621      	mov	r1, r4
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	f000 fd44 	bl	8006560 <__smakebuf_r>
 8005ad8:	89a0      	ldrh	r0, [r4, #12]
 8005ada:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ade:	f010 0301 	ands.w	r3, r0, #1
 8005ae2:	d00a      	beq.n	8005afa <__swsetup_r+0x9e>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	60a3      	str	r3, [r4, #8]
 8005ae8:	6963      	ldr	r3, [r4, #20]
 8005aea:	425b      	negs	r3, r3
 8005aec:	61a3      	str	r3, [r4, #24]
 8005aee:	6923      	ldr	r3, [r4, #16]
 8005af0:	b943      	cbnz	r3, 8005b04 <__swsetup_r+0xa8>
 8005af2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005af6:	d1c4      	bne.n	8005a82 <__swsetup_r+0x26>
 8005af8:	bd38      	pop	{r3, r4, r5, pc}
 8005afa:	0781      	lsls	r1, r0, #30
 8005afc:	bf58      	it	pl
 8005afe:	6963      	ldrpl	r3, [r4, #20]
 8005b00:	60a3      	str	r3, [r4, #8]
 8005b02:	e7f4      	b.n	8005aee <__swsetup_r+0x92>
 8005b04:	2000      	movs	r0, #0
 8005b06:	e7f7      	b.n	8005af8 <__swsetup_r+0x9c>
 8005b08:	20000068 	.word	0x20000068

08005b0c <memset>:
 8005b0c:	4402      	add	r2, r0
 8005b0e:	4603      	mov	r3, r0
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d100      	bne.n	8005b16 <memset+0xa>
 8005b14:	4770      	bx	lr
 8005b16:	f803 1b01 	strb.w	r1, [r3], #1
 8005b1a:	e7f9      	b.n	8005b10 <memset+0x4>

08005b1c <_close_r>:
 8005b1c:	b538      	push	{r3, r4, r5, lr}
 8005b1e:	4d06      	ldr	r5, [pc, #24]	; (8005b38 <_close_r+0x1c>)
 8005b20:	2300      	movs	r3, #0
 8005b22:	4604      	mov	r4, r0
 8005b24:	4608      	mov	r0, r1
 8005b26:	602b      	str	r3, [r5, #0]
 8005b28:	f7fb f80f 	bl	8000b4a <_close>
 8005b2c:	1c43      	adds	r3, r0, #1
 8005b2e:	d102      	bne.n	8005b36 <_close_r+0x1a>
 8005b30:	682b      	ldr	r3, [r5, #0]
 8005b32:	b103      	cbz	r3, 8005b36 <_close_r+0x1a>
 8005b34:	6023      	str	r3, [r4, #0]
 8005b36:	bd38      	pop	{r3, r4, r5, pc}
 8005b38:	20004210 	.word	0x20004210

08005b3c <_lseek_r>:
 8005b3c:	b538      	push	{r3, r4, r5, lr}
 8005b3e:	4d07      	ldr	r5, [pc, #28]	; (8005b5c <_lseek_r+0x20>)
 8005b40:	4604      	mov	r4, r0
 8005b42:	4608      	mov	r0, r1
 8005b44:	4611      	mov	r1, r2
 8005b46:	2200      	movs	r2, #0
 8005b48:	602a      	str	r2, [r5, #0]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f7fb f824 	bl	8000b98 <_lseek>
 8005b50:	1c43      	adds	r3, r0, #1
 8005b52:	d102      	bne.n	8005b5a <_lseek_r+0x1e>
 8005b54:	682b      	ldr	r3, [r5, #0]
 8005b56:	b103      	cbz	r3, 8005b5a <_lseek_r+0x1e>
 8005b58:	6023      	str	r3, [r4, #0]
 8005b5a:	bd38      	pop	{r3, r4, r5, pc}
 8005b5c:	20004210 	.word	0x20004210

08005b60 <_read_r>:
 8005b60:	b538      	push	{r3, r4, r5, lr}
 8005b62:	4d07      	ldr	r5, [pc, #28]	; (8005b80 <_read_r+0x20>)
 8005b64:	4604      	mov	r4, r0
 8005b66:	4608      	mov	r0, r1
 8005b68:	4611      	mov	r1, r2
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	602a      	str	r2, [r5, #0]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	f7fa ffb2 	bl	8000ad8 <_read>
 8005b74:	1c43      	adds	r3, r0, #1
 8005b76:	d102      	bne.n	8005b7e <_read_r+0x1e>
 8005b78:	682b      	ldr	r3, [r5, #0]
 8005b7a:	b103      	cbz	r3, 8005b7e <_read_r+0x1e>
 8005b7c:	6023      	str	r3, [r4, #0]
 8005b7e:	bd38      	pop	{r3, r4, r5, pc}
 8005b80:	20004210 	.word	0x20004210

08005b84 <_write_r>:
 8005b84:	b538      	push	{r3, r4, r5, lr}
 8005b86:	4d07      	ldr	r5, [pc, #28]	; (8005ba4 <_write_r+0x20>)
 8005b88:	4604      	mov	r4, r0
 8005b8a:	4608      	mov	r0, r1
 8005b8c:	4611      	mov	r1, r2
 8005b8e:	2200      	movs	r2, #0
 8005b90:	602a      	str	r2, [r5, #0]
 8005b92:	461a      	mov	r2, r3
 8005b94:	f7fa ffbd 	bl	8000b12 <_write>
 8005b98:	1c43      	adds	r3, r0, #1
 8005b9a:	d102      	bne.n	8005ba2 <_write_r+0x1e>
 8005b9c:	682b      	ldr	r3, [r5, #0]
 8005b9e:	b103      	cbz	r3, 8005ba2 <_write_r+0x1e>
 8005ba0:	6023      	str	r3, [r4, #0]
 8005ba2:	bd38      	pop	{r3, r4, r5, pc}
 8005ba4:	20004210 	.word	0x20004210

08005ba8 <__errno>:
 8005ba8:	4b01      	ldr	r3, [pc, #4]	; (8005bb0 <__errno+0x8>)
 8005baa:	6818      	ldr	r0, [r3, #0]
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	20000068 	.word	0x20000068

08005bb4 <__libc_init_array>:
 8005bb4:	b570      	push	{r4, r5, r6, lr}
 8005bb6:	4d0d      	ldr	r5, [pc, #52]	; (8005bec <__libc_init_array+0x38>)
 8005bb8:	4c0d      	ldr	r4, [pc, #52]	; (8005bf0 <__libc_init_array+0x3c>)
 8005bba:	1b64      	subs	r4, r4, r5
 8005bbc:	10a4      	asrs	r4, r4, #2
 8005bbe:	2600      	movs	r6, #0
 8005bc0:	42a6      	cmp	r6, r4
 8005bc2:	d109      	bne.n	8005bd8 <__libc_init_array+0x24>
 8005bc4:	4d0b      	ldr	r5, [pc, #44]	; (8005bf4 <__libc_init_array+0x40>)
 8005bc6:	4c0c      	ldr	r4, [pc, #48]	; (8005bf8 <__libc_init_array+0x44>)
 8005bc8:	f000 fd38 	bl	800663c <_init>
 8005bcc:	1b64      	subs	r4, r4, r5
 8005bce:	10a4      	asrs	r4, r4, #2
 8005bd0:	2600      	movs	r6, #0
 8005bd2:	42a6      	cmp	r6, r4
 8005bd4:	d105      	bne.n	8005be2 <__libc_init_array+0x2e>
 8005bd6:	bd70      	pop	{r4, r5, r6, pc}
 8005bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bdc:	4798      	blx	r3
 8005bde:	3601      	adds	r6, #1
 8005be0:	e7ee      	b.n	8005bc0 <__libc_init_array+0xc>
 8005be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005be6:	4798      	blx	r3
 8005be8:	3601      	adds	r6, #1
 8005bea:	e7f2      	b.n	8005bd2 <__libc_init_array+0x1e>
 8005bec:	0800675c 	.word	0x0800675c
 8005bf0:	0800675c 	.word	0x0800675c
 8005bf4:	0800675c 	.word	0x0800675c
 8005bf8:	08006760 	.word	0x08006760

08005bfc <__retarget_lock_init_recursive>:
 8005bfc:	4770      	bx	lr

08005bfe <__retarget_lock_acquire_recursive>:
 8005bfe:	4770      	bx	lr

08005c00 <__retarget_lock_release_recursive>:
 8005c00:	4770      	bx	lr

08005c02 <memcpy>:
 8005c02:	440a      	add	r2, r1
 8005c04:	4291      	cmp	r1, r2
 8005c06:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c0a:	d100      	bne.n	8005c0e <memcpy+0xc>
 8005c0c:	4770      	bx	lr
 8005c0e:	b510      	push	{r4, lr}
 8005c10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c18:	4291      	cmp	r1, r2
 8005c1a:	d1f9      	bne.n	8005c10 <memcpy+0xe>
 8005c1c:	bd10      	pop	{r4, pc}
	...

08005c20 <_free_r>:
 8005c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c22:	2900      	cmp	r1, #0
 8005c24:	d044      	beq.n	8005cb0 <_free_r+0x90>
 8005c26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c2a:	9001      	str	r0, [sp, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f1a1 0404 	sub.w	r4, r1, #4
 8005c32:	bfb8      	it	lt
 8005c34:	18e4      	addlt	r4, r4, r3
 8005c36:	f000 f8df 	bl	8005df8 <__malloc_lock>
 8005c3a:	4a1e      	ldr	r2, [pc, #120]	; (8005cb4 <_free_r+0x94>)
 8005c3c:	9801      	ldr	r0, [sp, #4]
 8005c3e:	6813      	ldr	r3, [r2, #0]
 8005c40:	b933      	cbnz	r3, 8005c50 <_free_r+0x30>
 8005c42:	6063      	str	r3, [r4, #4]
 8005c44:	6014      	str	r4, [r2, #0]
 8005c46:	b003      	add	sp, #12
 8005c48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c4c:	f000 b8da 	b.w	8005e04 <__malloc_unlock>
 8005c50:	42a3      	cmp	r3, r4
 8005c52:	d908      	bls.n	8005c66 <_free_r+0x46>
 8005c54:	6825      	ldr	r5, [r4, #0]
 8005c56:	1961      	adds	r1, r4, r5
 8005c58:	428b      	cmp	r3, r1
 8005c5a:	bf01      	itttt	eq
 8005c5c:	6819      	ldreq	r1, [r3, #0]
 8005c5e:	685b      	ldreq	r3, [r3, #4]
 8005c60:	1949      	addeq	r1, r1, r5
 8005c62:	6021      	streq	r1, [r4, #0]
 8005c64:	e7ed      	b.n	8005c42 <_free_r+0x22>
 8005c66:	461a      	mov	r2, r3
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	b10b      	cbz	r3, 8005c70 <_free_r+0x50>
 8005c6c:	42a3      	cmp	r3, r4
 8005c6e:	d9fa      	bls.n	8005c66 <_free_r+0x46>
 8005c70:	6811      	ldr	r1, [r2, #0]
 8005c72:	1855      	adds	r5, r2, r1
 8005c74:	42a5      	cmp	r5, r4
 8005c76:	d10b      	bne.n	8005c90 <_free_r+0x70>
 8005c78:	6824      	ldr	r4, [r4, #0]
 8005c7a:	4421      	add	r1, r4
 8005c7c:	1854      	adds	r4, r2, r1
 8005c7e:	42a3      	cmp	r3, r4
 8005c80:	6011      	str	r1, [r2, #0]
 8005c82:	d1e0      	bne.n	8005c46 <_free_r+0x26>
 8005c84:	681c      	ldr	r4, [r3, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	6053      	str	r3, [r2, #4]
 8005c8a:	440c      	add	r4, r1
 8005c8c:	6014      	str	r4, [r2, #0]
 8005c8e:	e7da      	b.n	8005c46 <_free_r+0x26>
 8005c90:	d902      	bls.n	8005c98 <_free_r+0x78>
 8005c92:	230c      	movs	r3, #12
 8005c94:	6003      	str	r3, [r0, #0]
 8005c96:	e7d6      	b.n	8005c46 <_free_r+0x26>
 8005c98:	6825      	ldr	r5, [r4, #0]
 8005c9a:	1961      	adds	r1, r4, r5
 8005c9c:	428b      	cmp	r3, r1
 8005c9e:	bf04      	itt	eq
 8005ca0:	6819      	ldreq	r1, [r3, #0]
 8005ca2:	685b      	ldreq	r3, [r3, #4]
 8005ca4:	6063      	str	r3, [r4, #4]
 8005ca6:	bf04      	itt	eq
 8005ca8:	1949      	addeq	r1, r1, r5
 8005caa:	6021      	streq	r1, [r4, #0]
 8005cac:	6054      	str	r4, [r2, #4]
 8005cae:	e7ca      	b.n	8005c46 <_free_r+0x26>
 8005cb0:	b003      	add	sp, #12
 8005cb2:	bd30      	pop	{r4, r5, pc}
 8005cb4:	20004218 	.word	0x20004218

08005cb8 <sbrk_aligned>:
 8005cb8:	b570      	push	{r4, r5, r6, lr}
 8005cba:	4e0e      	ldr	r6, [pc, #56]	; (8005cf4 <sbrk_aligned+0x3c>)
 8005cbc:	460c      	mov	r4, r1
 8005cbe:	6831      	ldr	r1, [r6, #0]
 8005cc0:	4605      	mov	r5, r0
 8005cc2:	b911      	cbnz	r1, 8005cca <sbrk_aligned+0x12>
 8005cc4:	f000 fcaa 	bl	800661c <_sbrk_r>
 8005cc8:	6030      	str	r0, [r6, #0]
 8005cca:	4621      	mov	r1, r4
 8005ccc:	4628      	mov	r0, r5
 8005cce:	f000 fca5 	bl	800661c <_sbrk_r>
 8005cd2:	1c43      	adds	r3, r0, #1
 8005cd4:	d00a      	beq.n	8005cec <sbrk_aligned+0x34>
 8005cd6:	1cc4      	adds	r4, r0, #3
 8005cd8:	f024 0403 	bic.w	r4, r4, #3
 8005cdc:	42a0      	cmp	r0, r4
 8005cde:	d007      	beq.n	8005cf0 <sbrk_aligned+0x38>
 8005ce0:	1a21      	subs	r1, r4, r0
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	f000 fc9a 	bl	800661c <_sbrk_r>
 8005ce8:	3001      	adds	r0, #1
 8005cea:	d101      	bne.n	8005cf0 <sbrk_aligned+0x38>
 8005cec:	f04f 34ff 	mov.w	r4, #4294967295
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	bd70      	pop	{r4, r5, r6, pc}
 8005cf4:	2000421c 	.word	0x2000421c

08005cf8 <_malloc_r>:
 8005cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cfc:	1ccd      	adds	r5, r1, #3
 8005cfe:	f025 0503 	bic.w	r5, r5, #3
 8005d02:	3508      	adds	r5, #8
 8005d04:	2d0c      	cmp	r5, #12
 8005d06:	bf38      	it	cc
 8005d08:	250c      	movcc	r5, #12
 8005d0a:	2d00      	cmp	r5, #0
 8005d0c:	4607      	mov	r7, r0
 8005d0e:	db01      	blt.n	8005d14 <_malloc_r+0x1c>
 8005d10:	42a9      	cmp	r1, r5
 8005d12:	d905      	bls.n	8005d20 <_malloc_r+0x28>
 8005d14:	230c      	movs	r3, #12
 8005d16:	603b      	str	r3, [r7, #0]
 8005d18:	2600      	movs	r6, #0
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d20:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005df4 <_malloc_r+0xfc>
 8005d24:	f000 f868 	bl	8005df8 <__malloc_lock>
 8005d28:	f8d8 3000 	ldr.w	r3, [r8]
 8005d2c:	461c      	mov	r4, r3
 8005d2e:	bb5c      	cbnz	r4, 8005d88 <_malloc_r+0x90>
 8005d30:	4629      	mov	r1, r5
 8005d32:	4638      	mov	r0, r7
 8005d34:	f7ff ffc0 	bl	8005cb8 <sbrk_aligned>
 8005d38:	1c43      	adds	r3, r0, #1
 8005d3a:	4604      	mov	r4, r0
 8005d3c:	d155      	bne.n	8005dea <_malloc_r+0xf2>
 8005d3e:	f8d8 4000 	ldr.w	r4, [r8]
 8005d42:	4626      	mov	r6, r4
 8005d44:	2e00      	cmp	r6, #0
 8005d46:	d145      	bne.n	8005dd4 <_malloc_r+0xdc>
 8005d48:	2c00      	cmp	r4, #0
 8005d4a:	d048      	beq.n	8005dde <_malloc_r+0xe6>
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	4631      	mov	r1, r6
 8005d50:	4638      	mov	r0, r7
 8005d52:	eb04 0903 	add.w	r9, r4, r3
 8005d56:	f000 fc61 	bl	800661c <_sbrk_r>
 8005d5a:	4581      	cmp	r9, r0
 8005d5c:	d13f      	bne.n	8005dde <_malloc_r+0xe6>
 8005d5e:	6821      	ldr	r1, [r4, #0]
 8005d60:	1a6d      	subs	r5, r5, r1
 8005d62:	4629      	mov	r1, r5
 8005d64:	4638      	mov	r0, r7
 8005d66:	f7ff ffa7 	bl	8005cb8 <sbrk_aligned>
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	d037      	beq.n	8005dde <_malloc_r+0xe6>
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	442b      	add	r3, r5
 8005d72:	6023      	str	r3, [r4, #0]
 8005d74:	f8d8 3000 	ldr.w	r3, [r8]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d038      	beq.n	8005dee <_malloc_r+0xf6>
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	42a2      	cmp	r2, r4
 8005d80:	d12b      	bne.n	8005dda <_malloc_r+0xe2>
 8005d82:	2200      	movs	r2, #0
 8005d84:	605a      	str	r2, [r3, #4]
 8005d86:	e00f      	b.n	8005da8 <_malloc_r+0xb0>
 8005d88:	6822      	ldr	r2, [r4, #0]
 8005d8a:	1b52      	subs	r2, r2, r5
 8005d8c:	d41f      	bmi.n	8005dce <_malloc_r+0xd6>
 8005d8e:	2a0b      	cmp	r2, #11
 8005d90:	d917      	bls.n	8005dc2 <_malloc_r+0xca>
 8005d92:	1961      	adds	r1, r4, r5
 8005d94:	42a3      	cmp	r3, r4
 8005d96:	6025      	str	r5, [r4, #0]
 8005d98:	bf18      	it	ne
 8005d9a:	6059      	strne	r1, [r3, #4]
 8005d9c:	6863      	ldr	r3, [r4, #4]
 8005d9e:	bf08      	it	eq
 8005da0:	f8c8 1000 	streq.w	r1, [r8]
 8005da4:	5162      	str	r2, [r4, r5]
 8005da6:	604b      	str	r3, [r1, #4]
 8005da8:	4638      	mov	r0, r7
 8005daa:	f104 060b 	add.w	r6, r4, #11
 8005dae:	f000 f829 	bl	8005e04 <__malloc_unlock>
 8005db2:	f026 0607 	bic.w	r6, r6, #7
 8005db6:	1d23      	adds	r3, r4, #4
 8005db8:	1af2      	subs	r2, r6, r3
 8005dba:	d0ae      	beq.n	8005d1a <_malloc_r+0x22>
 8005dbc:	1b9b      	subs	r3, r3, r6
 8005dbe:	50a3      	str	r3, [r4, r2]
 8005dc0:	e7ab      	b.n	8005d1a <_malloc_r+0x22>
 8005dc2:	42a3      	cmp	r3, r4
 8005dc4:	6862      	ldr	r2, [r4, #4]
 8005dc6:	d1dd      	bne.n	8005d84 <_malloc_r+0x8c>
 8005dc8:	f8c8 2000 	str.w	r2, [r8]
 8005dcc:	e7ec      	b.n	8005da8 <_malloc_r+0xb0>
 8005dce:	4623      	mov	r3, r4
 8005dd0:	6864      	ldr	r4, [r4, #4]
 8005dd2:	e7ac      	b.n	8005d2e <_malloc_r+0x36>
 8005dd4:	4634      	mov	r4, r6
 8005dd6:	6876      	ldr	r6, [r6, #4]
 8005dd8:	e7b4      	b.n	8005d44 <_malloc_r+0x4c>
 8005dda:	4613      	mov	r3, r2
 8005ddc:	e7cc      	b.n	8005d78 <_malloc_r+0x80>
 8005dde:	230c      	movs	r3, #12
 8005de0:	603b      	str	r3, [r7, #0]
 8005de2:	4638      	mov	r0, r7
 8005de4:	f000 f80e 	bl	8005e04 <__malloc_unlock>
 8005de8:	e797      	b.n	8005d1a <_malloc_r+0x22>
 8005dea:	6025      	str	r5, [r4, #0]
 8005dec:	e7dc      	b.n	8005da8 <_malloc_r+0xb0>
 8005dee:	605b      	str	r3, [r3, #4]
 8005df0:	deff      	udf	#255	; 0xff
 8005df2:	bf00      	nop
 8005df4:	20004218 	.word	0x20004218

08005df8 <__malloc_lock>:
 8005df8:	4801      	ldr	r0, [pc, #4]	; (8005e00 <__malloc_lock+0x8>)
 8005dfa:	f7ff bf00 	b.w	8005bfe <__retarget_lock_acquire_recursive>
 8005dfe:	bf00      	nop
 8005e00:	20004214 	.word	0x20004214

08005e04 <__malloc_unlock>:
 8005e04:	4801      	ldr	r0, [pc, #4]	; (8005e0c <__malloc_unlock+0x8>)
 8005e06:	f7ff befb 	b.w	8005c00 <__retarget_lock_release_recursive>
 8005e0a:	bf00      	nop
 8005e0c:	20004214 	.word	0x20004214

08005e10 <__sfputc_r>:
 8005e10:	6893      	ldr	r3, [r2, #8]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	b410      	push	{r4}
 8005e18:	6093      	str	r3, [r2, #8]
 8005e1a:	da08      	bge.n	8005e2e <__sfputc_r+0x1e>
 8005e1c:	6994      	ldr	r4, [r2, #24]
 8005e1e:	42a3      	cmp	r3, r4
 8005e20:	db01      	blt.n	8005e26 <__sfputc_r+0x16>
 8005e22:	290a      	cmp	r1, #10
 8005e24:	d103      	bne.n	8005e2e <__sfputc_r+0x1e>
 8005e26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e2a:	f7ff bdda 	b.w	80059e2 <__swbuf_r>
 8005e2e:	6813      	ldr	r3, [r2, #0]
 8005e30:	1c58      	adds	r0, r3, #1
 8005e32:	6010      	str	r0, [r2, #0]
 8005e34:	7019      	strb	r1, [r3, #0]
 8005e36:	4608      	mov	r0, r1
 8005e38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <__sfputs_r>:
 8005e3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e40:	4606      	mov	r6, r0
 8005e42:	460f      	mov	r7, r1
 8005e44:	4614      	mov	r4, r2
 8005e46:	18d5      	adds	r5, r2, r3
 8005e48:	42ac      	cmp	r4, r5
 8005e4a:	d101      	bne.n	8005e50 <__sfputs_r+0x12>
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	e007      	b.n	8005e60 <__sfputs_r+0x22>
 8005e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e54:	463a      	mov	r2, r7
 8005e56:	4630      	mov	r0, r6
 8005e58:	f7ff ffda 	bl	8005e10 <__sfputc_r>
 8005e5c:	1c43      	adds	r3, r0, #1
 8005e5e:	d1f3      	bne.n	8005e48 <__sfputs_r+0xa>
 8005e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e64 <_vfiprintf_r>:
 8005e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e68:	460d      	mov	r5, r1
 8005e6a:	b09d      	sub	sp, #116	; 0x74
 8005e6c:	4614      	mov	r4, r2
 8005e6e:	4698      	mov	r8, r3
 8005e70:	4606      	mov	r6, r0
 8005e72:	b118      	cbz	r0, 8005e7c <_vfiprintf_r+0x18>
 8005e74:	6a03      	ldr	r3, [r0, #32]
 8005e76:	b90b      	cbnz	r3, 8005e7c <_vfiprintf_r+0x18>
 8005e78:	f7ff fccc 	bl	8005814 <__sinit>
 8005e7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e7e:	07d9      	lsls	r1, r3, #31
 8005e80:	d405      	bmi.n	8005e8e <_vfiprintf_r+0x2a>
 8005e82:	89ab      	ldrh	r3, [r5, #12]
 8005e84:	059a      	lsls	r2, r3, #22
 8005e86:	d402      	bmi.n	8005e8e <_vfiprintf_r+0x2a>
 8005e88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e8a:	f7ff feb8 	bl	8005bfe <__retarget_lock_acquire_recursive>
 8005e8e:	89ab      	ldrh	r3, [r5, #12]
 8005e90:	071b      	lsls	r3, r3, #28
 8005e92:	d501      	bpl.n	8005e98 <_vfiprintf_r+0x34>
 8005e94:	692b      	ldr	r3, [r5, #16]
 8005e96:	b99b      	cbnz	r3, 8005ec0 <_vfiprintf_r+0x5c>
 8005e98:	4629      	mov	r1, r5
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	f7ff fdde 	bl	8005a5c <__swsetup_r>
 8005ea0:	b170      	cbz	r0, 8005ec0 <_vfiprintf_r+0x5c>
 8005ea2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ea4:	07dc      	lsls	r4, r3, #31
 8005ea6:	d504      	bpl.n	8005eb2 <_vfiprintf_r+0x4e>
 8005ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eac:	b01d      	add	sp, #116	; 0x74
 8005eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb2:	89ab      	ldrh	r3, [r5, #12]
 8005eb4:	0598      	lsls	r0, r3, #22
 8005eb6:	d4f7      	bmi.n	8005ea8 <_vfiprintf_r+0x44>
 8005eb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005eba:	f7ff fea1 	bl	8005c00 <__retarget_lock_release_recursive>
 8005ebe:	e7f3      	b.n	8005ea8 <_vfiprintf_r+0x44>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec4:	2320      	movs	r3, #32
 8005ec6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005eca:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ece:	2330      	movs	r3, #48	; 0x30
 8005ed0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006084 <_vfiprintf_r+0x220>
 8005ed4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ed8:	f04f 0901 	mov.w	r9, #1
 8005edc:	4623      	mov	r3, r4
 8005ede:	469a      	mov	sl, r3
 8005ee0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ee4:	b10a      	cbz	r2, 8005eea <_vfiprintf_r+0x86>
 8005ee6:	2a25      	cmp	r2, #37	; 0x25
 8005ee8:	d1f9      	bne.n	8005ede <_vfiprintf_r+0x7a>
 8005eea:	ebba 0b04 	subs.w	fp, sl, r4
 8005eee:	d00b      	beq.n	8005f08 <_vfiprintf_r+0xa4>
 8005ef0:	465b      	mov	r3, fp
 8005ef2:	4622      	mov	r2, r4
 8005ef4:	4629      	mov	r1, r5
 8005ef6:	4630      	mov	r0, r6
 8005ef8:	f7ff ffa1 	bl	8005e3e <__sfputs_r>
 8005efc:	3001      	adds	r0, #1
 8005efe:	f000 80a9 	beq.w	8006054 <_vfiprintf_r+0x1f0>
 8005f02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f04:	445a      	add	r2, fp
 8005f06:	9209      	str	r2, [sp, #36]	; 0x24
 8005f08:	f89a 3000 	ldrb.w	r3, [sl]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 80a1 	beq.w	8006054 <_vfiprintf_r+0x1f0>
 8005f12:	2300      	movs	r3, #0
 8005f14:	f04f 32ff 	mov.w	r2, #4294967295
 8005f18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f1c:	f10a 0a01 	add.w	sl, sl, #1
 8005f20:	9304      	str	r3, [sp, #16]
 8005f22:	9307      	str	r3, [sp, #28]
 8005f24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f28:	931a      	str	r3, [sp, #104]	; 0x68
 8005f2a:	4654      	mov	r4, sl
 8005f2c:	2205      	movs	r2, #5
 8005f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f32:	4854      	ldr	r0, [pc, #336]	; (8006084 <_vfiprintf_r+0x220>)
 8005f34:	f7fa f94c 	bl	80001d0 <memchr>
 8005f38:	9a04      	ldr	r2, [sp, #16]
 8005f3a:	b9d8      	cbnz	r0, 8005f74 <_vfiprintf_r+0x110>
 8005f3c:	06d1      	lsls	r1, r2, #27
 8005f3e:	bf44      	itt	mi
 8005f40:	2320      	movmi	r3, #32
 8005f42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f46:	0713      	lsls	r3, r2, #28
 8005f48:	bf44      	itt	mi
 8005f4a:	232b      	movmi	r3, #43	; 0x2b
 8005f4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f50:	f89a 3000 	ldrb.w	r3, [sl]
 8005f54:	2b2a      	cmp	r3, #42	; 0x2a
 8005f56:	d015      	beq.n	8005f84 <_vfiprintf_r+0x120>
 8005f58:	9a07      	ldr	r2, [sp, #28]
 8005f5a:	4654      	mov	r4, sl
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	f04f 0c0a 	mov.w	ip, #10
 8005f62:	4621      	mov	r1, r4
 8005f64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f68:	3b30      	subs	r3, #48	; 0x30
 8005f6a:	2b09      	cmp	r3, #9
 8005f6c:	d94d      	bls.n	800600a <_vfiprintf_r+0x1a6>
 8005f6e:	b1b0      	cbz	r0, 8005f9e <_vfiprintf_r+0x13a>
 8005f70:	9207      	str	r2, [sp, #28]
 8005f72:	e014      	b.n	8005f9e <_vfiprintf_r+0x13a>
 8005f74:	eba0 0308 	sub.w	r3, r0, r8
 8005f78:	fa09 f303 	lsl.w	r3, r9, r3
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	9304      	str	r3, [sp, #16]
 8005f80:	46a2      	mov	sl, r4
 8005f82:	e7d2      	b.n	8005f2a <_vfiprintf_r+0xc6>
 8005f84:	9b03      	ldr	r3, [sp, #12]
 8005f86:	1d19      	adds	r1, r3, #4
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	9103      	str	r1, [sp, #12]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	bfbb      	ittet	lt
 8005f90:	425b      	neglt	r3, r3
 8005f92:	f042 0202 	orrlt.w	r2, r2, #2
 8005f96:	9307      	strge	r3, [sp, #28]
 8005f98:	9307      	strlt	r3, [sp, #28]
 8005f9a:	bfb8      	it	lt
 8005f9c:	9204      	strlt	r2, [sp, #16]
 8005f9e:	7823      	ldrb	r3, [r4, #0]
 8005fa0:	2b2e      	cmp	r3, #46	; 0x2e
 8005fa2:	d10c      	bne.n	8005fbe <_vfiprintf_r+0x15a>
 8005fa4:	7863      	ldrb	r3, [r4, #1]
 8005fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8005fa8:	d134      	bne.n	8006014 <_vfiprintf_r+0x1b0>
 8005faa:	9b03      	ldr	r3, [sp, #12]
 8005fac:	1d1a      	adds	r2, r3, #4
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	9203      	str	r2, [sp, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	bfb8      	it	lt
 8005fb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fba:	3402      	adds	r4, #2
 8005fbc:	9305      	str	r3, [sp, #20]
 8005fbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006094 <_vfiprintf_r+0x230>
 8005fc2:	7821      	ldrb	r1, [r4, #0]
 8005fc4:	2203      	movs	r2, #3
 8005fc6:	4650      	mov	r0, sl
 8005fc8:	f7fa f902 	bl	80001d0 <memchr>
 8005fcc:	b138      	cbz	r0, 8005fde <_vfiprintf_r+0x17a>
 8005fce:	9b04      	ldr	r3, [sp, #16]
 8005fd0:	eba0 000a 	sub.w	r0, r0, sl
 8005fd4:	2240      	movs	r2, #64	; 0x40
 8005fd6:	4082      	lsls	r2, r0
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	3401      	adds	r4, #1
 8005fdc:	9304      	str	r3, [sp, #16]
 8005fde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fe2:	4829      	ldr	r0, [pc, #164]	; (8006088 <_vfiprintf_r+0x224>)
 8005fe4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fe8:	2206      	movs	r2, #6
 8005fea:	f7fa f8f1 	bl	80001d0 <memchr>
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	d03f      	beq.n	8006072 <_vfiprintf_r+0x20e>
 8005ff2:	4b26      	ldr	r3, [pc, #152]	; (800608c <_vfiprintf_r+0x228>)
 8005ff4:	bb1b      	cbnz	r3, 800603e <_vfiprintf_r+0x1da>
 8005ff6:	9b03      	ldr	r3, [sp, #12]
 8005ff8:	3307      	adds	r3, #7
 8005ffa:	f023 0307 	bic.w	r3, r3, #7
 8005ffe:	3308      	adds	r3, #8
 8006000:	9303      	str	r3, [sp, #12]
 8006002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006004:	443b      	add	r3, r7
 8006006:	9309      	str	r3, [sp, #36]	; 0x24
 8006008:	e768      	b.n	8005edc <_vfiprintf_r+0x78>
 800600a:	fb0c 3202 	mla	r2, ip, r2, r3
 800600e:	460c      	mov	r4, r1
 8006010:	2001      	movs	r0, #1
 8006012:	e7a6      	b.n	8005f62 <_vfiprintf_r+0xfe>
 8006014:	2300      	movs	r3, #0
 8006016:	3401      	adds	r4, #1
 8006018:	9305      	str	r3, [sp, #20]
 800601a:	4619      	mov	r1, r3
 800601c:	f04f 0c0a 	mov.w	ip, #10
 8006020:	4620      	mov	r0, r4
 8006022:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006026:	3a30      	subs	r2, #48	; 0x30
 8006028:	2a09      	cmp	r2, #9
 800602a:	d903      	bls.n	8006034 <_vfiprintf_r+0x1d0>
 800602c:	2b00      	cmp	r3, #0
 800602e:	d0c6      	beq.n	8005fbe <_vfiprintf_r+0x15a>
 8006030:	9105      	str	r1, [sp, #20]
 8006032:	e7c4      	b.n	8005fbe <_vfiprintf_r+0x15a>
 8006034:	fb0c 2101 	mla	r1, ip, r1, r2
 8006038:	4604      	mov	r4, r0
 800603a:	2301      	movs	r3, #1
 800603c:	e7f0      	b.n	8006020 <_vfiprintf_r+0x1bc>
 800603e:	ab03      	add	r3, sp, #12
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	462a      	mov	r2, r5
 8006044:	4b12      	ldr	r3, [pc, #72]	; (8006090 <_vfiprintf_r+0x22c>)
 8006046:	a904      	add	r1, sp, #16
 8006048:	4630      	mov	r0, r6
 800604a:	f3af 8000 	nop.w
 800604e:	4607      	mov	r7, r0
 8006050:	1c78      	adds	r0, r7, #1
 8006052:	d1d6      	bne.n	8006002 <_vfiprintf_r+0x19e>
 8006054:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006056:	07d9      	lsls	r1, r3, #31
 8006058:	d405      	bmi.n	8006066 <_vfiprintf_r+0x202>
 800605a:	89ab      	ldrh	r3, [r5, #12]
 800605c:	059a      	lsls	r2, r3, #22
 800605e:	d402      	bmi.n	8006066 <_vfiprintf_r+0x202>
 8006060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006062:	f7ff fdcd 	bl	8005c00 <__retarget_lock_release_recursive>
 8006066:	89ab      	ldrh	r3, [r5, #12]
 8006068:	065b      	lsls	r3, r3, #25
 800606a:	f53f af1d 	bmi.w	8005ea8 <_vfiprintf_r+0x44>
 800606e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006070:	e71c      	b.n	8005eac <_vfiprintf_r+0x48>
 8006072:	ab03      	add	r3, sp, #12
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	462a      	mov	r2, r5
 8006078:	4b05      	ldr	r3, [pc, #20]	; (8006090 <_vfiprintf_r+0x22c>)
 800607a:	a904      	add	r1, sp, #16
 800607c:	4630      	mov	r0, r6
 800607e:	f000 f879 	bl	8006174 <_printf_i>
 8006082:	e7e4      	b.n	800604e <_vfiprintf_r+0x1ea>
 8006084:	08006720 	.word	0x08006720
 8006088:	0800672a 	.word	0x0800672a
 800608c:	00000000 	.word	0x00000000
 8006090:	08005e3f 	.word	0x08005e3f
 8006094:	08006726 	.word	0x08006726

08006098 <_printf_common>:
 8006098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800609c:	4616      	mov	r6, r2
 800609e:	4699      	mov	r9, r3
 80060a0:	688a      	ldr	r2, [r1, #8]
 80060a2:	690b      	ldr	r3, [r1, #16]
 80060a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060a8:	4293      	cmp	r3, r2
 80060aa:	bfb8      	it	lt
 80060ac:	4613      	movlt	r3, r2
 80060ae:	6033      	str	r3, [r6, #0]
 80060b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060b4:	4607      	mov	r7, r0
 80060b6:	460c      	mov	r4, r1
 80060b8:	b10a      	cbz	r2, 80060be <_printf_common+0x26>
 80060ba:	3301      	adds	r3, #1
 80060bc:	6033      	str	r3, [r6, #0]
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	0699      	lsls	r1, r3, #26
 80060c2:	bf42      	ittt	mi
 80060c4:	6833      	ldrmi	r3, [r6, #0]
 80060c6:	3302      	addmi	r3, #2
 80060c8:	6033      	strmi	r3, [r6, #0]
 80060ca:	6825      	ldr	r5, [r4, #0]
 80060cc:	f015 0506 	ands.w	r5, r5, #6
 80060d0:	d106      	bne.n	80060e0 <_printf_common+0x48>
 80060d2:	f104 0a19 	add.w	sl, r4, #25
 80060d6:	68e3      	ldr	r3, [r4, #12]
 80060d8:	6832      	ldr	r2, [r6, #0]
 80060da:	1a9b      	subs	r3, r3, r2
 80060dc:	42ab      	cmp	r3, r5
 80060de:	dc26      	bgt.n	800612e <_printf_common+0x96>
 80060e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060e4:	1e13      	subs	r3, r2, #0
 80060e6:	6822      	ldr	r2, [r4, #0]
 80060e8:	bf18      	it	ne
 80060ea:	2301      	movne	r3, #1
 80060ec:	0692      	lsls	r2, r2, #26
 80060ee:	d42b      	bmi.n	8006148 <_printf_common+0xb0>
 80060f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060f4:	4649      	mov	r1, r9
 80060f6:	4638      	mov	r0, r7
 80060f8:	47c0      	blx	r8
 80060fa:	3001      	adds	r0, #1
 80060fc:	d01e      	beq.n	800613c <_printf_common+0xa4>
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	6922      	ldr	r2, [r4, #16]
 8006102:	f003 0306 	and.w	r3, r3, #6
 8006106:	2b04      	cmp	r3, #4
 8006108:	bf02      	ittt	eq
 800610a:	68e5      	ldreq	r5, [r4, #12]
 800610c:	6833      	ldreq	r3, [r6, #0]
 800610e:	1aed      	subeq	r5, r5, r3
 8006110:	68a3      	ldr	r3, [r4, #8]
 8006112:	bf0c      	ite	eq
 8006114:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006118:	2500      	movne	r5, #0
 800611a:	4293      	cmp	r3, r2
 800611c:	bfc4      	itt	gt
 800611e:	1a9b      	subgt	r3, r3, r2
 8006120:	18ed      	addgt	r5, r5, r3
 8006122:	2600      	movs	r6, #0
 8006124:	341a      	adds	r4, #26
 8006126:	42b5      	cmp	r5, r6
 8006128:	d11a      	bne.n	8006160 <_printf_common+0xc8>
 800612a:	2000      	movs	r0, #0
 800612c:	e008      	b.n	8006140 <_printf_common+0xa8>
 800612e:	2301      	movs	r3, #1
 8006130:	4652      	mov	r2, sl
 8006132:	4649      	mov	r1, r9
 8006134:	4638      	mov	r0, r7
 8006136:	47c0      	blx	r8
 8006138:	3001      	adds	r0, #1
 800613a:	d103      	bne.n	8006144 <_printf_common+0xac>
 800613c:	f04f 30ff 	mov.w	r0, #4294967295
 8006140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006144:	3501      	adds	r5, #1
 8006146:	e7c6      	b.n	80060d6 <_printf_common+0x3e>
 8006148:	18e1      	adds	r1, r4, r3
 800614a:	1c5a      	adds	r2, r3, #1
 800614c:	2030      	movs	r0, #48	; 0x30
 800614e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006152:	4422      	add	r2, r4
 8006154:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006158:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800615c:	3302      	adds	r3, #2
 800615e:	e7c7      	b.n	80060f0 <_printf_common+0x58>
 8006160:	2301      	movs	r3, #1
 8006162:	4622      	mov	r2, r4
 8006164:	4649      	mov	r1, r9
 8006166:	4638      	mov	r0, r7
 8006168:	47c0      	blx	r8
 800616a:	3001      	adds	r0, #1
 800616c:	d0e6      	beq.n	800613c <_printf_common+0xa4>
 800616e:	3601      	adds	r6, #1
 8006170:	e7d9      	b.n	8006126 <_printf_common+0x8e>
	...

08006174 <_printf_i>:
 8006174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006178:	7e0f      	ldrb	r7, [r1, #24]
 800617a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800617c:	2f78      	cmp	r7, #120	; 0x78
 800617e:	4691      	mov	r9, r2
 8006180:	4680      	mov	r8, r0
 8006182:	460c      	mov	r4, r1
 8006184:	469a      	mov	sl, r3
 8006186:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800618a:	d807      	bhi.n	800619c <_printf_i+0x28>
 800618c:	2f62      	cmp	r7, #98	; 0x62
 800618e:	d80a      	bhi.n	80061a6 <_printf_i+0x32>
 8006190:	2f00      	cmp	r7, #0
 8006192:	f000 80d4 	beq.w	800633e <_printf_i+0x1ca>
 8006196:	2f58      	cmp	r7, #88	; 0x58
 8006198:	f000 80c0 	beq.w	800631c <_printf_i+0x1a8>
 800619c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061a4:	e03a      	b.n	800621c <_printf_i+0xa8>
 80061a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061aa:	2b15      	cmp	r3, #21
 80061ac:	d8f6      	bhi.n	800619c <_printf_i+0x28>
 80061ae:	a101      	add	r1, pc, #4	; (adr r1, 80061b4 <_printf_i+0x40>)
 80061b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061b4:	0800620d 	.word	0x0800620d
 80061b8:	08006221 	.word	0x08006221
 80061bc:	0800619d 	.word	0x0800619d
 80061c0:	0800619d 	.word	0x0800619d
 80061c4:	0800619d 	.word	0x0800619d
 80061c8:	0800619d 	.word	0x0800619d
 80061cc:	08006221 	.word	0x08006221
 80061d0:	0800619d 	.word	0x0800619d
 80061d4:	0800619d 	.word	0x0800619d
 80061d8:	0800619d 	.word	0x0800619d
 80061dc:	0800619d 	.word	0x0800619d
 80061e0:	08006325 	.word	0x08006325
 80061e4:	0800624d 	.word	0x0800624d
 80061e8:	080062df 	.word	0x080062df
 80061ec:	0800619d 	.word	0x0800619d
 80061f0:	0800619d 	.word	0x0800619d
 80061f4:	08006347 	.word	0x08006347
 80061f8:	0800619d 	.word	0x0800619d
 80061fc:	0800624d 	.word	0x0800624d
 8006200:	0800619d 	.word	0x0800619d
 8006204:	0800619d 	.word	0x0800619d
 8006208:	080062e7 	.word	0x080062e7
 800620c:	682b      	ldr	r3, [r5, #0]
 800620e:	1d1a      	adds	r2, r3, #4
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	602a      	str	r2, [r5, #0]
 8006214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006218:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800621c:	2301      	movs	r3, #1
 800621e:	e09f      	b.n	8006360 <_printf_i+0x1ec>
 8006220:	6820      	ldr	r0, [r4, #0]
 8006222:	682b      	ldr	r3, [r5, #0]
 8006224:	0607      	lsls	r7, r0, #24
 8006226:	f103 0104 	add.w	r1, r3, #4
 800622a:	6029      	str	r1, [r5, #0]
 800622c:	d501      	bpl.n	8006232 <_printf_i+0xbe>
 800622e:	681e      	ldr	r6, [r3, #0]
 8006230:	e003      	b.n	800623a <_printf_i+0xc6>
 8006232:	0646      	lsls	r6, r0, #25
 8006234:	d5fb      	bpl.n	800622e <_printf_i+0xba>
 8006236:	f9b3 6000 	ldrsh.w	r6, [r3]
 800623a:	2e00      	cmp	r6, #0
 800623c:	da03      	bge.n	8006246 <_printf_i+0xd2>
 800623e:	232d      	movs	r3, #45	; 0x2d
 8006240:	4276      	negs	r6, r6
 8006242:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006246:	485a      	ldr	r0, [pc, #360]	; (80063b0 <_printf_i+0x23c>)
 8006248:	230a      	movs	r3, #10
 800624a:	e012      	b.n	8006272 <_printf_i+0xfe>
 800624c:	682b      	ldr	r3, [r5, #0]
 800624e:	6820      	ldr	r0, [r4, #0]
 8006250:	1d19      	adds	r1, r3, #4
 8006252:	6029      	str	r1, [r5, #0]
 8006254:	0605      	lsls	r5, r0, #24
 8006256:	d501      	bpl.n	800625c <_printf_i+0xe8>
 8006258:	681e      	ldr	r6, [r3, #0]
 800625a:	e002      	b.n	8006262 <_printf_i+0xee>
 800625c:	0641      	lsls	r1, r0, #25
 800625e:	d5fb      	bpl.n	8006258 <_printf_i+0xe4>
 8006260:	881e      	ldrh	r6, [r3, #0]
 8006262:	4853      	ldr	r0, [pc, #332]	; (80063b0 <_printf_i+0x23c>)
 8006264:	2f6f      	cmp	r7, #111	; 0x6f
 8006266:	bf0c      	ite	eq
 8006268:	2308      	moveq	r3, #8
 800626a:	230a      	movne	r3, #10
 800626c:	2100      	movs	r1, #0
 800626e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006272:	6865      	ldr	r5, [r4, #4]
 8006274:	60a5      	str	r5, [r4, #8]
 8006276:	2d00      	cmp	r5, #0
 8006278:	bfa2      	ittt	ge
 800627a:	6821      	ldrge	r1, [r4, #0]
 800627c:	f021 0104 	bicge.w	r1, r1, #4
 8006280:	6021      	strge	r1, [r4, #0]
 8006282:	b90e      	cbnz	r6, 8006288 <_printf_i+0x114>
 8006284:	2d00      	cmp	r5, #0
 8006286:	d04b      	beq.n	8006320 <_printf_i+0x1ac>
 8006288:	4615      	mov	r5, r2
 800628a:	fbb6 f1f3 	udiv	r1, r6, r3
 800628e:	fb03 6711 	mls	r7, r3, r1, r6
 8006292:	5dc7      	ldrb	r7, [r0, r7]
 8006294:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006298:	4637      	mov	r7, r6
 800629a:	42bb      	cmp	r3, r7
 800629c:	460e      	mov	r6, r1
 800629e:	d9f4      	bls.n	800628a <_printf_i+0x116>
 80062a0:	2b08      	cmp	r3, #8
 80062a2:	d10b      	bne.n	80062bc <_printf_i+0x148>
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	07de      	lsls	r6, r3, #31
 80062a8:	d508      	bpl.n	80062bc <_printf_i+0x148>
 80062aa:	6923      	ldr	r3, [r4, #16]
 80062ac:	6861      	ldr	r1, [r4, #4]
 80062ae:	4299      	cmp	r1, r3
 80062b0:	bfde      	ittt	le
 80062b2:	2330      	movle	r3, #48	; 0x30
 80062b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062bc:	1b52      	subs	r2, r2, r5
 80062be:	6122      	str	r2, [r4, #16]
 80062c0:	f8cd a000 	str.w	sl, [sp]
 80062c4:	464b      	mov	r3, r9
 80062c6:	aa03      	add	r2, sp, #12
 80062c8:	4621      	mov	r1, r4
 80062ca:	4640      	mov	r0, r8
 80062cc:	f7ff fee4 	bl	8006098 <_printf_common>
 80062d0:	3001      	adds	r0, #1
 80062d2:	d14a      	bne.n	800636a <_printf_i+0x1f6>
 80062d4:	f04f 30ff 	mov.w	r0, #4294967295
 80062d8:	b004      	add	sp, #16
 80062da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	f043 0320 	orr.w	r3, r3, #32
 80062e4:	6023      	str	r3, [r4, #0]
 80062e6:	4833      	ldr	r0, [pc, #204]	; (80063b4 <_printf_i+0x240>)
 80062e8:	2778      	movs	r7, #120	; 0x78
 80062ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	6829      	ldr	r1, [r5, #0]
 80062f2:	061f      	lsls	r7, r3, #24
 80062f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80062f8:	d402      	bmi.n	8006300 <_printf_i+0x18c>
 80062fa:	065f      	lsls	r7, r3, #25
 80062fc:	bf48      	it	mi
 80062fe:	b2b6      	uxthmi	r6, r6
 8006300:	07df      	lsls	r7, r3, #31
 8006302:	bf48      	it	mi
 8006304:	f043 0320 	orrmi.w	r3, r3, #32
 8006308:	6029      	str	r1, [r5, #0]
 800630a:	bf48      	it	mi
 800630c:	6023      	strmi	r3, [r4, #0]
 800630e:	b91e      	cbnz	r6, 8006318 <_printf_i+0x1a4>
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	f023 0320 	bic.w	r3, r3, #32
 8006316:	6023      	str	r3, [r4, #0]
 8006318:	2310      	movs	r3, #16
 800631a:	e7a7      	b.n	800626c <_printf_i+0xf8>
 800631c:	4824      	ldr	r0, [pc, #144]	; (80063b0 <_printf_i+0x23c>)
 800631e:	e7e4      	b.n	80062ea <_printf_i+0x176>
 8006320:	4615      	mov	r5, r2
 8006322:	e7bd      	b.n	80062a0 <_printf_i+0x12c>
 8006324:	682b      	ldr	r3, [r5, #0]
 8006326:	6826      	ldr	r6, [r4, #0]
 8006328:	6961      	ldr	r1, [r4, #20]
 800632a:	1d18      	adds	r0, r3, #4
 800632c:	6028      	str	r0, [r5, #0]
 800632e:	0635      	lsls	r5, r6, #24
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	d501      	bpl.n	8006338 <_printf_i+0x1c4>
 8006334:	6019      	str	r1, [r3, #0]
 8006336:	e002      	b.n	800633e <_printf_i+0x1ca>
 8006338:	0670      	lsls	r0, r6, #25
 800633a:	d5fb      	bpl.n	8006334 <_printf_i+0x1c0>
 800633c:	8019      	strh	r1, [r3, #0]
 800633e:	2300      	movs	r3, #0
 8006340:	6123      	str	r3, [r4, #16]
 8006342:	4615      	mov	r5, r2
 8006344:	e7bc      	b.n	80062c0 <_printf_i+0x14c>
 8006346:	682b      	ldr	r3, [r5, #0]
 8006348:	1d1a      	adds	r2, r3, #4
 800634a:	602a      	str	r2, [r5, #0]
 800634c:	681d      	ldr	r5, [r3, #0]
 800634e:	6862      	ldr	r2, [r4, #4]
 8006350:	2100      	movs	r1, #0
 8006352:	4628      	mov	r0, r5
 8006354:	f7f9 ff3c 	bl	80001d0 <memchr>
 8006358:	b108      	cbz	r0, 800635e <_printf_i+0x1ea>
 800635a:	1b40      	subs	r0, r0, r5
 800635c:	6060      	str	r0, [r4, #4]
 800635e:	6863      	ldr	r3, [r4, #4]
 8006360:	6123      	str	r3, [r4, #16]
 8006362:	2300      	movs	r3, #0
 8006364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006368:	e7aa      	b.n	80062c0 <_printf_i+0x14c>
 800636a:	6923      	ldr	r3, [r4, #16]
 800636c:	462a      	mov	r2, r5
 800636e:	4649      	mov	r1, r9
 8006370:	4640      	mov	r0, r8
 8006372:	47d0      	blx	sl
 8006374:	3001      	adds	r0, #1
 8006376:	d0ad      	beq.n	80062d4 <_printf_i+0x160>
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	079b      	lsls	r3, r3, #30
 800637c:	d413      	bmi.n	80063a6 <_printf_i+0x232>
 800637e:	68e0      	ldr	r0, [r4, #12]
 8006380:	9b03      	ldr	r3, [sp, #12]
 8006382:	4298      	cmp	r0, r3
 8006384:	bfb8      	it	lt
 8006386:	4618      	movlt	r0, r3
 8006388:	e7a6      	b.n	80062d8 <_printf_i+0x164>
 800638a:	2301      	movs	r3, #1
 800638c:	4632      	mov	r2, r6
 800638e:	4649      	mov	r1, r9
 8006390:	4640      	mov	r0, r8
 8006392:	47d0      	blx	sl
 8006394:	3001      	adds	r0, #1
 8006396:	d09d      	beq.n	80062d4 <_printf_i+0x160>
 8006398:	3501      	adds	r5, #1
 800639a:	68e3      	ldr	r3, [r4, #12]
 800639c:	9903      	ldr	r1, [sp, #12]
 800639e:	1a5b      	subs	r3, r3, r1
 80063a0:	42ab      	cmp	r3, r5
 80063a2:	dcf2      	bgt.n	800638a <_printf_i+0x216>
 80063a4:	e7eb      	b.n	800637e <_printf_i+0x20a>
 80063a6:	2500      	movs	r5, #0
 80063a8:	f104 0619 	add.w	r6, r4, #25
 80063ac:	e7f5      	b.n	800639a <_printf_i+0x226>
 80063ae:	bf00      	nop
 80063b0:	08006731 	.word	0x08006731
 80063b4:	08006742 	.word	0x08006742

080063b8 <__sflush_r>:
 80063b8:	898a      	ldrh	r2, [r1, #12]
 80063ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063be:	4605      	mov	r5, r0
 80063c0:	0710      	lsls	r0, r2, #28
 80063c2:	460c      	mov	r4, r1
 80063c4:	d458      	bmi.n	8006478 <__sflush_r+0xc0>
 80063c6:	684b      	ldr	r3, [r1, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	dc05      	bgt.n	80063d8 <__sflush_r+0x20>
 80063cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	dc02      	bgt.n	80063d8 <__sflush_r+0x20>
 80063d2:	2000      	movs	r0, #0
 80063d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063da:	2e00      	cmp	r6, #0
 80063dc:	d0f9      	beq.n	80063d2 <__sflush_r+0x1a>
 80063de:	2300      	movs	r3, #0
 80063e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80063e4:	682f      	ldr	r7, [r5, #0]
 80063e6:	6a21      	ldr	r1, [r4, #32]
 80063e8:	602b      	str	r3, [r5, #0]
 80063ea:	d032      	beq.n	8006452 <__sflush_r+0x9a>
 80063ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80063ee:	89a3      	ldrh	r3, [r4, #12]
 80063f0:	075a      	lsls	r2, r3, #29
 80063f2:	d505      	bpl.n	8006400 <__sflush_r+0x48>
 80063f4:	6863      	ldr	r3, [r4, #4]
 80063f6:	1ac0      	subs	r0, r0, r3
 80063f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80063fa:	b10b      	cbz	r3, 8006400 <__sflush_r+0x48>
 80063fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063fe:	1ac0      	subs	r0, r0, r3
 8006400:	2300      	movs	r3, #0
 8006402:	4602      	mov	r2, r0
 8006404:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006406:	6a21      	ldr	r1, [r4, #32]
 8006408:	4628      	mov	r0, r5
 800640a:	47b0      	blx	r6
 800640c:	1c43      	adds	r3, r0, #1
 800640e:	89a3      	ldrh	r3, [r4, #12]
 8006410:	d106      	bne.n	8006420 <__sflush_r+0x68>
 8006412:	6829      	ldr	r1, [r5, #0]
 8006414:	291d      	cmp	r1, #29
 8006416:	d82b      	bhi.n	8006470 <__sflush_r+0xb8>
 8006418:	4a29      	ldr	r2, [pc, #164]	; (80064c0 <__sflush_r+0x108>)
 800641a:	410a      	asrs	r2, r1
 800641c:	07d6      	lsls	r6, r2, #31
 800641e:	d427      	bmi.n	8006470 <__sflush_r+0xb8>
 8006420:	2200      	movs	r2, #0
 8006422:	6062      	str	r2, [r4, #4]
 8006424:	04d9      	lsls	r1, r3, #19
 8006426:	6922      	ldr	r2, [r4, #16]
 8006428:	6022      	str	r2, [r4, #0]
 800642a:	d504      	bpl.n	8006436 <__sflush_r+0x7e>
 800642c:	1c42      	adds	r2, r0, #1
 800642e:	d101      	bne.n	8006434 <__sflush_r+0x7c>
 8006430:	682b      	ldr	r3, [r5, #0]
 8006432:	b903      	cbnz	r3, 8006436 <__sflush_r+0x7e>
 8006434:	6560      	str	r0, [r4, #84]	; 0x54
 8006436:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006438:	602f      	str	r7, [r5, #0]
 800643a:	2900      	cmp	r1, #0
 800643c:	d0c9      	beq.n	80063d2 <__sflush_r+0x1a>
 800643e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006442:	4299      	cmp	r1, r3
 8006444:	d002      	beq.n	800644c <__sflush_r+0x94>
 8006446:	4628      	mov	r0, r5
 8006448:	f7ff fbea 	bl	8005c20 <_free_r>
 800644c:	2000      	movs	r0, #0
 800644e:	6360      	str	r0, [r4, #52]	; 0x34
 8006450:	e7c0      	b.n	80063d4 <__sflush_r+0x1c>
 8006452:	2301      	movs	r3, #1
 8006454:	4628      	mov	r0, r5
 8006456:	47b0      	blx	r6
 8006458:	1c41      	adds	r1, r0, #1
 800645a:	d1c8      	bne.n	80063ee <__sflush_r+0x36>
 800645c:	682b      	ldr	r3, [r5, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d0c5      	beq.n	80063ee <__sflush_r+0x36>
 8006462:	2b1d      	cmp	r3, #29
 8006464:	d001      	beq.n	800646a <__sflush_r+0xb2>
 8006466:	2b16      	cmp	r3, #22
 8006468:	d101      	bne.n	800646e <__sflush_r+0xb6>
 800646a:	602f      	str	r7, [r5, #0]
 800646c:	e7b1      	b.n	80063d2 <__sflush_r+0x1a>
 800646e:	89a3      	ldrh	r3, [r4, #12]
 8006470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006474:	81a3      	strh	r3, [r4, #12]
 8006476:	e7ad      	b.n	80063d4 <__sflush_r+0x1c>
 8006478:	690f      	ldr	r7, [r1, #16]
 800647a:	2f00      	cmp	r7, #0
 800647c:	d0a9      	beq.n	80063d2 <__sflush_r+0x1a>
 800647e:	0793      	lsls	r3, r2, #30
 8006480:	680e      	ldr	r6, [r1, #0]
 8006482:	bf08      	it	eq
 8006484:	694b      	ldreq	r3, [r1, #20]
 8006486:	600f      	str	r7, [r1, #0]
 8006488:	bf18      	it	ne
 800648a:	2300      	movne	r3, #0
 800648c:	eba6 0807 	sub.w	r8, r6, r7
 8006490:	608b      	str	r3, [r1, #8]
 8006492:	f1b8 0f00 	cmp.w	r8, #0
 8006496:	dd9c      	ble.n	80063d2 <__sflush_r+0x1a>
 8006498:	6a21      	ldr	r1, [r4, #32]
 800649a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800649c:	4643      	mov	r3, r8
 800649e:	463a      	mov	r2, r7
 80064a0:	4628      	mov	r0, r5
 80064a2:	47b0      	blx	r6
 80064a4:	2800      	cmp	r0, #0
 80064a6:	dc06      	bgt.n	80064b6 <__sflush_r+0xfe>
 80064a8:	89a3      	ldrh	r3, [r4, #12]
 80064aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064ae:	81a3      	strh	r3, [r4, #12]
 80064b0:	f04f 30ff 	mov.w	r0, #4294967295
 80064b4:	e78e      	b.n	80063d4 <__sflush_r+0x1c>
 80064b6:	4407      	add	r7, r0
 80064b8:	eba8 0800 	sub.w	r8, r8, r0
 80064bc:	e7e9      	b.n	8006492 <__sflush_r+0xda>
 80064be:	bf00      	nop
 80064c0:	dfbffffe 	.word	0xdfbffffe

080064c4 <_fflush_r>:
 80064c4:	b538      	push	{r3, r4, r5, lr}
 80064c6:	690b      	ldr	r3, [r1, #16]
 80064c8:	4605      	mov	r5, r0
 80064ca:	460c      	mov	r4, r1
 80064cc:	b913      	cbnz	r3, 80064d4 <_fflush_r+0x10>
 80064ce:	2500      	movs	r5, #0
 80064d0:	4628      	mov	r0, r5
 80064d2:	bd38      	pop	{r3, r4, r5, pc}
 80064d4:	b118      	cbz	r0, 80064de <_fflush_r+0x1a>
 80064d6:	6a03      	ldr	r3, [r0, #32]
 80064d8:	b90b      	cbnz	r3, 80064de <_fflush_r+0x1a>
 80064da:	f7ff f99b 	bl	8005814 <__sinit>
 80064de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0f3      	beq.n	80064ce <_fflush_r+0xa>
 80064e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80064e8:	07d0      	lsls	r0, r2, #31
 80064ea:	d404      	bmi.n	80064f6 <_fflush_r+0x32>
 80064ec:	0599      	lsls	r1, r3, #22
 80064ee:	d402      	bmi.n	80064f6 <_fflush_r+0x32>
 80064f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064f2:	f7ff fb84 	bl	8005bfe <__retarget_lock_acquire_recursive>
 80064f6:	4628      	mov	r0, r5
 80064f8:	4621      	mov	r1, r4
 80064fa:	f7ff ff5d 	bl	80063b8 <__sflush_r>
 80064fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006500:	07da      	lsls	r2, r3, #31
 8006502:	4605      	mov	r5, r0
 8006504:	d4e4      	bmi.n	80064d0 <_fflush_r+0xc>
 8006506:	89a3      	ldrh	r3, [r4, #12]
 8006508:	059b      	lsls	r3, r3, #22
 800650a:	d4e1      	bmi.n	80064d0 <_fflush_r+0xc>
 800650c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800650e:	f7ff fb77 	bl	8005c00 <__retarget_lock_release_recursive>
 8006512:	e7dd      	b.n	80064d0 <_fflush_r+0xc>

08006514 <__swhatbuf_r>:
 8006514:	b570      	push	{r4, r5, r6, lr}
 8006516:	460c      	mov	r4, r1
 8006518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800651c:	2900      	cmp	r1, #0
 800651e:	b096      	sub	sp, #88	; 0x58
 8006520:	4615      	mov	r5, r2
 8006522:	461e      	mov	r6, r3
 8006524:	da0d      	bge.n	8006542 <__swhatbuf_r+0x2e>
 8006526:	89a3      	ldrh	r3, [r4, #12]
 8006528:	f013 0f80 	tst.w	r3, #128	; 0x80
 800652c:	f04f 0100 	mov.w	r1, #0
 8006530:	bf0c      	ite	eq
 8006532:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006536:	2340      	movne	r3, #64	; 0x40
 8006538:	2000      	movs	r0, #0
 800653a:	6031      	str	r1, [r6, #0]
 800653c:	602b      	str	r3, [r5, #0]
 800653e:	b016      	add	sp, #88	; 0x58
 8006540:	bd70      	pop	{r4, r5, r6, pc}
 8006542:	466a      	mov	r2, sp
 8006544:	f000 f848 	bl	80065d8 <_fstat_r>
 8006548:	2800      	cmp	r0, #0
 800654a:	dbec      	blt.n	8006526 <__swhatbuf_r+0x12>
 800654c:	9901      	ldr	r1, [sp, #4]
 800654e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006552:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006556:	4259      	negs	r1, r3
 8006558:	4159      	adcs	r1, r3
 800655a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800655e:	e7eb      	b.n	8006538 <__swhatbuf_r+0x24>

08006560 <__smakebuf_r>:
 8006560:	898b      	ldrh	r3, [r1, #12]
 8006562:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006564:	079d      	lsls	r5, r3, #30
 8006566:	4606      	mov	r6, r0
 8006568:	460c      	mov	r4, r1
 800656a:	d507      	bpl.n	800657c <__smakebuf_r+0x1c>
 800656c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006570:	6023      	str	r3, [r4, #0]
 8006572:	6123      	str	r3, [r4, #16]
 8006574:	2301      	movs	r3, #1
 8006576:	6163      	str	r3, [r4, #20]
 8006578:	b002      	add	sp, #8
 800657a:	bd70      	pop	{r4, r5, r6, pc}
 800657c:	ab01      	add	r3, sp, #4
 800657e:	466a      	mov	r2, sp
 8006580:	f7ff ffc8 	bl	8006514 <__swhatbuf_r>
 8006584:	9900      	ldr	r1, [sp, #0]
 8006586:	4605      	mov	r5, r0
 8006588:	4630      	mov	r0, r6
 800658a:	f7ff fbb5 	bl	8005cf8 <_malloc_r>
 800658e:	b948      	cbnz	r0, 80065a4 <__smakebuf_r+0x44>
 8006590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006594:	059a      	lsls	r2, r3, #22
 8006596:	d4ef      	bmi.n	8006578 <__smakebuf_r+0x18>
 8006598:	f023 0303 	bic.w	r3, r3, #3
 800659c:	f043 0302 	orr.w	r3, r3, #2
 80065a0:	81a3      	strh	r3, [r4, #12]
 80065a2:	e7e3      	b.n	800656c <__smakebuf_r+0xc>
 80065a4:	89a3      	ldrh	r3, [r4, #12]
 80065a6:	6020      	str	r0, [r4, #0]
 80065a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ac:	81a3      	strh	r3, [r4, #12]
 80065ae:	9b00      	ldr	r3, [sp, #0]
 80065b0:	6163      	str	r3, [r4, #20]
 80065b2:	9b01      	ldr	r3, [sp, #4]
 80065b4:	6120      	str	r0, [r4, #16]
 80065b6:	b15b      	cbz	r3, 80065d0 <__smakebuf_r+0x70>
 80065b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065bc:	4630      	mov	r0, r6
 80065be:	f000 f81d 	bl	80065fc <_isatty_r>
 80065c2:	b128      	cbz	r0, 80065d0 <__smakebuf_r+0x70>
 80065c4:	89a3      	ldrh	r3, [r4, #12]
 80065c6:	f023 0303 	bic.w	r3, r3, #3
 80065ca:	f043 0301 	orr.w	r3, r3, #1
 80065ce:	81a3      	strh	r3, [r4, #12]
 80065d0:	89a3      	ldrh	r3, [r4, #12]
 80065d2:	431d      	orrs	r5, r3
 80065d4:	81a5      	strh	r5, [r4, #12]
 80065d6:	e7cf      	b.n	8006578 <__smakebuf_r+0x18>

080065d8 <_fstat_r>:
 80065d8:	b538      	push	{r3, r4, r5, lr}
 80065da:	4d07      	ldr	r5, [pc, #28]	; (80065f8 <_fstat_r+0x20>)
 80065dc:	2300      	movs	r3, #0
 80065de:	4604      	mov	r4, r0
 80065e0:	4608      	mov	r0, r1
 80065e2:	4611      	mov	r1, r2
 80065e4:	602b      	str	r3, [r5, #0]
 80065e6:	f7fa fabc 	bl	8000b62 <_fstat>
 80065ea:	1c43      	adds	r3, r0, #1
 80065ec:	d102      	bne.n	80065f4 <_fstat_r+0x1c>
 80065ee:	682b      	ldr	r3, [r5, #0]
 80065f0:	b103      	cbz	r3, 80065f4 <_fstat_r+0x1c>
 80065f2:	6023      	str	r3, [r4, #0]
 80065f4:	bd38      	pop	{r3, r4, r5, pc}
 80065f6:	bf00      	nop
 80065f8:	20004210 	.word	0x20004210

080065fc <_isatty_r>:
 80065fc:	b538      	push	{r3, r4, r5, lr}
 80065fe:	4d06      	ldr	r5, [pc, #24]	; (8006618 <_isatty_r+0x1c>)
 8006600:	2300      	movs	r3, #0
 8006602:	4604      	mov	r4, r0
 8006604:	4608      	mov	r0, r1
 8006606:	602b      	str	r3, [r5, #0]
 8006608:	f7fa fabb 	bl	8000b82 <_isatty>
 800660c:	1c43      	adds	r3, r0, #1
 800660e:	d102      	bne.n	8006616 <_isatty_r+0x1a>
 8006610:	682b      	ldr	r3, [r5, #0]
 8006612:	b103      	cbz	r3, 8006616 <_isatty_r+0x1a>
 8006614:	6023      	str	r3, [r4, #0]
 8006616:	bd38      	pop	{r3, r4, r5, pc}
 8006618:	20004210 	.word	0x20004210

0800661c <_sbrk_r>:
 800661c:	b538      	push	{r3, r4, r5, lr}
 800661e:	4d06      	ldr	r5, [pc, #24]	; (8006638 <_sbrk_r+0x1c>)
 8006620:	2300      	movs	r3, #0
 8006622:	4604      	mov	r4, r0
 8006624:	4608      	mov	r0, r1
 8006626:	602b      	str	r3, [r5, #0]
 8006628:	f7fa fac4 	bl	8000bb4 <_sbrk>
 800662c:	1c43      	adds	r3, r0, #1
 800662e:	d102      	bne.n	8006636 <_sbrk_r+0x1a>
 8006630:	682b      	ldr	r3, [r5, #0]
 8006632:	b103      	cbz	r3, 8006636 <_sbrk_r+0x1a>
 8006634:	6023      	str	r3, [r4, #0]
 8006636:	bd38      	pop	{r3, r4, r5, pc}
 8006638:	20004210 	.word	0x20004210

0800663c <_init>:
 800663c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800663e:	bf00      	nop
 8006640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006642:	bc08      	pop	{r3}
 8006644:	469e      	mov	lr, r3
 8006646:	4770      	bx	lr

08006648 <_fini>:
 8006648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664a:	bf00      	nop
 800664c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800664e:	bc08      	pop	{r3}
 8006650:	469e      	mov	lr, r3
 8006652:	4770      	bx	lr
