
Project6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08006cd4  08006cd4  00016cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d90  08006d90  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08006d90  08006d90  00016d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d98  08006d98  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d98  08006d98  00016d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d9c  08006d9c  00016d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00004740  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200047ac  200047ac  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000150e0  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000347a  00000000  00000000  000351bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013a8  00000000  00000000  00038640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f38  00000000  00000000  000399e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023de5  00000000  00000000  0003a920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000179a1  00000000  00000000  0005e705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d63b2  00000000  00000000  000760a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005988  00000000  00000000  0014c458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  00151de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006cbc 	.word	0x08006cbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08006cbc 	.word	0x08006cbc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	4a07      	ldr	r2, [pc, #28]	; (8000598 <vApplicationGetIdleTaskMemory+0x2c>)
 800057c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <vApplicationGetIdleTaskMemory+0x30>)
 8000582:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000088 	.word	0x20000088
 800059c:	200000dc 	.word	0x200000dc

080005a0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	4a07      	ldr	r2, [pc, #28]	; (80005cc <vApplicationGetTimerTaskMemory+0x2c>)
 80005b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <vApplicationGetTimerTaskMemory+0x30>)
 80005b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005be:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005c0:	bf00      	nop
 80005c2:	3714      	adds	r7, #20
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	200002dc 	.word	0x200002dc
 80005d0:	20000330 	.word	0x20000330

080005d4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005dc:	1d39      	adds	r1, r7, #4
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	2201      	movs	r2, #1
 80005e4:	4803      	ldr	r0, [pc, #12]	; (80005f4 <__io_putchar+0x20>)
 80005e6:	f001 fe5d 	bl	80022a4 <HAL_UART_Transmit>
	return ch;
 80005ea:	687b      	ldr	r3, [r7, #4]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000730 	.word	0x20000730

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b5b0      	push	{r4, r5, r7, lr}
 80005fa:	b08a      	sub	sp, #40	; 0x28
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f000 fb43 	bl	8000c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f833 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f000 f8c5 	bl	8000794 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800060a:	f000 f899 	bl	8000740 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Application start %d\n");
 800060e:	4812      	ldr	r0, [pc, #72]	; (8000658 <main+0x60>)
 8000610:	f005 fc76 	bl	8005f00 <iprintf>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of myTimer01 */
  osTimerDef(myTimer01, Callback01);
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <main+0x64>)
 8000616:	623b      	str	r3, [r7, #32]
 8000618:	2300      	movs	r3, #0
 800061a:	627b      	str	r3, [r7, #36]	; 0x24
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 800061c:	f107 0320 	add.w	r3, r7, #32
 8000620:	2200      	movs	r2, #0
 8000622:	2101      	movs	r1, #1
 8000624:	4618      	mov	r0, r3
 8000626:	f002 fe81 	bl	800332c <osTimerCreate>
 800062a:	4603      	mov	r3, r0
 800062c:	4a0c      	ldr	r2, [pc, #48]	; (8000660 <main+0x68>)
 800062e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, StartTask1, osPriorityNormal, 0, 128);
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <main+0x6c>)
 8000632:	1d3c      	adds	r4, r7, #4
 8000634:	461d      	mov	r5, r3
 8000636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800063e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f002 fe0f 	bl	800326a <osThreadCreate>
 800064c:	4603      	mov	r3, r0
 800064e:	4a06      	ldr	r2, [pc, #24]	; (8000668 <main+0x70>)
 8000650:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000652:	f002 fe03 	bl	800325c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000656:	e7fe      	b.n	8000656 <main+0x5e>
 8000658:	08006cd4 	.word	0x08006cd4
 800065c:	08000831 	.word	0x08000831
 8000660:	2000077c 	.word	0x2000077c
 8000664:	08006cf4 	.word	0x08006cf4
 8000668:	20000778 	.word	0x20000778

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	; 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	2230      	movs	r2, #48	; 0x30
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f005 fd86 	bl	800618c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	4b28      	ldr	r3, [pc, #160]	; (8000738 <SystemClock_Config+0xcc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	4a27      	ldr	r2, [pc, #156]	; (8000738 <SystemClock_Config+0xcc>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	; 0x40
 80006a0:	4b25      	ldr	r3, [pc, #148]	; (8000738 <SystemClock_Config+0xcc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <SystemClock_Config+0xd0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a21      	ldr	r2, [pc, #132]	; (800073c <SystemClock_Config+0xd0>)
 80006b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <SystemClock_Config+0xd0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c8:	2302      	movs	r3, #2
 80006ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	2301      	movs	r3, #1
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d0:	2310      	movs	r3, #16
 80006d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d4:	2302      	movs	r3, #2
 80006d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d8:	2300      	movs	r3, #0
 80006da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006dc:	2308      	movs	r3, #8
 80006de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006e0:	23a8      	movs	r3, #168	; 0xa8
 80006e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e8:	2304      	movs	r3, #4
 80006ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0320 	add.w	r3, r7, #32
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fe1b 	bl	800132c <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006fc:	f000 f8bd 	bl	800087a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	2302      	movs	r3, #2
 8000706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000710:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000716:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2105      	movs	r1, #5
 800071e:	4618      	mov	r0, r3
 8000720:	f001 f87c 	bl	800181c <HAL_RCC_ClockConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800072a:	f000 f8a6 	bl	800087a <Error_Handler>
  }
}
 800072e:	bf00      	nop
 8000730:	3750      	adds	r7, #80	; 0x50
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800
 800073c:	40007000 	.word	0x40007000

08000740 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_USART1_UART_Init+0x4c>)
 8000746:	4a12      	ldr	r2, [pc, #72]	; (8000790 <MX_USART1_UART_Init+0x50>)
 8000748:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_USART1_UART_Init+0x4c>)
 800074c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000750:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_USART1_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_USART1_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_USART1_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_USART1_UART_Init+0x4c>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_USART1_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_USART1_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_USART1_UART_Init+0x4c>)
 8000778:	f001 fd44 	bl	8002204 <HAL_UART_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000782:	f000 f87a 	bl	800087a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000730 	.word	0x20000730
 8000790:	40011000 	.word	0x40011000

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_GPIO_Init+0x68>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a16      	ldr	r2, [pc, #88]	; (80007fc <MX_GPIO_Init+0x68>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_GPIO_Init+0x68>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_GPIO_Init+0x68>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <MX_GPIO_Init+0x68>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <MX_GPIO_Init+0x68>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_GPIO_Init+0x68>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a08      	ldr	r2, [pc, #32]	; (80007fc <MX_GPIO_Init+0x68>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_GPIO_Init+0x68>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800

08000800 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void const * argument)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osTimerStart(myTimer01Handle,1000);
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <StartTask1+0x28>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000810:	4618      	mov	r0, r3
 8000812:	f002 fdbf 	bl	8003394 <osTimerStart>
	/* Infinite loop */
	for(;;)
	{
	   osDelay(2000);
 8000816:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800081a:	f002 fd72 	bl	8003302 <osDelay>
	   printf("Task1 Print\n");	//string minimized due to printf timing issues
 800081e:	4803      	ldr	r0, [pc, #12]	; (800082c <StartTask1+0x2c>)
 8000820:	f005 fbd4 	bl	8005fcc <puts>
	   osDelay(2000);
 8000824:	e7f7      	b.n	8000816 <StartTask1+0x16>
 8000826:	bf00      	nop
 8000828:	2000077c 	.word	0x2000077c
 800082c:	08006d10 	.word	0x08006d10

08000830 <Callback01>:
  /* USER CODE END 5 */
}

/* Callback01 function */
void Callback01(void const * argument)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
	osTimerStart(myTimer01Handle,1000);
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <Callback01+0x24>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000840:	4618      	mov	r0, r3
 8000842:	f002 fda7 	bl	8003394 <osTimerStart>
	/* Infinite loop */
//	osDelay(2000); //not osDelay
	printf("Timer Print\n");	//string minimized due to printf timing issues
 8000846:	4804      	ldr	r0, [pc, #16]	; (8000858 <Callback01+0x28>)
 8000848:	f005 fbc0 	bl	8005fcc <puts>
  /* USER CODE END Callback01 */
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	2000077c 	.word	0x2000077c
 8000858:	08006d1c 	.word	0x08006d1c

0800085c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800086c:	d101      	bne.n	8000872 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800086e:	f000 fa2d 	bl	8000ccc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087e:	b672      	cpsid	i
}
 8000880:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000882:	e7fe      	b.n	8000882 <Error_Handler+0x8>

08000884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_MspInit+0x54>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000892:	4a11      	ldr	r2, [pc, #68]	; (80008d8 <HAL_MspInit+0x54>)
 8000894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000898:	6453      	str	r3, [r2, #68]	; 0x44
 800089a:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <HAL_MspInit+0x54>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <HAL_MspInit+0x54>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	4a0a      	ldr	r2, [pc, #40]	; (80008d8 <HAL_MspInit+0x54>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b4:	6413      	str	r3, [r2, #64]	; 0x40
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <HAL_MspInit+0x54>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	210f      	movs	r1, #15
 80008c6:	f06f 0001 	mvn.w	r0, #1
 80008ca:	f000 fad7 	bl	8000e7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800

080008dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a1d      	ldr	r2, [pc, #116]	; (8000970 <HAL_UART_MspInit+0x94>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d134      	bne.n	8000968 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <HAL_UART_MspInit+0x98>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000906:	4a1b      	ldr	r2, [pc, #108]	; (8000974 <HAL_UART_MspInit+0x98>)
 8000908:	f043 0310 	orr.w	r3, r3, #16
 800090c:	6453      	str	r3, [r2, #68]	; 0x44
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <HAL_UART_MspInit+0x98>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000912:	f003 0310 	and.w	r3, r3, #16
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <HAL_UART_MspInit+0x98>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a14      	ldr	r2, [pc, #80]	; (8000974 <HAL_UART_MspInit+0x98>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b12      	ldr	r3, [pc, #72]	; (8000974 <HAL_UART_MspInit+0x98>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000936:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800093a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000948:	2307      	movs	r3, #7
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4619      	mov	r1, r3
 8000952:	4809      	ldr	r0, [pc, #36]	; (8000978 <HAL_UART_MspInit+0x9c>)
 8000954:	f000 fb4e 	bl	8000ff4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	2105      	movs	r1, #5
 800095c:	2025      	movs	r0, #37	; 0x25
 800095e:	f000 fa8d 	bl	8000e7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000962:	2025      	movs	r0, #37	; 0x25
 8000964:	f000 faa6 	bl	8000eb4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000968:	bf00      	nop
 800096a:	3728      	adds	r7, #40	; 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40011000 	.word	0x40011000
 8000974:	40023800 	.word	0x40023800
 8000978:	40020000 	.word	0x40020000

0800097c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08e      	sub	sp, #56	; 0x38
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000984:	2300      	movs	r3, #0
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	4b34      	ldr	r3, [pc, #208]	; (8000a64 <HAL_InitTick+0xe8>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000994:	4a33      	ldr	r2, [pc, #204]	; (8000a64 <HAL_InitTick+0xe8>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	6413      	str	r3, [r2, #64]	; 0x40
 800099c:	4b31      	ldr	r3, [pc, #196]	; (8000a64 <HAL_InitTick+0xe8>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009a8:	f107 0210 	add.w	r2, r7, #16
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4611      	mov	r1, r2
 80009b2:	4618      	mov	r0, r3
 80009b4:	f001 f952 	bl	8001c5c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009b8:	6a3b      	ldr	r3, [r7, #32]
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d103      	bne.n	80009ca <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009c2:	f001 f923 	bl	8001c0c <HAL_RCC_GetPCLK1Freq>
 80009c6:	6378      	str	r0, [r7, #52]	; 0x34
 80009c8:	e004      	b.n	80009d4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009ca:	f001 f91f 	bl	8001c0c <HAL_RCC_GetPCLK1Freq>
 80009ce:	4603      	mov	r3, r0
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009d6:	4a24      	ldr	r2, [pc, #144]	; (8000a68 <HAL_InitTick+0xec>)
 80009d8:	fba2 2303 	umull	r2, r3, r2, r3
 80009dc:	0c9b      	lsrs	r3, r3, #18
 80009de:	3b01      	subs	r3, #1
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80009e2:	4b22      	ldr	r3, [pc, #136]	; (8000a6c <HAL_InitTick+0xf0>)
 80009e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80009ea:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <HAL_InitTick+0xf0>)
 80009ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009f0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80009f2:	4a1e      	ldr	r2, [pc, #120]	; (8000a6c <HAL_InitTick+0xf0>)
 80009f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80009f8:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <HAL_InitTick+0xf0>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fe:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <HAL_InitTick+0xf0>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <HAL_InitTick+0xf0>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000a0a:	4818      	ldr	r0, [pc, #96]	; (8000a6c <HAL_InitTick+0xf0>)
 8000a0c:	f001 f958 	bl	8001cc0 <HAL_TIM_Base_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d11b      	bne.n	8000a56 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000a1e:	4813      	ldr	r0, [pc, #76]	; (8000a6c <HAL_InitTick+0xf0>)
 8000a20:	f001 f9a8 	bl	8001d74 <HAL_TIM_Base_Start_IT>
 8000a24:	4603      	mov	r3, r0
 8000a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d111      	bne.n	8000a56 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a32:	201c      	movs	r0, #28
 8000a34:	f000 fa3e 	bl	8000eb4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2b0f      	cmp	r3, #15
 8000a3c:	d808      	bhi.n	8000a50 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	6879      	ldr	r1, [r7, #4]
 8000a42:	201c      	movs	r0, #28
 8000a44:	f000 fa1a 	bl	8000e7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a48:	4a09      	ldr	r2, [pc, #36]	; (8000a70 <HAL_InitTick+0xf4>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6013      	str	r3, [r2, #0]
 8000a4e:	e002      	b.n	8000a56 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000a50:	2301      	movs	r3, #1
 8000a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3738      	adds	r7, #56	; 0x38
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800
 8000a68:	431bde83 	.word	0x431bde83
 8000a6c:	20000780 	.word	0x20000780
 8000a70:	20000004 	.word	0x20000004

08000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a78:	e7fe      	b.n	8000a78 <NMI_Handler+0x4>

08000a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <HardFault_Handler+0x4>

08000a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <MemManage_Handler+0x4>

08000a86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <BusFault_Handler+0x4>

08000a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <UsageFault_Handler+0x4>

08000a92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <TIM2_IRQHandler+0x10>)
 8000aa6:	f001 f9d5 	bl	8001e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000780 	.word	0x20000780

08000ab4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <USART1_IRQHandler+0x10>)
 8000aba:	f001 fc7f 	bl	80023bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000730 	.word	0x20000730

08000ac8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	e00a      	b.n	8000af0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ada:	f3af 8000 	nop.w
 8000ade:	4601      	mov	r1, r0
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	60ba      	str	r2, [r7, #8]
 8000ae6:	b2ca      	uxtb	r2, r1
 8000ae8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	3301      	adds	r3, #1
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	dbf0      	blt.n	8000ada <_read+0x12>
  }

  return len;
 8000af8:	687b      	ldr	r3, [r7, #4]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b086      	sub	sp, #24
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	60f8      	str	r0, [r7, #12]
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
 8000b12:	e009      	b.n	8000b28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	1c5a      	adds	r2, r3, #1
 8000b18:	60ba      	str	r2, [r7, #8]
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fd59 	bl	80005d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	3301      	adds	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	697a      	ldr	r2, [r7, #20]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	dbf1      	blt.n	8000b14 <_write+0x12>
  }
  return len;
 8000b30:	687b      	ldr	r3, [r7, #4]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <_close>:

int _close(int file)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
 8000b5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b62:	605a      	str	r2, [r3, #4]
  return 0;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <_isatty>:

int _isatty(int file)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bac:	4a14      	ldr	r2, [pc, #80]	; (8000c00 <_sbrk+0x5c>)
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <_sbrk+0x60>)
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <_sbrk+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d102      	bne.n	8000bc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <_sbrk+0x64>)
 8000bc2:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <_sbrk+0x68>)
 8000bc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <_sbrk+0x64>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d207      	bcs.n	8000be4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd4:	f005 fb28 	bl	8006228 <__errno>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	220c      	movs	r2, #12
 8000bdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
 8000be2:	e009      	b.n	8000bf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <_sbrk+0x64>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bea:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <_sbrk+0x64>)
 8000bf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20020000 	.word	0x20020000
 8000c04:	00000400 	.word	0x00000400
 8000c08:	200007c8 	.word	0x200007c8
 8000c0c:	200047b0 	.word	0x200047b0

08000c10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <SystemInit+0x20>)
 8000c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <SystemInit+0x20>)
 8000c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c6c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c38:	f7ff ffea 	bl	8000c10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c3c:	480c      	ldr	r0, [pc, #48]	; (8000c70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c3e:	490d      	ldr	r1, [pc, #52]	; (8000c74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c40:	4a0d      	ldr	r2, [pc, #52]	; (8000c78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c44:	e002      	b.n	8000c4c <LoopCopyDataInit>

08000c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4a:	3304      	adds	r3, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c50:	d3f9      	bcc.n	8000c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c52:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c54:	4c0a      	ldr	r4, [pc, #40]	; (8000c80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c58:	e001      	b.n	8000c5e <LoopFillZerobss>

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5c:	3204      	adds	r2, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c62:	f005 fae7 	bl	8006234 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c66:	f7ff fcc7 	bl	80005f8 <main>
  bx  lr    
 8000c6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c74:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c78:	08006da0 	.word	0x08006da0
  ldr r2, =_sbss
 8000c7c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c80:	200047ac 	.word	0x200047ac

08000c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c84:	e7fe      	b.n	8000c84 <ADC_IRQHandler>
	...

08000c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0d      	ldr	r2, [pc, #52]	; (8000cc8 <HAL_Init+0x40>)
 8000c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <HAL_Init+0x40>)
 8000c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <HAL_Init+0x40>)
 8000caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 f8d8 	bl	8000e66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb6:	200f      	movs	r0, #15
 8000cb8:	f7ff fe60 	bl	800097c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cbc:	f7ff fde2 	bl	8000884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40023c00 	.word	0x40023c00

08000ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_IncTick+0x20>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_IncTick+0x24>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <HAL_IncTick+0x24>)
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	200007cc 	.word	0x200007cc

08000cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <HAL_GetTick+0x14>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	200007cc 	.word	0x200007cc

08000d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3e:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	60d3      	str	r3, [r2, #12]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <__NVIC_GetPriorityGrouping+0x18>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	f003 0307 	and.w	r3, r3, #7
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	db0b      	blt.n	8000d9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	f003 021f 	and.w	r2, r3, #31
 8000d88:	4907      	ldr	r1, [pc, #28]	; (8000da8 <__NVIC_EnableIRQ+0x38>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	095b      	lsrs	r3, r3, #5
 8000d90:	2001      	movs	r0, #1
 8000d92:	fa00 f202 	lsl.w	r2, r0, r2
 8000d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000e100 	.word	0xe000e100

08000dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	db0a      	blt.n	8000dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	490c      	ldr	r1, [pc, #48]	; (8000df8 <__NVIC_SetPriority+0x4c>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	0112      	lsls	r2, r2, #4
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	440b      	add	r3, r1
 8000dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd4:	e00a      	b.n	8000dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4908      	ldr	r1, [pc, #32]	; (8000dfc <__NVIC_SetPriority+0x50>)
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	3b04      	subs	r3, #4
 8000de4:	0112      	lsls	r2, r2, #4
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	440b      	add	r3, r1
 8000dea:	761a      	strb	r2, [r3, #24]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000e100 	.word	0xe000e100
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b089      	sub	sp, #36	; 0x24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f1c3 0307 	rsb	r3, r3, #7
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	bf28      	it	cs
 8000e1e:	2304      	movcs	r3, #4
 8000e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3304      	adds	r3, #4
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d902      	bls.n	8000e30 <NVIC_EncodePriority+0x30>
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3b03      	subs	r3, #3
 8000e2e:	e000      	b.n	8000e32 <NVIC_EncodePriority+0x32>
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	f04f 32ff 	mov.w	r2, #4294967295
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	401a      	ands	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e48:	f04f 31ff 	mov.w	r1, #4294967295
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e52:	43d9      	mvns	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	4313      	orrs	r3, r2
         );
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3724      	adds	r7, #36	; 0x24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ff4c 	bl	8000d0c <__NVIC_SetPriorityGrouping>
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e8e:	f7ff ff61 	bl	8000d54 <__NVIC_GetPriorityGrouping>
 8000e92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	68b9      	ldr	r1, [r7, #8]
 8000e98:	6978      	ldr	r0, [r7, #20]
 8000e9a:	f7ff ffb1 	bl	8000e00 <NVIC_EncodePriority>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ff80 	bl	8000dac <__NVIC_SetPriority>
}
 8000eac:	bf00      	nop
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ff54 	bl	8000d70 <__NVIC_EnableIRQ>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000edc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ede:	f7ff ff09 	bl	8000cf4 <HAL_GetTick>
 8000ee2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d008      	beq.n	8000f02 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2280      	movs	r2, #128	; 0x80
 8000ef4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e052      	b.n	8000fa8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f022 0216 	bic.w	r2, r2, #22
 8000f10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	695a      	ldr	r2, [r3, #20]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f20:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d103      	bne.n	8000f32 <HAL_DMA_Abort+0x62>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d007      	beq.n	8000f42 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f022 0208 	bic.w	r2, r2, #8
 8000f40:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f022 0201 	bic.w	r2, r2, #1
 8000f50:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f52:	e013      	b.n	8000f7c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f54:	f7ff fece 	bl	8000cf4 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b05      	cmp	r3, #5
 8000f60:	d90c      	bls.n	8000f7c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2220      	movs	r2, #32
 8000f66:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e015      	b.n	8000fa8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1e4      	bne.n	8000f54 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f8e:	223f      	movs	r2, #63	; 0x3f
 8000f90:	409a      	lsls	r2, r3
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d004      	beq.n	8000fce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2280      	movs	r2, #128	; 0x80
 8000fc8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00c      	b.n	8000fe8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2205      	movs	r2, #5
 8000fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f022 0201 	bic.w	r2, r2, #1
 8000fe4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	; 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
 800100e:	e16b      	b.n	80012e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001010:	2201      	movs	r2, #1
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	429a      	cmp	r2, r3
 800102a:	f040 815a 	bne.w	80012e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 0303 	and.w	r3, r3, #3
 8001036:	2b01      	cmp	r3, #1
 8001038:	d005      	beq.n	8001046 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001042:	2b02      	cmp	r3, #2
 8001044:	d130      	bne.n	80010a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	2203      	movs	r2, #3
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	68da      	ldr	r2, [r3, #12]
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800107c:	2201      	movs	r2, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	091b      	lsrs	r3, r3, #4
 8001092:	f003 0201 	and.w	r2, r3, #1
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d017      	beq.n	80010e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d123      	bne.n	8001138 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	08da      	lsrs	r2, r3, #3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3208      	adds	r2, #8
 80010f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	f003 0307 	and.w	r3, r3, #7
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	220f      	movs	r2, #15
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	691a      	ldr	r2, [r3, #16]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	08da      	lsrs	r2, r3, #3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3208      	adds	r2, #8
 8001132:	69b9      	ldr	r1, [r7, #24]
 8001134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0203 	and.w	r2, r3, #3
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 80b4 	beq.w	80012e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	4b60      	ldr	r3, [pc, #384]	; (8001300 <HAL_GPIO_Init+0x30c>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	4a5f      	ldr	r2, [pc, #380]	; (8001300 <HAL_GPIO_Init+0x30c>)
 8001184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001188:	6453      	str	r3, [r2, #68]	; 0x44
 800118a:	4b5d      	ldr	r3, [pc, #372]	; (8001300 <HAL_GPIO_Init+0x30c>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001196:	4a5b      	ldr	r2, [pc, #364]	; (8001304 <HAL_GPIO_Init+0x310>)
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	089b      	lsrs	r3, r3, #2
 800119c:	3302      	adds	r3, #2
 800119e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	220f      	movs	r2, #15
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a52      	ldr	r2, [pc, #328]	; (8001308 <HAL_GPIO_Init+0x314>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d02b      	beq.n	800121a <HAL_GPIO_Init+0x226>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a51      	ldr	r2, [pc, #324]	; (800130c <HAL_GPIO_Init+0x318>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d025      	beq.n	8001216 <HAL_GPIO_Init+0x222>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a50      	ldr	r2, [pc, #320]	; (8001310 <HAL_GPIO_Init+0x31c>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d01f      	beq.n	8001212 <HAL_GPIO_Init+0x21e>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4f      	ldr	r2, [pc, #316]	; (8001314 <HAL_GPIO_Init+0x320>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d019      	beq.n	800120e <HAL_GPIO_Init+0x21a>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4e      	ldr	r2, [pc, #312]	; (8001318 <HAL_GPIO_Init+0x324>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d013      	beq.n	800120a <HAL_GPIO_Init+0x216>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4d      	ldr	r2, [pc, #308]	; (800131c <HAL_GPIO_Init+0x328>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d00d      	beq.n	8001206 <HAL_GPIO_Init+0x212>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4c      	ldr	r2, [pc, #304]	; (8001320 <HAL_GPIO_Init+0x32c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d007      	beq.n	8001202 <HAL_GPIO_Init+0x20e>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4b      	ldr	r2, [pc, #300]	; (8001324 <HAL_GPIO_Init+0x330>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d101      	bne.n	80011fe <HAL_GPIO_Init+0x20a>
 80011fa:	2307      	movs	r3, #7
 80011fc:	e00e      	b.n	800121c <HAL_GPIO_Init+0x228>
 80011fe:	2308      	movs	r3, #8
 8001200:	e00c      	b.n	800121c <HAL_GPIO_Init+0x228>
 8001202:	2306      	movs	r3, #6
 8001204:	e00a      	b.n	800121c <HAL_GPIO_Init+0x228>
 8001206:	2305      	movs	r3, #5
 8001208:	e008      	b.n	800121c <HAL_GPIO_Init+0x228>
 800120a:	2304      	movs	r3, #4
 800120c:	e006      	b.n	800121c <HAL_GPIO_Init+0x228>
 800120e:	2303      	movs	r3, #3
 8001210:	e004      	b.n	800121c <HAL_GPIO_Init+0x228>
 8001212:	2302      	movs	r3, #2
 8001214:	e002      	b.n	800121c <HAL_GPIO_Init+0x228>
 8001216:	2301      	movs	r3, #1
 8001218:	e000      	b.n	800121c <HAL_GPIO_Init+0x228>
 800121a:	2300      	movs	r3, #0
 800121c:	69fa      	ldr	r2, [r7, #28]
 800121e:	f002 0203 	and.w	r2, r2, #3
 8001222:	0092      	lsls	r2, r2, #2
 8001224:	4093      	lsls	r3, r2
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800122c:	4935      	ldr	r1, [pc, #212]	; (8001304 <HAL_GPIO_Init+0x310>)
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	089b      	lsrs	r3, r3, #2
 8001232:	3302      	adds	r3, #2
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800123a:	4b3b      	ldr	r3, [pc, #236]	; (8001328 <HAL_GPIO_Init+0x334>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800125e:	4a32      	ldr	r2, [pc, #200]	; (8001328 <HAL_GPIO_Init+0x334>)
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001264:	4b30      	ldr	r3, [pc, #192]	; (8001328 <HAL_GPIO_Init+0x334>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001288:	4a27      	ldr	r2, [pc, #156]	; (8001328 <HAL_GPIO_Init+0x334>)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800128e:	4b26      	ldr	r3, [pc, #152]	; (8001328 <HAL_GPIO_Init+0x334>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012b2:	4a1d      	ldr	r2, [pc, #116]	; (8001328 <HAL_GPIO_Init+0x334>)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <HAL_GPIO_Init+0x334>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012dc:	4a12      	ldr	r2, [pc, #72]	; (8001328 <HAL_GPIO_Init+0x334>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3301      	adds	r3, #1
 80012e6:	61fb      	str	r3, [r7, #28]
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	2b0f      	cmp	r3, #15
 80012ec:	f67f ae90 	bls.w	8001010 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3724      	adds	r7, #36	; 0x24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800
 8001304:	40013800 	.word	0x40013800
 8001308:	40020000 	.word	0x40020000
 800130c:	40020400 	.word	0x40020400
 8001310:	40020800 	.word	0x40020800
 8001314:	40020c00 	.word	0x40020c00
 8001318:	40021000 	.word	0x40021000
 800131c:	40021400 	.word	0x40021400
 8001320:	40021800 	.word	0x40021800
 8001324:	40021c00 	.word	0x40021c00
 8001328:	40013c00 	.word	0x40013c00

0800132c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e267      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	2b00      	cmp	r3, #0
 8001348:	d075      	beq.n	8001436 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800134a:	4b88      	ldr	r3, [pc, #544]	; (800156c <HAL_RCC_OscConfig+0x240>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b04      	cmp	r3, #4
 8001354:	d00c      	beq.n	8001370 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001356:	4b85      	ldr	r3, [pc, #532]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800135e:	2b08      	cmp	r3, #8
 8001360:	d112      	bne.n	8001388 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001362:	4b82      	ldr	r3, [pc, #520]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800136a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800136e:	d10b      	bne.n	8001388 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001370:	4b7e      	ldr	r3, [pc, #504]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d05b      	beq.n	8001434 <HAL_RCC_OscConfig+0x108>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d157      	bne.n	8001434 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e242      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001390:	d106      	bne.n	80013a0 <HAL_RCC_OscConfig+0x74>
 8001392:	4b76      	ldr	r3, [pc, #472]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a75      	ldr	r2, [pc, #468]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	e01d      	b.n	80013dc <HAL_RCC_OscConfig+0xb0>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013a8:	d10c      	bne.n	80013c4 <HAL_RCC_OscConfig+0x98>
 80013aa:	4b70      	ldr	r3, [pc, #448]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a6f      	ldr	r2, [pc, #444]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80013b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	4b6d      	ldr	r3, [pc, #436]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a6c      	ldr	r2, [pc, #432]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80013bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	e00b      	b.n	80013dc <HAL_RCC_OscConfig+0xb0>
 80013c4:	4b69      	ldr	r3, [pc, #420]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a68      	ldr	r2, [pc, #416]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80013ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	4b66      	ldr	r3, [pc, #408]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a65      	ldr	r2, [pc, #404]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80013d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d013      	beq.n	800140c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e4:	f7ff fc86 	bl	8000cf4 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ec:	f7ff fc82 	bl	8000cf4 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b64      	cmp	r3, #100	; 0x64
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e207      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fe:	4b5b      	ldr	r3, [pc, #364]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0f0      	beq.n	80013ec <HAL_RCC_OscConfig+0xc0>
 800140a:	e014      	b.n	8001436 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140c:	f7ff fc72 	bl	8000cf4 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001414:	f7ff fc6e 	bl	8000cf4 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b64      	cmp	r3, #100	; 0x64
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e1f3      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001426:	4b51      	ldr	r3, [pc, #324]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0xe8>
 8001432:	e000      	b.n	8001436 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d063      	beq.n	800150a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001442:	4b4a      	ldr	r3, [pc, #296]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00b      	beq.n	8001466 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800144e:	4b47      	ldr	r3, [pc, #284]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001456:	2b08      	cmp	r3, #8
 8001458:	d11c      	bne.n	8001494 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800145a:	4b44      	ldr	r3, [pc, #272]	; (800156c <HAL_RCC_OscConfig+0x240>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d116      	bne.n	8001494 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001466:	4b41      	ldr	r3, [pc, #260]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d005      	beq.n	800147e <HAL_RCC_OscConfig+0x152>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d001      	beq.n	800147e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e1c7      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147e:	4b3b      	ldr	r3, [pc, #236]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	4937      	ldr	r1, [pc, #220]	; (800156c <HAL_RCC_OscConfig+0x240>)
 800148e:	4313      	orrs	r3, r2
 8001490:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001492:	e03a      	b.n	800150a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d020      	beq.n	80014de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800149c:	4b34      	ldr	r3, [pc, #208]	; (8001570 <HAL_RCC_OscConfig+0x244>)
 800149e:	2201      	movs	r2, #1
 80014a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a2:	f7ff fc27 	bl	8000cf4 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014aa:	f7ff fc23 	bl	8000cf4 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e1a8      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014bc:	4b2b      	ldr	r3, [pc, #172]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0f0      	beq.n	80014aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c8:	4b28      	ldr	r3, [pc, #160]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	4925      	ldr	r1, [pc, #148]	; (800156c <HAL_RCC_OscConfig+0x240>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	600b      	str	r3, [r1, #0]
 80014dc:	e015      	b.n	800150a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014de:	4b24      	ldr	r3, [pc, #144]	; (8001570 <HAL_RCC_OscConfig+0x244>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e4:	f7ff fc06 	bl	8000cf4 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ec:	f7ff fc02 	bl	8000cf4 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e187      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fe:	4b1b      	ldr	r3, [pc, #108]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d036      	beq.n	8001584 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d016      	beq.n	800154c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <HAL_RCC_OscConfig+0x248>)
 8001520:	2201      	movs	r2, #1
 8001522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001524:	f7ff fbe6 	bl	8000cf4 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800152c:	f7ff fbe2 	bl	8000cf4 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e167      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <HAL_RCC_OscConfig+0x240>)
 8001540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f0      	beq.n	800152c <HAL_RCC_OscConfig+0x200>
 800154a:	e01b      	b.n	8001584 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <HAL_RCC_OscConfig+0x248>)
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001552:	f7ff fbcf 	bl	8000cf4 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001558:	e00e      	b.n	8001578 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800155a:	f7ff fbcb 	bl	8000cf4 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d907      	bls.n	8001578 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e150      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
 800156c:	40023800 	.word	0x40023800
 8001570:	42470000 	.word	0x42470000
 8001574:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001578:	4b88      	ldr	r3, [pc, #544]	; (800179c <HAL_RCC_OscConfig+0x470>)
 800157a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1ea      	bne.n	800155a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 8097 	beq.w	80016c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001592:	2300      	movs	r3, #0
 8001594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001596:	4b81      	ldr	r3, [pc, #516]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10f      	bne.n	80015c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	4b7d      	ldr	r3, [pc, #500]	; (800179c <HAL_RCC_OscConfig+0x470>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	4a7c      	ldr	r2, [pc, #496]	; (800179c <HAL_RCC_OscConfig+0x470>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b0:	6413      	str	r3, [r2, #64]	; 0x40
 80015b2:	4b7a      	ldr	r3, [pc, #488]	; (800179c <HAL_RCC_OscConfig+0x470>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015be:	2301      	movs	r3, #1
 80015c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c2:	4b77      	ldr	r3, [pc, #476]	; (80017a0 <HAL_RCC_OscConfig+0x474>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d118      	bne.n	8001600 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ce:	4b74      	ldr	r3, [pc, #464]	; (80017a0 <HAL_RCC_OscConfig+0x474>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a73      	ldr	r2, [pc, #460]	; (80017a0 <HAL_RCC_OscConfig+0x474>)
 80015d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015da:	f7ff fb8b 	bl	8000cf4 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015e2:	f7ff fb87 	bl	8000cf4 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e10c      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f4:	4b6a      	ldr	r3, [pc, #424]	; (80017a0 <HAL_RCC_OscConfig+0x474>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0f0      	beq.n	80015e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d106      	bne.n	8001616 <HAL_RCC_OscConfig+0x2ea>
 8001608:	4b64      	ldr	r3, [pc, #400]	; (800179c <HAL_RCC_OscConfig+0x470>)
 800160a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160c:	4a63      	ldr	r2, [pc, #396]	; (800179c <HAL_RCC_OscConfig+0x470>)
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	6713      	str	r3, [r2, #112]	; 0x70
 8001614:	e01c      	b.n	8001650 <HAL_RCC_OscConfig+0x324>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b05      	cmp	r3, #5
 800161c:	d10c      	bne.n	8001638 <HAL_RCC_OscConfig+0x30c>
 800161e:	4b5f      	ldr	r3, [pc, #380]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001622:	4a5e      	ldr	r2, [pc, #376]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	6713      	str	r3, [r2, #112]	; 0x70
 800162a:	4b5c      	ldr	r3, [pc, #368]	; (800179c <HAL_RCC_OscConfig+0x470>)
 800162c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162e:	4a5b      	ldr	r2, [pc, #364]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6713      	str	r3, [r2, #112]	; 0x70
 8001636:	e00b      	b.n	8001650 <HAL_RCC_OscConfig+0x324>
 8001638:	4b58      	ldr	r3, [pc, #352]	; (800179c <HAL_RCC_OscConfig+0x470>)
 800163a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163c:	4a57      	ldr	r2, [pc, #348]	; (800179c <HAL_RCC_OscConfig+0x470>)
 800163e:	f023 0301 	bic.w	r3, r3, #1
 8001642:	6713      	str	r3, [r2, #112]	; 0x70
 8001644:	4b55      	ldr	r3, [pc, #340]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001648:	4a54      	ldr	r2, [pc, #336]	; (800179c <HAL_RCC_OscConfig+0x470>)
 800164a:	f023 0304 	bic.w	r3, r3, #4
 800164e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d015      	beq.n	8001684 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001658:	f7ff fb4c 	bl	8000cf4 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165e:	e00a      	b.n	8001676 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001660:	f7ff fb48 	bl	8000cf4 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	f241 3288 	movw	r2, #5000	; 0x1388
 800166e:	4293      	cmp	r3, r2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e0cb      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001676:	4b49      	ldr	r3, [pc, #292]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0ee      	beq.n	8001660 <HAL_RCC_OscConfig+0x334>
 8001682:	e014      	b.n	80016ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001684:	f7ff fb36 	bl	8000cf4 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168a:	e00a      	b.n	80016a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800168c:	f7ff fb32 	bl	8000cf4 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f241 3288 	movw	r2, #5000	; 0x1388
 800169a:	4293      	cmp	r3, r2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e0b5      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a2:	4b3e      	ldr	r3, [pc, #248]	; (800179c <HAL_RCC_OscConfig+0x470>)
 80016a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1ee      	bne.n	800168c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016ae:	7dfb      	ldrb	r3, [r7, #23]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d105      	bne.n	80016c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b4:	4b39      	ldr	r3, [pc, #228]	; (800179c <HAL_RCC_OscConfig+0x470>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	4a38      	ldr	r2, [pc, #224]	; (800179c <HAL_RCC_OscConfig+0x470>)
 80016ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 80a1 	beq.w	800180c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016ca:	4b34      	ldr	r3, [pc, #208]	; (800179c <HAL_RCC_OscConfig+0x470>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d05c      	beq.n	8001790 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d141      	bne.n	8001762 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016de:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <HAL_RCC_OscConfig+0x478>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e4:	f7ff fb06 	bl	8000cf4 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ec:	f7ff fb02 	bl	8000cf4 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e087      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fe:	4b27      	ldr	r3, [pc, #156]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69da      	ldr	r2, [r3, #28]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001718:	019b      	lsls	r3, r3, #6
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001720:	085b      	lsrs	r3, r3, #1
 8001722:	3b01      	subs	r3, #1
 8001724:	041b      	lsls	r3, r3, #16
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172c:	061b      	lsls	r3, r3, #24
 800172e:	491b      	ldr	r1, [pc, #108]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001730:	4313      	orrs	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <HAL_RCC_OscConfig+0x478>)
 8001736:	2201      	movs	r2, #1
 8001738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173a:	f7ff fadb 	bl	8000cf4 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001742:	f7ff fad7 	bl	8000cf4 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e05c      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0x416>
 8001760:	e054      	b.n	800180c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <HAL_RCC_OscConfig+0x478>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001768:	f7ff fac4 	bl	8000cf4 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001770:	f7ff fac0 	bl	8000cf4 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e045      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_RCC_OscConfig+0x470>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x444>
 800178e:	e03d      	b.n	800180c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d107      	bne.n	80017a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e038      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
 800179c:	40023800 	.word	0x40023800
 80017a0:	40007000 	.word	0x40007000
 80017a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <HAL_RCC_OscConfig+0x4ec>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d028      	beq.n	8001808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d121      	bne.n	8001808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d11a      	bne.n	8001808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017d8:	4013      	ands	r3, r2
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d111      	bne.n	8001808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ee:	085b      	lsrs	r3, r3, #1
 80017f0:	3b01      	subs	r3, #1
 80017f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d107      	bne.n	8001808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001802:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001804:	429a      	cmp	r2, r3
 8001806:	d001      	beq.n	800180c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e000      	b.n	800180e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40023800 	.word	0x40023800

0800181c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0cc      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001830:	4b68      	ldr	r3, [pc, #416]	; (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d90c      	bls.n	8001858 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183e:	4b65      	ldr	r3, [pc, #404]	; (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001846:	4b63      	ldr	r3, [pc, #396]	; (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d001      	beq.n	8001858 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0b8      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d020      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001870:	4b59      	ldr	r3, [pc, #356]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	4a58      	ldr	r2, [pc, #352]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800187a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001888:	4b53      	ldr	r3, [pc, #332]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	4a52      	ldr	r2, [pc, #328]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001892:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001894:	4b50      	ldr	r3, [pc, #320]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	494d      	ldr	r1, [pc, #308]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d044      	beq.n	800193c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d107      	bne.n	80018ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ba:	4b47      	ldr	r3, [pc, #284]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d119      	bne.n	80018fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e07f      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d003      	beq.n	80018da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018d6:	2b03      	cmp	r3, #3
 80018d8:	d107      	bne.n	80018ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018da:	4b3f      	ldr	r3, [pc, #252]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d109      	bne.n	80018fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e06f      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ea:	4b3b      	ldr	r3, [pc, #236]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e067      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018fa:	4b37      	ldr	r3, [pc, #220]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f023 0203 	bic.w	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	4934      	ldr	r1, [pc, #208]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	4313      	orrs	r3, r2
 800190a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800190c:	f7ff f9f2 	bl	8000cf4 <HAL_GetTick>
 8001910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001912:	e00a      	b.n	800192a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001914:	f7ff f9ee 	bl	8000cf4 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001922:	4293      	cmp	r3, r2
 8001924:	d901      	bls.n	800192a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e04f      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192a:	4b2b      	ldr	r3, [pc, #172]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 020c 	and.w	r2, r3, #12
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	429a      	cmp	r2, r3
 800193a:	d1eb      	bne.n	8001914 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800193c:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d20c      	bcs.n	8001964 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194a:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001952:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d001      	beq.n	8001964 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e032      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d008      	beq.n	8001982 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001970:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	4916      	ldr	r1, [pc, #88]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	4313      	orrs	r3, r2
 8001980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d009      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800198e:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	490e      	ldr	r1, [pc, #56]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019a2:	f000 f821 	bl	80019e8 <HAL_RCC_GetSysClockFreq>
 80019a6:	4602      	mov	r2, r0
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	490a      	ldr	r1, [pc, #40]	; (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 80019b4:	5ccb      	ldrb	r3, [r1, r3]
 80019b6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ba:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 80019bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_RCC_ClockConfig+0x1c8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe ffda 	bl	800097c <HAL_InitTick>

  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023c00 	.word	0x40023c00
 80019d8:	40023800 	.word	0x40023800
 80019dc:	08006d44 	.word	0x08006d44
 80019e0:	20000000 	.word	0x20000000
 80019e4:	20000004 	.word	0x20000004

080019e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019ec:	b094      	sub	sp, #80	; 0x50
 80019ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	647b      	str	r3, [r7, #68]	; 0x44
 80019f4:	2300      	movs	r3, #0
 80019f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019f8:	2300      	movs	r3, #0
 80019fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a00:	4b79      	ldr	r3, [pc, #484]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d00d      	beq.n	8001a28 <HAL_RCC_GetSysClockFreq+0x40>
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	f200 80e1 	bhi.w	8001bd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d002      	beq.n	8001a1c <HAL_RCC_GetSysClockFreq+0x34>
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d003      	beq.n	8001a22 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a1a:	e0db      	b.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a1c:	4b73      	ldr	r3, [pc, #460]	; (8001bec <HAL_RCC_GetSysClockFreq+0x204>)
 8001a1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a20:	e0db      	b.n	8001bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a22:	4b73      	ldr	r3, [pc, #460]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a26:	e0d8      	b.n	8001bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a28:	4b6f      	ldr	r3, [pc, #444]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a32:	4b6d      	ldr	r3, [pc, #436]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d063      	beq.n	8001b06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3e:	4b6a      	ldr	r3, [pc, #424]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	099b      	lsrs	r3, r3, #6
 8001a44:	2200      	movs	r2, #0
 8001a46:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a50:	633b      	str	r3, [r7, #48]	; 0x30
 8001a52:	2300      	movs	r3, #0
 8001a54:	637b      	str	r3, [r7, #52]	; 0x34
 8001a56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a5a:	4622      	mov	r2, r4
 8001a5c:	462b      	mov	r3, r5
 8001a5e:	f04f 0000 	mov.w	r0, #0
 8001a62:	f04f 0100 	mov.w	r1, #0
 8001a66:	0159      	lsls	r1, r3, #5
 8001a68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a6c:	0150      	lsls	r0, r2, #5
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4621      	mov	r1, r4
 8001a74:	1a51      	subs	r1, r2, r1
 8001a76:	6139      	str	r1, [r7, #16]
 8001a78:	4629      	mov	r1, r5
 8001a7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a8c:	4659      	mov	r1, fp
 8001a8e:	018b      	lsls	r3, r1, #6
 8001a90:	4651      	mov	r1, sl
 8001a92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a96:	4651      	mov	r1, sl
 8001a98:	018a      	lsls	r2, r1, #6
 8001a9a:	4651      	mov	r1, sl
 8001a9c:	ebb2 0801 	subs.w	r8, r2, r1
 8001aa0:	4659      	mov	r1, fp
 8001aa2:	eb63 0901 	sbc.w	r9, r3, r1
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001aba:	4690      	mov	r8, r2
 8001abc:	4699      	mov	r9, r3
 8001abe:	4623      	mov	r3, r4
 8001ac0:	eb18 0303 	adds.w	r3, r8, r3
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	462b      	mov	r3, r5
 8001ac8:	eb49 0303 	adc.w	r3, r9, r3
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ada:	4629      	mov	r1, r5
 8001adc:	024b      	lsls	r3, r1, #9
 8001ade:	4621      	mov	r1, r4
 8001ae0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	024a      	lsls	r2, r1, #9
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aee:	2200      	movs	r2, #0
 8001af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001af2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001af4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001af8:	f7fe fbba 	bl	8000270 <__aeabi_uldivmod>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4613      	mov	r3, r2
 8001b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b04:	e058      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b06:	4b38      	ldr	r3, [pc, #224]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	099b      	lsrs	r3, r3, #6
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	4611      	mov	r1, r2
 8001b12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b16:	623b      	str	r3, [r7, #32]
 8001b18:	2300      	movs	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b20:	4642      	mov	r2, r8
 8001b22:	464b      	mov	r3, r9
 8001b24:	f04f 0000 	mov.w	r0, #0
 8001b28:	f04f 0100 	mov.w	r1, #0
 8001b2c:	0159      	lsls	r1, r3, #5
 8001b2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b32:	0150      	lsls	r0, r2, #5
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4641      	mov	r1, r8
 8001b3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b3e:	4649      	mov	r1, r9
 8001b40:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b58:	ebb2 040a 	subs.w	r4, r2, sl
 8001b5c:	eb63 050b 	sbc.w	r5, r3, fp
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	00eb      	lsls	r3, r5, #3
 8001b6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b6e:	00e2      	lsls	r2, r4, #3
 8001b70:	4614      	mov	r4, r2
 8001b72:	461d      	mov	r5, r3
 8001b74:	4643      	mov	r3, r8
 8001b76:	18e3      	adds	r3, r4, r3
 8001b78:	603b      	str	r3, [r7, #0]
 8001b7a:	464b      	mov	r3, r9
 8001b7c:	eb45 0303 	adc.w	r3, r5, r3
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	f04f 0300 	mov.w	r3, #0
 8001b8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b8e:	4629      	mov	r1, r5
 8001b90:	028b      	lsls	r3, r1, #10
 8001b92:	4621      	mov	r1, r4
 8001b94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b98:	4621      	mov	r1, r4
 8001b9a:	028a      	lsls	r2, r1, #10
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	61bb      	str	r3, [r7, #24]
 8001ba6:	61fa      	str	r2, [r7, #28]
 8001ba8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bac:	f7fe fb60 	bl	8000270 <__aeabi_uldivmod>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	0c1b      	lsrs	r3, r3, #16
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001bc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bd2:	e002      	b.n	8001bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_RCC_GetSysClockFreq+0x204>)
 8001bd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3750      	adds	r7, #80	; 0x50
 8001be0:	46bd      	mov	sp, r7
 8001be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800
 8001bec:	00f42400 	.word	0x00f42400
 8001bf0:	007a1200 	.word	0x007a1200

08001bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	; (8001c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000000 	.word	0x20000000

08001c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c10:	f7ff fff0 	bl	8001bf4 <HAL_RCC_GetHCLKFreq>
 8001c14:	4602      	mov	r2, r0
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	0a9b      	lsrs	r3, r3, #10
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	4903      	ldr	r1, [pc, #12]	; (8001c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c22:	5ccb      	ldrb	r3, [r1, r3]
 8001c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	08006d54 	.word	0x08006d54

08001c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c38:	f7ff ffdc 	bl	8001bf4 <HAL_RCC_GetHCLKFreq>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	0b5b      	lsrs	r3, r3, #13
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	4903      	ldr	r1, [pc, #12]	; (8001c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c4a:	5ccb      	ldrb	r3, [r1, r3]
 8001c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40023800 	.word	0x40023800
 8001c58:	08006d54 	.word	0x08006d54

08001c5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	220f      	movs	r2, #15
 8001c6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 0203 	and.w	r2, r3, #3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c78:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c90:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	08db      	lsrs	r3, r3, #3
 8001c96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <HAL_RCC_GetClockConfig+0x60>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0207 	and.w	r2, r3, #7
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	601a      	str	r2, [r3, #0]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40023c00 	.word	0x40023c00

08001cc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e041      	b.n	8001d56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d106      	bne.n	8001cec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f839 	bl	8001d5e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4610      	mov	r0, r2
 8001d00:	f000 f9c0 	bl	8002084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d001      	beq.n	8001d8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e04e      	b.n	8001e2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a23      	ldr	r2, [pc, #140]	; (8001e38 <HAL_TIM_Base_Start_IT+0xc4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d022      	beq.n	8001df4 <HAL_TIM_Base_Start_IT+0x80>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db6:	d01d      	beq.n	8001df4 <HAL_TIM_Base_Start_IT+0x80>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a1f      	ldr	r2, [pc, #124]	; (8001e3c <HAL_TIM_Base_Start_IT+0xc8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d018      	beq.n	8001df4 <HAL_TIM_Base_Start_IT+0x80>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a1e      	ldr	r2, [pc, #120]	; (8001e40 <HAL_TIM_Base_Start_IT+0xcc>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d013      	beq.n	8001df4 <HAL_TIM_Base_Start_IT+0x80>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a1c      	ldr	r2, [pc, #112]	; (8001e44 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00e      	beq.n	8001df4 <HAL_TIM_Base_Start_IT+0x80>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a1b      	ldr	r2, [pc, #108]	; (8001e48 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d009      	beq.n	8001df4 <HAL_TIM_Base_Start_IT+0x80>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a19      	ldr	r2, [pc, #100]	; (8001e4c <HAL_TIM_Base_Start_IT+0xd8>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d004      	beq.n	8001df4 <HAL_TIM_Base_Start_IT+0x80>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a18      	ldr	r2, [pc, #96]	; (8001e50 <HAL_TIM_Base_Start_IT+0xdc>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d111      	bne.n	8001e18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	d010      	beq.n	8001e28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f042 0201 	orr.w	r2, r2, #1
 8001e14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e16:	e007      	b.n	8001e28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0201 	orr.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40010000 	.word	0x40010000
 8001e3c:	40000400 	.word	0x40000400
 8001e40:	40000800 	.word	0x40000800
 8001e44:	40000c00 	.word	0x40000c00
 8001e48:	40010400 	.word	0x40010400
 8001e4c:	40014000 	.word	0x40014000
 8001e50:	40001800 	.word	0x40001800

08001e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d020      	beq.n	8001eb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d01b      	beq.n	8001eb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0202 	mvn.w	r2, #2
 8001e88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f8d2 	bl	8002048 <HAL_TIM_IC_CaptureCallback>
 8001ea4:	e005      	b.n	8001eb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f8c4 	bl	8002034 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f8d5 	bl	800205c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d020      	beq.n	8001f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d01b      	beq.n	8001f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f06f 0204 	mvn.w	r2, #4
 8001ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2202      	movs	r2, #2
 8001eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f8ac 	bl	8002048 <HAL_TIM_IC_CaptureCallback>
 8001ef0:	e005      	b.n	8001efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f89e 	bl	8002034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f8af 	bl	800205c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d020      	beq.n	8001f50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d01b      	beq.n	8001f50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0208 	mvn.w	r2, #8
 8001f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2204      	movs	r2, #4
 8001f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f886 	bl	8002048 <HAL_TIM_IC_CaptureCallback>
 8001f3c:	e005      	b.n	8001f4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f878 	bl	8002034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f889 	bl	800205c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d020      	beq.n	8001f9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f003 0310 	and.w	r3, r3, #16
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d01b      	beq.n	8001f9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0210 	mvn.w	r2, #16
 8001f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2208      	movs	r2, #8
 8001f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f860 	bl	8002048 <HAL_TIM_IC_CaptureCallback>
 8001f88:	e005      	b.n	8001f96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f852 	bl	8002034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f863 	bl	800205c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00c      	beq.n	8001fc0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d007      	beq.n	8001fc0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0201 	mvn.w	r2, #1
 8001fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7fe fc4e 	bl	800085c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00c      	beq.n	8001fe4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d007      	beq.n	8001fe4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f906 	bl	80021f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00c      	beq.n	8002008 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d007      	beq.n	8002008 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f834 	bl	8002070 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f003 0320 	and.w	r3, r3, #32
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00c      	beq.n	800202c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f003 0320 	and.w	r3, r3, #32
 8002018:	2b00      	cmp	r3, #0
 800201a:	d007      	beq.n	800202c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0220 	mvn.w	r2, #32
 8002024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f8d8 	bl	80021dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800202c:	bf00      	nop
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a46      	ldr	r2, [pc, #280]	; (80021b0 <TIM_Base_SetConfig+0x12c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d013      	beq.n	80020c4 <TIM_Base_SetConfig+0x40>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a2:	d00f      	beq.n	80020c4 <TIM_Base_SetConfig+0x40>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a43      	ldr	r2, [pc, #268]	; (80021b4 <TIM_Base_SetConfig+0x130>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d00b      	beq.n	80020c4 <TIM_Base_SetConfig+0x40>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a42      	ldr	r2, [pc, #264]	; (80021b8 <TIM_Base_SetConfig+0x134>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d007      	beq.n	80020c4 <TIM_Base_SetConfig+0x40>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a41      	ldr	r2, [pc, #260]	; (80021bc <TIM_Base_SetConfig+0x138>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d003      	beq.n	80020c4 <TIM_Base_SetConfig+0x40>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a40      	ldr	r2, [pc, #256]	; (80021c0 <TIM_Base_SetConfig+0x13c>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d108      	bne.n	80020d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a35      	ldr	r2, [pc, #212]	; (80021b0 <TIM_Base_SetConfig+0x12c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d02b      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e4:	d027      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a32      	ldr	r2, [pc, #200]	; (80021b4 <TIM_Base_SetConfig+0x130>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d023      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a31      	ldr	r2, [pc, #196]	; (80021b8 <TIM_Base_SetConfig+0x134>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d01f      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a30      	ldr	r2, [pc, #192]	; (80021bc <TIM_Base_SetConfig+0x138>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d01b      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a2f      	ldr	r2, [pc, #188]	; (80021c0 <TIM_Base_SetConfig+0x13c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d017      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a2e      	ldr	r2, [pc, #184]	; (80021c4 <TIM_Base_SetConfig+0x140>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d013      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a2d      	ldr	r2, [pc, #180]	; (80021c8 <TIM_Base_SetConfig+0x144>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d00f      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a2c      	ldr	r2, [pc, #176]	; (80021cc <TIM_Base_SetConfig+0x148>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d00b      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a2b      	ldr	r2, [pc, #172]	; (80021d0 <TIM_Base_SetConfig+0x14c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d007      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a2a      	ldr	r2, [pc, #168]	; (80021d4 <TIM_Base_SetConfig+0x150>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d003      	beq.n	8002136 <TIM_Base_SetConfig+0xb2>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a29      	ldr	r2, [pc, #164]	; (80021d8 <TIM_Base_SetConfig+0x154>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d108      	bne.n	8002148 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800213c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4313      	orrs	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	4313      	orrs	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a10      	ldr	r2, [pc, #64]	; (80021b0 <TIM_Base_SetConfig+0x12c>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d003      	beq.n	800217c <TIM_Base_SetConfig+0xf8>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a12      	ldr	r2, [pc, #72]	; (80021c0 <TIM_Base_SetConfig+0x13c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d103      	bne.n	8002184 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	691a      	ldr	r2, [r3, #16]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b01      	cmp	r3, #1
 8002194:	d105      	bne.n	80021a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	f023 0201 	bic.w	r2, r3, #1
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	611a      	str	r2, [r3, #16]
  }
}
 80021a2:	bf00      	nop
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40010000 	.word	0x40010000
 80021b4:	40000400 	.word	0x40000400
 80021b8:	40000800 	.word	0x40000800
 80021bc:	40000c00 	.word	0x40000c00
 80021c0:	40010400 	.word	0x40010400
 80021c4:	40014000 	.word	0x40014000
 80021c8:	40014400 	.word	0x40014400
 80021cc:	40014800 	.word	0x40014800
 80021d0:	40001800 	.word	0x40001800
 80021d4:	40001c00 	.word	0x40001c00
 80021d8:	40002000 	.word	0x40002000

080021dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e042      	b.n	800229c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d106      	bne.n	8002230 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7fe fb56 	bl	80008dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2224      	movs	r2, #36	; 0x24
 8002234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002246:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 fd69 	bl	8002d20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800225c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695a      	ldr	r2, [r3, #20]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800226c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800227c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2220      	movs	r2, #32
 8002288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2220      	movs	r2, #32
 8002290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	4613      	mov	r3, r2
 80022b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b20      	cmp	r3, #32
 80022c2:	d175      	bne.n	80023b0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d002      	beq.n	80022d0 <HAL_UART_Transmit+0x2c>
 80022ca:	88fb      	ldrh	r3, [r7, #6]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e06e      	b.n	80023b2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2221      	movs	r2, #33	; 0x21
 80022de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022e2:	f7fe fd07 	bl	8000cf4 <HAL_GetTick>
 80022e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	88fa      	ldrh	r2, [r7, #6]
 80022ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	88fa      	ldrh	r2, [r7, #6]
 80022f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022fc:	d108      	bne.n	8002310 <HAL_UART_Transmit+0x6c>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d104      	bne.n	8002310 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	61bb      	str	r3, [r7, #24]
 800230e:	e003      	b.n	8002318 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002314:	2300      	movs	r3, #0
 8002316:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002318:	e02e      	b.n	8002378 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2200      	movs	r2, #0
 8002322:	2180      	movs	r1, #128	; 0x80
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 fb05 	bl	8002934 <UART_WaitOnFlagUntilTimeout>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2220      	movs	r2, #32
 8002334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e03a      	b.n	80023b2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10b      	bne.n	800235a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002350:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	3302      	adds	r3, #2
 8002356:	61bb      	str	r3, [r7, #24]
 8002358:	e007      	b.n	800236a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	781a      	ldrb	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	3301      	adds	r3, #1
 8002368:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800236e:	b29b      	uxth	r3, r3
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800237c:	b29b      	uxth	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1cb      	bne.n	800231a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2200      	movs	r2, #0
 800238a:	2140      	movs	r1, #64	; 0x40
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 fad1 	bl	8002934 <UART_WaitOnFlagUntilTimeout>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2220      	movs	r2, #32
 800239c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e006      	b.n	80023b2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	e000      	b.n	80023b2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80023b0:	2302      	movs	r3, #2
  }
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3720      	adds	r7, #32
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b0ba      	sub	sp, #232	; 0xe8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80023ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80023fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10f      	bne.n	8002422 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002406:	f003 0320 	and.w	r3, r3, #32
 800240a:	2b00      	cmp	r3, #0
 800240c:	d009      	beq.n	8002422 <HAL_UART_IRQHandler+0x66>
 800240e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002412:	f003 0320 	and.w	r3, r3, #32
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fbc2 	bl	8002ba4 <UART_Receive_IT>
      return;
 8002420:	e25b      	b.n	80028da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002422:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 80de 	beq.w	80025e8 <HAL_UART_IRQHandler+0x22c>
 800242c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	d106      	bne.n	8002446 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800243c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 80d1 	beq.w	80025e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00b      	beq.n	800246a <HAL_UART_IRQHandler+0xae>
 8002452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245a:	2b00      	cmp	r3, #0
 800245c:	d005      	beq.n	800246a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	f043 0201 	orr.w	r2, r3, #1
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800246a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00b      	beq.n	800248e <HAL_UART_IRQHandler+0xd2>
 8002476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d005      	beq.n	800248e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	f043 0202 	orr.w	r2, r3, #2
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800248e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00b      	beq.n	80024b2 <HAL_UART_IRQHandler+0xf6>
 800249a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d005      	beq.n	80024b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	f043 0204 	orr.w	r2, r3, #4
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80024b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d011      	beq.n	80024e2 <HAL_UART_IRQHandler+0x126>
 80024be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024c2:	f003 0320 	and.w	r3, r3, #32
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d105      	bne.n	80024d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80024ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d005      	beq.n	80024e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	f043 0208 	orr.w	r2, r3, #8
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 81f2 	beq.w	80028d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024f0:	f003 0320 	and.w	r3, r3, #32
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d008      	beq.n	800250a <HAL_UART_IRQHandler+0x14e>
 80024f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024fc:	f003 0320 	and.w	r3, r3, #32
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 fb4d 	bl	8002ba4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002514:	2b40      	cmp	r3, #64	; 0x40
 8002516:	bf0c      	ite	eq
 8002518:	2301      	moveq	r3, #1
 800251a:	2300      	movne	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b00      	cmp	r3, #0
 800252c:	d103      	bne.n	8002536 <HAL_UART_IRQHandler+0x17a>
 800252e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002532:	2b00      	cmp	r3, #0
 8002534:	d04f      	beq.n	80025d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 fa55 	bl	80029e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002546:	2b40      	cmp	r3, #64	; 0x40
 8002548:	d141      	bne.n	80025ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	3314      	adds	r3, #20
 8002550:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002554:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002558:	e853 3f00 	ldrex	r3, [r3]
 800255c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002560:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002568:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	3314      	adds	r3, #20
 8002572:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002576:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800257a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800257e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002582:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002586:	e841 2300 	strex	r3, r2, [r1]
 800258a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800258e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1d9      	bne.n	800254a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259a:	2b00      	cmp	r3, #0
 800259c:	d013      	beq.n	80025c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a2:	4a7e      	ldr	r2, [pc, #504]	; (800279c <HAL_UART_IRQHandler+0x3e0>)
 80025a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fe fd00 	bl	8000fb0 <HAL_DMA_Abort_IT>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d016      	beq.n	80025e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025c0:	4610      	mov	r0, r2
 80025c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c4:	e00e      	b.n	80025e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f99e 	bl	8002908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025cc:	e00a      	b.n	80025e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f99a 	bl	8002908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d4:	e006      	b.n	80025e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f996 	bl	8002908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80025e2:	e175      	b.n	80028d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e4:	bf00      	nop
    return;
 80025e6:	e173      	b.n	80028d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	f040 814f 	bne.w	8002890 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80025f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025f6:	f003 0310 	and.w	r3, r3, #16
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 8148 	beq.w	8002890 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 8141 	beq.w	8002890 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800260e:	2300      	movs	r3, #0
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262e:	2b40      	cmp	r3, #64	; 0x40
 8002630:	f040 80b6 	bne.w	80027a0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002640:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 8145 	beq.w	80028d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800264e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002652:	429a      	cmp	r2, r3
 8002654:	f080 813e 	bcs.w	80028d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800265e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800266a:	f000 8088 	beq.w	800277e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	330c      	adds	r3, #12
 8002674:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002678:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800267c:	e853 3f00 	ldrex	r3, [r3]
 8002680:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002684:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800268c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	330c      	adds	r3, #12
 8002696:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800269a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800269e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80026a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80026aa:	e841 2300 	strex	r3, r2, [r1]
 80026ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80026b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1d9      	bne.n	800266e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	3314      	adds	r3, #20
 80026c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026c4:	e853 3f00 	ldrex	r3, [r3]
 80026c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80026ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026cc:	f023 0301 	bic.w	r3, r3, #1
 80026d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	3314      	adds	r3, #20
 80026da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80026de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80026e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80026e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80026ea:	e841 2300 	strex	r3, r2, [r1]
 80026ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80026f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1e1      	bne.n	80026ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	3314      	adds	r3, #20
 80026fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002700:	e853 3f00 	ldrex	r3, [r3]
 8002704:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800270c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	3314      	adds	r3, #20
 8002716:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800271a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800271c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002720:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002722:	e841 2300 	strex	r3, r2, [r1]
 8002726:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002728:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1e3      	bne.n	80026f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2220      	movs	r2, #32
 8002732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	330c      	adds	r3, #12
 8002742:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002746:	e853 3f00 	ldrex	r3, [r3]
 800274a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800274c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800274e:	f023 0310 	bic.w	r3, r3, #16
 8002752:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	330c      	adds	r3, #12
 800275c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002760:	65ba      	str	r2, [r7, #88]	; 0x58
 8002762:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002764:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002766:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002768:	e841 2300 	strex	r3, r2, [r1]
 800276c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800276e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1e3      	bne.n	800273c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002778:	4618      	mov	r0, r3
 800277a:	f7fe fba9 	bl	8000ed0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2202      	movs	r2, #2
 8002782:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800278c:	b29b      	uxth	r3, r3
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	b29b      	uxth	r3, r3
 8002792:	4619      	mov	r1, r3
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f8c1 	bl	800291c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800279a:	e09b      	b.n	80028d4 <HAL_UART_IRQHandler+0x518>
 800279c:	08002aad 	.word	0x08002aad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 808e 	beq.w	80028d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80027bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 8089 	beq.w	80028d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	330c      	adds	r3, #12
 80027cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d0:	e853 3f00 	ldrex	r3, [r3]
 80027d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80027d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	330c      	adds	r3, #12
 80027e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80027ea:	647a      	str	r2, [r7, #68]	; 0x44
 80027ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80027f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027f2:	e841 2300 	strex	r3, r2, [r1]
 80027f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80027f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1e3      	bne.n	80027c6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	3314      	adds	r3, #20
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	e853 3f00 	ldrex	r3, [r3]
 800280c:	623b      	str	r3, [r7, #32]
   return(result);
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	f023 0301 	bic.w	r3, r3, #1
 8002814:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	3314      	adds	r3, #20
 800281e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002822:	633a      	str	r2, [r7, #48]	; 0x30
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002826:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800282a:	e841 2300 	strex	r3, r2, [r1]
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1e3      	bne.n	80027fe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2220      	movs	r2, #32
 800283a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	330c      	adds	r3, #12
 800284a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	e853 3f00 	ldrex	r3, [r3]
 8002852:	60fb      	str	r3, [r7, #12]
   return(result);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f023 0310 	bic.w	r3, r3, #16
 800285a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	330c      	adds	r3, #12
 8002864:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002868:	61fa      	str	r2, [r7, #28]
 800286a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286c:	69b9      	ldr	r1, [r7, #24]
 800286e:	69fa      	ldr	r2, [r7, #28]
 8002870:	e841 2300 	strex	r3, r2, [r1]
 8002874:	617b      	str	r3, [r7, #20]
   return(result);
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1e3      	bne.n	8002844 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002882:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002886:	4619      	mov	r1, r3
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f847 	bl	800291c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800288e:	e023      	b.n	80028d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002898:	2b00      	cmp	r3, #0
 800289a:	d009      	beq.n	80028b0 <HAL_UART_IRQHandler+0x4f4>
 800289c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f913 	bl	8002ad4 <UART_Transmit_IT>
    return;
 80028ae:	e014      	b.n	80028da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00e      	beq.n	80028da <HAL_UART_IRQHandler+0x51e>
 80028bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d008      	beq.n	80028da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f953 	bl	8002b74 <UART_EndTransmit_IT>
    return;
 80028ce:	e004      	b.n	80028da <HAL_UART_IRQHandler+0x51e>
    return;
 80028d0:	bf00      	nop
 80028d2:	e002      	b.n	80028da <HAL_UART_IRQHandler+0x51e>
      return;
 80028d4:	bf00      	nop
 80028d6:	e000      	b.n	80028da <HAL_UART_IRQHandler+0x51e>
      return;
 80028d8:	bf00      	nop
  }
}
 80028da:	37e8      	adds	r7, #232	; 0xe8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	4613      	mov	r3, r2
 8002942:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002944:	e03b      	b.n	80029be <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294c:	d037      	beq.n	80029be <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294e:	f7fe f9d1 	bl	8000cf4 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	6a3a      	ldr	r2, [r7, #32]
 800295a:	429a      	cmp	r2, r3
 800295c:	d302      	bcc.n	8002964 <UART_WaitOnFlagUntilTimeout+0x30>
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e03a      	b.n	80029de <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	2b00      	cmp	r3, #0
 8002974:	d023      	beq.n	80029be <UART_WaitOnFlagUntilTimeout+0x8a>
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2b80      	cmp	r3, #128	; 0x80
 800297a:	d020      	beq.n	80029be <UART_WaitOnFlagUntilTimeout+0x8a>
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b40      	cmp	r3, #64	; 0x40
 8002980:	d01d      	beq.n	80029be <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	2b08      	cmp	r3, #8
 800298e:	d116      	bne.n	80029be <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f81d 	bl	80029e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2208      	movs	r2, #8
 80029b0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00f      	b.n	80029de <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	4013      	ands	r3, r2
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	bf0c      	ite	eq
 80029ce:	2301      	moveq	r3, #1
 80029d0:	2300      	movne	r3, #0
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d0b4      	beq.n	8002946 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b095      	sub	sp, #84	; 0x54
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	330c      	adds	r3, #12
 80029f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f8:	e853 3f00 	ldrex	r3, [r3]
 80029fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80029fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	330c      	adds	r3, #12
 8002a0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a0e:	643a      	str	r2, [r7, #64]	; 0x40
 8002a10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a16:	e841 2300 	strex	r3, r2, [r1]
 8002a1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1e5      	bne.n	80029ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	3314      	adds	r3, #20
 8002a28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	e853 3f00 	ldrex	r3, [r3]
 8002a30:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	f023 0301 	bic.w	r3, r3, #1
 8002a38:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	3314      	adds	r3, #20
 8002a40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a4a:	e841 2300 	strex	r3, r2, [r1]
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1e5      	bne.n	8002a22 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d119      	bne.n	8002a92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	330c      	adds	r3, #12
 8002a64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	e853 3f00 	ldrex	r3, [r3]
 8002a6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f023 0310 	bic.w	r3, r3, #16
 8002a74:	647b      	str	r3, [r7, #68]	; 0x44
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	330c      	adds	r3, #12
 8002a7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a7e:	61ba      	str	r2, [r7, #24]
 8002a80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a82:	6979      	ldr	r1, [r7, #20]
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	e841 2300 	strex	r3, r2, [r1]
 8002a8a:	613b      	str	r3, [r7, #16]
   return(result);
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1e5      	bne.n	8002a5e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2220      	movs	r2, #32
 8002a96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002aa0:	bf00      	nop
 8002aa2:	3754      	adds	r7, #84	; 0x54
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f7ff ff1e 	bl	8002908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002acc:	bf00      	nop
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b21      	cmp	r3, #33	; 0x21
 8002ae6:	d13e      	bne.n	8002b66 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af0:	d114      	bne.n	8002b1c <UART_Transmit_IT+0x48>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d110      	bne.n	8002b1c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	461a      	mov	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b0e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	1c9a      	adds	r2, r3, #2
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	621a      	str	r2, [r3, #32]
 8002b1a:	e008      	b.n	8002b2e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	1c59      	adds	r1, r3, #1
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6211      	str	r1, [r2, #32]
 8002b26:	781a      	ldrb	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10f      	bne.n	8002b62 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b50:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b60:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	e000      	b.n	8002b68 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b66:	2302      	movs	r3, #2
  }
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b8a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7ff fea3 	bl	80028e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08c      	sub	sp, #48	; 0x30
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b22      	cmp	r3, #34	; 0x22
 8002bb6:	f040 80ae 	bne.w	8002d16 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc2:	d117      	bne.n	8002bf4 <UART_Receive_IT+0x50>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d113      	bne.n	8002bf4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bec:	1c9a      	adds	r2, r3, #2
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	629a      	str	r2, [r3, #40]	; 0x28
 8002bf2:	e026      	b.n	8002c42 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c06:	d007      	beq.n	8002c18 <UART_Receive_IT+0x74>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10a      	bne.n	8002c26 <UART_Receive_IT+0x82>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d106      	bne.n	8002c26 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c22:	701a      	strb	r2, [r3, #0]
 8002c24:	e008      	b.n	8002c38 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c36:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	4619      	mov	r1, r3
 8002c50:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d15d      	bne.n	8002d12 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0220 	bic.w	r2, r2, #32
 8002c64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695a      	ldr	r2, [r3, #20]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0201 	bic.w	r2, r2, #1
 8002c84:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d135      	bne.n	8002d08 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	330c      	adds	r3, #12
 8002ca8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	e853 3f00 	ldrex	r3, [r3]
 8002cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f023 0310 	bic.w	r3, r3, #16
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	330c      	adds	r3, #12
 8002cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc2:	623a      	str	r2, [r7, #32]
 8002cc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc6:	69f9      	ldr	r1, [r7, #28]
 8002cc8:	6a3a      	ldr	r2, [r7, #32]
 8002cca:	e841 2300 	strex	r3, r2, [r1]
 8002cce:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1e5      	bne.n	8002ca2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	2b10      	cmp	r3, #16
 8002ce2:	d10a      	bne.n	8002cfa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cfe:	4619      	mov	r1, r3
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7ff fe0b 	bl	800291c <HAL_UARTEx_RxEventCallback>
 8002d06:	e002      	b.n	8002d0e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff fdf3 	bl	80028f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	e002      	b.n	8002d18 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	e000      	b.n	8002d18 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002d16:	2302      	movs	r3, #2
  }
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3730      	adds	r7, #48	; 0x30
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d24:	b0c0      	sub	sp, #256	; 0x100
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d3c:	68d9      	ldr	r1, [r3, #12]
 8002d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	ea40 0301 	orr.w	r3, r0, r1
 8002d48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	431a      	orrs	r2, r3
 8002d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d78:	f021 010c 	bic.w	r1, r1, #12
 8002d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d86:	430b      	orrs	r3, r1
 8002d88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9a:	6999      	ldr	r1, [r3, #24]
 8002d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	ea40 0301 	orr.w	r3, r0, r1
 8002da6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	4b8f      	ldr	r3, [pc, #572]	; (8002fec <UART_SetConfig+0x2cc>)
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d005      	beq.n	8002dc0 <UART_SetConfig+0xa0>
 8002db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	4b8d      	ldr	r3, [pc, #564]	; (8002ff0 <UART_SetConfig+0x2d0>)
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d104      	bne.n	8002dca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002dc0:	f7fe ff38 	bl	8001c34 <HAL_RCC_GetPCLK2Freq>
 8002dc4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002dc8:	e003      	b.n	8002dd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002dca:	f7fe ff1f 	bl	8001c0c <HAL_RCC_GetPCLK1Freq>
 8002dce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ddc:	f040 810c 	bne.w	8002ff8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002de4:	2200      	movs	r2, #0
 8002de6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002dea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002dee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002df2:	4622      	mov	r2, r4
 8002df4:	462b      	mov	r3, r5
 8002df6:	1891      	adds	r1, r2, r2
 8002df8:	65b9      	str	r1, [r7, #88]	; 0x58
 8002dfa:	415b      	adcs	r3, r3
 8002dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e02:	4621      	mov	r1, r4
 8002e04:	eb12 0801 	adds.w	r8, r2, r1
 8002e08:	4629      	mov	r1, r5
 8002e0a:	eb43 0901 	adc.w	r9, r3, r1
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	f04f 0300 	mov.w	r3, #0
 8002e16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e22:	4690      	mov	r8, r2
 8002e24:	4699      	mov	r9, r3
 8002e26:	4623      	mov	r3, r4
 8002e28:	eb18 0303 	adds.w	r3, r8, r3
 8002e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e30:	462b      	mov	r3, r5
 8002e32:	eb49 0303 	adc.w	r3, r9, r3
 8002e36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e4e:	460b      	mov	r3, r1
 8002e50:	18db      	adds	r3, r3, r3
 8002e52:	653b      	str	r3, [r7, #80]	; 0x50
 8002e54:	4613      	mov	r3, r2
 8002e56:	eb42 0303 	adc.w	r3, r2, r3
 8002e5a:	657b      	str	r3, [r7, #84]	; 0x54
 8002e5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e64:	f7fd fa04 	bl	8000270 <__aeabi_uldivmod>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4b61      	ldr	r3, [pc, #388]	; (8002ff4 <UART_SetConfig+0x2d4>)
 8002e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	011c      	lsls	r4, r3, #4
 8002e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e88:	4642      	mov	r2, r8
 8002e8a:	464b      	mov	r3, r9
 8002e8c:	1891      	adds	r1, r2, r2
 8002e8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e90:	415b      	adcs	r3, r3
 8002e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e98:	4641      	mov	r1, r8
 8002e9a:	eb12 0a01 	adds.w	sl, r2, r1
 8002e9e:	4649      	mov	r1, r9
 8002ea0:	eb43 0b01 	adc.w	fp, r3, r1
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002eb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002eb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002eb8:	4692      	mov	sl, r2
 8002eba:	469b      	mov	fp, r3
 8002ebc:	4643      	mov	r3, r8
 8002ebe:	eb1a 0303 	adds.w	r3, sl, r3
 8002ec2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ec6:	464b      	mov	r3, r9
 8002ec8:	eb4b 0303 	adc.w	r3, fp, r3
 8002ecc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002edc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ee0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	18db      	adds	r3, r3, r3
 8002ee8:	643b      	str	r3, [r7, #64]	; 0x40
 8002eea:	4613      	mov	r3, r2
 8002eec:	eb42 0303 	adc.w	r3, r2, r3
 8002ef0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ef2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ef6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002efa:	f7fd f9b9 	bl	8000270 <__aeabi_uldivmod>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4611      	mov	r1, r2
 8002f04:	4b3b      	ldr	r3, [pc, #236]	; (8002ff4 <UART_SetConfig+0x2d4>)
 8002f06:	fba3 2301 	umull	r2, r3, r3, r1
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	2264      	movs	r2, #100	; 0x64
 8002f0e:	fb02 f303 	mul.w	r3, r2, r3
 8002f12:	1acb      	subs	r3, r1, r3
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f1a:	4b36      	ldr	r3, [pc, #216]	; (8002ff4 <UART_SetConfig+0x2d4>)
 8002f1c:	fba3 2302 	umull	r2, r3, r3, r2
 8002f20:	095b      	lsrs	r3, r3, #5
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f28:	441c      	add	r4, r3
 8002f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f3c:	4642      	mov	r2, r8
 8002f3e:	464b      	mov	r3, r9
 8002f40:	1891      	adds	r1, r2, r2
 8002f42:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f44:	415b      	adcs	r3, r3
 8002f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f4c:	4641      	mov	r1, r8
 8002f4e:	1851      	adds	r1, r2, r1
 8002f50:	6339      	str	r1, [r7, #48]	; 0x30
 8002f52:	4649      	mov	r1, r9
 8002f54:	414b      	adcs	r3, r1
 8002f56:	637b      	str	r3, [r7, #52]	; 0x34
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f64:	4659      	mov	r1, fp
 8002f66:	00cb      	lsls	r3, r1, #3
 8002f68:	4651      	mov	r1, sl
 8002f6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f6e:	4651      	mov	r1, sl
 8002f70:	00ca      	lsls	r2, r1, #3
 8002f72:	4610      	mov	r0, r2
 8002f74:	4619      	mov	r1, r3
 8002f76:	4603      	mov	r3, r0
 8002f78:	4642      	mov	r2, r8
 8002f7a:	189b      	adds	r3, r3, r2
 8002f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f80:	464b      	mov	r3, r9
 8002f82:	460a      	mov	r2, r1
 8002f84:	eb42 0303 	adc.w	r3, r2, r3
 8002f88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	18db      	adds	r3, r3, r3
 8002fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	eb42 0303 	adc.w	r3, r2, r3
 8002fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002fb6:	f7fd f95b 	bl	8000270 <__aeabi_uldivmod>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <UART_SetConfig+0x2d4>)
 8002fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8002fc4:	095b      	lsrs	r3, r3, #5
 8002fc6:	2164      	movs	r1, #100	; 0x64
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	3332      	adds	r3, #50	; 0x32
 8002fd2:	4a08      	ldr	r2, [pc, #32]	; (8002ff4 <UART_SetConfig+0x2d4>)
 8002fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd8:	095b      	lsrs	r3, r3, #5
 8002fda:	f003 0207 	and.w	r2, r3, #7
 8002fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4422      	add	r2, r4
 8002fe6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fe8:	e106      	b.n	80031f8 <UART_SetConfig+0x4d8>
 8002fea:	bf00      	nop
 8002fec:	40011000 	.word	0x40011000
 8002ff0:	40011400 	.word	0x40011400
 8002ff4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ff8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003002:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003006:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800300a:	4642      	mov	r2, r8
 800300c:	464b      	mov	r3, r9
 800300e:	1891      	adds	r1, r2, r2
 8003010:	6239      	str	r1, [r7, #32]
 8003012:	415b      	adcs	r3, r3
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
 8003016:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800301a:	4641      	mov	r1, r8
 800301c:	1854      	adds	r4, r2, r1
 800301e:	4649      	mov	r1, r9
 8003020:	eb43 0501 	adc.w	r5, r3, r1
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	00eb      	lsls	r3, r5, #3
 800302e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003032:	00e2      	lsls	r2, r4, #3
 8003034:	4614      	mov	r4, r2
 8003036:	461d      	mov	r5, r3
 8003038:	4643      	mov	r3, r8
 800303a:	18e3      	adds	r3, r4, r3
 800303c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003040:	464b      	mov	r3, r9
 8003042:	eb45 0303 	adc.w	r3, r5, r3
 8003046:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800304a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003056:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800305a:	f04f 0200 	mov.w	r2, #0
 800305e:	f04f 0300 	mov.w	r3, #0
 8003062:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003066:	4629      	mov	r1, r5
 8003068:	008b      	lsls	r3, r1, #2
 800306a:	4621      	mov	r1, r4
 800306c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003070:	4621      	mov	r1, r4
 8003072:	008a      	lsls	r2, r1, #2
 8003074:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003078:	f7fd f8fa 	bl	8000270 <__aeabi_uldivmod>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4b60      	ldr	r3, [pc, #384]	; (8003204 <UART_SetConfig+0x4e4>)
 8003082:	fba3 2302 	umull	r2, r3, r3, r2
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	011c      	lsls	r4, r3, #4
 800308a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800308e:	2200      	movs	r2, #0
 8003090:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003094:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003098:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800309c:	4642      	mov	r2, r8
 800309e:	464b      	mov	r3, r9
 80030a0:	1891      	adds	r1, r2, r2
 80030a2:	61b9      	str	r1, [r7, #24]
 80030a4:	415b      	adcs	r3, r3
 80030a6:	61fb      	str	r3, [r7, #28]
 80030a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030ac:	4641      	mov	r1, r8
 80030ae:	1851      	adds	r1, r2, r1
 80030b0:	6139      	str	r1, [r7, #16]
 80030b2:	4649      	mov	r1, r9
 80030b4:	414b      	adcs	r3, r1
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030c4:	4659      	mov	r1, fp
 80030c6:	00cb      	lsls	r3, r1, #3
 80030c8:	4651      	mov	r1, sl
 80030ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ce:	4651      	mov	r1, sl
 80030d0:	00ca      	lsls	r2, r1, #3
 80030d2:	4610      	mov	r0, r2
 80030d4:	4619      	mov	r1, r3
 80030d6:	4603      	mov	r3, r0
 80030d8:	4642      	mov	r2, r8
 80030da:	189b      	adds	r3, r3, r2
 80030dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030e0:	464b      	mov	r3, r9
 80030e2:	460a      	mov	r2, r1
 80030e4:	eb42 0303 	adc.w	r3, r2, r3
 80030e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80030f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003104:	4649      	mov	r1, r9
 8003106:	008b      	lsls	r3, r1, #2
 8003108:	4641      	mov	r1, r8
 800310a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800310e:	4641      	mov	r1, r8
 8003110:	008a      	lsls	r2, r1, #2
 8003112:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003116:	f7fd f8ab 	bl	8000270 <__aeabi_uldivmod>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	4611      	mov	r1, r2
 8003120:	4b38      	ldr	r3, [pc, #224]	; (8003204 <UART_SetConfig+0x4e4>)
 8003122:	fba3 2301 	umull	r2, r3, r3, r1
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	2264      	movs	r2, #100	; 0x64
 800312a:	fb02 f303 	mul.w	r3, r2, r3
 800312e:	1acb      	subs	r3, r1, r3
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	3332      	adds	r3, #50	; 0x32
 8003134:	4a33      	ldr	r2, [pc, #204]	; (8003204 <UART_SetConfig+0x4e4>)
 8003136:	fba2 2303 	umull	r2, r3, r2, r3
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003140:	441c      	add	r4, r3
 8003142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003146:	2200      	movs	r2, #0
 8003148:	673b      	str	r3, [r7, #112]	; 0x70
 800314a:	677a      	str	r2, [r7, #116]	; 0x74
 800314c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003150:	4642      	mov	r2, r8
 8003152:	464b      	mov	r3, r9
 8003154:	1891      	adds	r1, r2, r2
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	415b      	adcs	r3, r3
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003160:	4641      	mov	r1, r8
 8003162:	1851      	adds	r1, r2, r1
 8003164:	6039      	str	r1, [r7, #0]
 8003166:	4649      	mov	r1, r9
 8003168:	414b      	adcs	r3, r1
 800316a:	607b      	str	r3, [r7, #4]
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003178:	4659      	mov	r1, fp
 800317a:	00cb      	lsls	r3, r1, #3
 800317c:	4651      	mov	r1, sl
 800317e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003182:	4651      	mov	r1, sl
 8003184:	00ca      	lsls	r2, r1, #3
 8003186:	4610      	mov	r0, r2
 8003188:	4619      	mov	r1, r3
 800318a:	4603      	mov	r3, r0
 800318c:	4642      	mov	r2, r8
 800318e:	189b      	adds	r3, r3, r2
 8003190:	66bb      	str	r3, [r7, #104]	; 0x68
 8003192:	464b      	mov	r3, r9
 8003194:	460a      	mov	r2, r1
 8003196:	eb42 0303 	adc.w	r3, r2, r3
 800319a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800319c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	663b      	str	r3, [r7, #96]	; 0x60
 80031a6:	667a      	str	r2, [r7, #100]	; 0x64
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80031b4:	4649      	mov	r1, r9
 80031b6:	008b      	lsls	r3, r1, #2
 80031b8:	4641      	mov	r1, r8
 80031ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031be:	4641      	mov	r1, r8
 80031c0:	008a      	lsls	r2, r1, #2
 80031c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80031c6:	f7fd f853 	bl	8000270 <__aeabi_uldivmod>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4b0d      	ldr	r3, [pc, #52]	; (8003204 <UART_SetConfig+0x4e4>)
 80031d0:	fba3 1302 	umull	r1, r3, r3, r2
 80031d4:	095b      	lsrs	r3, r3, #5
 80031d6:	2164      	movs	r1, #100	; 0x64
 80031d8:	fb01 f303 	mul.w	r3, r1, r3
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	3332      	adds	r3, #50	; 0x32
 80031e2:	4a08      	ldr	r2, [pc, #32]	; (8003204 <UART_SetConfig+0x4e4>)
 80031e4:	fba2 2303 	umull	r2, r3, r2, r3
 80031e8:	095b      	lsrs	r3, r3, #5
 80031ea:	f003 020f 	and.w	r2, r3, #15
 80031ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4422      	add	r2, r4
 80031f6:	609a      	str	r2, [r3, #8]
}
 80031f8:	bf00      	nop
 80031fa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80031fe:	46bd      	mov	sp, r7
 8003200:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003204:	51eb851f 	.word	0x51eb851f

08003208 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003216:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800321a:	2b84      	cmp	r3, #132	; 0x84
 800321c:	d005      	beq.n	800322a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800321e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4413      	add	r3, r2
 8003226:	3303      	adds	r3, #3
 8003228:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800322a:	68fb      	ldr	r3, [r7, #12]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800323e:	f3ef 8305 	mrs	r3, IPSR
 8003242:	607b      	str	r3, [r7, #4]
  return(result);
 8003244:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003246:	2b00      	cmp	r3, #0
 8003248:	bf14      	ite	ne
 800324a:	2301      	movne	r3, #1
 800324c:	2300      	moveq	r3, #0
 800324e:	b2db      	uxtb	r3, r3
}
 8003250:	4618      	mov	r0, r3
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003260:	f001 f840 	bl	80042e4 <vTaskStartScheduler>
  
  return osOK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	bd80      	pop	{r7, pc}

0800326a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800326a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800326c:	b089      	sub	sp, #36	; 0x24
 800326e:	af04      	add	r7, sp, #16
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d020      	beq.n	80032be <osThreadCreate+0x54>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d01c      	beq.n	80032be <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685c      	ldr	r4, [r3, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691e      	ldr	r6, [r3, #16]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff ffb6 	bl	8003208 <makeFreeRtosPriority>
 800329c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032a6:	9202      	str	r2, [sp, #8]
 80032a8:	9301      	str	r3, [sp, #4]
 80032aa:	9100      	str	r1, [sp, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	4632      	mov	r2, r6
 80032b0:	4629      	mov	r1, r5
 80032b2:	4620      	mov	r0, r4
 80032b4:	f000 fe4e 	bl	8003f54 <xTaskCreateStatic>
 80032b8:	4603      	mov	r3, r0
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	e01c      	b.n	80032f8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685c      	ldr	r4, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032ca:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff ff98 	bl	8003208 <makeFreeRtosPriority>
 80032d8:	4602      	mov	r2, r0
 80032da:	f107 030c 	add.w	r3, r7, #12
 80032de:	9301      	str	r3, [sp, #4]
 80032e0:	9200      	str	r2, [sp, #0]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	4632      	mov	r2, r6
 80032e6:	4629      	mov	r1, r5
 80032e8:	4620      	mov	r0, r4
 80032ea:	f000 fe90 	bl	800400e <xTaskCreate>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d001      	beq.n	80032f8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	e000      	b.n	80032fa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80032f8:	68fb      	ldr	r3, [r7, #12]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003302 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b084      	sub	sp, #16
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <osDelay+0x16>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	e000      	b.n	800331a <osDelay+0x18>
 8003318:	2301      	movs	r3, #1
 800331a:	4618      	mov	r0, r3
 800331c:	f000 ffae 	bl	800427c <vTaskDelay>
  
  return osOK;
 8003320:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af02      	add	r7, sp, #8
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	460b      	mov	r3, r1
 8003336:	607a      	str	r2, [r7, #4]
 8003338:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d013      	beq.n	800336a <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8003342:	7afb      	ldrb	r3, [r7, #11]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <osTimerCreate+0x20>
 8003348:	2101      	movs	r1, #1
 800334a:	e000      	b.n	800334e <osTimerCreate+0x22>
 800334c:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8003356:	9201      	str	r2, [sp, #4]
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	460a      	mov	r2, r1
 800335e:	2101      	movs	r1, #1
 8003360:	480b      	ldr	r0, [pc, #44]	; (8003390 <osTimerCreate+0x64>)
 8003362:	f001 fd72 	bl	8004e4a <xTimerCreateStatic>
 8003366:	4603      	mov	r3, r0
 8003368:	e00e      	b.n	8003388 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800336a:	7afb      	ldrb	r3, [r7, #11]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <osTimerCreate+0x48>
 8003370:	2201      	movs	r2, #1
 8003372:	e000      	b.n	8003376 <osTimerCreate+0x4a>
 8003374:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2101      	movs	r1, #1
 8003380:	4803      	ldr	r0, [pc, #12]	; (8003390 <osTimerCreate+0x64>)
 8003382:	f001 fd41 	bl	8004e08 <xTimerCreate>
 8003386:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	08006d28 	.word	0x08006d28

08003394 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af02      	add	r7, sp, #8
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <osTimerStart+0x20>
    ticks = 1;
 80033b0:	2301      	movs	r3, #1
 80033b2:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 80033b4:	f7ff ff40 	bl	8003238 <inHandlerMode>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d01a      	beq.n	80033f4 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 80033be:	f107 030c 	add.w	r3, r7, #12
 80033c2:	2200      	movs	r2, #0
 80033c4:	9200      	str	r2, [sp, #0]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	2109      	movs	r1, #9
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f001 fdb6 	bl	8004f3c <xTimerGenericCommand>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d002      	beq.n	80033dc <osTimerStart+0x48>
    {
      result = osErrorOS;
 80033d6:	23ff      	movs	r3, #255	; 0xff
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	e018      	b.n	800340e <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d015      	beq.n	800340e <osTimerStart+0x7a>
 80033e2:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <osTimerStart+0x84>)
 80033e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	f3bf 8f6f 	isb	sy
 80033f2:	e00c      	b.n	800340e <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80033f4:	2300      	movs	r3, #0
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	2300      	movs	r3, #0
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	2104      	movs	r1, #4
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f001 fd9c 	bl	8004f3c <xTimerGenericCommand>
 8003404:	4603      	mov	r3, r0
 8003406:	2b01      	cmp	r3, #1
 8003408:	d001      	beq.n	800340e <osTimerStart+0x7a>
      result = osErrorOS;
 800340a:	23ff      	movs	r3, #255	; 0xff
 800340c:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 800340e:	697b      	ldr	r3, [r7, #20]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	e000ed04 	.word	0xe000ed04

0800341c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f103 0208 	add.w	r2, r3, #8
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f04f 32ff 	mov.w	r2, #4294967295
 8003434:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f103 0208 	add.w	r2, r3, #8
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f103 0208 	add.w	r2, r3, #8
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003476:	b480      	push	{r7}
 8003478:	b085      	sub	sp, #20
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	601a      	str	r2, [r3, #0]
}
 80034b2:	bf00      	nop
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034be:	b480      	push	{r7}
 80034c0:	b085      	sub	sp, #20
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d4:	d103      	bne.n	80034de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	e00c      	b.n	80034f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3308      	adds	r3, #8
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	e002      	b.n	80034ec <vListInsert+0x2e>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d2f6      	bcs.n	80034e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	601a      	str	r2, [r3, #0]
}
 8003524:	bf00      	nop
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6892      	ldr	r2, [r2, #8]
 8003546:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6852      	ldr	r2, [r2, #4]
 8003550:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	429a      	cmp	r2, r3
 800355a:	d103      	bne.n	8003564 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	1e5a      	subs	r2, r3, #1
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
}
 8003578:	4618      	mov	r0, r3
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10a      	bne.n	80035ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359c:	f383 8811 	msr	BASEPRI, r3
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80035aa:	bf00      	nop
 80035ac:	e7fe      	b.n	80035ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80035ae:	f002 f8d9 	bl	8005764 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ba:	68f9      	ldr	r1, [r7, #12]
 80035bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80035be:	fb01 f303 	mul.w	r3, r1, r3
 80035c2:	441a      	add	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035de:	3b01      	subs	r3, #1
 80035e0:	68f9      	ldr	r1, [r7, #12]
 80035e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80035e4:	fb01 f303 	mul.w	r3, r1, r3
 80035e8:	441a      	add	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	22ff      	movs	r2, #255	; 0xff
 80035f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	22ff      	movs	r2, #255	; 0xff
 80035fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d114      	bne.n	800362e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01a      	beq.n	8003642 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	3310      	adds	r3, #16
 8003610:	4618      	mov	r0, r3
 8003612:	f001 f8eb 	bl	80047ec <xTaskRemoveFromEventList>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d012      	beq.n	8003642 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800361c:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <xQueueGenericReset+0xcc>)
 800361e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	e009      	b.n	8003642 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	3310      	adds	r3, #16
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff fef2 	bl	800341c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	3324      	adds	r3, #36	; 0x24
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff feed 	bl	800341c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003642:	f002 f8bf 	bl	80057c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003646:	2301      	movs	r3, #1
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	e000ed04 	.word	0xe000ed04

08003654 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08e      	sub	sp, #56	; 0x38
 8003658:	af02      	add	r7, sp, #8
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
 8003660:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10a      	bne.n	800367e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800367a:	bf00      	nop
 800367c:	e7fe      	b.n	800367c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10a      	bne.n	800369a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003688:	f383 8811 	msr	BASEPRI, r3
 800368c:	f3bf 8f6f 	isb	sy
 8003690:	f3bf 8f4f 	dsb	sy
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003696:	bf00      	nop
 8003698:	e7fe      	b.n	8003698 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <xQueueGenericCreateStatic+0x52>
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <xQueueGenericCreateStatic+0x56>
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <xQueueGenericCreateStatic+0x58>
 80036aa:	2300      	movs	r3, #0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10a      	bne.n	80036c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80036b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b4:	f383 8811 	msr	BASEPRI, r3
 80036b8:	f3bf 8f6f 	isb	sy
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	623b      	str	r3, [r7, #32]
}
 80036c2:	bf00      	nop
 80036c4:	e7fe      	b.n	80036c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d102      	bne.n	80036d2 <xQueueGenericCreateStatic+0x7e>
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <xQueueGenericCreateStatic+0x82>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <xQueueGenericCreateStatic+0x84>
 80036d6:	2300      	movs	r3, #0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10a      	bne.n	80036f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80036dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e0:	f383 8811 	msr	BASEPRI, r3
 80036e4:	f3bf 8f6f 	isb	sy
 80036e8:	f3bf 8f4f 	dsb	sy
 80036ec:	61fb      	str	r3, [r7, #28]
}
 80036ee:	bf00      	nop
 80036f0:	e7fe      	b.n	80036f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80036f2:	2348      	movs	r3, #72	; 0x48
 80036f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2b48      	cmp	r3, #72	; 0x48
 80036fa:	d00a      	beq.n	8003712 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80036fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003700:	f383 8811 	msr	BASEPRI, r3
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	61bb      	str	r3, [r7, #24]
}
 800370e:	bf00      	nop
 8003710:	e7fe      	b.n	8003710 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003712:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00d      	beq.n	800373a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800371e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003726:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800372a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	4613      	mov	r3, r2
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	68b9      	ldr	r1, [r7, #8]
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 f805 	bl	8003744 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800373a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800373c:	4618      	mov	r0, r3
 800373e:	3730      	adds	r7, #48	; 0x30
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d103      	bne.n	8003760 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	e002      	b.n	8003766 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003772:	2101      	movs	r1, #1
 8003774:	69b8      	ldr	r0, [r7, #24]
 8003776:	f7ff ff05 	bl	8003584 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800377a:	bf00      	nop
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08e      	sub	sp, #56	; 0x38
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003792:	2300      	movs	r3, #0
 8003794:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800379a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10a      	bne.n	80037b6 <xQueueGenericSend+0x32>
	__asm volatile
 80037a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a4:	f383 8811 	msr	BASEPRI, r3
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037b2:	bf00      	nop
 80037b4:	e7fe      	b.n	80037b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d103      	bne.n	80037c4 <xQueueGenericSend+0x40>
 80037bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <xQueueGenericSend+0x44>
 80037c4:	2301      	movs	r3, #1
 80037c6:	e000      	b.n	80037ca <xQueueGenericSend+0x46>
 80037c8:	2300      	movs	r3, #0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10a      	bne.n	80037e4 <xQueueGenericSend+0x60>
	__asm volatile
 80037ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d2:	f383 8811 	msr	BASEPRI, r3
 80037d6:	f3bf 8f6f 	isb	sy
 80037da:	f3bf 8f4f 	dsb	sy
 80037de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037e0:	bf00      	nop
 80037e2:	e7fe      	b.n	80037e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d103      	bne.n	80037f2 <xQueueGenericSend+0x6e>
 80037ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d101      	bne.n	80037f6 <xQueueGenericSend+0x72>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <xQueueGenericSend+0x74>
 80037f6:	2300      	movs	r3, #0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10a      	bne.n	8003812 <xQueueGenericSend+0x8e>
	__asm volatile
 80037fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	623b      	str	r3, [r7, #32]
}
 800380e:	bf00      	nop
 8003810:	e7fe      	b.n	8003810 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003812:	f001 f9a7 	bl	8004b64 <xTaskGetSchedulerState>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d102      	bne.n	8003822 <xQueueGenericSend+0x9e>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <xQueueGenericSend+0xa2>
 8003822:	2301      	movs	r3, #1
 8003824:	e000      	b.n	8003828 <xQueueGenericSend+0xa4>
 8003826:	2300      	movs	r3, #0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10a      	bne.n	8003842 <xQueueGenericSend+0xbe>
	__asm volatile
 800382c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003830:	f383 8811 	msr	BASEPRI, r3
 8003834:	f3bf 8f6f 	isb	sy
 8003838:	f3bf 8f4f 	dsb	sy
 800383c:	61fb      	str	r3, [r7, #28]
}
 800383e:	bf00      	nop
 8003840:	e7fe      	b.n	8003840 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003842:	f001 ff8f 	bl	8005764 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384e:	429a      	cmp	r2, r3
 8003850:	d302      	bcc.n	8003858 <xQueueGenericSend+0xd4>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b02      	cmp	r3, #2
 8003856:	d129      	bne.n	80038ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	68b9      	ldr	r1, [r7, #8]
 800385c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800385e:	f000 fa0b 	bl	8003c78 <prvCopyDataToQueue>
 8003862:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	2b00      	cmp	r3, #0
 800386a:	d010      	beq.n	800388e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800386c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386e:	3324      	adds	r3, #36	; 0x24
 8003870:	4618      	mov	r0, r3
 8003872:	f000 ffbb 	bl	80047ec <xTaskRemoveFromEventList>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d013      	beq.n	80038a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800387c:	4b3f      	ldr	r3, [pc, #252]	; (800397c <xQueueGenericSend+0x1f8>)
 800387e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	f3bf 8f6f 	isb	sy
 800388c:	e00a      	b.n	80038a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800388e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003890:	2b00      	cmp	r3, #0
 8003892:	d007      	beq.n	80038a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003894:	4b39      	ldr	r3, [pc, #228]	; (800397c <xQueueGenericSend+0x1f8>)
 8003896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80038a4:	f001 ff8e 	bl	80057c4 <vPortExitCritical>
				return pdPASS;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e063      	b.n	8003974 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d103      	bne.n	80038ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038b2:	f001 ff87 	bl	80057c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80038b6:	2300      	movs	r3, #0
 80038b8:	e05c      	b.n	8003974 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d106      	bne.n	80038ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038c0:	f107 0314 	add.w	r3, r7, #20
 80038c4:	4618      	mov	r0, r3
 80038c6:	f000 fff3 	bl	80048b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038ca:	2301      	movs	r3, #1
 80038cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038ce:	f001 ff79 	bl	80057c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038d2:	f000 fd6d 	bl	80043b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038d6:	f001 ff45 	bl	8005764 <vPortEnterCritical>
 80038da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038e0:	b25b      	sxtb	r3, r3
 80038e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e6:	d103      	bne.n	80038f0 <xQueueGenericSend+0x16c>
 80038e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038f6:	b25b      	sxtb	r3, r3
 80038f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fc:	d103      	bne.n	8003906 <xQueueGenericSend+0x182>
 80038fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003906:	f001 ff5d 	bl	80057c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800390a:	1d3a      	adds	r2, r7, #4
 800390c:	f107 0314 	add.w	r3, r7, #20
 8003910:	4611      	mov	r1, r2
 8003912:	4618      	mov	r0, r3
 8003914:	f000 ffe2 	bl	80048dc <xTaskCheckForTimeOut>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d124      	bne.n	8003968 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800391e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003920:	f000 faa2 	bl	8003e68 <prvIsQueueFull>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d018      	beq.n	800395c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800392a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392c:	3310      	adds	r3, #16
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	4611      	mov	r1, r2
 8003932:	4618      	mov	r0, r3
 8003934:	f000 ff0a 	bl	800474c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003938:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800393a:	f000 fa2d 	bl	8003d98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800393e:	f000 fd45 	bl	80043cc <xTaskResumeAll>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	f47f af7c 	bne.w	8003842 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800394a:	4b0c      	ldr	r3, [pc, #48]	; (800397c <xQueueGenericSend+0x1f8>)
 800394c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	f3bf 8f4f 	dsb	sy
 8003956:	f3bf 8f6f 	isb	sy
 800395a:	e772      	b.n	8003842 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800395c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800395e:	f000 fa1b 	bl	8003d98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003962:	f000 fd33 	bl	80043cc <xTaskResumeAll>
 8003966:	e76c      	b.n	8003842 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003968:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800396a:	f000 fa15 	bl	8003d98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800396e:	f000 fd2d 	bl	80043cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003972:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003974:	4618      	mov	r0, r3
 8003976:	3738      	adds	r7, #56	; 0x38
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	e000ed04 	.word	0xe000ed04

08003980 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b090      	sub	sp, #64	; 0x40
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
 800398c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039aa:	bf00      	nop
 80039ac:	e7fe      	b.n	80039ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d103      	bne.n	80039bc <xQueueGenericSendFromISR+0x3c>
 80039b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <xQueueGenericSendFromISR+0x40>
 80039bc:	2301      	movs	r3, #1
 80039be:	e000      	b.n	80039c2 <xQueueGenericSendFromISR+0x42>
 80039c0:	2300      	movs	r3, #0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10a      	bne.n	80039dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80039c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ca:	f383 8811 	msr	BASEPRI, r3
 80039ce:	f3bf 8f6f 	isb	sy
 80039d2:	f3bf 8f4f 	dsb	sy
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039d8:	bf00      	nop
 80039da:	e7fe      	b.n	80039da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d103      	bne.n	80039ea <xQueueGenericSendFromISR+0x6a>
 80039e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <xQueueGenericSendFromISR+0x6e>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <xQueueGenericSendFromISR+0x70>
 80039ee:	2300      	movs	r3, #0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10a      	bne.n	8003a0a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	623b      	str	r3, [r7, #32]
}
 8003a06:	bf00      	nop
 8003a08:	e7fe      	b.n	8003a08 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a0a:	f001 ff8d 	bl	8005928 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003a0e:	f3ef 8211 	mrs	r2, BASEPRI
 8003a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	61fa      	str	r2, [r7, #28]
 8003a24:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a26:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a28:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d302      	bcc.n	8003a3c <xQueueGenericSendFromISR+0xbc>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d12f      	bne.n	8003a9c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	68b9      	ldr	r1, [r7, #8]
 8003a50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a52:	f000 f911 	bl	8003c78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a56:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5e:	d112      	bne.n	8003a86 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d016      	beq.n	8003a96 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6a:	3324      	adds	r3, #36	; 0x24
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 febd 	bl	80047ec <xTaskRemoveFromEventList>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00e      	beq.n	8003a96 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00b      	beq.n	8003a96 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	e007      	b.n	8003a96 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003a86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	b25a      	sxtb	r2, r3
 8003a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003a96:	2301      	movs	r3, #1
 8003a98:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003a9a:	e001      	b.n	8003aa0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aa2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003aaa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3740      	adds	r7, #64	; 0x40
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08c      	sub	sp, #48	; 0x30
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10a      	bne.n	8003ae8 <xQueueReceive+0x30>
	__asm volatile
 8003ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad6:	f383 8811 	msr	BASEPRI, r3
 8003ada:	f3bf 8f6f 	isb	sy
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	623b      	str	r3, [r7, #32]
}
 8003ae4:	bf00      	nop
 8003ae6:	e7fe      	b.n	8003ae6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d103      	bne.n	8003af6 <xQueueReceive+0x3e>
 8003aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <xQueueReceive+0x42>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <xQueueReceive+0x44>
 8003afa:	2300      	movs	r3, #0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10a      	bne.n	8003b16 <xQueueReceive+0x5e>
	__asm volatile
 8003b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b04:	f383 8811 	msr	BASEPRI, r3
 8003b08:	f3bf 8f6f 	isb	sy
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	61fb      	str	r3, [r7, #28]
}
 8003b12:	bf00      	nop
 8003b14:	e7fe      	b.n	8003b14 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b16:	f001 f825 	bl	8004b64 <xTaskGetSchedulerState>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d102      	bne.n	8003b26 <xQueueReceive+0x6e>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <xQueueReceive+0x72>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <xQueueReceive+0x74>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <xQueueReceive+0x8e>
	__asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	61bb      	str	r3, [r7, #24]
}
 8003b42:	bf00      	nop
 8003b44:	e7fe      	b.n	8003b44 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b46:	f001 fe0d 	bl	8005764 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d01f      	beq.n	8003b96 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b5a:	f000 f8f7 	bl	8003d4c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	1e5a      	subs	r2, r3, #1
 8003b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b64:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00f      	beq.n	8003b8e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b70:	3310      	adds	r3, #16
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fe3a 	bl	80047ec <xTaskRemoveFromEventList>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d007      	beq.n	8003b8e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b7e:	4b3d      	ldr	r3, [pc, #244]	; (8003c74 <xQueueReceive+0x1bc>)
 8003b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003b8e:	f001 fe19 	bl	80057c4 <vPortExitCritical>
				return pdPASS;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e069      	b.n	8003c6a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d103      	bne.n	8003ba4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b9c:	f001 fe12 	bl	80057c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	e062      	b.n	8003c6a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003baa:	f107 0310 	add.w	r3, r7, #16
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 fe7e 	bl	80048b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bb8:	f001 fe04 	bl	80057c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bbc:	f000 fbf8 	bl	80043b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bc0:	f001 fdd0 	bl	8005764 <vPortEnterCritical>
 8003bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bca:	b25b      	sxtb	r3, r3
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd0:	d103      	bne.n	8003bda <xQueueReceive+0x122>
 8003bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003be0:	b25b      	sxtb	r3, r3
 8003be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be6:	d103      	bne.n	8003bf0 <xQueueReceive+0x138>
 8003be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bf0:	f001 fde8 	bl	80057c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bf4:	1d3a      	adds	r2, r7, #4
 8003bf6:	f107 0310 	add.w	r3, r7, #16
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 fe6d 	bl	80048dc <xTaskCheckForTimeOut>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d123      	bne.n	8003c50 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c0a:	f000 f917 	bl	8003e3c <prvIsQueueEmpty>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d017      	beq.n	8003c44 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c16:	3324      	adds	r3, #36	; 0x24
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 fd95 	bl	800474c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c24:	f000 f8b8 	bl	8003d98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c28:	f000 fbd0 	bl	80043cc <xTaskResumeAll>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d189      	bne.n	8003b46 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003c32:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <xQueueReceive+0x1bc>)
 8003c34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	e780      	b.n	8003b46 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c46:	f000 f8a7 	bl	8003d98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c4a:	f000 fbbf 	bl	80043cc <xTaskResumeAll>
 8003c4e:	e77a      	b.n	8003b46 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c52:	f000 f8a1 	bl	8003d98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c56:	f000 fbb9 	bl	80043cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c5c:	f000 f8ee 	bl	8003e3c <prvIsQueueEmpty>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f43f af6f 	beq.w	8003b46 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003c68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3730      	adds	r7, #48	; 0x30
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	e000ed04 	.word	0xe000ed04

08003c78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10d      	bne.n	8003cb2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d14d      	bne.n	8003d3a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 ff7c 	bl	8004ba0 <xTaskPriorityDisinherit>
 8003ca8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	609a      	str	r2, [r3, #8]
 8003cb0:	e043      	b.n	8003d3a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d119      	bne.n	8003cec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6858      	ldr	r0, [r3, #4]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	68b9      	ldr	r1, [r7, #8]
 8003cc4:	f002 fadd 	bl	8006282 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	441a      	add	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d32b      	bcc.n	8003d3a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	605a      	str	r2, [r3, #4]
 8003cea:	e026      	b.n	8003d3a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	68d8      	ldr	r0, [r3, #12]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	68b9      	ldr	r1, [r7, #8]
 8003cf8:	f002 fac3 	bl	8006282 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d04:	425b      	negs	r3, r3
 8003d06:	441a      	add	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d207      	bcs.n	8003d28 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	425b      	negs	r3, r3
 8003d22:	441a      	add	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d105      	bne.n	8003d3a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003d42:	697b      	ldr	r3, [r7, #20]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d018      	beq.n	8003d90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	441a      	add	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68da      	ldr	r2, [r3, #12]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d303      	bcc.n	8003d80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68d9      	ldr	r1, [r3, #12]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	461a      	mov	r2, r3
 8003d8a:	6838      	ldr	r0, [r7, #0]
 8003d8c:	f002 fa79 	bl	8006282 <memcpy>
	}
}
 8003d90:	bf00      	nop
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003da0:	f001 fce0 	bl	8005764 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003daa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003dac:	e011      	b.n	8003dd2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d012      	beq.n	8003ddc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3324      	adds	r3, #36	; 0x24
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fd16 	bl	80047ec <xTaskRemoveFromEventList>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003dc6:	f000 fdeb 	bl	80049a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	dce9      	bgt.n	8003dae <prvUnlockQueue+0x16>
 8003dda:	e000      	b.n	8003dde <prvUnlockQueue+0x46>
					break;
 8003ddc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	22ff      	movs	r2, #255	; 0xff
 8003de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003de6:	f001 fced 	bl	80057c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003dea:	f001 fcbb 	bl	8005764 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003df4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003df6:	e011      	b.n	8003e1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d012      	beq.n	8003e26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3310      	adds	r3, #16
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 fcf1 	bl	80047ec <xTaskRemoveFromEventList>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003e10:	f000 fdc6 	bl	80049a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e14:	7bbb      	ldrb	r3, [r7, #14]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	dce9      	bgt.n	8003df8 <prvUnlockQueue+0x60>
 8003e24:	e000      	b.n	8003e28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	22ff      	movs	r2, #255	; 0xff
 8003e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003e30:	f001 fcc8 	bl	80057c4 <vPortExitCritical>
}
 8003e34:	bf00      	nop
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e44:	f001 fc8e 	bl	8005764 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d102      	bne.n	8003e56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003e50:	2301      	movs	r3, #1
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	e001      	b.n	8003e5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003e56:	2300      	movs	r3, #0
 8003e58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e5a:	f001 fcb3 	bl	80057c4 <vPortExitCritical>

	return xReturn;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e70:	f001 fc78 	bl	8005764 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d102      	bne.n	8003e86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003e80:	2301      	movs	r3, #1
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	e001      	b.n	8003e8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003e86:	2300      	movs	r3, #0
 8003e88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e8a:	f001 fc9b 	bl	80057c4 <vPortExitCritical>

	return xReturn;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	e014      	b.n	8003ed2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003ea8:	4a0f      	ldr	r2, [pc, #60]	; (8003ee8 <vQueueAddToRegistry+0x50>)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10b      	bne.n	8003ecc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003eb4:	490c      	ldr	r1, [pc, #48]	; (8003ee8 <vQueueAddToRegistry+0x50>)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003ebe:	4a0a      	ldr	r2, [pc, #40]	; (8003ee8 <vQueueAddToRegistry+0x50>)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003eca:	e006      	b.n	8003eda <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2b07      	cmp	r3, #7
 8003ed6:	d9e7      	bls.n	8003ea8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003ed8:	bf00      	nop
 8003eda:	bf00      	nop
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	200007d0 	.word	0x200007d0

08003eec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003efc:	f001 fc32 	bl	8005764 <vPortEnterCritical>
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f06:	b25b      	sxtb	r3, r3
 8003f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0c:	d103      	bne.n	8003f16 <vQueueWaitForMessageRestricted+0x2a>
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f1c:	b25b      	sxtb	r3, r3
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	d103      	bne.n	8003f2c <vQueueWaitForMessageRestricted+0x40>
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f2c:	f001 fc4a 	bl	80057c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d106      	bne.n	8003f46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	3324      	adds	r3, #36	; 0x24
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	68b9      	ldr	r1, [r7, #8]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fc27 	bl	8004794 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003f46:	6978      	ldr	r0, [r7, #20]
 8003f48:	f7ff ff26 	bl	8003d98 <prvUnlockQueue>
	}
 8003f4c:	bf00      	nop
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08e      	sub	sp, #56	; 0x38
 8003f58:	af04      	add	r7, sp, #16
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10a      	bne.n	8003f7e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6c:	f383 8811 	msr	BASEPRI, r3
 8003f70:	f3bf 8f6f 	isb	sy
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	623b      	str	r3, [r7, #32]
}
 8003f7a:	bf00      	nop
 8003f7c:	e7fe      	b.n	8003f7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10a      	bne.n	8003f9a <xTaskCreateStatic+0x46>
	__asm volatile
 8003f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	61fb      	str	r3, [r7, #28]
}
 8003f96:	bf00      	nop
 8003f98:	e7fe      	b.n	8003f98 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f9a:	2354      	movs	r3, #84	; 0x54
 8003f9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	2b54      	cmp	r3, #84	; 0x54
 8003fa2:	d00a      	beq.n	8003fba <xTaskCreateStatic+0x66>
	__asm volatile
 8003fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	61bb      	str	r3, [r7, #24]
}
 8003fb6:	bf00      	nop
 8003fb8:	e7fe      	b.n	8003fb8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003fba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d01e      	beq.n	8004000 <xTaskCreateStatic+0xac>
 8003fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d01b      	beq.n	8004000 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fd0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003fda:	2300      	movs	r3, #0
 8003fdc:	9303      	str	r3, [sp, #12]
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	9302      	str	r3, [sp, #8]
 8003fe2:	f107 0314 	add.w	r3, r7, #20
 8003fe6:	9301      	str	r3, [sp, #4]
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	68b9      	ldr	r1, [r7, #8]
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 f850 	bl	8004098 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ff8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ffa:	f000 f8d5 	bl	80041a8 <prvAddNewTaskToReadyList>
 8003ffe:	e001      	b.n	8004004 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004000:	2300      	movs	r3, #0
 8004002:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004004:	697b      	ldr	r3, [r7, #20]
	}
 8004006:	4618      	mov	r0, r3
 8004008:	3728      	adds	r7, #40	; 0x28
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800400e:	b580      	push	{r7, lr}
 8004010:	b08c      	sub	sp, #48	; 0x30
 8004012:	af04      	add	r7, sp, #16
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	603b      	str	r3, [r7, #0]
 800401a:	4613      	mov	r3, r2
 800401c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800401e:	88fb      	ldrh	r3, [r7, #6]
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4618      	mov	r0, r3
 8004024:	f001 fcc0 	bl	80059a8 <pvPortMalloc>
 8004028:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00e      	beq.n	800404e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004030:	2054      	movs	r0, #84	; 0x54
 8004032:	f001 fcb9 	bl	80059a8 <pvPortMalloc>
 8004036:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	631a      	str	r2, [r3, #48]	; 0x30
 8004044:	e005      	b.n	8004052 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004046:	6978      	ldr	r0, [r7, #20]
 8004048:	f001 fd7a 	bl	8005b40 <vPortFree>
 800404c:	e001      	b.n	8004052 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800404e:	2300      	movs	r3, #0
 8004050:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d017      	beq.n	8004088 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004060:	88fa      	ldrh	r2, [r7, #6]
 8004062:	2300      	movs	r3, #0
 8004064:	9303      	str	r3, [sp, #12]
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	9302      	str	r3, [sp, #8]
 800406a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406c:	9301      	str	r3, [sp, #4]
 800406e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68b9      	ldr	r1, [r7, #8]
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 f80e 	bl	8004098 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800407c:	69f8      	ldr	r0, [r7, #28]
 800407e:	f000 f893 	bl	80041a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004082:	2301      	movs	r3, #1
 8004084:	61bb      	str	r3, [r7, #24]
 8004086:	e002      	b.n	800408e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004088:	f04f 33ff 	mov.w	r3, #4294967295
 800408c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800408e:	69bb      	ldr	r3, [r7, #24]
	}
 8004090:	4618      	mov	r0, r3
 8004092:	3720      	adds	r7, #32
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b088      	sub	sp, #32
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80040a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040b0:	3b01      	subs	r3, #1
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	f023 0307 	bic.w	r3, r3, #7
 80040be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00a      	beq.n	80040e0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80040ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	617b      	str	r3, [r7, #20]
}
 80040dc:	bf00      	nop
 80040de:	e7fe      	b.n	80040de <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d01f      	beq.n	8004126 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040e6:	2300      	movs	r3, #0
 80040e8:	61fb      	str	r3, [r7, #28]
 80040ea:	e012      	b.n	8004112 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	4413      	add	r3, r2
 80040f2:	7819      	ldrb	r1, [r3, #0]
 80040f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	4413      	add	r3, r2
 80040fa:	3334      	adds	r3, #52	; 0x34
 80040fc:	460a      	mov	r2, r1
 80040fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	4413      	add	r3, r2
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d006      	beq.n	800411a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	3301      	adds	r3, #1
 8004110:	61fb      	str	r3, [r7, #28]
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	2b0f      	cmp	r3, #15
 8004116:	d9e9      	bls.n	80040ec <prvInitialiseNewTask+0x54>
 8004118:	e000      	b.n	800411c <prvInitialiseNewTask+0x84>
			{
				break;
 800411a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800411c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004124:	e003      	b.n	800412e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800412e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004130:	2b06      	cmp	r3, #6
 8004132:	d901      	bls.n	8004138 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004134:	2306      	movs	r3, #6
 8004136:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800413c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004142:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004146:	2200      	movs	r2, #0
 8004148:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800414a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414c:	3304      	adds	r3, #4
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff f984 	bl	800345c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004156:	3318      	adds	r3, #24
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff f97f 	bl	800345c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004162:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004166:	f1c3 0207 	rsb	r2, r3, #7
 800416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800416e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004172:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004176:	2200      	movs	r2, #0
 8004178:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	68f9      	ldr	r1, [r7, #12]
 8004186:	69b8      	ldr	r0, [r7, #24]
 8004188:	f001 f9c2 	bl	8005510 <pxPortInitialiseStack>
 800418c:	4602      	mov	r2, r0
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800419c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800419e:	bf00      	nop
 80041a0:	3720      	adds	r7, #32
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041b0:	f001 fad8 	bl	8005764 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041b4:	4b2a      	ldr	r3, [pc, #168]	; (8004260 <prvAddNewTaskToReadyList+0xb8>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3301      	adds	r3, #1
 80041ba:	4a29      	ldr	r2, [pc, #164]	; (8004260 <prvAddNewTaskToReadyList+0xb8>)
 80041bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80041be:	4b29      	ldr	r3, [pc, #164]	; (8004264 <prvAddNewTaskToReadyList+0xbc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d109      	bne.n	80041da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80041c6:	4a27      	ldr	r2, [pc, #156]	; (8004264 <prvAddNewTaskToReadyList+0xbc>)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80041cc:	4b24      	ldr	r3, [pc, #144]	; (8004260 <prvAddNewTaskToReadyList+0xb8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d110      	bne.n	80041f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80041d4:	f000 fc08 	bl	80049e8 <prvInitialiseTaskLists>
 80041d8:	e00d      	b.n	80041f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80041da:	4b23      	ldr	r3, [pc, #140]	; (8004268 <prvAddNewTaskToReadyList+0xc0>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d109      	bne.n	80041f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80041e2:	4b20      	ldr	r3, [pc, #128]	; (8004264 <prvAddNewTaskToReadyList+0xbc>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d802      	bhi.n	80041f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80041f0:	4a1c      	ldr	r2, [pc, #112]	; (8004264 <prvAddNewTaskToReadyList+0xbc>)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80041f6:	4b1d      	ldr	r3, [pc, #116]	; (800426c <prvAddNewTaskToReadyList+0xc4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3301      	adds	r3, #1
 80041fc:	4a1b      	ldr	r2, [pc, #108]	; (800426c <prvAddNewTaskToReadyList+0xc4>)
 80041fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	2201      	movs	r2, #1
 8004206:	409a      	lsls	r2, r3
 8004208:	4b19      	ldr	r3, [pc, #100]	; (8004270 <prvAddNewTaskToReadyList+0xc8>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4313      	orrs	r3, r2
 800420e:	4a18      	ldr	r2, [pc, #96]	; (8004270 <prvAddNewTaskToReadyList+0xc8>)
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004216:	4613      	mov	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4a15      	ldr	r2, [pc, #84]	; (8004274 <prvAddNewTaskToReadyList+0xcc>)
 8004220:	441a      	add	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	3304      	adds	r3, #4
 8004226:	4619      	mov	r1, r3
 8004228:	4610      	mov	r0, r2
 800422a:	f7ff f924 	bl	8003476 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800422e:	f001 fac9 	bl	80057c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004232:	4b0d      	ldr	r3, [pc, #52]	; (8004268 <prvAddNewTaskToReadyList+0xc0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00e      	beq.n	8004258 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800423a:	4b0a      	ldr	r3, [pc, #40]	; (8004264 <prvAddNewTaskToReadyList+0xbc>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	429a      	cmp	r2, r3
 8004246:	d207      	bcs.n	8004258 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004248:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <prvAddNewTaskToReadyList+0xd0>)
 800424a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004258:	bf00      	nop
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	20000910 	.word	0x20000910
 8004264:	20000810 	.word	0x20000810
 8004268:	2000091c 	.word	0x2000091c
 800426c:	2000092c 	.word	0x2000092c
 8004270:	20000918 	.word	0x20000918
 8004274:	20000814 	.word	0x20000814
 8004278:	e000ed04 	.word	0xe000ed04

0800427c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004284:	2300      	movs	r3, #0
 8004286:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d017      	beq.n	80042be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800428e:	4b13      	ldr	r3, [pc, #76]	; (80042dc <vTaskDelay+0x60>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <vTaskDelay+0x30>
	__asm volatile
 8004296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	60bb      	str	r3, [r7, #8]
}
 80042a8:	bf00      	nop
 80042aa:	e7fe      	b.n	80042aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80042ac:	f000 f880 	bl	80043b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042b0:	2100      	movs	r1, #0
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fcfa 	bl	8004cac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80042b8:	f000 f888 	bl	80043cc <xTaskResumeAll>
 80042bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d107      	bne.n	80042d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80042c4:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <vTaskDelay+0x64>)
 80042c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80042d4:	bf00      	nop
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	20000938 	.word	0x20000938
 80042e0:	e000ed04 	.word	0xe000ed04

080042e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08a      	sub	sp, #40	; 0x28
 80042e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042ee:	2300      	movs	r3, #0
 80042f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042f2:	463a      	mov	r2, r7
 80042f4:	1d39      	adds	r1, r7, #4
 80042f6:	f107 0308 	add.w	r3, r7, #8
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fc f936 	bl	800056c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004300:	6839      	ldr	r1, [r7, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	9202      	str	r2, [sp, #8]
 8004308:	9301      	str	r3, [sp, #4]
 800430a:	2300      	movs	r3, #0
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	2300      	movs	r3, #0
 8004310:	460a      	mov	r2, r1
 8004312:	4921      	ldr	r1, [pc, #132]	; (8004398 <vTaskStartScheduler+0xb4>)
 8004314:	4821      	ldr	r0, [pc, #132]	; (800439c <vTaskStartScheduler+0xb8>)
 8004316:	f7ff fe1d 	bl	8003f54 <xTaskCreateStatic>
 800431a:	4603      	mov	r3, r0
 800431c:	4a20      	ldr	r2, [pc, #128]	; (80043a0 <vTaskStartScheduler+0xbc>)
 800431e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004320:	4b1f      	ldr	r3, [pc, #124]	; (80043a0 <vTaskStartScheduler+0xbc>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004328:	2301      	movs	r3, #1
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	e001      	b.n	8004332 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800432e:	2300      	movs	r3, #0
 8004330:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d102      	bne.n	800433e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004338:	f000 fd1e 	bl	8004d78 <xTimerCreateTimerTask>
 800433c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d116      	bne.n	8004372 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004348:	f383 8811 	msr	BASEPRI, r3
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	613b      	str	r3, [r7, #16]
}
 8004356:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004358:	4b12      	ldr	r3, [pc, #72]	; (80043a4 <vTaskStartScheduler+0xc0>)
 800435a:	f04f 32ff 	mov.w	r2, #4294967295
 800435e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004360:	4b11      	ldr	r3, [pc, #68]	; (80043a8 <vTaskStartScheduler+0xc4>)
 8004362:	2201      	movs	r2, #1
 8004364:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004366:	4b11      	ldr	r3, [pc, #68]	; (80043ac <vTaskStartScheduler+0xc8>)
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800436c:	f001 f958 	bl	8005620 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004370:	e00e      	b.n	8004390 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004378:	d10a      	bne.n	8004390 <vTaskStartScheduler+0xac>
	__asm volatile
 800437a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	60fb      	str	r3, [r7, #12]
}
 800438c:	bf00      	nop
 800438e:	e7fe      	b.n	800438e <vTaskStartScheduler+0xaa>
}
 8004390:	bf00      	nop
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	08006d2c 	.word	0x08006d2c
 800439c:	080049b9 	.word	0x080049b9
 80043a0:	20000934 	.word	0x20000934
 80043a4:	20000930 	.word	0x20000930
 80043a8:	2000091c 	.word	0x2000091c
 80043ac:	20000914 	.word	0x20000914

080043b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80043b4:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <vTaskSuspendAll+0x18>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3301      	adds	r3, #1
 80043ba:	4a03      	ldr	r2, [pc, #12]	; (80043c8 <vTaskSuspendAll+0x18>)
 80043bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80043be:	bf00      	nop
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	20000938 	.word	0x20000938

080043cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043d6:	2300      	movs	r3, #0
 80043d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043da:	4b41      	ldr	r3, [pc, #260]	; (80044e0 <xTaskResumeAll+0x114>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10a      	bne.n	80043f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	603b      	str	r3, [r7, #0]
}
 80043f4:	bf00      	nop
 80043f6:	e7fe      	b.n	80043f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043f8:	f001 f9b4 	bl	8005764 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80043fc:	4b38      	ldr	r3, [pc, #224]	; (80044e0 <xTaskResumeAll+0x114>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3b01      	subs	r3, #1
 8004402:	4a37      	ldr	r2, [pc, #220]	; (80044e0 <xTaskResumeAll+0x114>)
 8004404:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004406:	4b36      	ldr	r3, [pc, #216]	; (80044e0 <xTaskResumeAll+0x114>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d161      	bne.n	80044d2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800440e:	4b35      	ldr	r3, [pc, #212]	; (80044e4 <xTaskResumeAll+0x118>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d05d      	beq.n	80044d2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004416:	e02e      	b.n	8004476 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004418:	4b33      	ldr	r3, [pc, #204]	; (80044e8 <xTaskResumeAll+0x11c>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	3318      	adds	r3, #24
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff f883 	bl	8003530 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	3304      	adds	r3, #4
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff f87e 	bl	8003530 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	2201      	movs	r2, #1
 800443a:	409a      	lsls	r2, r3
 800443c:	4b2b      	ldr	r3, [pc, #172]	; (80044ec <xTaskResumeAll+0x120>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4313      	orrs	r3, r2
 8004442:	4a2a      	ldr	r2, [pc, #168]	; (80044ec <xTaskResumeAll+0x120>)
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444a:	4613      	mov	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4a27      	ldr	r2, [pc, #156]	; (80044f0 <xTaskResumeAll+0x124>)
 8004454:	441a      	add	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	3304      	adds	r3, #4
 800445a:	4619      	mov	r1, r3
 800445c:	4610      	mov	r0, r2
 800445e:	f7ff f80a 	bl	8003476 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004466:	4b23      	ldr	r3, [pc, #140]	; (80044f4 <xTaskResumeAll+0x128>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	429a      	cmp	r2, r3
 800446e:	d302      	bcc.n	8004476 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004470:	4b21      	ldr	r3, [pc, #132]	; (80044f8 <xTaskResumeAll+0x12c>)
 8004472:	2201      	movs	r2, #1
 8004474:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004476:	4b1c      	ldr	r3, [pc, #112]	; (80044e8 <xTaskResumeAll+0x11c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1cc      	bne.n	8004418 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004484:	f000 fb4e 	bl	8004b24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004488:	4b1c      	ldr	r3, [pc, #112]	; (80044fc <xTaskResumeAll+0x130>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d010      	beq.n	80044b6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004494:	f000 f846 	bl	8004524 <xTaskIncrementTick>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800449e:	4b16      	ldr	r3, [pc, #88]	; (80044f8 <xTaskResumeAll+0x12c>)
 80044a0:	2201      	movs	r2, #1
 80044a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1f1      	bne.n	8004494 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80044b0:	4b12      	ldr	r3, [pc, #72]	; (80044fc <xTaskResumeAll+0x130>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044b6:	4b10      	ldr	r3, [pc, #64]	; (80044f8 <xTaskResumeAll+0x12c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d009      	beq.n	80044d2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80044be:	2301      	movs	r3, #1
 80044c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80044c2:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <xTaskResumeAll+0x134>)
 80044c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044d2:	f001 f977 	bl	80057c4 <vPortExitCritical>

	return xAlreadyYielded;
 80044d6:	68bb      	ldr	r3, [r7, #8]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	20000938 	.word	0x20000938
 80044e4:	20000910 	.word	0x20000910
 80044e8:	200008d0 	.word	0x200008d0
 80044ec:	20000918 	.word	0x20000918
 80044f0:	20000814 	.word	0x20000814
 80044f4:	20000810 	.word	0x20000810
 80044f8:	20000924 	.word	0x20000924
 80044fc:	20000920 	.word	0x20000920
 8004500:	e000ed04 	.word	0xe000ed04

08004504 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800450a:	4b05      	ldr	r3, [pc, #20]	; (8004520 <xTaskGetTickCount+0x1c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004510:	687b      	ldr	r3, [r7, #4]
}
 8004512:	4618      	mov	r0, r3
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	20000914 	.word	0x20000914

08004524 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800452a:	2300      	movs	r3, #0
 800452c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800452e:	4b4e      	ldr	r3, [pc, #312]	; (8004668 <xTaskIncrementTick+0x144>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	f040 808e 	bne.w	8004654 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004538:	4b4c      	ldr	r3, [pc, #304]	; (800466c <xTaskIncrementTick+0x148>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3301      	adds	r3, #1
 800453e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004540:	4a4a      	ldr	r2, [pc, #296]	; (800466c <xTaskIncrementTick+0x148>)
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d120      	bne.n	800458e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800454c:	4b48      	ldr	r3, [pc, #288]	; (8004670 <xTaskIncrementTick+0x14c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <xTaskIncrementTick+0x48>
	__asm volatile
 8004556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455a:	f383 8811 	msr	BASEPRI, r3
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	f3bf 8f4f 	dsb	sy
 8004566:	603b      	str	r3, [r7, #0]
}
 8004568:	bf00      	nop
 800456a:	e7fe      	b.n	800456a <xTaskIncrementTick+0x46>
 800456c:	4b40      	ldr	r3, [pc, #256]	; (8004670 <xTaskIncrementTick+0x14c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	4b40      	ldr	r3, [pc, #256]	; (8004674 <xTaskIncrementTick+0x150>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a3e      	ldr	r2, [pc, #248]	; (8004670 <xTaskIncrementTick+0x14c>)
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	4a3e      	ldr	r2, [pc, #248]	; (8004674 <xTaskIncrementTick+0x150>)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	4b3d      	ldr	r3, [pc, #244]	; (8004678 <xTaskIncrementTick+0x154>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	3301      	adds	r3, #1
 8004586:	4a3c      	ldr	r2, [pc, #240]	; (8004678 <xTaskIncrementTick+0x154>)
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	f000 facb 	bl	8004b24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800458e:	4b3b      	ldr	r3, [pc, #236]	; (800467c <xTaskIncrementTick+0x158>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	429a      	cmp	r2, r3
 8004596:	d348      	bcc.n	800462a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004598:	4b35      	ldr	r3, [pc, #212]	; (8004670 <xTaskIncrementTick+0x14c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d104      	bne.n	80045ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045a2:	4b36      	ldr	r3, [pc, #216]	; (800467c <xTaskIncrementTick+0x158>)
 80045a4:	f04f 32ff 	mov.w	r2, #4294967295
 80045a8:	601a      	str	r2, [r3, #0]
					break;
 80045aa:	e03e      	b.n	800462a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045ac:	4b30      	ldr	r3, [pc, #192]	; (8004670 <xTaskIncrementTick+0x14c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d203      	bcs.n	80045cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80045c4:	4a2d      	ldr	r2, [pc, #180]	; (800467c <xTaskIncrementTick+0x158>)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80045ca:	e02e      	b.n	800462a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	3304      	adds	r3, #4
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fe ffad 	bl	8003530 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d004      	beq.n	80045e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	3318      	adds	r3, #24
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fe ffa4 	bl	8003530 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	2201      	movs	r2, #1
 80045ee:	409a      	lsls	r2, r3
 80045f0:	4b23      	ldr	r3, [pc, #140]	; (8004680 <xTaskIncrementTick+0x15c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	4a22      	ldr	r2, [pc, #136]	; (8004680 <xTaskIncrementTick+0x15c>)
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fe:	4613      	mov	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4a1f      	ldr	r2, [pc, #124]	; (8004684 <xTaskIncrementTick+0x160>)
 8004608:	441a      	add	r2, r3
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	3304      	adds	r3, #4
 800460e:	4619      	mov	r1, r3
 8004610:	4610      	mov	r0, r2
 8004612:	f7fe ff30 	bl	8003476 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461a:	4b1b      	ldr	r3, [pc, #108]	; (8004688 <xTaskIncrementTick+0x164>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	429a      	cmp	r2, r3
 8004622:	d3b9      	bcc.n	8004598 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004624:	2301      	movs	r3, #1
 8004626:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004628:	e7b6      	b.n	8004598 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800462a:	4b17      	ldr	r3, [pc, #92]	; (8004688 <xTaskIncrementTick+0x164>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004630:	4914      	ldr	r1, [pc, #80]	; (8004684 <xTaskIncrementTick+0x160>)
 8004632:	4613      	mov	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	440b      	add	r3, r1
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d901      	bls.n	8004646 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004642:	2301      	movs	r3, #1
 8004644:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004646:	4b11      	ldr	r3, [pc, #68]	; (800468c <xTaskIncrementTick+0x168>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d007      	beq.n	800465e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800464e:	2301      	movs	r3, #1
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	e004      	b.n	800465e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004654:	4b0e      	ldr	r3, [pc, #56]	; (8004690 <xTaskIncrementTick+0x16c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3301      	adds	r3, #1
 800465a:	4a0d      	ldr	r2, [pc, #52]	; (8004690 <xTaskIncrementTick+0x16c>)
 800465c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800465e:	697b      	ldr	r3, [r7, #20]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	20000938 	.word	0x20000938
 800466c:	20000914 	.word	0x20000914
 8004670:	200008c8 	.word	0x200008c8
 8004674:	200008cc 	.word	0x200008cc
 8004678:	20000928 	.word	0x20000928
 800467c:	20000930 	.word	0x20000930
 8004680:	20000918 	.word	0x20000918
 8004684:	20000814 	.word	0x20000814
 8004688:	20000810 	.word	0x20000810
 800468c:	20000924 	.word	0x20000924
 8004690:	20000920 	.word	0x20000920

08004694 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004694:	b480      	push	{r7}
 8004696:	b087      	sub	sp, #28
 8004698:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800469a:	4b27      	ldr	r3, [pc, #156]	; (8004738 <vTaskSwitchContext+0xa4>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80046a2:	4b26      	ldr	r3, [pc, #152]	; (800473c <vTaskSwitchContext+0xa8>)
 80046a4:	2201      	movs	r2, #1
 80046a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80046a8:	e03f      	b.n	800472a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80046aa:	4b24      	ldr	r3, [pc, #144]	; (800473c <vTaskSwitchContext+0xa8>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046b0:	4b23      	ldr	r3, [pc, #140]	; (8004740 <vTaskSwitchContext+0xac>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	fab3 f383 	clz	r3, r3
 80046bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80046be:	7afb      	ldrb	r3, [r7, #11]
 80046c0:	f1c3 031f 	rsb	r3, r3, #31
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	491f      	ldr	r1, [pc, #124]	; (8004744 <vTaskSwitchContext+0xb0>)
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10a      	bne.n	80046f0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80046da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	607b      	str	r3, [r7, #4]
}
 80046ec:	bf00      	nop
 80046ee:	e7fe      	b.n	80046ee <vTaskSwitchContext+0x5a>
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4a12      	ldr	r2, [pc, #72]	; (8004744 <vTaskSwitchContext+0xb0>)
 80046fc:	4413      	add	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	605a      	str	r2, [r3, #4]
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	3308      	adds	r3, #8
 8004712:	429a      	cmp	r2, r3
 8004714:	d104      	bne.n	8004720 <vTaskSwitchContext+0x8c>
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	605a      	str	r2, [r3, #4]
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	4a08      	ldr	r2, [pc, #32]	; (8004748 <vTaskSwitchContext+0xb4>)
 8004728:	6013      	str	r3, [r2, #0]
}
 800472a:	bf00      	nop
 800472c:	371c      	adds	r7, #28
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	20000938 	.word	0x20000938
 800473c:	20000924 	.word	0x20000924
 8004740:	20000918 	.word	0x20000918
 8004744:	20000814 	.word	0x20000814
 8004748:	20000810 	.word	0x20000810

0800474c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10a      	bne.n	8004772 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	60fb      	str	r3, [r7, #12]
}
 800476e:	bf00      	nop
 8004770:	e7fe      	b.n	8004770 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004772:	4b07      	ldr	r3, [pc, #28]	; (8004790 <vTaskPlaceOnEventList+0x44>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3318      	adds	r3, #24
 8004778:	4619      	mov	r1, r3
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fe fe9f 	bl	80034be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004780:	2101      	movs	r1, #1
 8004782:	6838      	ldr	r0, [r7, #0]
 8004784:	f000 fa92 	bl	8004cac <prvAddCurrentTaskToDelayedList>
}
 8004788:	bf00      	nop
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	20000810 	.word	0x20000810

08004794 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10a      	bne.n	80047bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80047a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	617b      	str	r3, [r7, #20]
}
 80047b8:	bf00      	nop
 80047ba:	e7fe      	b.n	80047ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047bc:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3318      	adds	r3, #24
 80047c2:	4619      	mov	r1, r3
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f7fe fe56 	bl	8003476 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80047d0:	f04f 33ff 	mov.w	r3, #4294967295
 80047d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	68b8      	ldr	r0, [r7, #8]
 80047da:	f000 fa67 	bl	8004cac <prvAddCurrentTaskToDelayedList>
	}
 80047de:	bf00      	nop
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20000810 	.word	0x20000810

080047ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10a      	bne.n	8004818 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	60fb      	str	r3, [r7, #12]
}
 8004814:	bf00      	nop
 8004816:	e7fe      	b.n	8004816 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	3318      	adds	r3, #24
 800481c:	4618      	mov	r0, r3
 800481e:	f7fe fe87 	bl	8003530 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004822:	4b1d      	ldr	r3, [pc, #116]	; (8004898 <xTaskRemoveFromEventList+0xac>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d11c      	bne.n	8004864 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	3304      	adds	r3, #4
 800482e:	4618      	mov	r0, r3
 8004830:	f7fe fe7e 	bl	8003530 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	2201      	movs	r2, #1
 800483a:	409a      	lsls	r2, r3
 800483c:	4b17      	ldr	r3, [pc, #92]	; (800489c <xTaskRemoveFromEventList+0xb0>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4313      	orrs	r3, r2
 8004842:	4a16      	ldr	r2, [pc, #88]	; (800489c <xTaskRemoveFromEventList+0xb0>)
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484a:	4613      	mov	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4a13      	ldr	r2, [pc, #76]	; (80048a0 <xTaskRemoveFromEventList+0xb4>)
 8004854:	441a      	add	r2, r3
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	3304      	adds	r3, #4
 800485a:	4619      	mov	r1, r3
 800485c:	4610      	mov	r0, r2
 800485e:	f7fe fe0a 	bl	8003476 <vListInsertEnd>
 8004862:	e005      	b.n	8004870 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	3318      	adds	r3, #24
 8004868:	4619      	mov	r1, r3
 800486a:	480e      	ldr	r0, [pc, #56]	; (80048a4 <xTaskRemoveFromEventList+0xb8>)
 800486c:	f7fe fe03 	bl	8003476 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004874:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <xTaskRemoveFromEventList+0xbc>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487a:	429a      	cmp	r2, r3
 800487c:	d905      	bls.n	800488a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800487e:	2301      	movs	r3, #1
 8004880:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004882:	4b0a      	ldr	r3, [pc, #40]	; (80048ac <xTaskRemoveFromEventList+0xc0>)
 8004884:	2201      	movs	r2, #1
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	e001      	b.n	800488e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800488a:	2300      	movs	r3, #0
 800488c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800488e:	697b      	ldr	r3, [r7, #20]
}
 8004890:	4618      	mov	r0, r3
 8004892:	3718      	adds	r7, #24
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	20000938 	.word	0x20000938
 800489c:	20000918 	.word	0x20000918
 80048a0:	20000814 	.word	0x20000814
 80048a4:	200008d0 	.word	0x200008d0
 80048a8:	20000810 	.word	0x20000810
 80048ac:	20000924 	.word	0x20000924

080048b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80048b8:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <vTaskInternalSetTimeOutState+0x24>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80048c0:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <vTaskInternalSetTimeOutState+0x28>)
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	605a      	str	r2, [r3, #4]
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	20000928 	.word	0x20000928
 80048d8:	20000914 	.word	0x20000914

080048dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10a      	bne.n	8004902 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80048ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f0:	f383 8811 	msr	BASEPRI, r3
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	613b      	str	r3, [r7, #16]
}
 80048fe:	bf00      	nop
 8004900:	e7fe      	b.n	8004900 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10a      	bne.n	800491e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	60fb      	str	r3, [r7, #12]
}
 800491a:	bf00      	nop
 800491c:	e7fe      	b.n	800491c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800491e:	f000 ff21 	bl	8005764 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004922:	4b1d      	ldr	r3, [pc, #116]	; (8004998 <xTaskCheckForTimeOut+0xbc>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493a:	d102      	bne.n	8004942 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800493c:	2300      	movs	r3, #0
 800493e:	61fb      	str	r3, [r7, #28]
 8004940:	e023      	b.n	800498a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4b15      	ldr	r3, [pc, #84]	; (800499c <xTaskCheckForTimeOut+0xc0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d007      	beq.n	800495e <xTaskCheckForTimeOut+0x82>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	429a      	cmp	r2, r3
 8004956:	d302      	bcc.n	800495e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004958:	2301      	movs	r3, #1
 800495a:	61fb      	str	r3, [r7, #28]
 800495c:	e015      	b.n	800498a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	429a      	cmp	r2, r3
 8004966:	d20b      	bcs.n	8004980 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	1ad2      	subs	r2, r2, r3
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7ff ff9b 	bl	80048b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800497a:	2300      	movs	r3, #0
 800497c:	61fb      	str	r3, [r7, #28]
 800497e:	e004      	b.n	800498a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004986:	2301      	movs	r3, #1
 8004988:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800498a:	f000 ff1b 	bl	80057c4 <vPortExitCritical>

	return xReturn;
 800498e:	69fb      	ldr	r3, [r7, #28]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3720      	adds	r7, #32
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	20000914 	.word	0x20000914
 800499c:	20000928 	.word	0x20000928

080049a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80049a4:	4b03      	ldr	r3, [pc, #12]	; (80049b4 <vTaskMissedYield+0x14>)
 80049a6:	2201      	movs	r2, #1
 80049a8:	601a      	str	r2, [r3, #0]
}
 80049aa:	bf00      	nop
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	20000924 	.word	0x20000924

080049b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80049c0:	f000 f852 	bl	8004a68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80049c4:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <prvIdleTask+0x28>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d9f9      	bls.n	80049c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80049cc:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <prvIdleTask+0x2c>)
 80049ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80049dc:	e7f0      	b.n	80049c0 <prvIdleTask+0x8>
 80049de:	bf00      	nop
 80049e0:	20000814 	.word	0x20000814
 80049e4:	e000ed04 	.word	0xe000ed04

080049e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049ee:	2300      	movs	r3, #0
 80049f0:	607b      	str	r3, [r7, #4]
 80049f2:	e00c      	b.n	8004a0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	4613      	mov	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4a12      	ldr	r2, [pc, #72]	; (8004a48 <prvInitialiseTaskLists+0x60>)
 8004a00:	4413      	add	r3, r2
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fe fd0a 	bl	800341c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	607b      	str	r3, [r7, #4]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b06      	cmp	r3, #6
 8004a12:	d9ef      	bls.n	80049f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a14:	480d      	ldr	r0, [pc, #52]	; (8004a4c <prvInitialiseTaskLists+0x64>)
 8004a16:	f7fe fd01 	bl	800341c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a1a:	480d      	ldr	r0, [pc, #52]	; (8004a50 <prvInitialiseTaskLists+0x68>)
 8004a1c:	f7fe fcfe 	bl	800341c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a20:	480c      	ldr	r0, [pc, #48]	; (8004a54 <prvInitialiseTaskLists+0x6c>)
 8004a22:	f7fe fcfb 	bl	800341c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a26:	480c      	ldr	r0, [pc, #48]	; (8004a58 <prvInitialiseTaskLists+0x70>)
 8004a28:	f7fe fcf8 	bl	800341c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a2c:	480b      	ldr	r0, [pc, #44]	; (8004a5c <prvInitialiseTaskLists+0x74>)
 8004a2e:	f7fe fcf5 	bl	800341c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a32:	4b0b      	ldr	r3, [pc, #44]	; (8004a60 <prvInitialiseTaskLists+0x78>)
 8004a34:	4a05      	ldr	r2, [pc, #20]	; (8004a4c <prvInitialiseTaskLists+0x64>)
 8004a36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a38:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <prvInitialiseTaskLists+0x7c>)
 8004a3a:	4a05      	ldr	r2, [pc, #20]	; (8004a50 <prvInitialiseTaskLists+0x68>)
 8004a3c:	601a      	str	r2, [r3, #0]
}
 8004a3e:	bf00      	nop
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	20000814 	.word	0x20000814
 8004a4c:	200008a0 	.word	0x200008a0
 8004a50:	200008b4 	.word	0x200008b4
 8004a54:	200008d0 	.word	0x200008d0
 8004a58:	200008e4 	.word	0x200008e4
 8004a5c:	200008fc 	.word	0x200008fc
 8004a60:	200008c8 	.word	0x200008c8
 8004a64:	200008cc 	.word	0x200008cc

08004a68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a6e:	e019      	b.n	8004aa4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a70:	f000 fe78 	bl	8005764 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a74:	4b10      	ldr	r3, [pc, #64]	; (8004ab8 <prvCheckTasksWaitingTermination+0x50>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fe fd55 	bl	8003530 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a86:	4b0d      	ldr	r3, [pc, #52]	; (8004abc <prvCheckTasksWaitingTermination+0x54>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	4a0b      	ldr	r2, [pc, #44]	; (8004abc <prvCheckTasksWaitingTermination+0x54>)
 8004a8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a90:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <prvCheckTasksWaitingTermination+0x58>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	4a0a      	ldr	r2, [pc, #40]	; (8004ac0 <prvCheckTasksWaitingTermination+0x58>)
 8004a98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a9a:	f000 fe93 	bl	80057c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f810 	bl	8004ac4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004aa4:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <prvCheckTasksWaitingTermination+0x58>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e1      	bne.n	8004a70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004aac:	bf00      	nop
 8004aae:	bf00      	nop
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	200008e4 	.word	0x200008e4
 8004abc:	20000910 	.word	0x20000910
 8004ac0:	200008f8 	.word	0x200008f8

08004ac4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d108      	bne.n	8004ae8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	4618      	mov	r0, r3
 8004adc:	f001 f830 	bl	8005b40 <vPortFree>
				vPortFree( pxTCB );
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f001 f82d 	bl	8005b40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ae6:	e018      	b.n	8004b1a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d103      	bne.n	8004afa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f001 f824 	bl	8005b40 <vPortFree>
	}
 8004af8:	e00f      	b.n	8004b1a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d00a      	beq.n	8004b1a <prvDeleteTCB+0x56>
	__asm volatile
 8004b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b08:	f383 8811 	msr	BASEPRI, r3
 8004b0c:	f3bf 8f6f 	isb	sy
 8004b10:	f3bf 8f4f 	dsb	sy
 8004b14:	60fb      	str	r3, [r7, #12]
}
 8004b16:	bf00      	nop
 8004b18:	e7fe      	b.n	8004b18 <prvDeleteTCB+0x54>
	}
 8004b1a:	bf00      	nop
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b2a:	4b0c      	ldr	r3, [pc, #48]	; (8004b5c <prvResetNextTaskUnblockTime+0x38>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d104      	bne.n	8004b3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b34:	4b0a      	ldr	r3, [pc, #40]	; (8004b60 <prvResetNextTaskUnblockTime+0x3c>)
 8004b36:	f04f 32ff 	mov.w	r2, #4294967295
 8004b3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b3c:	e008      	b.n	8004b50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b3e:	4b07      	ldr	r3, [pc, #28]	; (8004b5c <prvResetNextTaskUnblockTime+0x38>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	4a04      	ldr	r2, [pc, #16]	; (8004b60 <prvResetNextTaskUnblockTime+0x3c>)
 8004b4e:	6013      	str	r3, [r2, #0]
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	200008c8 	.word	0x200008c8
 8004b60:	20000930 	.word	0x20000930

08004b64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b6a:	4b0b      	ldr	r3, [pc, #44]	; (8004b98 <xTaskGetSchedulerState+0x34>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d102      	bne.n	8004b78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b72:	2301      	movs	r3, #1
 8004b74:	607b      	str	r3, [r7, #4]
 8004b76:	e008      	b.n	8004b8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b78:	4b08      	ldr	r3, [pc, #32]	; (8004b9c <xTaskGetSchedulerState+0x38>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d102      	bne.n	8004b86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b80:	2302      	movs	r3, #2
 8004b82:	607b      	str	r3, [r7, #4]
 8004b84:	e001      	b.n	8004b8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b86:	2300      	movs	r3, #0
 8004b88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b8a:	687b      	ldr	r3, [r7, #4]
	}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	2000091c 	.word	0x2000091c
 8004b9c:	20000938 	.word	0x20000938

08004ba0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004bac:	2300      	movs	r3, #0
 8004bae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d06e      	beq.n	8004c94 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004bb6:	4b3a      	ldr	r3, [pc, #232]	; (8004ca0 <xTaskPriorityDisinherit+0x100>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d00a      	beq.n	8004bd6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	60fb      	str	r3, [r7, #12]
}
 8004bd2:	bf00      	nop
 8004bd4:	e7fe      	b.n	8004bd4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10a      	bne.n	8004bf4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	60bb      	str	r3, [r7, #8]
}
 8004bf0:	bf00      	nop
 8004bf2:	e7fe      	b.n	8004bf2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bf8:	1e5a      	subs	r2, r3, #1
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d044      	beq.n	8004c94 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d140      	bne.n	8004c94 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	3304      	adds	r3, #4
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7fe fc8a 	bl	8003530 <uxListRemove>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d115      	bne.n	8004c4e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c26:	491f      	ldr	r1, [pc, #124]	; (8004ca4 <xTaskPriorityDisinherit+0x104>)
 8004c28:	4613      	mov	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	440b      	add	r3, r1
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10a      	bne.n	8004c4e <xTaskPriorityDisinherit+0xae>
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c42:	43da      	mvns	r2, r3
 8004c44:	4b18      	ldr	r3, [pc, #96]	; (8004ca8 <xTaskPriorityDisinherit+0x108>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	4a17      	ldr	r2, [pc, #92]	; (8004ca8 <xTaskPriorityDisinherit+0x108>)
 8004c4c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5a:	f1c3 0207 	rsb	r2, r3, #7
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c66:	2201      	movs	r2, #1
 8004c68:	409a      	lsls	r2, r3
 8004c6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ca8 <xTaskPriorityDisinherit+0x108>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	4a0d      	ldr	r2, [pc, #52]	; (8004ca8 <xTaskPriorityDisinherit+0x108>)
 8004c72:	6013      	str	r3, [r2, #0]
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c78:	4613      	mov	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4a08      	ldr	r2, [pc, #32]	; (8004ca4 <xTaskPriorityDisinherit+0x104>)
 8004c82:	441a      	add	r2, r3
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	3304      	adds	r3, #4
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	f7fe fbf3 	bl	8003476 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c90:	2301      	movs	r3, #1
 8004c92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c94:	697b      	ldr	r3, [r7, #20]
	}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000810 	.word	0x20000810
 8004ca4:	20000814 	.word	0x20000814
 8004ca8:	20000918 	.word	0x20000918

08004cac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004cb6:	4b29      	ldr	r3, [pc, #164]	; (8004d5c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cbc:	4b28      	ldr	r3, [pc, #160]	; (8004d60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fe fc34 	bl	8003530 <uxListRemove>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10b      	bne.n	8004ce6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004cce:	4b24      	ldr	r3, [pc, #144]	; (8004d60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cda:	43da      	mvns	r2, r3
 8004cdc:	4b21      	ldr	r3, [pc, #132]	; (8004d64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	4a20      	ldr	r2, [pc, #128]	; (8004d64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ce4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cec:	d10a      	bne.n	8004d04 <prvAddCurrentTaskToDelayedList+0x58>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d007      	beq.n	8004d04 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cf4:	4b1a      	ldr	r3, [pc, #104]	; (8004d60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	481a      	ldr	r0, [pc, #104]	; (8004d68 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004cfe:	f7fe fbba 	bl	8003476 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d02:	e026      	b.n	8004d52 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4413      	add	r3, r2
 8004d0a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d0c:	4b14      	ldr	r3, [pc, #80]	; (8004d60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d209      	bcs.n	8004d30 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d1c:	4b13      	ldr	r3, [pc, #76]	; (8004d6c <prvAddCurrentTaskToDelayedList+0xc0>)
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	4b0f      	ldr	r3, [pc, #60]	; (8004d60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3304      	adds	r3, #4
 8004d26:	4619      	mov	r1, r3
 8004d28:	4610      	mov	r0, r2
 8004d2a:	f7fe fbc8 	bl	80034be <vListInsert>
}
 8004d2e:	e010      	b.n	8004d52 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d30:	4b0f      	ldr	r3, [pc, #60]	; (8004d70 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	3304      	adds	r3, #4
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	f7fe fbbe 	bl	80034be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d42:	4b0c      	ldr	r3, [pc, #48]	; (8004d74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d202      	bcs.n	8004d52 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004d4c:	4a09      	ldr	r2, [pc, #36]	; (8004d74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	6013      	str	r3, [r2, #0]
}
 8004d52:	bf00      	nop
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000914 	.word	0x20000914
 8004d60:	20000810 	.word	0x20000810
 8004d64:	20000918 	.word	0x20000918
 8004d68:	200008fc 	.word	0x200008fc
 8004d6c:	200008cc 	.word	0x200008cc
 8004d70:	200008c8 	.word	0x200008c8
 8004d74:	20000930 	.word	0x20000930

08004d78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08a      	sub	sp, #40	; 0x28
 8004d7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d82:	f000 fb85 	bl	8005490 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d86:	4b1c      	ldr	r3, [pc, #112]	; (8004df8 <xTimerCreateTimerTask+0x80>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d021      	beq.n	8004dd2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d92:	2300      	movs	r3, #0
 8004d94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d96:	1d3a      	adds	r2, r7, #4
 8004d98:	f107 0108 	add.w	r1, r7, #8
 8004d9c:	f107 030c 	add.w	r3, r7, #12
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fb fbfd 	bl	80005a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	9202      	str	r2, [sp, #8]
 8004dae:	9301      	str	r3, [sp, #4]
 8004db0:	2302      	movs	r3, #2
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	2300      	movs	r3, #0
 8004db6:	460a      	mov	r2, r1
 8004db8:	4910      	ldr	r1, [pc, #64]	; (8004dfc <xTimerCreateTimerTask+0x84>)
 8004dba:	4811      	ldr	r0, [pc, #68]	; (8004e00 <xTimerCreateTimerTask+0x88>)
 8004dbc:	f7ff f8ca 	bl	8003f54 <xTaskCreateStatic>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	4a10      	ldr	r2, [pc, #64]	; (8004e04 <xTimerCreateTimerTask+0x8c>)
 8004dc4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004dc6:	4b0f      	ldr	r3, [pc, #60]	; (8004e04 <xTimerCreateTimerTask+0x8c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10a      	bne.n	8004dee <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	613b      	str	r3, [r7, #16]
}
 8004dea:	bf00      	nop
 8004dec:	e7fe      	b.n	8004dec <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004dee:	697b      	ldr	r3, [r7, #20]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	2000096c 	.word	0x2000096c
 8004dfc:	08006d34 	.word	0x08006d34
 8004e00:	08005071 	.word	0x08005071
 8004e04:	20000970 	.word	0x20000970

08004e08 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b088      	sub	sp, #32
 8004e0c:	af02      	add	r7, sp, #8
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8004e16:	2028      	movs	r0, #40	; 0x28
 8004e18:	f000 fdc6 	bl	80059a8 <pvPortMalloc>
 8004e1c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00d      	beq.n	8004e40 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	9301      	str	r3, [sp, #4]
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	68b9      	ldr	r1, [r7, #8]
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 f843 	bl	8004ec6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8004e40:	697b      	ldr	r3, [r7, #20]
	}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b08a      	sub	sp, #40	; 0x28
 8004e4e:	af02      	add	r7, sp, #8
 8004e50:	60f8      	str	r0, [r7, #12]
 8004e52:	60b9      	str	r1, [r7, #8]
 8004e54:	607a      	str	r2, [r7, #4]
 8004e56:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8004e58:	2328      	movs	r3, #40	; 0x28
 8004e5a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	2b28      	cmp	r3, #40	; 0x28
 8004e60:	d00a      	beq.n	8004e78 <xTimerCreateStatic+0x2e>
	__asm volatile
 8004e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	61bb      	str	r3, [r7, #24]
}
 8004e74:	bf00      	nop
 8004e76:	e7fe      	b.n	8004e76 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004e78:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8004e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10a      	bne.n	8004e96 <xTimerCreateStatic+0x4c>
	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	617b      	str	r3, [r7, #20]
}
 8004e92:	bf00      	nop
 8004e94:	e7fe      	b.n	8004e94 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8004e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e98:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00d      	beq.n	8004ebc <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	9301      	str	r3, [sp, #4]
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	68b9      	ldr	r1, [r7, #8]
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 f805 	bl	8004ec6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8004ebc:	69fb      	ldr	r3, [r7, #28]
	}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3720      	adds	r7, #32
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b086      	sub	sp, #24
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	607a      	str	r2, [r7, #4]
 8004ed2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10a      	bne.n	8004ef0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	617b      	str	r3, [r7, #20]
}
 8004eec:	bf00      	nop
 8004eee:	e7fe      	b.n	8004eee <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d01e      	beq.n	8004f34 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004ef6:	f000 facb 	bl	8005490 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	6a3a      	ldr	r2, [r7, #32]
 8004f10:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	3304      	adds	r3, #4
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fe faa0 	bl	800345c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d008      	beq.n	8004f34 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f28:	f043 0304 	orr.w	r3, r3, #4
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004f34:	bf00      	nop
 8004f36:	3718      	adds	r7, #24
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08a      	sub	sp, #40	; 0x28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10a      	bne.n	8004f6a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	623b      	str	r3, [r7, #32]
}
 8004f66:	bf00      	nop
 8004f68:	e7fe      	b.n	8004f68 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004f6a:	4b1a      	ldr	r3, [pc, #104]	; (8004fd4 <xTimerGenericCommand+0x98>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d02a      	beq.n	8004fc8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2b05      	cmp	r3, #5
 8004f82:	dc18      	bgt.n	8004fb6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004f84:	f7ff fdee 	bl	8004b64 <xTaskGetSchedulerState>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d109      	bne.n	8004fa2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004f8e:	4b11      	ldr	r3, [pc, #68]	; (8004fd4 <xTimerGenericCommand+0x98>)
 8004f90:	6818      	ldr	r0, [r3, #0]
 8004f92:	f107 0114 	add.w	r1, r7, #20
 8004f96:	2300      	movs	r3, #0
 8004f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f9a:	f7fe fbf3 	bl	8003784 <xQueueGenericSend>
 8004f9e:	6278      	str	r0, [r7, #36]	; 0x24
 8004fa0:	e012      	b.n	8004fc8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004fa2:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <xTimerGenericCommand+0x98>)
 8004fa4:	6818      	ldr	r0, [r3, #0]
 8004fa6:	f107 0114 	add.w	r1, r7, #20
 8004faa:	2300      	movs	r3, #0
 8004fac:	2200      	movs	r2, #0
 8004fae:	f7fe fbe9 	bl	8003784 <xQueueGenericSend>
 8004fb2:	6278      	str	r0, [r7, #36]	; 0x24
 8004fb4:	e008      	b.n	8004fc8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004fb6:	4b07      	ldr	r3, [pc, #28]	; (8004fd4 <xTimerGenericCommand+0x98>)
 8004fb8:	6818      	ldr	r0, [r3, #0]
 8004fba:	f107 0114 	add.w	r1, r7, #20
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	f7fe fcdd 	bl	8003980 <xQueueGenericSendFromISR>
 8004fc6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3728      	adds	r7, #40	; 0x28
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	2000096c 	.word	0x2000096c

08004fd8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b088      	sub	sp, #32
 8004fdc:	af02      	add	r7, sp, #8
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fe2:	4b22      	ldr	r3, [pc, #136]	; (800506c <prvProcessExpiredTimer+0x94>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fe fa9d 	bl	8003530 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	2b00      	cmp	r3, #0
 8005002:	d022      	beq.n	800504a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	699a      	ldr	r2, [r3, #24]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	18d1      	adds	r1, r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	6978      	ldr	r0, [r7, #20]
 8005012:	f000 f8d1 	bl	80051b8 <prvInsertTimerInActiveList>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d01f      	beq.n	800505c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800501c:	2300      	movs	r3, #0
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	2300      	movs	r3, #0
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	2100      	movs	r1, #0
 8005026:	6978      	ldr	r0, [r7, #20]
 8005028:	f7ff ff88 	bl	8004f3c <xTimerGenericCommand>
 800502c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d113      	bne.n	800505c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	60fb      	str	r3, [r7, #12]
}
 8005046:	bf00      	nop
 8005048:	e7fe      	b.n	8005048 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005050:	f023 0301 	bic.w	r3, r3, #1
 8005054:	b2da      	uxtb	r2, r3
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	6978      	ldr	r0, [r7, #20]
 8005062:	4798      	blx	r3
}
 8005064:	bf00      	nop
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	20000964 	.word	0x20000964

08005070 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005078:	f107 0308 	add.w	r3, r7, #8
 800507c:	4618      	mov	r0, r3
 800507e:	f000 f857 	bl	8005130 <prvGetNextExpireTime>
 8005082:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	4619      	mov	r1, r3
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 f803 	bl	8005094 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800508e:	f000 f8d5 	bl	800523c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005092:	e7f1      	b.n	8005078 <prvTimerTask+0x8>

08005094 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800509e:	f7ff f987 	bl	80043b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050a2:	f107 0308 	add.w	r3, r7, #8
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 f866 	bl	8005178 <prvSampleTimeNow>
 80050ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d130      	bne.n	8005116 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10a      	bne.n	80050d0 <prvProcessTimerOrBlockTask+0x3c>
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d806      	bhi.n	80050d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80050c2:	f7ff f983 	bl	80043cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80050c6:	68f9      	ldr	r1, [r7, #12]
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7ff ff85 	bl	8004fd8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80050ce:	e024      	b.n	800511a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d008      	beq.n	80050e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80050d6:	4b13      	ldr	r3, [pc, #76]	; (8005124 <prvProcessTimerOrBlockTask+0x90>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <prvProcessTimerOrBlockTask+0x50>
 80050e0:	2301      	movs	r3, #1
 80050e2:	e000      	b.n	80050e6 <prvProcessTimerOrBlockTask+0x52>
 80050e4:	2300      	movs	r3, #0
 80050e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80050e8:	4b0f      	ldr	r3, [pc, #60]	; (8005128 <prvProcessTimerOrBlockTask+0x94>)
 80050ea:	6818      	ldr	r0, [r3, #0]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	4619      	mov	r1, r3
 80050f6:	f7fe fef9 	bl	8003eec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80050fa:	f7ff f967 	bl	80043cc <xTaskResumeAll>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10a      	bne.n	800511a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005104:	4b09      	ldr	r3, [pc, #36]	; (800512c <prvProcessTimerOrBlockTask+0x98>)
 8005106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	f3bf 8f6f 	isb	sy
}
 8005114:	e001      	b.n	800511a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005116:	f7ff f959 	bl	80043cc <xTaskResumeAll>
}
 800511a:	bf00      	nop
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	20000968 	.word	0x20000968
 8005128:	2000096c 	.word	0x2000096c
 800512c:	e000ed04 	.word	0xe000ed04

08005130 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005138:	4b0e      	ldr	r3, [pc, #56]	; (8005174 <prvGetNextExpireTime+0x44>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <prvGetNextExpireTime+0x16>
 8005142:	2201      	movs	r2, #1
 8005144:	e000      	b.n	8005148 <prvGetNextExpireTime+0x18>
 8005146:	2200      	movs	r2, #0
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d105      	bne.n	8005160 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005154:	4b07      	ldr	r3, [pc, #28]	; (8005174 <prvGetNextExpireTime+0x44>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	e001      	b.n	8005164 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005164:	68fb      	ldr	r3, [r7, #12]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	20000964 	.word	0x20000964

08005178 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005180:	f7ff f9c0 	bl	8004504 <xTaskGetTickCount>
 8005184:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005186:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <prvSampleTimeNow+0x3c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	429a      	cmp	r2, r3
 800518e:	d205      	bcs.n	800519c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005190:	f000 f91a 	bl	80053c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	e002      	b.n	80051a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80051a2:	4a04      	ldr	r2, [pc, #16]	; (80051b4 <prvSampleTimeNow+0x3c>)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80051a8:	68fb      	ldr	r3, [r7, #12]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20000974 	.word	0x20000974

080051b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80051c6:	2300      	movs	r3, #0
 80051c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d812      	bhi.n	8005204 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	1ad2      	subs	r2, r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d302      	bcc.n	80051f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80051ec:	2301      	movs	r3, #1
 80051ee:	617b      	str	r3, [r7, #20]
 80051f0:	e01b      	b.n	800522a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80051f2:	4b10      	ldr	r3, [pc, #64]	; (8005234 <prvInsertTimerInActiveList+0x7c>)
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3304      	adds	r3, #4
 80051fa:	4619      	mov	r1, r3
 80051fc:	4610      	mov	r0, r2
 80051fe:	f7fe f95e 	bl	80034be <vListInsert>
 8005202:	e012      	b.n	800522a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	429a      	cmp	r2, r3
 800520a:	d206      	bcs.n	800521a <prvInsertTimerInActiveList+0x62>
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	429a      	cmp	r2, r3
 8005212:	d302      	bcc.n	800521a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005214:	2301      	movs	r3, #1
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	e007      	b.n	800522a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800521a:	4b07      	ldr	r3, [pc, #28]	; (8005238 <prvInsertTimerInActiveList+0x80>)
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	3304      	adds	r3, #4
 8005222:	4619      	mov	r1, r3
 8005224:	4610      	mov	r0, r2
 8005226:	f7fe f94a 	bl	80034be <vListInsert>
		}
	}

	return xProcessTimerNow;
 800522a:	697b      	ldr	r3, [r7, #20]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3718      	adds	r7, #24
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	20000968 	.word	0x20000968
 8005238:	20000964 	.word	0x20000964

0800523c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b08c      	sub	sp, #48	; 0x30
 8005240:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005242:	e0ae      	b.n	80053a2 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	f2c0 80ab 	blt.w	80053a2 <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d004      	beq.n	8005262 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	3304      	adds	r3, #4
 800525c:	4618      	mov	r0, r3
 800525e:	f7fe f967 	bl	8003530 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005262:	1d3b      	adds	r3, r7, #4
 8005264:	4618      	mov	r0, r3
 8005266:	f7ff ff87 	bl	8005178 <prvSampleTimeNow>
 800526a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	2b09      	cmp	r3, #9
 8005270:	f200 8096 	bhi.w	80053a0 <prvProcessReceivedCommands+0x164>
 8005274:	a201      	add	r2, pc, #4	; (adr r2, 800527c <prvProcessReceivedCommands+0x40>)
 8005276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527a:	bf00      	nop
 800527c:	080052a5 	.word	0x080052a5
 8005280:	080052a5 	.word	0x080052a5
 8005284:	080052a5 	.word	0x080052a5
 8005288:	08005319 	.word	0x08005319
 800528c:	0800532d 	.word	0x0800532d
 8005290:	08005377 	.word	0x08005377
 8005294:	080052a5 	.word	0x080052a5
 8005298:	080052a5 	.word	0x080052a5
 800529c:	08005319 	.word	0x08005319
 80052a0:	0800532d 	.word	0x0800532d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052aa:	f043 0301 	orr.w	r3, r3, #1
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	18d1      	adds	r1, r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6a3a      	ldr	r2, [r7, #32]
 80052c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052c4:	f7ff ff78 	bl	80051b8 <prvInsertTimerInActiveList>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d069      	beq.n	80053a2 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d05e      	beq.n	80053a2 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	441a      	add	r2, r3
 80052ec:	2300      	movs	r3, #0
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	2300      	movs	r3, #0
 80052f2:	2100      	movs	r1, #0
 80052f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052f6:	f7ff fe21 	bl	8004f3c <xTimerGenericCommand>
 80052fa:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d14f      	bne.n	80053a2 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	61bb      	str	r3, [r7, #24]
}
 8005314:	bf00      	nop
 8005316:	e7fe      	b.n	8005316 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800531e:	f023 0301 	bic.w	r3, r3, #1
 8005322:	b2da      	uxtb	r2, r3
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800532a:	e03a      	b.n	80053a2 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005332:	f043 0301 	orr.w	r3, r3, #1
 8005336:	b2da      	uxtb	r2, r3
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10a      	bne.n	8005362 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800534c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	617b      	str	r3, [r7, #20]
}
 800535e:	bf00      	nop
 8005360:	e7fe      	b.n	8005360 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	699a      	ldr	r2, [r3, #24]
 8005366:	6a3b      	ldr	r3, [r7, #32]
 8005368:	18d1      	adds	r1, r2, r3
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	6a3a      	ldr	r2, [r7, #32]
 800536e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005370:	f7ff ff22 	bl	80051b8 <prvInsertTimerInActiveList>
					break;
 8005374:	e015      	b.n	80053a2 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d103      	bne.n	800538c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8005384:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005386:	f000 fbdb 	bl	8005b40 <vPortFree>
 800538a:	e00a      	b.n	80053a2 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005392:	f023 0301 	bic.w	r3, r3, #1
 8005396:	b2da      	uxtb	r2, r3
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800539e:	e000      	b.n	80053a2 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 80053a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053a2:	4b08      	ldr	r3, [pc, #32]	; (80053c4 <prvProcessReceivedCommands+0x188>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f107 0108 	add.w	r1, r7, #8
 80053aa:	2200      	movs	r2, #0
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fe fb83 	bl	8003ab8 <xQueueReceive>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f47f af45 	bne.w	8005244 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80053ba:	bf00      	nop
 80053bc:	bf00      	nop
 80053be:	3728      	adds	r7, #40	; 0x28
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	2000096c 	.word	0x2000096c

080053c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80053ce:	e048      	b.n	8005462 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053d0:	4b2d      	ldr	r3, [pc, #180]	; (8005488 <prvSwitchTimerLists+0xc0>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053da:	4b2b      	ldr	r3, [pc, #172]	; (8005488 <prvSwitchTimerLists+0xc0>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	3304      	adds	r3, #4
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7fe f8a1 	bl	8003530 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b00      	cmp	r3, #0
 8005402:	d02e      	beq.n	8005462 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	4413      	add	r3, r2
 800540c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	429a      	cmp	r2, r3
 8005414:	d90e      	bls.n	8005434 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005422:	4b19      	ldr	r3, [pc, #100]	; (8005488 <prvSwitchTimerLists+0xc0>)
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	3304      	adds	r3, #4
 800542a:	4619      	mov	r1, r3
 800542c:	4610      	mov	r0, r2
 800542e:	f7fe f846 	bl	80034be <vListInsert>
 8005432:	e016      	b.n	8005462 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005434:	2300      	movs	r3, #0
 8005436:	9300      	str	r3, [sp, #0]
 8005438:	2300      	movs	r3, #0
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	2100      	movs	r1, #0
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f7ff fd7c 	bl	8004f3c <xTimerGenericCommand>
 8005444:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10a      	bne.n	8005462 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800544c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	603b      	str	r3, [r7, #0]
}
 800545e:	bf00      	nop
 8005460:	e7fe      	b.n	8005460 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005462:	4b09      	ldr	r3, [pc, #36]	; (8005488 <prvSwitchTimerLists+0xc0>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1b1      	bne.n	80053d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800546c:	4b06      	ldr	r3, [pc, #24]	; (8005488 <prvSwitchTimerLists+0xc0>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005472:	4b06      	ldr	r3, [pc, #24]	; (800548c <prvSwitchTimerLists+0xc4>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a04      	ldr	r2, [pc, #16]	; (8005488 <prvSwitchTimerLists+0xc0>)
 8005478:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800547a:	4a04      	ldr	r2, [pc, #16]	; (800548c <prvSwitchTimerLists+0xc4>)
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	6013      	str	r3, [r2, #0]
}
 8005480:	bf00      	nop
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	20000964 	.word	0x20000964
 800548c:	20000968 	.word	0x20000968

08005490 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005496:	f000 f965 	bl	8005764 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800549a:	4b15      	ldr	r3, [pc, #84]	; (80054f0 <prvCheckForValidListAndQueue+0x60>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d120      	bne.n	80054e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80054a2:	4814      	ldr	r0, [pc, #80]	; (80054f4 <prvCheckForValidListAndQueue+0x64>)
 80054a4:	f7fd ffba 	bl	800341c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80054a8:	4813      	ldr	r0, [pc, #76]	; (80054f8 <prvCheckForValidListAndQueue+0x68>)
 80054aa:	f7fd ffb7 	bl	800341c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80054ae:	4b13      	ldr	r3, [pc, #76]	; (80054fc <prvCheckForValidListAndQueue+0x6c>)
 80054b0:	4a10      	ldr	r2, [pc, #64]	; (80054f4 <prvCheckForValidListAndQueue+0x64>)
 80054b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80054b4:	4b12      	ldr	r3, [pc, #72]	; (8005500 <prvCheckForValidListAndQueue+0x70>)
 80054b6:	4a10      	ldr	r2, [pc, #64]	; (80054f8 <prvCheckForValidListAndQueue+0x68>)
 80054b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80054ba:	2300      	movs	r3, #0
 80054bc:	9300      	str	r3, [sp, #0]
 80054be:	4b11      	ldr	r3, [pc, #68]	; (8005504 <prvCheckForValidListAndQueue+0x74>)
 80054c0:	4a11      	ldr	r2, [pc, #68]	; (8005508 <prvCheckForValidListAndQueue+0x78>)
 80054c2:	210c      	movs	r1, #12
 80054c4:	200a      	movs	r0, #10
 80054c6:	f7fe f8c5 	bl	8003654 <xQueueGenericCreateStatic>
 80054ca:	4603      	mov	r3, r0
 80054cc:	4a08      	ldr	r2, [pc, #32]	; (80054f0 <prvCheckForValidListAndQueue+0x60>)
 80054ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80054d0:	4b07      	ldr	r3, [pc, #28]	; (80054f0 <prvCheckForValidListAndQueue+0x60>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d005      	beq.n	80054e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80054d8:	4b05      	ldr	r3, [pc, #20]	; (80054f0 <prvCheckForValidListAndQueue+0x60>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	490b      	ldr	r1, [pc, #44]	; (800550c <prvCheckForValidListAndQueue+0x7c>)
 80054de:	4618      	mov	r0, r3
 80054e0:	f7fe fcda 	bl	8003e98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054e4:	f000 f96e 	bl	80057c4 <vPortExitCritical>
}
 80054e8:	bf00      	nop
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	2000096c 	.word	0x2000096c
 80054f4:	2000093c 	.word	0x2000093c
 80054f8:	20000950 	.word	0x20000950
 80054fc:	20000964 	.word	0x20000964
 8005500:	20000968 	.word	0x20000968
 8005504:	200009f0 	.word	0x200009f0
 8005508:	20000978 	.word	0x20000978
 800550c:	08006d3c 	.word	0x08006d3c

08005510 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	3b04      	subs	r3, #4
 8005520:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005528:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	3b04      	subs	r3, #4
 800552e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f023 0201 	bic.w	r2, r3, #1
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	3b04      	subs	r3, #4
 800553e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005540:	4a0c      	ldr	r2, [pc, #48]	; (8005574 <pxPortInitialiseStack+0x64>)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	3b14      	subs	r3, #20
 800554a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	3b04      	subs	r3, #4
 8005556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f06f 0202 	mvn.w	r2, #2
 800555e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	3b20      	subs	r3, #32
 8005564:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005566:	68fb      	ldr	r3, [r7, #12]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	08005579 	.word	0x08005579

08005578 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800557e:	2300      	movs	r3, #0
 8005580:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005582:	4b12      	ldr	r3, [pc, #72]	; (80055cc <prvTaskExitError+0x54>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800558a:	d00a      	beq.n	80055a2 <prvTaskExitError+0x2a>
	__asm volatile
 800558c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005590:	f383 8811 	msr	BASEPRI, r3
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	60fb      	str	r3, [r7, #12]
}
 800559e:	bf00      	nop
 80055a0:	e7fe      	b.n	80055a0 <prvTaskExitError+0x28>
	__asm volatile
 80055a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a6:	f383 8811 	msr	BASEPRI, r3
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	60bb      	str	r3, [r7, #8]
}
 80055b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80055b6:	bf00      	nop
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0fc      	beq.n	80055b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80055be:	bf00      	nop
 80055c0:	bf00      	nop
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	2000000c 	.word	0x2000000c

080055d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80055d0:	4b07      	ldr	r3, [pc, #28]	; (80055f0 <pxCurrentTCBConst2>)
 80055d2:	6819      	ldr	r1, [r3, #0]
 80055d4:	6808      	ldr	r0, [r1, #0]
 80055d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055da:	f380 8809 	msr	PSP, r0
 80055de:	f3bf 8f6f 	isb	sy
 80055e2:	f04f 0000 	mov.w	r0, #0
 80055e6:	f380 8811 	msr	BASEPRI, r0
 80055ea:	4770      	bx	lr
 80055ec:	f3af 8000 	nop.w

080055f0 <pxCurrentTCBConst2>:
 80055f0:	20000810 	.word	0x20000810
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80055f4:	bf00      	nop
 80055f6:	bf00      	nop

080055f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80055f8:	4808      	ldr	r0, [pc, #32]	; (800561c <prvPortStartFirstTask+0x24>)
 80055fa:	6800      	ldr	r0, [r0, #0]
 80055fc:	6800      	ldr	r0, [r0, #0]
 80055fe:	f380 8808 	msr	MSP, r0
 8005602:	f04f 0000 	mov.w	r0, #0
 8005606:	f380 8814 	msr	CONTROL, r0
 800560a:	b662      	cpsie	i
 800560c:	b661      	cpsie	f
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	df00      	svc	0
 8005618:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800561a:	bf00      	nop
 800561c:	e000ed08 	.word	0xe000ed08

08005620 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005626:	4b46      	ldr	r3, [pc, #280]	; (8005740 <xPortStartScheduler+0x120>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a46      	ldr	r2, [pc, #280]	; (8005744 <xPortStartScheduler+0x124>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d10a      	bne.n	8005646 <xPortStartScheduler+0x26>
	__asm volatile
 8005630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005634:	f383 8811 	msr	BASEPRI, r3
 8005638:	f3bf 8f6f 	isb	sy
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	613b      	str	r3, [r7, #16]
}
 8005642:	bf00      	nop
 8005644:	e7fe      	b.n	8005644 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005646:	4b3e      	ldr	r3, [pc, #248]	; (8005740 <xPortStartScheduler+0x120>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a3f      	ldr	r2, [pc, #252]	; (8005748 <xPortStartScheduler+0x128>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d10a      	bne.n	8005666 <xPortStartScheduler+0x46>
	__asm volatile
 8005650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005654:	f383 8811 	msr	BASEPRI, r3
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	60fb      	str	r3, [r7, #12]
}
 8005662:	bf00      	nop
 8005664:	e7fe      	b.n	8005664 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005666:	4b39      	ldr	r3, [pc, #228]	; (800574c <xPortStartScheduler+0x12c>)
 8005668:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	b2db      	uxtb	r3, r3
 8005670:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	22ff      	movs	r2, #255	; 0xff
 8005676:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	b2db      	uxtb	r3, r3
 800567e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	b2db      	uxtb	r3, r3
 8005684:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005688:	b2da      	uxtb	r2, r3
 800568a:	4b31      	ldr	r3, [pc, #196]	; (8005750 <xPortStartScheduler+0x130>)
 800568c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800568e:	4b31      	ldr	r3, [pc, #196]	; (8005754 <xPortStartScheduler+0x134>)
 8005690:	2207      	movs	r2, #7
 8005692:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005694:	e009      	b.n	80056aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005696:	4b2f      	ldr	r3, [pc, #188]	; (8005754 <xPortStartScheduler+0x134>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3b01      	subs	r3, #1
 800569c:	4a2d      	ldr	r2, [pc, #180]	; (8005754 <xPortStartScheduler+0x134>)
 800569e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80056a0:	78fb      	ldrb	r3, [r7, #3]
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056aa:	78fb      	ldrb	r3, [r7, #3]
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b2:	2b80      	cmp	r3, #128	; 0x80
 80056b4:	d0ef      	beq.n	8005696 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80056b6:	4b27      	ldr	r3, [pc, #156]	; (8005754 <xPortStartScheduler+0x134>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f1c3 0307 	rsb	r3, r3, #7
 80056be:	2b04      	cmp	r3, #4
 80056c0:	d00a      	beq.n	80056d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80056c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	60bb      	str	r3, [r7, #8]
}
 80056d4:	bf00      	nop
 80056d6:	e7fe      	b.n	80056d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80056d8:	4b1e      	ldr	r3, [pc, #120]	; (8005754 <xPortStartScheduler+0x134>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	021b      	lsls	r3, r3, #8
 80056de:	4a1d      	ldr	r2, [pc, #116]	; (8005754 <xPortStartScheduler+0x134>)
 80056e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056e2:	4b1c      	ldr	r3, [pc, #112]	; (8005754 <xPortStartScheduler+0x134>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056ea:	4a1a      	ldr	r2, [pc, #104]	; (8005754 <xPortStartScheduler+0x134>)
 80056ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80056f6:	4b18      	ldr	r3, [pc, #96]	; (8005758 <xPortStartScheduler+0x138>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a17      	ldr	r2, [pc, #92]	; (8005758 <xPortStartScheduler+0x138>)
 80056fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005700:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005702:	4b15      	ldr	r3, [pc, #84]	; (8005758 <xPortStartScheduler+0x138>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a14      	ldr	r2, [pc, #80]	; (8005758 <xPortStartScheduler+0x138>)
 8005708:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800570c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800570e:	f000 f8dd 	bl	80058cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005712:	4b12      	ldr	r3, [pc, #72]	; (800575c <xPortStartScheduler+0x13c>)
 8005714:	2200      	movs	r2, #0
 8005716:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005718:	f000 f8fc 	bl	8005914 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800571c:	4b10      	ldr	r3, [pc, #64]	; (8005760 <xPortStartScheduler+0x140>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a0f      	ldr	r2, [pc, #60]	; (8005760 <xPortStartScheduler+0x140>)
 8005722:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005726:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005728:	f7ff ff66 	bl	80055f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800572c:	f7fe ffb2 	bl	8004694 <vTaskSwitchContext>
	prvTaskExitError();
 8005730:	f7ff ff22 	bl	8005578 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	e000ed00 	.word	0xe000ed00
 8005744:	410fc271 	.word	0x410fc271
 8005748:	410fc270 	.word	0x410fc270
 800574c:	e000e400 	.word	0xe000e400
 8005750:	20000a38 	.word	0x20000a38
 8005754:	20000a3c 	.word	0x20000a3c
 8005758:	e000ed20 	.word	0xe000ed20
 800575c:	2000000c 	.word	0x2000000c
 8005760:	e000ef34 	.word	0xe000ef34

08005764 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
	__asm volatile
 800576a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576e:	f383 8811 	msr	BASEPRI, r3
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	607b      	str	r3, [r7, #4]
}
 800577c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800577e:	4b0f      	ldr	r3, [pc, #60]	; (80057bc <vPortEnterCritical+0x58>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3301      	adds	r3, #1
 8005784:	4a0d      	ldr	r2, [pc, #52]	; (80057bc <vPortEnterCritical+0x58>)
 8005786:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005788:	4b0c      	ldr	r3, [pc, #48]	; (80057bc <vPortEnterCritical+0x58>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d10f      	bne.n	80057b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005790:	4b0b      	ldr	r3, [pc, #44]	; (80057c0 <vPortEnterCritical+0x5c>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00a      	beq.n	80057b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800579a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579e:	f383 8811 	msr	BASEPRI, r3
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	603b      	str	r3, [r7, #0]
}
 80057ac:	bf00      	nop
 80057ae:	e7fe      	b.n	80057ae <vPortEnterCritical+0x4a>
	}
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	2000000c 	.word	0x2000000c
 80057c0:	e000ed04 	.word	0xe000ed04

080057c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80057ca:	4b12      	ldr	r3, [pc, #72]	; (8005814 <vPortExitCritical+0x50>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10a      	bne.n	80057e8 <vPortExitCritical+0x24>
	__asm volatile
 80057d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	607b      	str	r3, [r7, #4]
}
 80057e4:	bf00      	nop
 80057e6:	e7fe      	b.n	80057e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80057e8:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <vPortExitCritical+0x50>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	3b01      	subs	r3, #1
 80057ee:	4a09      	ldr	r2, [pc, #36]	; (8005814 <vPortExitCritical+0x50>)
 80057f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80057f2:	4b08      	ldr	r3, [pc, #32]	; (8005814 <vPortExitCritical+0x50>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d105      	bne.n	8005806 <vPortExitCritical+0x42>
 80057fa:	2300      	movs	r3, #0
 80057fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	f383 8811 	msr	BASEPRI, r3
}
 8005804:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005806:	bf00      	nop
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	2000000c 	.word	0x2000000c
	...

08005820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005820:	f3ef 8009 	mrs	r0, PSP
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	4b15      	ldr	r3, [pc, #84]	; (8005880 <pxCurrentTCBConst>)
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	f01e 0f10 	tst.w	lr, #16
 8005830:	bf08      	it	eq
 8005832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800583a:	6010      	str	r0, [r2, #0]
 800583c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005840:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005844:	f380 8811 	msr	BASEPRI, r0
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	f7fe ff20 	bl	8004694 <vTaskSwitchContext>
 8005854:	f04f 0000 	mov.w	r0, #0
 8005858:	f380 8811 	msr	BASEPRI, r0
 800585c:	bc09      	pop	{r0, r3}
 800585e:	6819      	ldr	r1, [r3, #0]
 8005860:	6808      	ldr	r0, [r1, #0]
 8005862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005866:	f01e 0f10 	tst.w	lr, #16
 800586a:	bf08      	it	eq
 800586c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005870:	f380 8809 	msr	PSP, r0
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	f3af 8000 	nop.w

08005880 <pxCurrentTCBConst>:
 8005880:	20000810 	.word	0x20000810
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005884:	bf00      	nop
 8005886:	bf00      	nop

08005888 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
	__asm volatile
 800588e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005892:	f383 8811 	msr	BASEPRI, r3
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	607b      	str	r3, [r7, #4]
}
 80058a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80058a2:	f7fe fe3f 	bl	8004524 <xTaskIncrementTick>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d003      	beq.n	80058b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80058ac:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <SysTick_Handler+0x40>)
 80058ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	2300      	movs	r3, #0
 80058b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	f383 8811 	msr	BASEPRI, r3
}
 80058be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80058c0:	bf00      	nop
 80058c2:	3708      	adds	r7, #8
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	e000ed04 	.word	0xe000ed04

080058cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80058d0:	4b0b      	ldr	r3, [pc, #44]	; (8005900 <vPortSetupTimerInterrupt+0x34>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80058d6:	4b0b      	ldr	r3, [pc, #44]	; (8005904 <vPortSetupTimerInterrupt+0x38>)
 80058d8:	2200      	movs	r2, #0
 80058da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80058dc:	4b0a      	ldr	r3, [pc, #40]	; (8005908 <vPortSetupTimerInterrupt+0x3c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a0a      	ldr	r2, [pc, #40]	; (800590c <vPortSetupTimerInterrupt+0x40>)
 80058e2:	fba2 2303 	umull	r2, r3, r2, r3
 80058e6:	099b      	lsrs	r3, r3, #6
 80058e8:	4a09      	ldr	r2, [pc, #36]	; (8005910 <vPortSetupTimerInterrupt+0x44>)
 80058ea:	3b01      	subs	r3, #1
 80058ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80058ee:	4b04      	ldr	r3, [pc, #16]	; (8005900 <vPortSetupTimerInterrupt+0x34>)
 80058f0:	2207      	movs	r2, #7
 80058f2:	601a      	str	r2, [r3, #0]
}
 80058f4:	bf00      	nop
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	e000e010 	.word	0xe000e010
 8005904:	e000e018 	.word	0xe000e018
 8005908:	20000000 	.word	0x20000000
 800590c:	10624dd3 	.word	0x10624dd3
 8005910:	e000e014 	.word	0xe000e014

08005914 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005914:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005924 <vPortEnableVFP+0x10>
 8005918:	6801      	ldr	r1, [r0, #0]
 800591a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800591e:	6001      	str	r1, [r0, #0]
 8005920:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005922:	bf00      	nop
 8005924:	e000ed88 	.word	0xe000ed88

08005928 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800592e:	f3ef 8305 	mrs	r3, IPSR
 8005932:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2b0f      	cmp	r3, #15
 8005938:	d914      	bls.n	8005964 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800593a:	4a17      	ldr	r2, [pc, #92]	; (8005998 <vPortValidateInterruptPriority+0x70>)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4413      	add	r3, r2
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005944:	4b15      	ldr	r3, [pc, #84]	; (800599c <vPortValidateInterruptPriority+0x74>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	7afa      	ldrb	r2, [r7, #11]
 800594a:	429a      	cmp	r2, r3
 800594c:	d20a      	bcs.n	8005964 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800594e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	607b      	str	r3, [r7, #4]
}
 8005960:	bf00      	nop
 8005962:	e7fe      	b.n	8005962 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005964:	4b0e      	ldr	r3, [pc, #56]	; (80059a0 <vPortValidateInterruptPriority+0x78>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800596c:	4b0d      	ldr	r3, [pc, #52]	; (80059a4 <vPortValidateInterruptPriority+0x7c>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d90a      	bls.n	800598a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	603b      	str	r3, [r7, #0]
}
 8005986:	bf00      	nop
 8005988:	e7fe      	b.n	8005988 <vPortValidateInterruptPriority+0x60>
	}
 800598a:	bf00      	nop
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	e000e3f0 	.word	0xe000e3f0
 800599c:	20000a38 	.word	0x20000a38
 80059a0:	e000ed0c 	.word	0xe000ed0c
 80059a4:	20000a3c 	.word	0x20000a3c

080059a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08a      	sub	sp, #40	; 0x28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80059b0:	2300      	movs	r3, #0
 80059b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80059b4:	f7fe fcfc 	bl	80043b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80059b8:	4b5b      	ldr	r3, [pc, #364]	; (8005b28 <pvPortMalloc+0x180>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80059c0:	f000 f920 	bl	8005c04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80059c4:	4b59      	ldr	r3, [pc, #356]	; (8005b2c <pvPortMalloc+0x184>)
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4013      	ands	r3, r2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f040 8093 	bne.w	8005af8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d01d      	beq.n	8005a14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80059d8:	2208      	movs	r2, #8
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4413      	add	r3, r2
 80059de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f003 0307 	and.w	r3, r3, #7
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d014      	beq.n	8005a14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f023 0307 	bic.w	r3, r3, #7
 80059f0:	3308      	adds	r3, #8
 80059f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f003 0307 	and.w	r3, r3, #7
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00a      	beq.n	8005a14 <pvPortMalloc+0x6c>
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	617b      	str	r3, [r7, #20]
}
 8005a10:	bf00      	nop
 8005a12:	e7fe      	b.n	8005a12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d06e      	beq.n	8005af8 <pvPortMalloc+0x150>
 8005a1a:	4b45      	ldr	r3, [pc, #276]	; (8005b30 <pvPortMalloc+0x188>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d869      	bhi.n	8005af8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005a24:	4b43      	ldr	r3, [pc, #268]	; (8005b34 <pvPortMalloc+0x18c>)
 8005a26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005a28:	4b42      	ldr	r3, [pc, #264]	; (8005b34 <pvPortMalloc+0x18c>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a2e:	e004      	b.n	8005a3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d903      	bls.n	8005a4c <pvPortMalloc+0xa4>
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1f1      	bne.n	8005a30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005a4c:	4b36      	ldr	r3, [pc, #216]	; (8005b28 <pvPortMalloc+0x180>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d050      	beq.n	8005af8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2208      	movs	r2, #8
 8005a5c:	4413      	add	r3, r2
 8005a5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	1ad2      	subs	r2, r2, r3
 8005a70:	2308      	movs	r3, #8
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d91f      	bls.n	8005ab8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	f003 0307 	and.w	r3, r3, #7
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <pvPortMalloc+0xf8>
	__asm volatile
 8005a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8e:	f383 8811 	msr	BASEPRI, r3
 8005a92:	f3bf 8f6f 	isb	sy
 8005a96:	f3bf 8f4f 	dsb	sy
 8005a9a:	613b      	str	r3, [r7, #16]
}
 8005a9c:	bf00      	nop
 8005a9e:	e7fe      	b.n	8005a9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	1ad2      	subs	r2, r2, r3
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ab2:	69b8      	ldr	r0, [r7, #24]
 8005ab4:	f000 f908 	bl	8005cc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ab8:	4b1d      	ldr	r3, [pc, #116]	; (8005b30 <pvPortMalloc+0x188>)
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	4a1b      	ldr	r2, [pc, #108]	; (8005b30 <pvPortMalloc+0x188>)
 8005ac4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ac6:	4b1a      	ldr	r3, [pc, #104]	; (8005b30 <pvPortMalloc+0x188>)
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	4b1b      	ldr	r3, [pc, #108]	; (8005b38 <pvPortMalloc+0x190>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d203      	bcs.n	8005ada <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ad2:	4b17      	ldr	r3, [pc, #92]	; (8005b30 <pvPortMalloc+0x188>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a18      	ldr	r2, [pc, #96]	; (8005b38 <pvPortMalloc+0x190>)
 8005ad8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	4b13      	ldr	r3, [pc, #76]	; (8005b2c <pvPortMalloc+0x184>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aea:	2200      	movs	r2, #0
 8005aec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005aee:	4b13      	ldr	r3, [pc, #76]	; (8005b3c <pvPortMalloc+0x194>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3301      	adds	r3, #1
 8005af4:	4a11      	ldr	r2, [pc, #68]	; (8005b3c <pvPortMalloc+0x194>)
 8005af6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005af8:	f7fe fc68 	bl	80043cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	f003 0307 	and.w	r3, r3, #7
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00a      	beq.n	8005b1c <pvPortMalloc+0x174>
	__asm volatile
 8005b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0a:	f383 8811 	msr	BASEPRI, r3
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	f3bf 8f4f 	dsb	sy
 8005b16:	60fb      	str	r3, [r7, #12]
}
 8005b18:	bf00      	nop
 8005b1a:	e7fe      	b.n	8005b1a <pvPortMalloc+0x172>
	return pvReturn;
 8005b1c:	69fb      	ldr	r3, [r7, #28]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3728      	adds	r7, #40	; 0x28
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	20004648 	.word	0x20004648
 8005b2c:	2000465c 	.word	0x2000465c
 8005b30:	2000464c 	.word	0x2000464c
 8005b34:	20004640 	.word	0x20004640
 8005b38:	20004650 	.word	0x20004650
 8005b3c:	20004654 	.word	0x20004654

08005b40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d04d      	beq.n	8005bee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005b52:	2308      	movs	r3, #8
 8005b54:	425b      	negs	r3, r3
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	4413      	add	r3, r2
 8005b5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	4b24      	ldr	r3, [pc, #144]	; (8005bf8 <vPortFree+0xb8>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4013      	ands	r3, r2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10a      	bne.n	8005b84 <vPortFree+0x44>
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	60fb      	str	r3, [r7, #12]
}
 8005b80:	bf00      	nop
 8005b82:	e7fe      	b.n	8005b82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00a      	beq.n	8005ba2 <vPortFree+0x62>
	__asm volatile
 8005b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b90:	f383 8811 	msr	BASEPRI, r3
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	60bb      	str	r3, [r7, #8]
}
 8005b9e:	bf00      	nop
 8005ba0:	e7fe      	b.n	8005ba0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	4b14      	ldr	r3, [pc, #80]	; (8005bf8 <vPortFree+0xb8>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4013      	ands	r3, r2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d01e      	beq.n	8005bee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d11a      	bne.n	8005bee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	4b0e      	ldr	r3, [pc, #56]	; (8005bf8 <vPortFree+0xb8>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	43db      	mvns	r3, r3
 8005bc2:	401a      	ands	r2, r3
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005bc8:	f7fe fbf2 	bl	80043b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	4b0a      	ldr	r3, [pc, #40]	; (8005bfc <vPortFree+0xbc>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	4a09      	ldr	r2, [pc, #36]	; (8005bfc <vPortFree+0xbc>)
 8005bd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005bda:	6938      	ldr	r0, [r7, #16]
 8005bdc:	f000 f874 	bl	8005cc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005be0:	4b07      	ldr	r3, [pc, #28]	; (8005c00 <vPortFree+0xc0>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3301      	adds	r3, #1
 8005be6:	4a06      	ldr	r2, [pc, #24]	; (8005c00 <vPortFree+0xc0>)
 8005be8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005bea:	f7fe fbef 	bl	80043cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005bee:	bf00      	nop
 8005bf0:	3718      	adds	r7, #24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	2000465c 	.word	0x2000465c
 8005bfc:	2000464c 	.word	0x2000464c
 8005c00:	20004658 	.word	0x20004658

08005c04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005c0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c10:	4b27      	ldr	r3, [pc, #156]	; (8005cb0 <prvHeapInit+0xac>)
 8005c12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f003 0307 	and.w	r3, r3, #7
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00c      	beq.n	8005c38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	3307      	adds	r3, #7
 8005c22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 0307 	bic.w	r3, r3, #7
 8005c2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	4a1f      	ldr	r2, [pc, #124]	; (8005cb0 <prvHeapInit+0xac>)
 8005c34:	4413      	add	r3, r2
 8005c36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c3c:	4a1d      	ldr	r2, [pc, #116]	; (8005cb4 <prvHeapInit+0xb0>)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c42:	4b1c      	ldr	r3, [pc, #112]	; (8005cb4 <prvHeapInit+0xb0>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005c50:	2208      	movs	r2, #8
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	1a9b      	subs	r3, r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f023 0307 	bic.w	r3, r3, #7
 8005c5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4a15      	ldr	r2, [pc, #84]	; (8005cb8 <prvHeapInit+0xb4>)
 8005c64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005c66:	4b14      	ldr	r3, [pc, #80]	; (8005cb8 <prvHeapInit+0xb4>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005c6e:	4b12      	ldr	r3, [pc, #72]	; (8005cb8 <prvHeapInit+0xb4>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2200      	movs	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	1ad2      	subs	r2, r2, r3
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005c84:	4b0c      	ldr	r3, [pc, #48]	; (8005cb8 <prvHeapInit+0xb4>)
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	4a0a      	ldr	r2, [pc, #40]	; (8005cbc <prvHeapInit+0xb8>)
 8005c92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	4a09      	ldr	r2, [pc, #36]	; (8005cc0 <prvHeapInit+0xbc>)
 8005c9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005c9c:	4b09      	ldr	r3, [pc, #36]	; (8005cc4 <prvHeapInit+0xc0>)
 8005c9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ca2:	601a      	str	r2, [r3, #0]
}
 8005ca4:	bf00      	nop
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	20000a40 	.word	0x20000a40
 8005cb4:	20004640 	.word	0x20004640
 8005cb8:	20004648 	.word	0x20004648
 8005cbc:	20004650 	.word	0x20004650
 8005cc0:	2000464c 	.word	0x2000464c
 8005cc4:	2000465c 	.word	0x2000465c

08005cc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005cd0:	4b28      	ldr	r3, [pc, #160]	; (8005d74 <prvInsertBlockIntoFreeList+0xac>)
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	e002      	b.n	8005cdc <prvInsertBlockIntoFreeList+0x14>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d8f7      	bhi.n	8005cd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d108      	bne.n	8005d0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	441a      	add	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	441a      	add	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d118      	bne.n	8005d50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	4b15      	ldr	r3, [pc, #84]	; (8005d78 <prvInsertBlockIntoFreeList+0xb0>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d00d      	beq.n	8005d46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	441a      	add	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	e008      	b.n	8005d58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d46:	4b0c      	ldr	r3, [pc, #48]	; (8005d78 <prvInsertBlockIntoFreeList+0xb0>)
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	e003      	b.n	8005d58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d002      	beq.n	8005d66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d66:	bf00      	nop
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	20004640 	.word	0x20004640
 8005d78:	20004648 	.word	0x20004648

08005d7c <std>:
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	b510      	push	{r4, lr}
 8005d80:	4604      	mov	r4, r0
 8005d82:	e9c0 3300 	strd	r3, r3, [r0]
 8005d86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d8a:	6083      	str	r3, [r0, #8]
 8005d8c:	8181      	strh	r1, [r0, #12]
 8005d8e:	6643      	str	r3, [r0, #100]	; 0x64
 8005d90:	81c2      	strh	r2, [r0, #14]
 8005d92:	6183      	str	r3, [r0, #24]
 8005d94:	4619      	mov	r1, r3
 8005d96:	2208      	movs	r2, #8
 8005d98:	305c      	adds	r0, #92	; 0x5c
 8005d9a:	f000 f9f7 	bl	800618c <memset>
 8005d9e:	4b0d      	ldr	r3, [pc, #52]	; (8005dd4 <std+0x58>)
 8005da0:	6263      	str	r3, [r4, #36]	; 0x24
 8005da2:	4b0d      	ldr	r3, [pc, #52]	; (8005dd8 <std+0x5c>)
 8005da4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005da6:	4b0d      	ldr	r3, [pc, #52]	; (8005ddc <std+0x60>)
 8005da8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005daa:	4b0d      	ldr	r3, [pc, #52]	; (8005de0 <std+0x64>)
 8005dac:	6323      	str	r3, [r4, #48]	; 0x30
 8005dae:	4b0d      	ldr	r3, [pc, #52]	; (8005de4 <std+0x68>)
 8005db0:	6224      	str	r4, [r4, #32]
 8005db2:	429c      	cmp	r4, r3
 8005db4:	d006      	beq.n	8005dc4 <std+0x48>
 8005db6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005dba:	4294      	cmp	r4, r2
 8005dbc:	d002      	beq.n	8005dc4 <std+0x48>
 8005dbe:	33d0      	adds	r3, #208	; 0xd0
 8005dc0:	429c      	cmp	r4, r3
 8005dc2:	d105      	bne.n	8005dd0 <std+0x54>
 8005dc4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dcc:	f000 ba56 	b.w	800627c <__retarget_lock_init_recursive>
 8005dd0:	bd10      	pop	{r4, pc}
 8005dd2:	bf00      	nop
 8005dd4:	08005fdd 	.word	0x08005fdd
 8005dd8:	08005fff 	.word	0x08005fff
 8005ddc:	08006037 	.word	0x08006037
 8005de0:	0800605b 	.word	0x0800605b
 8005de4:	20004660 	.word	0x20004660

08005de8 <stdio_exit_handler>:
 8005de8:	4a02      	ldr	r2, [pc, #8]	; (8005df4 <stdio_exit_handler+0xc>)
 8005dea:	4903      	ldr	r1, [pc, #12]	; (8005df8 <stdio_exit_handler+0x10>)
 8005dec:	4803      	ldr	r0, [pc, #12]	; (8005dfc <stdio_exit_handler+0x14>)
 8005dee:	f000 b869 	b.w	8005ec4 <_fwalk_sglue>
 8005df2:	bf00      	nop
 8005df4:	20000010 	.word	0x20000010
 8005df8:	08006b45 	.word	0x08006b45
 8005dfc:	2000001c 	.word	0x2000001c

08005e00 <cleanup_stdio>:
 8005e00:	6841      	ldr	r1, [r0, #4]
 8005e02:	4b0c      	ldr	r3, [pc, #48]	; (8005e34 <cleanup_stdio+0x34>)
 8005e04:	4299      	cmp	r1, r3
 8005e06:	b510      	push	{r4, lr}
 8005e08:	4604      	mov	r4, r0
 8005e0a:	d001      	beq.n	8005e10 <cleanup_stdio+0x10>
 8005e0c:	f000 fe9a 	bl	8006b44 <_fflush_r>
 8005e10:	68a1      	ldr	r1, [r4, #8]
 8005e12:	4b09      	ldr	r3, [pc, #36]	; (8005e38 <cleanup_stdio+0x38>)
 8005e14:	4299      	cmp	r1, r3
 8005e16:	d002      	beq.n	8005e1e <cleanup_stdio+0x1e>
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f000 fe93 	bl	8006b44 <_fflush_r>
 8005e1e:	68e1      	ldr	r1, [r4, #12]
 8005e20:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <cleanup_stdio+0x3c>)
 8005e22:	4299      	cmp	r1, r3
 8005e24:	d004      	beq.n	8005e30 <cleanup_stdio+0x30>
 8005e26:	4620      	mov	r0, r4
 8005e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e2c:	f000 be8a 	b.w	8006b44 <_fflush_r>
 8005e30:	bd10      	pop	{r4, pc}
 8005e32:	bf00      	nop
 8005e34:	20004660 	.word	0x20004660
 8005e38:	200046c8 	.word	0x200046c8
 8005e3c:	20004730 	.word	0x20004730

08005e40 <global_stdio_init.part.0>:
 8005e40:	b510      	push	{r4, lr}
 8005e42:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <global_stdio_init.part.0+0x30>)
 8005e44:	4c0b      	ldr	r4, [pc, #44]	; (8005e74 <global_stdio_init.part.0+0x34>)
 8005e46:	4a0c      	ldr	r2, [pc, #48]	; (8005e78 <global_stdio_init.part.0+0x38>)
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2104      	movs	r1, #4
 8005e50:	f7ff ff94 	bl	8005d7c <std>
 8005e54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005e58:	2201      	movs	r2, #1
 8005e5a:	2109      	movs	r1, #9
 8005e5c:	f7ff ff8e 	bl	8005d7c <std>
 8005e60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005e64:	2202      	movs	r2, #2
 8005e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e6a:	2112      	movs	r1, #18
 8005e6c:	f7ff bf86 	b.w	8005d7c <std>
 8005e70:	20004798 	.word	0x20004798
 8005e74:	20004660 	.word	0x20004660
 8005e78:	08005de9 	.word	0x08005de9

08005e7c <__sfp_lock_acquire>:
 8005e7c:	4801      	ldr	r0, [pc, #4]	; (8005e84 <__sfp_lock_acquire+0x8>)
 8005e7e:	f000 b9fe 	b.w	800627e <__retarget_lock_acquire_recursive>
 8005e82:	bf00      	nop
 8005e84:	200047a1 	.word	0x200047a1

08005e88 <__sfp_lock_release>:
 8005e88:	4801      	ldr	r0, [pc, #4]	; (8005e90 <__sfp_lock_release+0x8>)
 8005e8a:	f000 b9f9 	b.w	8006280 <__retarget_lock_release_recursive>
 8005e8e:	bf00      	nop
 8005e90:	200047a1 	.word	0x200047a1

08005e94 <__sinit>:
 8005e94:	b510      	push	{r4, lr}
 8005e96:	4604      	mov	r4, r0
 8005e98:	f7ff fff0 	bl	8005e7c <__sfp_lock_acquire>
 8005e9c:	6a23      	ldr	r3, [r4, #32]
 8005e9e:	b11b      	cbz	r3, 8005ea8 <__sinit+0x14>
 8005ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ea4:	f7ff bff0 	b.w	8005e88 <__sfp_lock_release>
 8005ea8:	4b04      	ldr	r3, [pc, #16]	; (8005ebc <__sinit+0x28>)
 8005eaa:	6223      	str	r3, [r4, #32]
 8005eac:	4b04      	ldr	r3, [pc, #16]	; (8005ec0 <__sinit+0x2c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1f5      	bne.n	8005ea0 <__sinit+0xc>
 8005eb4:	f7ff ffc4 	bl	8005e40 <global_stdio_init.part.0>
 8005eb8:	e7f2      	b.n	8005ea0 <__sinit+0xc>
 8005eba:	bf00      	nop
 8005ebc:	08005e01 	.word	0x08005e01
 8005ec0:	20004798 	.word	0x20004798

08005ec4 <_fwalk_sglue>:
 8005ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ec8:	4607      	mov	r7, r0
 8005eca:	4688      	mov	r8, r1
 8005ecc:	4614      	mov	r4, r2
 8005ece:	2600      	movs	r6, #0
 8005ed0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ed4:	f1b9 0901 	subs.w	r9, r9, #1
 8005ed8:	d505      	bpl.n	8005ee6 <_fwalk_sglue+0x22>
 8005eda:	6824      	ldr	r4, [r4, #0]
 8005edc:	2c00      	cmp	r4, #0
 8005ede:	d1f7      	bne.n	8005ed0 <_fwalk_sglue+0xc>
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ee6:	89ab      	ldrh	r3, [r5, #12]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d907      	bls.n	8005efc <_fwalk_sglue+0x38>
 8005eec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	d003      	beq.n	8005efc <_fwalk_sglue+0x38>
 8005ef4:	4629      	mov	r1, r5
 8005ef6:	4638      	mov	r0, r7
 8005ef8:	47c0      	blx	r8
 8005efa:	4306      	orrs	r6, r0
 8005efc:	3568      	adds	r5, #104	; 0x68
 8005efe:	e7e9      	b.n	8005ed4 <_fwalk_sglue+0x10>

08005f00 <iprintf>:
 8005f00:	b40f      	push	{r0, r1, r2, r3}
 8005f02:	b507      	push	{r0, r1, r2, lr}
 8005f04:	4906      	ldr	r1, [pc, #24]	; (8005f20 <iprintf+0x20>)
 8005f06:	ab04      	add	r3, sp, #16
 8005f08:	6808      	ldr	r0, [r1, #0]
 8005f0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f0e:	6881      	ldr	r1, [r0, #8]
 8005f10:	9301      	str	r3, [sp, #4]
 8005f12:	f000 fae7 	bl	80064e4 <_vfiprintf_r>
 8005f16:	b003      	add	sp, #12
 8005f18:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f1c:	b004      	add	sp, #16
 8005f1e:	4770      	bx	lr
 8005f20:	20000068 	.word	0x20000068

08005f24 <_puts_r>:
 8005f24:	6a03      	ldr	r3, [r0, #32]
 8005f26:	b570      	push	{r4, r5, r6, lr}
 8005f28:	6884      	ldr	r4, [r0, #8]
 8005f2a:	4605      	mov	r5, r0
 8005f2c:	460e      	mov	r6, r1
 8005f2e:	b90b      	cbnz	r3, 8005f34 <_puts_r+0x10>
 8005f30:	f7ff ffb0 	bl	8005e94 <__sinit>
 8005f34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f36:	07db      	lsls	r3, r3, #31
 8005f38:	d405      	bmi.n	8005f46 <_puts_r+0x22>
 8005f3a:	89a3      	ldrh	r3, [r4, #12]
 8005f3c:	0598      	lsls	r0, r3, #22
 8005f3e:	d402      	bmi.n	8005f46 <_puts_r+0x22>
 8005f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f42:	f000 f99c 	bl	800627e <__retarget_lock_acquire_recursive>
 8005f46:	89a3      	ldrh	r3, [r4, #12]
 8005f48:	0719      	lsls	r1, r3, #28
 8005f4a:	d513      	bpl.n	8005f74 <_puts_r+0x50>
 8005f4c:	6923      	ldr	r3, [r4, #16]
 8005f4e:	b18b      	cbz	r3, 8005f74 <_puts_r+0x50>
 8005f50:	3e01      	subs	r6, #1
 8005f52:	68a3      	ldr	r3, [r4, #8]
 8005f54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	60a3      	str	r3, [r4, #8]
 8005f5c:	b9e9      	cbnz	r1, 8005f9a <_puts_r+0x76>
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	da2e      	bge.n	8005fc0 <_puts_r+0x9c>
 8005f62:	4622      	mov	r2, r4
 8005f64:	210a      	movs	r1, #10
 8005f66:	4628      	mov	r0, r5
 8005f68:	f000 f87b 	bl	8006062 <__swbuf_r>
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	d007      	beq.n	8005f80 <_puts_r+0x5c>
 8005f70:	250a      	movs	r5, #10
 8005f72:	e007      	b.n	8005f84 <_puts_r+0x60>
 8005f74:	4621      	mov	r1, r4
 8005f76:	4628      	mov	r0, r5
 8005f78:	f000 f8b0 	bl	80060dc <__swsetup_r>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	d0e7      	beq.n	8005f50 <_puts_r+0x2c>
 8005f80:	f04f 35ff 	mov.w	r5, #4294967295
 8005f84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f86:	07da      	lsls	r2, r3, #31
 8005f88:	d405      	bmi.n	8005f96 <_puts_r+0x72>
 8005f8a:	89a3      	ldrh	r3, [r4, #12]
 8005f8c:	059b      	lsls	r3, r3, #22
 8005f8e:	d402      	bmi.n	8005f96 <_puts_r+0x72>
 8005f90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f92:	f000 f975 	bl	8006280 <__retarget_lock_release_recursive>
 8005f96:	4628      	mov	r0, r5
 8005f98:	bd70      	pop	{r4, r5, r6, pc}
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	da04      	bge.n	8005fa8 <_puts_r+0x84>
 8005f9e:	69a2      	ldr	r2, [r4, #24]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	dc06      	bgt.n	8005fb2 <_puts_r+0x8e>
 8005fa4:	290a      	cmp	r1, #10
 8005fa6:	d004      	beq.n	8005fb2 <_puts_r+0x8e>
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	6022      	str	r2, [r4, #0]
 8005fae:	7019      	strb	r1, [r3, #0]
 8005fb0:	e7cf      	b.n	8005f52 <_puts_r+0x2e>
 8005fb2:	4622      	mov	r2, r4
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	f000 f854 	bl	8006062 <__swbuf_r>
 8005fba:	3001      	adds	r0, #1
 8005fbc:	d1c9      	bne.n	8005f52 <_puts_r+0x2e>
 8005fbe:	e7df      	b.n	8005f80 <_puts_r+0x5c>
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	250a      	movs	r5, #10
 8005fc4:	1c5a      	adds	r2, r3, #1
 8005fc6:	6022      	str	r2, [r4, #0]
 8005fc8:	701d      	strb	r5, [r3, #0]
 8005fca:	e7db      	b.n	8005f84 <_puts_r+0x60>

08005fcc <puts>:
 8005fcc:	4b02      	ldr	r3, [pc, #8]	; (8005fd8 <puts+0xc>)
 8005fce:	4601      	mov	r1, r0
 8005fd0:	6818      	ldr	r0, [r3, #0]
 8005fd2:	f7ff bfa7 	b.w	8005f24 <_puts_r>
 8005fd6:	bf00      	nop
 8005fd8:	20000068 	.word	0x20000068

08005fdc <__sread>:
 8005fdc:	b510      	push	{r4, lr}
 8005fde:	460c      	mov	r4, r1
 8005fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe4:	f000 f8fc 	bl	80061e0 <_read_r>
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	bfab      	itete	ge
 8005fec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fee:	89a3      	ldrhlt	r3, [r4, #12]
 8005ff0:	181b      	addge	r3, r3, r0
 8005ff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ff6:	bfac      	ite	ge
 8005ff8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ffa:	81a3      	strhlt	r3, [r4, #12]
 8005ffc:	bd10      	pop	{r4, pc}

08005ffe <__swrite>:
 8005ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006002:	461f      	mov	r7, r3
 8006004:	898b      	ldrh	r3, [r1, #12]
 8006006:	05db      	lsls	r3, r3, #23
 8006008:	4605      	mov	r5, r0
 800600a:	460c      	mov	r4, r1
 800600c:	4616      	mov	r6, r2
 800600e:	d505      	bpl.n	800601c <__swrite+0x1e>
 8006010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006014:	2302      	movs	r3, #2
 8006016:	2200      	movs	r2, #0
 8006018:	f000 f8d0 	bl	80061bc <_lseek_r>
 800601c:	89a3      	ldrh	r3, [r4, #12]
 800601e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006026:	81a3      	strh	r3, [r4, #12]
 8006028:	4632      	mov	r2, r6
 800602a:	463b      	mov	r3, r7
 800602c:	4628      	mov	r0, r5
 800602e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006032:	f000 b8e7 	b.w	8006204 <_write_r>

08006036 <__sseek>:
 8006036:	b510      	push	{r4, lr}
 8006038:	460c      	mov	r4, r1
 800603a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800603e:	f000 f8bd 	bl	80061bc <_lseek_r>
 8006042:	1c43      	adds	r3, r0, #1
 8006044:	89a3      	ldrh	r3, [r4, #12]
 8006046:	bf15      	itete	ne
 8006048:	6560      	strne	r0, [r4, #84]	; 0x54
 800604a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800604e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006052:	81a3      	strheq	r3, [r4, #12]
 8006054:	bf18      	it	ne
 8006056:	81a3      	strhne	r3, [r4, #12]
 8006058:	bd10      	pop	{r4, pc}

0800605a <__sclose>:
 800605a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800605e:	f000 b89d 	b.w	800619c <_close_r>

08006062 <__swbuf_r>:
 8006062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006064:	460e      	mov	r6, r1
 8006066:	4614      	mov	r4, r2
 8006068:	4605      	mov	r5, r0
 800606a:	b118      	cbz	r0, 8006074 <__swbuf_r+0x12>
 800606c:	6a03      	ldr	r3, [r0, #32]
 800606e:	b90b      	cbnz	r3, 8006074 <__swbuf_r+0x12>
 8006070:	f7ff ff10 	bl	8005e94 <__sinit>
 8006074:	69a3      	ldr	r3, [r4, #24]
 8006076:	60a3      	str	r3, [r4, #8]
 8006078:	89a3      	ldrh	r3, [r4, #12]
 800607a:	071a      	lsls	r2, r3, #28
 800607c:	d525      	bpl.n	80060ca <__swbuf_r+0x68>
 800607e:	6923      	ldr	r3, [r4, #16]
 8006080:	b31b      	cbz	r3, 80060ca <__swbuf_r+0x68>
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	6922      	ldr	r2, [r4, #16]
 8006086:	1a98      	subs	r0, r3, r2
 8006088:	6963      	ldr	r3, [r4, #20]
 800608a:	b2f6      	uxtb	r6, r6
 800608c:	4283      	cmp	r3, r0
 800608e:	4637      	mov	r7, r6
 8006090:	dc04      	bgt.n	800609c <__swbuf_r+0x3a>
 8006092:	4621      	mov	r1, r4
 8006094:	4628      	mov	r0, r5
 8006096:	f000 fd55 	bl	8006b44 <_fflush_r>
 800609a:	b9e0      	cbnz	r0, 80060d6 <__swbuf_r+0x74>
 800609c:	68a3      	ldr	r3, [r4, #8]
 800609e:	3b01      	subs	r3, #1
 80060a0:	60a3      	str	r3, [r4, #8]
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	1c5a      	adds	r2, r3, #1
 80060a6:	6022      	str	r2, [r4, #0]
 80060a8:	701e      	strb	r6, [r3, #0]
 80060aa:	6962      	ldr	r2, [r4, #20]
 80060ac:	1c43      	adds	r3, r0, #1
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d004      	beq.n	80060bc <__swbuf_r+0x5a>
 80060b2:	89a3      	ldrh	r3, [r4, #12]
 80060b4:	07db      	lsls	r3, r3, #31
 80060b6:	d506      	bpl.n	80060c6 <__swbuf_r+0x64>
 80060b8:	2e0a      	cmp	r6, #10
 80060ba:	d104      	bne.n	80060c6 <__swbuf_r+0x64>
 80060bc:	4621      	mov	r1, r4
 80060be:	4628      	mov	r0, r5
 80060c0:	f000 fd40 	bl	8006b44 <_fflush_r>
 80060c4:	b938      	cbnz	r0, 80060d6 <__swbuf_r+0x74>
 80060c6:	4638      	mov	r0, r7
 80060c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060ca:	4621      	mov	r1, r4
 80060cc:	4628      	mov	r0, r5
 80060ce:	f000 f805 	bl	80060dc <__swsetup_r>
 80060d2:	2800      	cmp	r0, #0
 80060d4:	d0d5      	beq.n	8006082 <__swbuf_r+0x20>
 80060d6:	f04f 37ff 	mov.w	r7, #4294967295
 80060da:	e7f4      	b.n	80060c6 <__swbuf_r+0x64>

080060dc <__swsetup_r>:
 80060dc:	b538      	push	{r3, r4, r5, lr}
 80060de:	4b2a      	ldr	r3, [pc, #168]	; (8006188 <__swsetup_r+0xac>)
 80060e0:	4605      	mov	r5, r0
 80060e2:	6818      	ldr	r0, [r3, #0]
 80060e4:	460c      	mov	r4, r1
 80060e6:	b118      	cbz	r0, 80060f0 <__swsetup_r+0x14>
 80060e8:	6a03      	ldr	r3, [r0, #32]
 80060ea:	b90b      	cbnz	r3, 80060f0 <__swsetup_r+0x14>
 80060ec:	f7ff fed2 	bl	8005e94 <__sinit>
 80060f0:	89a3      	ldrh	r3, [r4, #12]
 80060f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060f6:	0718      	lsls	r0, r3, #28
 80060f8:	d422      	bmi.n	8006140 <__swsetup_r+0x64>
 80060fa:	06d9      	lsls	r1, r3, #27
 80060fc:	d407      	bmi.n	800610e <__swsetup_r+0x32>
 80060fe:	2309      	movs	r3, #9
 8006100:	602b      	str	r3, [r5, #0]
 8006102:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006106:	81a3      	strh	r3, [r4, #12]
 8006108:	f04f 30ff 	mov.w	r0, #4294967295
 800610c:	e034      	b.n	8006178 <__swsetup_r+0x9c>
 800610e:	0758      	lsls	r0, r3, #29
 8006110:	d512      	bpl.n	8006138 <__swsetup_r+0x5c>
 8006112:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006114:	b141      	cbz	r1, 8006128 <__swsetup_r+0x4c>
 8006116:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800611a:	4299      	cmp	r1, r3
 800611c:	d002      	beq.n	8006124 <__swsetup_r+0x48>
 800611e:	4628      	mov	r0, r5
 8006120:	f000 f8be 	bl	80062a0 <_free_r>
 8006124:	2300      	movs	r3, #0
 8006126:	6363      	str	r3, [r4, #52]	; 0x34
 8006128:	89a3      	ldrh	r3, [r4, #12]
 800612a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800612e:	81a3      	strh	r3, [r4, #12]
 8006130:	2300      	movs	r3, #0
 8006132:	6063      	str	r3, [r4, #4]
 8006134:	6923      	ldr	r3, [r4, #16]
 8006136:	6023      	str	r3, [r4, #0]
 8006138:	89a3      	ldrh	r3, [r4, #12]
 800613a:	f043 0308 	orr.w	r3, r3, #8
 800613e:	81a3      	strh	r3, [r4, #12]
 8006140:	6923      	ldr	r3, [r4, #16]
 8006142:	b94b      	cbnz	r3, 8006158 <__swsetup_r+0x7c>
 8006144:	89a3      	ldrh	r3, [r4, #12]
 8006146:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800614a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800614e:	d003      	beq.n	8006158 <__swsetup_r+0x7c>
 8006150:	4621      	mov	r1, r4
 8006152:	4628      	mov	r0, r5
 8006154:	f000 fd44 	bl	8006be0 <__smakebuf_r>
 8006158:	89a0      	ldrh	r0, [r4, #12]
 800615a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800615e:	f010 0301 	ands.w	r3, r0, #1
 8006162:	d00a      	beq.n	800617a <__swsetup_r+0x9e>
 8006164:	2300      	movs	r3, #0
 8006166:	60a3      	str	r3, [r4, #8]
 8006168:	6963      	ldr	r3, [r4, #20]
 800616a:	425b      	negs	r3, r3
 800616c:	61a3      	str	r3, [r4, #24]
 800616e:	6923      	ldr	r3, [r4, #16]
 8006170:	b943      	cbnz	r3, 8006184 <__swsetup_r+0xa8>
 8006172:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006176:	d1c4      	bne.n	8006102 <__swsetup_r+0x26>
 8006178:	bd38      	pop	{r3, r4, r5, pc}
 800617a:	0781      	lsls	r1, r0, #30
 800617c:	bf58      	it	pl
 800617e:	6963      	ldrpl	r3, [r4, #20]
 8006180:	60a3      	str	r3, [r4, #8]
 8006182:	e7f4      	b.n	800616e <__swsetup_r+0x92>
 8006184:	2000      	movs	r0, #0
 8006186:	e7f7      	b.n	8006178 <__swsetup_r+0x9c>
 8006188:	20000068 	.word	0x20000068

0800618c <memset>:
 800618c:	4402      	add	r2, r0
 800618e:	4603      	mov	r3, r0
 8006190:	4293      	cmp	r3, r2
 8006192:	d100      	bne.n	8006196 <memset+0xa>
 8006194:	4770      	bx	lr
 8006196:	f803 1b01 	strb.w	r1, [r3], #1
 800619a:	e7f9      	b.n	8006190 <memset+0x4>

0800619c <_close_r>:
 800619c:	b538      	push	{r3, r4, r5, lr}
 800619e:	4d06      	ldr	r5, [pc, #24]	; (80061b8 <_close_r+0x1c>)
 80061a0:	2300      	movs	r3, #0
 80061a2:	4604      	mov	r4, r0
 80061a4:	4608      	mov	r0, r1
 80061a6:	602b      	str	r3, [r5, #0]
 80061a8:	f7fa fcc7 	bl	8000b3a <_close>
 80061ac:	1c43      	adds	r3, r0, #1
 80061ae:	d102      	bne.n	80061b6 <_close_r+0x1a>
 80061b0:	682b      	ldr	r3, [r5, #0]
 80061b2:	b103      	cbz	r3, 80061b6 <_close_r+0x1a>
 80061b4:	6023      	str	r3, [r4, #0]
 80061b6:	bd38      	pop	{r3, r4, r5, pc}
 80061b8:	2000479c 	.word	0x2000479c

080061bc <_lseek_r>:
 80061bc:	b538      	push	{r3, r4, r5, lr}
 80061be:	4d07      	ldr	r5, [pc, #28]	; (80061dc <_lseek_r+0x20>)
 80061c0:	4604      	mov	r4, r0
 80061c2:	4608      	mov	r0, r1
 80061c4:	4611      	mov	r1, r2
 80061c6:	2200      	movs	r2, #0
 80061c8:	602a      	str	r2, [r5, #0]
 80061ca:	461a      	mov	r2, r3
 80061cc:	f7fa fcdc 	bl	8000b88 <_lseek>
 80061d0:	1c43      	adds	r3, r0, #1
 80061d2:	d102      	bne.n	80061da <_lseek_r+0x1e>
 80061d4:	682b      	ldr	r3, [r5, #0]
 80061d6:	b103      	cbz	r3, 80061da <_lseek_r+0x1e>
 80061d8:	6023      	str	r3, [r4, #0]
 80061da:	bd38      	pop	{r3, r4, r5, pc}
 80061dc:	2000479c 	.word	0x2000479c

080061e0 <_read_r>:
 80061e0:	b538      	push	{r3, r4, r5, lr}
 80061e2:	4d07      	ldr	r5, [pc, #28]	; (8006200 <_read_r+0x20>)
 80061e4:	4604      	mov	r4, r0
 80061e6:	4608      	mov	r0, r1
 80061e8:	4611      	mov	r1, r2
 80061ea:	2200      	movs	r2, #0
 80061ec:	602a      	str	r2, [r5, #0]
 80061ee:	461a      	mov	r2, r3
 80061f0:	f7fa fc6a 	bl	8000ac8 <_read>
 80061f4:	1c43      	adds	r3, r0, #1
 80061f6:	d102      	bne.n	80061fe <_read_r+0x1e>
 80061f8:	682b      	ldr	r3, [r5, #0]
 80061fa:	b103      	cbz	r3, 80061fe <_read_r+0x1e>
 80061fc:	6023      	str	r3, [r4, #0]
 80061fe:	bd38      	pop	{r3, r4, r5, pc}
 8006200:	2000479c 	.word	0x2000479c

08006204 <_write_r>:
 8006204:	b538      	push	{r3, r4, r5, lr}
 8006206:	4d07      	ldr	r5, [pc, #28]	; (8006224 <_write_r+0x20>)
 8006208:	4604      	mov	r4, r0
 800620a:	4608      	mov	r0, r1
 800620c:	4611      	mov	r1, r2
 800620e:	2200      	movs	r2, #0
 8006210:	602a      	str	r2, [r5, #0]
 8006212:	461a      	mov	r2, r3
 8006214:	f7fa fc75 	bl	8000b02 <_write>
 8006218:	1c43      	adds	r3, r0, #1
 800621a:	d102      	bne.n	8006222 <_write_r+0x1e>
 800621c:	682b      	ldr	r3, [r5, #0]
 800621e:	b103      	cbz	r3, 8006222 <_write_r+0x1e>
 8006220:	6023      	str	r3, [r4, #0]
 8006222:	bd38      	pop	{r3, r4, r5, pc}
 8006224:	2000479c 	.word	0x2000479c

08006228 <__errno>:
 8006228:	4b01      	ldr	r3, [pc, #4]	; (8006230 <__errno+0x8>)
 800622a:	6818      	ldr	r0, [r3, #0]
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	20000068 	.word	0x20000068

08006234 <__libc_init_array>:
 8006234:	b570      	push	{r4, r5, r6, lr}
 8006236:	4d0d      	ldr	r5, [pc, #52]	; (800626c <__libc_init_array+0x38>)
 8006238:	4c0d      	ldr	r4, [pc, #52]	; (8006270 <__libc_init_array+0x3c>)
 800623a:	1b64      	subs	r4, r4, r5
 800623c:	10a4      	asrs	r4, r4, #2
 800623e:	2600      	movs	r6, #0
 8006240:	42a6      	cmp	r6, r4
 8006242:	d109      	bne.n	8006258 <__libc_init_array+0x24>
 8006244:	4d0b      	ldr	r5, [pc, #44]	; (8006274 <__libc_init_array+0x40>)
 8006246:	4c0c      	ldr	r4, [pc, #48]	; (8006278 <__libc_init_array+0x44>)
 8006248:	f000 fd38 	bl	8006cbc <_init>
 800624c:	1b64      	subs	r4, r4, r5
 800624e:	10a4      	asrs	r4, r4, #2
 8006250:	2600      	movs	r6, #0
 8006252:	42a6      	cmp	r6, r4
 8006254:	d105      	bne.n	8006262 <__libc_init_array+0x2e>
 8006256:	bd70      	pop	{r4, r5, r6, pc}
 8006258:	f855 3b04 	ldr.w	r3, [r5], #4
 800625c:	4798      	blx	r3
 800625e:	3601      	adds	r6, #1
 8006260:	e7ee      	b.n	8006240 <__libc_init_array+0xc>
 8006262:	f855 3b04 	ldr.w	r3, [r5], #4
 8006266:	4798      	blx	r3
 8006268:	3601      	adds	r6, #1
 800626a:	e7f2      	b.n	8006252 <__libc_init_array+0x1e>
 800626c:	08006d98 	.word	0x08006d98
 8006270:	08006d98 	.word	0x08006d98
 8006274:	08006d98 	.word	0x08006d98
 8006278:	08006d9c 	.word	0x08006d9c

0800627c <__retarget_lock_init_recursive>:
 800627c:	4770      	bx	lr

0800627e <__retarget_lock_acquire_recursive>:
 800627e:	4770      	bx	lr

08006280 <__retarget_lock_release_recursive>:
 8006280:	4770      	bx	lr

08006282 <memcpy>:
 8006282:	440a      	add	r2, r1
 8006284:	4291      	cmp	r1, r2
 8006286:	f100 33ff 	add.w	r3, r0, #4294967295
 800628a:	d100      	bne.n	800628e <memcpy+0xc>
 800628c:	4770      	bx	lr
 800628e:	b510      	push	{r4, lr}
 8006290:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006294:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006298:	4291      	cmp	r1, r2
 800629a:	d1f9      	bne.n	8006290 <memcpy+0xe>
 800629c:	bd10      	pop	{r4, pc}
	...

080062a0 <_free_r>:
 80062a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062a2:	2900      	cmp	r1, #0
 80062a4:	d044      	beq.n	8006330 <_free_r+0x90>
 80062a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062aa:	9001      	str	r0, [sp, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f1a1 0404 	sub.w	r4, r1, #4
 80062b2:	bfb8      	it	lt
 80062b4:	18e4      	addlt	r4, r4, r3
 80062b6:	f000 f8df 	bl	8006478 <__malloc_lock>
 80062ba:	4a1e      	ldr	r2, [pc, #120]	; (8006334 <_free_r+0x94>)
 80062bc:	9801      	ldr	r0, [sp, #4]
 80062be:	6813      	ldr	r3, [r2, #0]
 80062c0:	b933      	cbnz	r3, 80062d0 <_free_r+0x30>
 80062c2:	6063      	str	r3, [r4, #4]
 80062c4:	6014      	str	r4, [r2, #0]
 80062c6:	b003      	add	sp, #12
 80062c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062cc:	f000 b8da 	b.w	8006484 <__malloc_unlock>
 80062d0:	42a3      	cmp	r3, r4
 80062d2:	d908      	bls.n	80062e6 <_free_r+0x46>
 80062d4:	6825      	ldr	r5, [r4, #0]
 80062d6:	1961      	adds	r1, r4, r5
 80062d8:	428b      	cmp	r3, r1
 80062da:	bf01      	itttt	eq
 80062dc:	6819      	ldreq	r1, [r3, #0]
 80062de:	685b      	ldreq	r3, [r3, #4]
 80062e0:	1949      	addeq	r1, r1, r5
 80062e2:	6021      	streq	r1, [r4, #0]
 80062e4:	e7ed      	b.n	80062c2 <_free_r+0x22>
 80062e6:	461a      	mov	r2, r3
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	b10b      	cbz	r3, 80062f0 <_free_r+0x50>
 80062ec:	42a3      	cmp	r3, r4
 80062ee:	d9fa      	bls.n	80062e6 <_free_r+0x46>
 80062f0:	6811      	ldr	r1, [r2, #0]
 80062f2:	1855      	adds	r5, r2, r1
 80062f4:	42a5      	cmp	r5, r4
 80062f6:	d10b      	bne.n	8006310 <_free_r+0x70>
 80062f8:	6824      	ldr	r4, [r4, #0]
 80062fa:	4421      	add	r1, r4
 80062fc:	1854      	adds	r4, r2, r1
 80062fe:	42a3      	cmp	r3, r4
 8006300:	6011      	str	r1, [r2, #0]
 8006302:	d1e0      	bne.n	80062c6 <_free_r+0x26>
 8006304:	681c      	ldr	r4, [r3, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	6053      	str	r3, [r2, #4]
 800630a:	440c      	add	r4, r1
 800630c:	6014      	str	r4, [r2, #0]
 800630e:	e7da      	b.n	80062c6 <_free_r+0x26>
 8006310:	d902      	bls.n	8006318 <_free_r+0x78>
 8006312:	230c      	movs	r3, #12
 8006314:	6003      	str	r3, [r0, #0]
 8006316:	e7d6      	b.n	80062c6 <_free_r+0x26>
 8006318:	6825      	ldr	r5, [r4, #0]
 800631a:	1961      	adds	r1, r4, r5
 800631c:	428b      	cmp	r3, r1
 800631e:	bf04      	itt	eq
 8006320:	6819      	ldreq	r1, [r3, #0]
 8006322:	685b      	ldreq	r3, [r3, #4]
 8006324:	6063      	str	r3, [r4, #4]
 8006326:	bf04      	itt	eq
 8006328:	1949      	addeq	r1, r1, r5
 800632a:	6021      	streq	r1, [r4, #0]
 800632c:	6054      	str	r4, [r2, #4]
 800632e:	e7ca      	b.n	80062c6 <_free_r+0x26>
 8006330:	b003      	add	sp, #12
 8006332:	bd30      	pop	{r4, r5, pc}
 8006334:	200047a4 	.word	0x200047a4

08006338 <sbrk_aligned>:
 8006338:	b570      	push	{r4, r5, r6, lr}
 800633a:	4e0e      	ldr	r6, [pc, #56]	; (8006374 <sbrk_aligned+0x3c>)
 800633c:	460c      	mov	r4, r1
 800633e:	6831      	ldr	r1, [r6, #0]
 8006340:	4605      	mov	r5, r0
 8006342:	b911      	cbnz	r1, 800634a <sbrk_aligned+0x12>
 8006344:	f000 fcaa 	bl	8006c9c <_sbrk_r>
 8006348:	6030      	str	r0, [r6, #0]
 800634a:	4621      	mov	r1, r4
 800634c:	4628      	mov	r0, r5
 800634e:	f000 fca5 	bl	8006c9c <_sbrk_r>
 8006352:	1c43      	adds	r3, r0, #1
 8006354:	d00a      	beq.n	800636c <sbrk_aligned+0x34>
 8006356:	1cc4      	adds	r4, r0, #3
 8006358:	f024 0403 	bic.w	r4, r4, #3
 800635c:	42a0      	cmp	r0, r4
 800635e:	d007      	beq.n	8006370 <sbrk_aligned+0x38>
 8006360:	1a21      	subs	r1, r4, r0
 8006362:	4628      	mov	r0, r5
 8006364:	f000 fc9a 	bl	8006c9c <_sbrk_r>
 8006368:	3001      	adds	r0, #1
 800636a:	d101      	bne.n	8006370 <sbrk_aligned+0x38>
 800636c:	f04f 34ff 	mov.w	r4, #4294967295
 8006370:	4620      	mov	r0, r4
 8006372:	bd70      	pop	{r4, r5, r6, pc}
 8006374:	200047a8 	.word	0x200047a8

08006378 <_malloc_r>:
 8006378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800637c:	1ccd      	adds	r5, r1, #3
 800637e:	f025 0503 	bic.w	r5, r5, #3
 8006382:	3508      	adds	r5, #8
 8006384:	2d0c      	cmp	r5, #12
 8006386:	bf38      	it	cc
 8006388:	250c      	movcc	r5, #12
 800638a:	2d00      	cmp	r5, #0
 800638c:	4607      	mov	r7, r0
 800638e:	db01      	blt.n	8006394 <_malloc_r+0x1c>
 8006390:	42a9      	cmp	r1, r5
 8006392:	d905      	bls.n	80063a0 <_malloc_r+0x28>
 8006394:	230c      	movs	r3, #12
 8006396:	603b      	str	r3, [r7, #0]
 8006398:	2600      	movs	r6, #0
 800639a:	4630      	mov	r0, r6
 800639c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006474 <_malloc_r+0xfc>
 80063a4:	f000 f868 	bl	8006478 <__malloc_lock>
 80063a8:	f8d8 3000 	ldr.w	r3, [r8]
 80063ac:	461c      	mov	r4, r3
 80063ae:	bb5c      	cbnz	r4, 8006408 <_malloc_r+0x90>
 80063b0:	4629      	mov	r1, r5
 80063b2:	4638      	mov	r0, r7
 80063b4:	f7ff ffc0 	bl	8006338 <sbrk_aligned>
 80063b8:	1c43      	adds	r3, r0, #1
 80063ba:	4604      	mov	r4, r0
 80063bc:	d155      	bne.n	800646a <_malloc_r+0xf2>
 80063be:	f8d8 4000 	ldr.w	r4, [r8]
 80063c2:	4626      	mov	r6, r4
 80063c4:	2e00      	cmp	r6, #0
 80063c6:	d145      	bne.n	8006454 <_malloc_r+0xdc>
 80063c8:	2c00      	cmp	r4, #0
 80063ca:	d048      	beq.n	800645e <_malloc_r+0xe6>
 80063cc:	6823      	ldr	r3, [r4, #0]
 80063ce:	4631      	mov	r1, r6
 80063d0:	4638      	mov	r0, r7
 80063d2:	eb04 0903 	add.w	r9, r4, r3
 80063d6:	f000 fc61 	bl	8006c9c <_sbrk_r>
 80063da:	4581      	cmp	r9, r0
 80063dc:	d13f      	bne.n	800645e <_malloc_r+0xe6>
 80063de:	6821      	ldr	r1, [r4, #0]
 80063e0:	1a6d      	subs	r5, r5, r1
 80063e2:	4629      	mov	r1, r5
 80063e4:	4638      	mov	r0, r7
 80063e6:	f7ff ffa7 	bl	8006338 <sbrk_aligned>
 80063ea:	3001      	adds	r0, #1
 80063ec:	d037      	beq.n	800645e <_malloc_r+0xe6>
 80063ee:	6823      	ldr	r3, [r4, #0]
 80063f0:	442b      	add	r3, r5
 80063f2:	6023      	str	r3, [r4, #0]
 80063f4:	f8d8 3000 	ldr.w	r3, [r8]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d038      	beq.n	800646e <_malloc_r+0xf6>
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	42a2      	cmp	r2, r4
 8006400:	d12b      	bne.n	800645a <_malloc_r+0xe2>
 8006402:	2200      	movs	r2, #0
 8006404:	605a      	str	r2, [r3, #4]
 8006406:	e00f      	b.n	8006428 <_malloc_r+0xb0>
 8006408:	6822      	ldr	r2, [r4, #0]
 800640a:	1b52      	subs	r2, r2, r5
 800640c:	d41f      	bmi.n	800644e <_malloc_r+0xd6>
 800640e:	2a0b      	cmp	r2, #11
 8006410:	d917      	bls.n	8006442 <_malloc_r+0xca>
 8006412:	1961      	adds	r1, r4, r5
 8006414:	42a3      	cmp	r3, r4
 8006416:	6025      	str	r5, [r4, #0]
 8006418:	bf18      	it	ne
 800641a:	6059      	strne	r1, [r3, #4]
 800641c:	6863      	ldr	r3, [r4, #4]
 800641e:	bf08      	it	eq
 8006420:	f8c8 1000 	streq.w	r1, [r8]
 8006424:	5162      	str	r2, [r4, r5]
 8006426:	604b      	str	r3, [r1, #4]
 8006428:	4638      	mov	r0, r7
 800642a:	f104 060b 	add.w	r6, r4, #11
 800642e:	f000 f829 	bl	8006484 <__malloc_unlock>
 8006432:	f026 0607 	bic.w	r6, r6, #7
 8006436:	1d23      	adds	r3, r4, #4
 8006438:	1af2      	subs	r2, r6, r3
 800643a:	d0ae      	beq.n	800639a <_malloc_r+0x22>
 800643c:	1b9b      	subs	r3, r3, r6
 800643e:	50a3      	str	r3, [r4, r2]
 8006440:	e7ab      	b.n	800639a <_malloc_r+0x22>
 8006442:	42a3      	cmp	r3, r4
 8006444:	6862      	ldr	r2, [r4, #4]
 8006446:	d1dd      	bne.n	8006404 <_malloc_r+0x8c>
 8006448:	f8c8 2000 	str.w	r2, [r8]
 800644c:	e7ec      	b.n	8006428 <_malloc_r+0xb0>
 800644e:	4623      	mov	r3, r4
 8006450:	6864      	ldr	r4, [r4, #4]
 8006452:	e7ac      	b.n	80063ae <_malloc_r+0x36>
 8006454:	4634      	mov	r4, r6
 8006456:	6876      	ldr	r6, [r6, #4]
 8006458:	e7b4      	b.n	80063c4 <_malloc_r+0x4c>
 800645a:	4613      	mov	r3, r2
 800645c:	e7cc      	b.n	80063f8 <_malloc_r+0x80>
 800645e:	230c      	movs	r3, #12
 8006460:	603b      	str	r3, [r7, #0]
 8006462:	4638      	mov	r0, r7
 8006464:	f000 f80e 	bl	8006484 <__malloc_unlock>
 8006468:	e797      	b.n	800639a <_malloc_r+0x22>
 800646a:	6025      	str	r5, [r4, #0]
 800646c:	e7dc      	b.n	8006428 <_malloc_r+0xb0>
 800646e:	605b      	str	r3, [r3, #4]
 8006470:	deff      	udf	#255	; 0xff
 8006472:	bf00      	nop
 8006474:	200047a4 	.word	0x200047a4

08006478 <__malloc_lock>:
 8006478:	4801      	ldr	r0, [pc, #4]	; (8006480 <__malloc_lock+0x8>)
 800647a:	f7ff bf00 	b.w	800627e <__retarget_lock_acquire_recursive>
 800647e:	bf00      	nop
 8006480:	200047a0 	.word	0x200047a0

08006484 <__malloc_unlock>:
 8006484:	4801      	ldr	r0, [pc, #4]	; (800648c <__malloc_unlock+0x8>)
 8006486:	f7ff befb 	b.w	8006280 <__retarget_lock_release_recursive>
 800648a:	bf00      	nop
 800648c:	200047a0 	.word	0x200047a0

08006490 <__sfputc_r>:
 8006490:	6893      	ldr	r3, [r2, #8]
 8006492:	3b01      	subs	r3, #1
 8006494:	2b00      	cmp	r3, #0
 8006496:	b410      	push	{r4}
 8006498:	6093      	str	r3, [r2, #8]
 800649a:	da08      	bge.n	80064ae <__sfputc_r+0x1e>
 800649c:	6994      	ldr	r4, [r2, #24]
 800649e:	42a3      	cmp	r3, r4
 80064a0:	db01      	blt.n	80064a6 <__sfputc_r+0x16>
 80064a2:	290a      	cmp	r1, #10
 80064a4:	d103      	bne.n	80064ae <__sfputc_r+0x1e>
 80064a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064aa:	f7ff bdda 	b.w	8006062 <__swbuf_r>
 80064ae:	6813      	ldr	r3, [r2, #0]
 80064b0:	1c58      	adds	r0, r3, #1
 80064b2:	6010      	str	r0, [r2, #0]
 80064b4:	7019      	strb	r1, [r3, #0]
 80064b6:	4608      	mov	r0, r1
 80064b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064bc:	4770      	bx	lr

080064be <__sfputs_r>:
 80064be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c0:	4606      	mov	r6, r0
 80064c2:	460f      	mov	r7, r1
 80064c4:	4614      	mov	r4, r2
 80064c6:	18d5      	adds	r5, r2, r3
 80064c8:	42ac      	cmp	r4, r5
 80064ca:	d101      	bne.n	80064d0 <__sfputs_r+0x12>
 80064cc:	2000      	movs	r0, #0
 80064ce:	e007      	b.n	80064e0 <__sfputs_r+0x22>
 80064d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064d4:	463a      	mov	r2, r7
 80064d6:	4630      	mov	r0, r6
 80064d8:	f7ff ffda 	bl	8006490 <__sfputc_r>
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	d1f3      	bne.n	80064c8 <__sfputs_r+0xa>
 80064e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064e4 <_vfiprintf_r>:
 80064e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e8:	460d      	mov	r5, r1
 80064ea:	b09d      	sub	sp, #116	; 0x74
 80064ec:	4614      	mov	r4, r2
 80064ee:	4698      	mov	r8, r3
 80064f0:	4606      	mov	r6, r0
 80064f2:	b118      	cbz	r0, 80064fc <_vfiprintf_r+0x18>
 80064f4:	6a03      	ldr	r3, [r0, #32]
 80064f6:	b90b      	cbnz	r3, 80064fc <_vfiprintf_r+0x18>
 80064f8:	f7ff fccc 	bl	8005e94 <__sinit>
 80064fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064fe:	07d9      	lsls	r1, r3, #31
 8006500:	d405      	bmi.n	800650e <_vfiprintf_r+0x2a>
 8006502:	89ab      	ldrh	r3, [r5, #12]
 8006504:	059a      	lsls	r2, r3, #22
 8006506:	d402      	bmi.n	800650e <_vfiprintf_r+0x2a>
 8006508:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800650a:	f7ff feb8 	bl	800627e <__retarget_lock_acquire_recursive>
 800650e:	89ab      	ldrh	r3, [r5, #12]
 8006510:	071b      	lsls	r3, r3, #28
 8006512:	d501      	bpl.n	8006518 <_vfiprintf_r+0x34>
 8006514:	692b      	ldr	r3, [r5, #16]
 8006516:	b99b      	cbnz	r3, 8006540 <_vfiprintf_r+0x5c>
 8006518:	4629      	mov	r1, r5
 800651a:	4630      	mov	r0, r6
 800651c:	f7ff fdde 	bl	80060dc <__swsetup_r>
 8006520:	b170      	cbz	r0, 8006540 <_vfiprintf_r+0x5c>
 8006522:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006524:	07dc      	lsls	r4, r3, #31
 8006526:	d504      	bpl.n	8006532 <_vfiprintf_r+0x4e>
 8006528:	f04f 30ff 	mov.w	r0, #4294967295
 800652c:	b01d      	add	sp, #116	; 0x74
 800652e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006532:	89ab      	ldrh	r3, [r5, #12]
 8006534:	0598      	lsls	r0, r3, #22
 8006536:	d4f7      	bmi.n	8006528 <_vfiprintf_r+0x44>
 8006538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800653a:	f7ff fea1 	bl	8006280 <__retarget_lock_release_recursive>
 800653e:	e7f3      	b.n	8006528 <_vfiprintf_r+0x44>
 8006540:	2300      	movs	r3, #0
 8006542:	9309      	str	r3, [sp, #36]	; 0x24
 8006544:	2320      	movs	r3, #32
 8006546:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800654a:	f8cd 800c 	str.w	r8, [sp, #12]
 800654e:	2330      	movs	r3, #48	; 0x30
 8006550:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006704 <_vfiprintf_r+0x220>
 8006554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006558:	f04f 0901 	mov.w	r9, #1
 800655c:	4623      	mov	r3, r4
 800655e:	469a      	mov	sl, r3
 8006560:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006564:	b10a      	cbz	r2, 800656a <_vfiprintf_r+0x86>
 8006566:	2a25      	cmp	r2, #37	; 0x25
 8006568:	d1f9      	bne.n	800655e <_vfiprintf_r+0x7a>
 800656a:	ebba 0b04 	subs.w	fp, sl, r4
 800656e:	d00b      	beq.n	8006588 <_vfiprintf_r+0xa4>
 8006570:	465b      	mov	r3, fp
 8006572:	4622      	mov	r2, r4
 8006574:	4629      	mov	r1, r5
 8006576:	4630      	mov	r0, r6
 8006578:	f7ff ffa1 	bl	80064be <__sfputs_r>
 800657c:	3001      	adds	r0, #1
 800657e:	f000 80a9 	beq.w	80066d4 <_vfiprintf_r+0x1f0>
 8006582:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006584:	445a      	add	r2, fp
 8006586:	9209      	str	r2, [sp, #36]	; 0x24
 8006588:	f89a 3000 	ldrb.w	r3, [sl]
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 80a1 	beq.w	80066d4 <_vfiprintf_r+0x1f0>
 8006592:	2300      	movs	r3, #0
 8006594:	f04f 32ff 	mov.w	r2, #4294967295
 8006598:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800659c:	f10a 0a01 	add.w	sl, sl, #1
 80065a0:	9304      	str	r3, [sp, #16]
 80065a2:	9307      	str	r3, [sp, #28]
 80065a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065a8:	931a      	str	r3, [sp, #104]	; 0x68
 80065aa:	4654      	mov	r4, sl
 80065ac:	2205      	movs	r2, #5
 80065ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065b2:	4854      	ldr	r0, [pc, #336]	; (8006704 <_vfiprintf_r+0x220>)
 80065b4:	f7f9 fe0c 	bl	80001d0 <memchr>
 80065b8:	9a04      	ldr	r2, [sp, #16]
 80065ba:	b9d8      	cbnz	r0, 80065f4 <_vfiprintf_r+0x110>
 80065bc:	06d1      	lsls	r1, r2, #27
 80065be:	bf44      	itt	mi
 80065c0:	2320      	movmi	r3, #32
 80065c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065c6:	0713      	lsls	r3, r2, #28
 80065c8:	bf44      	itt	mi
 80065ca:	232b      	movmi	r3, #43	; 0x2b
 80065cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065d0:	f89a 3000 	ldrb.w	r3, [sl]
 80065d4:	2b2a      	cmp	r3, #42	; 0x2a
 80065d6:	d015      	beq.n	8006604 <_vfiprintf_r+0x120>
 80065d8:	9a07      	ldr	r2, [sp, #28]
 80065da:	4654      	mov	r4, sl
 80065dc:	2000      	movs	r0, #0
 80065de:	f04f 0c0a 	mov.w	ip, #10
 80065e2:	4621      	mov	r1, r4
 80065e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065e8:	3b30      	subs	r3, #48	; 0x30
 80065ea:	2b09      	cmp	r3, #9
 80065ec:	d94d      	bls.n	800668a <_vfiprintf_r+0x1a6>
 80065ee:	b1b0      	cbz	r0, 800661e <_vfiprintf_r+0x13a>
 80065f0:	9207      	str	r2, [sp, #28]
 80065f2:	e014      	b.n	800661e <_vfiprintf_r+0x13a>
 80065f4:	eba0 0308 	sub.w	r3, r0, r8
 80065f8:	fa09 f303 	lsl.w	r3, r9, r3
 80065fc:	4313      	orrs	r3, r2
 80065fe:	9304      	str	r3, [sp, #16]
 8006600:	46a2      	mov	sl, r4
 8006602:	e7d2      	b.n	80065aa <_vfiprintf_r+0xc6>
 8006604:	9b03      	ldr	r3, [sp, #12]
 8006606:	1d19      	adds	r1, r3, #4
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	9103      	str	r1, [sp, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	bfbb      	ittet	lt
 8006610:	425b      	neglt	r3, r3
 8006612:	f042 0202 	orrlt.w	r2, r2, #2
 8006616:	9307      	strge	r3, [sp, #28]
 8006618:	9307      	strlt	r3, [sp, #28]
 800661a:	bfb8      	it	lt
 800661c:	9204      	strlt	r2, [sp, #16]
 800661e:	7823      	ldrb	r3, [r4, #0]
 8006620:	2b2e      	cmp	r3, #46	; 0x2e
 8006622:	d10c      	bne.n	800663e <_vfiprintf_r+0x15a>
 8006624:	7863      	ldrb	r3, [r4, #1]
 8006626:	2b2a      	cmp	r3, #42	; 0x2a
 8006628:	d134      	bne.n	8006694 <_vfiprintf_r+0x1b0>
 800662a:	9b03      	ldr	r3, [sp, #12]
 800662c:	1d1a      	adds	r2, r3, #4
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	9203      	str	r2, [sp, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	bfb8      	it	lt
 8006636:	f04f 33ff 	movlt.w	r3, #4294967295
 800663a:	3402      	adds	r4, #2
 800663c:	9305      	str	r3, [sp, #20]
 800663e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006714 <_vfiprintf_r+0x230>
 8006642:	7821      	ldrb	r1, [r4, #0]
 8006644:	2203      	movs	r2, #3
 8006646:	4650      	mov	r0, sl
 8006648:	f7f9 fdc2 	bl	80001d0 <memchr>
 800664c:	b138      	cbz	r0, 800665e <_vfiprintf_r+0x17a>
 800664e:	9b04      	ldr	r3, [sp, #16]
 8006650:	eba0 000a 	sub.w	r0, r0, sl
 8006654:	2240      	movs	r2, #64	; 0x40
 8006656:	4082      	lsls	r2, r0
 8006658:	4313      	orrs	r3, r2
 800665a:	3401      	adds	r4, #1
 800665c:	9304      	str	r3, [sp, #16]
 800665e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006662:	4829      	ldr	r0, [pc, #164]	; (8006708 <_vfiprintf_r+0x224>)
 8006664:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006668:	2206      	movs	r2, #6
 800666a:	f7f9 fdb1 	bl	80001d0 <memchr>
 800666e:	2800      	cmp	r0, #0
 8006670:	d03f      	beq.n	80066f2 <_vfiprintf_r+0x20e>
 8006672:	4b26      	ldr	r3, [pc, #152]	; (800670c <_vfiprintf_r+0x228>)
 8006674:	bb1b      	cbnz	r3, 80066be <_vfiprintf_r+0x1da>
 8006676:	9b03      	ldr	r3, [sp, #12]
 8006678:	3307      	adds	r3, #7
 800667a:	f023 0307 	bic.w	r3, r3, #7
 800667e:	3308      	adds	r3, #8
 8006680:	9303      	str	r3, [sp, #12]
 8006682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006684:	443b      	add	r3, r7
 8006686:	9309      	str	r3, [sp, #36]	; 0x24
 8006688:	e768      	b.n	800655c <_vfiprintf_r+0x78>
 800668a:	fb0c 3202 	mla	r2, ip, r2, r3
 800668e:	460c      	mov	r4, r1
 8006690:	2001      	movs	r0, #1
 8006692:	e7a6      	b.n	80065e2 <_vfiprintf_r+0xfe>
 8006694:	2300      	movs	r3, #0
 8006696:	3401      	adds	r4, #1
 8006698:	9305      	str	r3, [sp, #20]
 800669a:	4619      	mov	r1, r3
 800669c:	f04f 0c0a 	mov.w	ip, #10
 80066a0:	4620      	mov	r0, r4
 80066a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066a6:	3a30      	subs	r2, #48	; 0x30
 80066a8:	2a09      	cmp	r2, #9
 80066aa:	d903      	bls.n	80066b4 <_vfiprintf_r+0x1d0>
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d0c6      	beq.n	800663e <_vfiprintf_r+0x15a>
 80066b0:	9105      	str	r1, [sp, #20]
 80066b2:	e7c4      	b.n	800663e <_vfiprintf_r+0x15a>
 80066b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80066b8:	4604      	mov	r4, r0
 80066ba:	2301      	movs	r3, #1
 80066bc:	e7f0      	b.n	80066a0 <_vfiprintf_r+0x1bc>
 80066be:	ab03      	add	r3, sp, #12
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	462a      	mov	r2, r5
 80066c4:	4b12      	ldr	r3, [pc, #72]	; (8006710 <_vfiprintf_r+0x22c>)
 80066c6:	a904      	add	r1, sp, #16
 80066c8:	4630      	mov	r0, r6
 80066ca:	f3af 8000 	nop.w
 80066ce:	4607      	mov	r7, r0
 80066d0:	1c78      	adds	r0, r7, #1
 80066d2:	d1d6      	bne.n	8006682 <_vfiprintf_r+0x19e>
 80066d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066d6:	07d9      	lsls	r1, r3, #31
 80066d8:	d405      	bmi.n	80066e6 <_vfiprintf_r+0x202>
 80066da:	89ab      	ldrh	r3, [r5, #12]
 80066dc:	059a      	lsls	r2, r3, #22
 80066de:	d402      	bmi.n	80066e6 <_vfiprintf_r+0x202>
 80066e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066e2:	f7ff fdcd 	bl	8006280 <__retarget_lock_release_recursive>
 80066e6:	89ab      	ldrh	r3, [r5, #12]
 80066e8:	065b      	lsls	r3, r3, #25
 80066ea:	f53f af1d 	bmi.w	8006528 <_vfiprintf_r+0x44>
 80066ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066f0:	e71c      	b.n	800652c <_vfiprintf_r+0x48>
 80066f2:	ab03      	add	r3, sp, #12
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	462a      	mov	r2, r5
 80066f8:	4b05      	ldr	r3, [pc, #20]	; (8006710 <_vfiprintf_r+0x22c>)
 80066fa:	a904      	add	r1, sp, #16
 80066fc:	4630      	mov	r0, r6
 80066fe:	f000 f879 	bl	80067f4 <_printf_i>
 8006702:	e7e4      	b.n	80066ce <_vfiprintf_r+0x1ea>
 8006704:	08006d5c 	.word	0x08006d5c
 8006708:	08006d66 	.word	0x08006d66
 800670c:	00000000 	.word	0x00000000
 8006710:	080064bf 	.word	0x080064bf
 8006714:	08006d62 	.word	0x08006d62

08006718 <_printf_common>:
 8006718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800671c:	4616      	mov	r6, r2
 800671e:	4699      	mov	r9, r3
 8006720:	688a      	ldr	r2, [r1, #8]
 8006722:	690b      	ldr	r3, [r1, #16]
 8006724:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006728:	4293      	cmp	r3, r2
 800672a:	bfb8      	it	lt
 800672c:	4613      	movlt	r3, r2
 800672e:	6033      	str	r3, [r6, #0]
 8006730:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006734:	4607      	mov	r7, r0
 8006736:	460c      	mov	r4, r1
 8006738:	b10a      	cbz	r2, 800673e <_printf_common+0x26>
 800673a:	3301      	adds	r3, #1
 800673c:	6033      	str	r3, [r6, #0]
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	0699      	lsls	r1, r3, #26
 8006742:	bf42      	ittt	mi
 8006744:	6833      	ldrmi	r3, [r6, #0]
 8006746:	3302      	addmi	r3, #2
 8006748:	6033      	strmi	r3, [r6, #0]
 800674a:	6825      	ldr	r5, [r4, #0]
 800674c:	f015 0506 	ands.w	r5, r5, #6
 8006750:	d106      	bne.n	8006760 <_printf_common+0x48>
 8006752:	f104 0a19 	add.w	sl, r4, #25
 8006756:	68e3      	ldr	r3, [r4, #12]
 8006758:	6832      	ldr	r2, [r6, #0]
 800675a:	1a9b      	subs	r3, r3, r2
 800675c:	42ab      	cmp	r3, r5
 800675e:	dc26      	bgt.n	80067ae <_printf_common+0x96>
 8006760:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006764:	1e13      	subs	r3, r2, #0
 8006766:	6822      	ldr	r2, [r4, #0]
 8006768:	bf18      	it	ne
 800676a:	2301      	movne	r3, #1
 800676c:	0692      	lsls	r2, r2, #26
 800676e:	d42b      	bmi.n	80067c8 <_printf_common+0xb0>
 8006770:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006774:	4649      	mov	r1, r9
 8006776:	4638      	mov	r0, r7
 8006778:	47c0      	blx	r8
 800677a:	3001      	adds	r0, #1
 800677c:	d01e      	beq.n	80067bc <_printf_common+0xa4>
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	6922      	ldr	r2, [r4, #16]
 8006782:	f003 0306 	and.w	r3, r3, #6
 8006786:	2b04      	cmp	r3, #4
 8006788:	bf02      	ittt	eq
 800678a:	68e5      	ldreq	r5, [r4, #12]
 800678c:	6833      	ldreq	r3, [r6, #0]
 800678e:	1aed      	subeq	r5, r5, r3
 8006790:	68a3      	ldr	r3, [r4, #8]
 8006792:	bf0c      	ite	eq
 8006794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006798:	2500      	movne	r5, #0
 800679a:	4293      	cmp	r3, r2
 800679c:	bfc4      	itt	gt
 800679e:	1a9b      	subgt	r3, r3, r2
 80067a0:	18ed      	addgt	r5, r5, r3
 80067a2:	2600      	movs	r6, #0
 80067a4:	341a      	adds	r4, #26
 80067a6:	42b5      	cmp	r5, r6
 80067a8:	d11a      	bne.n	80067e0 <_printf_common+0xc8>
 80067aa:	2000      	movs	r0, #0
 80067ac:	e008      	b.n	80067c0 <_printf_common+0xa8>
 80067ae:	2301      	movs	r3, #1
 80067b0:	4652      	mov	r2, sl
 80067b2:	4649      	mov	r1, r9
 80067b4:	4638      	mov	r0, r7
 80067b6:	47c0      	blx	r8
 80067b8:	3001      	adds	r0, #1
 80067ba:	d103      	bne.n	80067c4 <_printf_common+0xac>
 80067bc:	f04f 30ff 	mov.w	r0, #4294967295
 80067c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c4:	3501      	adds	r5, #1
 80067c6:	e7c6      	b.n	8006756 <_printf_common+0x3e>
 80067c8:	18e1      	adds	r1, r4, r3
 80067ca:	1c5a      	adds	r2, r3, #1
 80067cc:	2030      	movs	r0, #48	; 0x30
 80067ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067d2:	4422      	add	r2, r4
 80067d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067dc:	3302      	adds	r3, #2
 80067de:	e7c7      	b.n	8006770 <_printf_common+0x58>
 80067e0:	2301      	movs	r3, #1
 80067e2:	4622      	mov	r2, r4
 80067e4:	4649      	mov	r1, r9
 80067e6:	4638      	mov	r0, r7
 80067e8:	47c0      	blx	r8
 80067ea:	3001      	adds	r0, #1
 80067ec:	d0e6      	beq.n	80067bc <_printf_common+0xa4>
 80067ee:	3601      	adds	r6, #1
 80067f0:	e7d9      	b.n	80067a6 <_printf_common+0x8e>
	...

080067f4 <_printf_i>:
 80067f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067f8:	7e0f      	ldrb	r7, [r1, #24]
 80067fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067fc:	2f78      	cmp	r7, #120	; 0x78
 80067fe:	4691      	mov	r9, r2
 8006800:	4680      	mov	r8, r0
 8006802:	460c      	mov	r4, r1
 8006804:	469a      	mov	sl, r3
 8006806:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800680a:	d807      	bhi.n	800681c <_printf_i+0x28>
 800680c:	2f62      	cmp	r7, #98	; 0x62
 800680e:	d80a      	bhi.n	8006826 <_printf_i+0x32>
 8006810:	2f00      	cmp	r7, #0
 8006812:	f000 80d4 	beq.w	80069be <_printf_i+0x1ca>
 8006816:	2f58      	cmp	r7, #88	; 0x58
 8006818:	f000 80c0 	beq.w	800699c <_printf_i+0x1a8>
 800681c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006820:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006824:	e03a      	b.n	800689c <_printf_i+0xa8>
 8006826:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800682a:	2b15      	cmp	r3, #21
 800682c:	d8f6      	bhi.n	800681c <_printf_i+0x28>
 800682e:	a101      	add	r1, pc, #4	; (adr r1, 8006834 <_printf_i+0x40>)
 8006830:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006834:	0800688d 	.word	0x0800688d
 8006838:	080068a1 	.word	0x080068a1
 800683c:	0800681d 	.word	0x0800681d
 8006840:	0800681d 	.word	0x0800681d
 8006844:	0800681d 	.word	0x0800681d
 8006848:	0800681d 	.word	0x0800681d
 800684c:	080068a1 	.word	0x080068a1
 8006850:	0800681d 	.word	0x0800681d
 8006854:	0800681d 	.word	0x0800681d
 8006858:	0800681d 	.word	0x0800681d
 800685c:	0800681d 	.word	0x0800681d
 8006860:	080069a5 	.word	0x080069a5
 8006864:	080068cd 	.word	0x080068cd
 8006868:	0800695f 	.word	0x0800695f
 800686c:	0800681d 	.word	0x0800681d
 8006870:	0800681d 	.word	0x0800681d
 8006874:	080069c7 	.word	0x080069c7
 8006878:	0800681d 	.word	0x0800681d
 800687c:	080068cd 	.word	0x080068cd
 8006880:	0800681d 	.word	0x0800681d
 8006884:	0800681d 	.word	0x0800681d
 8006888:	08006967 	.word	0x08006967
 800688c:	682b      	ldr	r3, [r5, #0]
 800688e:	1d1a      	adds	r2, r3, #4
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	602a      	str	r2, [r5, #0]
 8006894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800689c:	2301      	movs	r3, #1
 800689e:	e09f      	b.n	80069e0 <_printf_i+0x1ec>
 80068a0:	6820      	ldr	r0, [r4, #0]
 80068a2:	682b      	ldr	r3, [r5, #0]
 80068a4:	0607      	lsls	r7, r0, #24
 80068a6:	f103 0104 	add.w	r1, r3, #4
 80068aa:	6029      	str	r1, [r5, #0]
 80068ac:	d501      	bpl.n	80068b2 <_printf_i+0xbe>
 80068ae:	681e      	ldr	r6, [r3, #0]
 80068b0:	e003      	b.n	80068ba <_printf_i+0xc6>
 80068b2:	0646      	lsls	r6, r0, #25
 80068b4:	d5fb      	bpl.n	80068ae <_printf_i+0xba>
 80068b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80068ba:	2e00      	cmp	r6, #0
 80068bc:	da03      	bge.n	80068c6 <_printf_i+0xd2>
 80068be:	232d      	movs	r3, #45	; 0x2d
 80068c0:	4276      	negs	r6, r6
 80068c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068c6:	485a      	ldr	r0, [pc, #360]	; (8006a30 <_printf_i+0x23c>)
 80068c8:	230a      	movs	r3, #10
 80068ca:	e012      	b.n	80068f2 <_printf_i+0xfe>
 80068cc:	682b      	ldr	r3, [r5, #0]
 80068ce:	6820      	ldr	r0, [r4, #0]
 80068d0:	1d19      	adds	r1, r3, #4
 80068d2:	6029      	str	r1, [r5, #0]
 80068d4:	0605      	lsls	r5, r0, #24
 80068d6:	d501      	bpl.n	80068dc <_printf_i+0xe8>
 80068d8:	681e      	ldr	r6, [r3, #0]
 80068da:	e002      	b.n	80068e2 <_printf_i+0xee>
 80068dc:	0641      	lsls	r1, r0, #25
 80068de:	d5fb      	bpl.n	80068d8 <_printf_i+0xe4>
 80068e0:	881e      	ldrh	r6, [r3, #0]
 80068e2:	4853      	ldr	r0, [pc, #332]	; (8006a30 <_printf_i+0x23c>)
 80068e4:	2f6f      	cmp	r7, #111	; 0x6f
 80068e6:	bf0c      	ite	eq
 80068e8:	2308      	moveq	r3, #8
 80068ea:	230a      	movne	r3, #10
 80068ec:	2100      	movs	r1, #0
 80068ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068f2:	6865      	ldr	r5, [r4, #4]
 80068f4:	60a5      	str	r5, [r4, #8]
 80068f6:	2d00      	cmp	r5, #0
 80068f8:	bfa2      	ittt	ge
 80068fa:	6821      	ldrge	r1, [r4, #0]
 80068fc:	f021 0104 	bicge.w	r1, r1, #4
 8006900:	6021      	strge	r1, [r4, #0]
 8006902:	b90e      	cbnz	r6, 8006908 <_printf_i+0x114>
 8006904:	2d00      	cmp	r5, #0
 8006906:	d04b      	beq.n	80069a0 <_printf_i+0x1ac>
 8006908:	4615      	mov	r5, r2
 800690a:	fbb6 f1f3 	udiv	r1, r6, r3
 800690e:	fb03 6711 	mls	r7, r3, r1, r6
 8006912:	5dc7      	ldrb	r7, [r0, r7]
 8006914:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006918:	4637      	mov	r7, r6
 800691a:	42bb      	cmp	r3, r7
 800691c:	460e      	mov	r6, r1
 800691e:	d9f4      	bls.n	800690a <_printf_i+0x116>
 8006920:	2b08      	cmp	r3, #8
 8006922:	d10b      	bne.n	800693c <_printf_i+0x148>
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	07de      	lsls	r6, r3, #31
 8006928:	d508      	bpl.n	800693c <_printf_i+0x148>
 800692a:	6923      	ldr	r3, [r4, #16]
 800692c:	6861      	ldr	r1, [r4, #4]
 800692e:	4299      	cmp	r1, r3
 8006930:	bfde      	ittt	le
 8006932:	2330      	movle	r3, #48	; 0x30
 8006934:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006938:	f105 35ff 	addle.w	r5, r5, #4294967295
 800693c:	1b52      	subs	r2, r2, r5
 800693e:	6122      	str	r2, [r4, #16]
 8006940:	f8cd a000 	str.w	sl, [sp]
 8006944:	464b      	mov	r3, r9
 8006946:	aa03      	add	r2, sp, #12
 8006948:	4621      	mov	r1, r4
 800694a:	4640      	mov	r0, r8
 800694c:	f7ff fee4 	bl	8006718 <_printf_common>
 8006950:	3001      	adds	r0, #1
 8006952:	d14a      	bne.n	80069ea <_printf_i+0x1f6>
 8006954:	f04f 30ff 	mov.w	r0, #4294967295
 8006958:	b004      	add	sp, #16
 800695a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	f043 0320 	orr.w	r3, r3, #32
 8006964:	6023      	str	r3, [r4, #0]
 8006966:	4833      	ldr	r0, [pc, #204]	; (8006a34 <_printf_i+0x240>)
 8006968:	2778      	movs	r7, #120	; 0x78
 800696a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	6829      	ldr	r1, [r5, #0]
 8006972:	061f      	lsls	r7, r3, #24
 8006974:	f851 6b04 	ldr.w	r6, [r1], #4
 8006978:	d402      	bmi.n	8006980 <_printf_i+0x18c>
 800697a:	065f      	lsls	r7, r3, #25
 800697c:	bf48      	it	mi
 800697e:	b2b6      	uxthmi	r6, r6
 8006980:	07df      	lsls	r7, r3, #31
 8006982:	bf48      	it	mi
 8006984:	f043 0320 	orrmi.w	r3, r3, #32
 8006988:	6029      	str	r1, [r5, #0]
 800698a:	bf48      	it	mi
 800698c:	6023      	strmi	r3, [r4, #0]
 800698e:	b91e      	cbnz	r6, 8006998 <_printf_i+0x1a4>
 8006990:	6823      	ldr	r3, [r4, #0]
 8006992:	f023 0320 	bic.w	r3, r3, #32
 8006996:	6023      	str	r3, [r4, #0]
 8006998:	2310      	movs	r3, #16
 800699a:	e7a7      	b.n	80068ec <_printf_i+0xf8>
 800699c:	4824      	ldr	r0, [pc, #144]	; (8006a30 <_printf_i+0x23c>)
 800699e:	e7e4      	b.n	800696a <_printf_i+0x176>
 80069a0:	4615      	mov	r5, r2
 80069a2:	e7bd      	b.n	8006920 <_printf_i+0x12c>
 80069a4:	682b      	ldr	r3, [r5, #0]
 80069a6:	6826      	ldr	r6, [r4, #0]
 80069a8:	6961      	ldr	r1, [r4, #20]
 80069aa:	1d18      	adds	r0, r3, #4
 80069ac:	6028      	str	r0, [r5, #0]
 80069ae:	0635      	lsls	r5, r6, #24
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	d501      	bpl.n	80069b8 <_printf_i+0x1c4>
 80069b4:	6019      	str	r1, [r3, #0]
 80069b6:	e002      	b.n	80069be <_printf_i+0x1ca>
 80069b8:	0670      	lsls	r0, r6, #25
 80069ba:	d5fb      	bpl.n	80069b4 <_printf_i+0x1c0>
 80069bc:	8019      	strh	r1, [r3, #0]
 80069be:	2300      	movs	r3, #0
 80069c0:	6123      	str	r3, [r4, #16]
 80069c2:	4615      	mov	r5, r2
 80069c4:	e7bc      	b.n	8006940 <_printf_i+0x14c>
 80069c6:	682b      	ldr	r3, [r5, #0]
 80069c8:	1d1a      	adds	r2, r3, #4
 80069ca:	602a      	str	r2, [r5, #0]
 80069cc:	681d      	ldr	r5, [r3, #0]
 80069ce:	6862      	ldr	r2, [r4, #4]
 80069d0:	2100      	movs	r1, #0
 80069d2:	4628      	mov	r0, r5
 80069d4:	f7f9 fbfc 	bl	80001d0 <memchr>
 80069d8:	b108      	cbz	r0, 80069de <_printf_i+0x1ea>
 80069da:	1b40      	subs	r0, r0, r5
 80069dc:	6060      	str	r0, [r4, #4]
 80069de:	6863      	ldr	r3, [r4, #4]
 80069e0:	6123      	str	r3, [r4, #16]
 80069e2:	2300      	movs	r3, #0
 80069e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069e8:	e7aa      	b.n	8006940 <_printf_i+0x14c>
 80069ea:	6923      	ldr	r3, [r4, #16]
 80069ec:	462a      	mov	r2, r5
 80069ee:	4649      	mov	r1, r9
 80069f0:	4640      	mov	r0, r8
 80069f2:	47d0      	blx	sl
 80069f4:	3001      	adds	r0, #1
 80069f6:	d0ad      	beq.n	8006954 <_printf_i+0x160>
 80069f8:	6823      	ldr	r3, [r4, #0]
 80069fa:	079b      	lsls	r3, r3, #30
 80069fc:	d413      	bmi.n	8006a26 <_printf_i+0x232>
 80069fe:	68e0      	ldr	r0, [r4, #12]
 8006a00:	9b03      	ldr	r3, [sp, #12]
 8006a02:	4298      	cmp	r0, r3
 8006a04:	bfb8      	it	lt
 8006a06:	4618      	movlt	r0, r3
 8006a08:	e7a6      	b.n	8006958 <_printf_i+0x164>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	4632      	mov	r2, r6
 8006a0e:	4649      	mov	r1, r9
 8006a10:	4640      	mov	r0, r8
 8006a12:	47d0      	blx	sl
 8006a14:	3001      	adds	r0, #1
 8006a16:	d09d      	beq.n	8006954 <_printf_i+0x160>
 8006a18:	3501      	adds	r5, #1
 8006a1a:	68e3      	ldr	r3, [r4, #12]
 8006a1c:	9903      	ldr	r1, [sp, #12]
 8006a1e:	1a5b      	subs	r3, r3, r1
 8006a20:	42ab      	cmp	r3, r5
 8006a22:	dcf2      	bgt.n	8006a0a <_printf_i+0x216>
 8006a24:	e7eb      	b.n	80069fe <_printf_i+0x20a>
 8006a26:	2500      	movs	r5, #0
 8006a28:	f104 0619 	add.w	r6, r4, #25
 8006a2c:	e7f5      	b.n	8006a1a <_printf_i+0x226>
 8006a2e:	bf00      	nop
 8006a30:	08006d6d 	.word	0x08006d6d
 8006a34:	08006d7e 	.word	0x08006d7e

08006a38 <__sflush_r>:
 8006a38:	898a      	ldrh	r2, [r1, #12]
 8006a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a3e:	4605      	mov	r5, r0
 8006a40:	0710      	lsls	r0, r2, #28
 8006a42:	460c      	mov	r4, r1
 8006a44:	d458      	bmi.n	8006af8 <__sflush_r+0xc0>
 8006a46:	684b      	ldr	r3, [r1, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	dc05      	bgt.n	8006a58 <__sflush_r+0x20>
 8006a4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	dc02      	bgt.n	8006a58 <__sflush_r+0x20>
 8006a52:	2000      	movs	r0, #0
 8006a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a5a:	2e00      	cmp	r6, #0
 8006a5c:	d0f9      	beq.n	8006a52 <__sflush_r+0x1a>
 8006a5e:	2300      	movs	r3, #0
 8006a60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a64:	682f      	ldr	r7, [r5, #0]
 8006a66:	6a21      	ldr	r1, [r4, #32]
 8006a68:	602b      	str	r3, [r5, #0]
 8006a6a:	d032      	beq.n	8006ad2 <__sflush_r+0x9a>
 8006a6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a6e:	89a3      	ldrh	r3, [r4, #12]
 8006a70:	075a      	lsls	r2, r3, #29
 8006a72:	d505      	bpl.n	8006a80 <__sflush_r+0x48>
 8006a74:	6863      	ldr	r3, [r4, #4]
 8006a76:	1ac0      	subs	r0, r0, r3
 8006a78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a7a:	b10b      	cbz	r3, 8006a80 <__sflush_r+0x48>
 8006a7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a7e:	1ac0      	subs	r0, r0, r3
 8006a80:	2300      	movs	r3, #0
 8006a82:	4602      	mov	r2, r0
 8006a84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a86:	6a21      	ldr	r1, [r4, #32]
 8006a88:	4628      	mov	r0, r5
 8006a8a:	47b0      	blx	r6
 8006a8c:	1c43      	adds	r3, r0, #1
 8006a8e:	89a3      	ldrh	r3, [r4, #12]
 8006a90:	d106      	bne.n	8006aa0 <__sflush_r+0x68>
 8006a92:	6829      	ldr	r1, [r5, #0]
 8006a94:	291d      	cmp	r1, #29
 8006a96:	d82b      	bhi.n	8006af0 <__sflush_r+0xb8>
 8006a98:	4a29      	ldr	r2, [pc, #164]	; (8006b40 <__sflush_r+0x108>)
 8006a9a:	410a      	asrs	r2, r1
 8006a9c:	07d6      	lsls	r6, r2, #31
 8006a9e:	d427      	bmi.n	8006af0 <__sflush_r+0xb8>
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	6062      	str	r2, [r4, #4]
 8006aa4:	04d9      	lsls	r1, r3, #19
 8006aa6:	6922      	ldr	r2, [r4, #16]
 8006aa8:	6022      	str	r2, [r4, #0]
 8006aaa:	d504      	bpl.n	8006ab6 <__sflush_r+0x7e>
 8006aac:	1c42      	adds	r2, r0, #1
 8006aae:	d101      	bne.n	8006ab4 <__sflush_r+0x7c>
 8006ab0:	682b      	ldr	r3, [r5, #0]
 8006ab2:	b903      	cbnz	r3, 8006ab6 <__sflush_r+0x7e>
 8006ab4:	6560      	str	r0, [r4, #84]	; 0x54
 8006ab6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ab8:	602f      	str	r7, [r5, #0]
 8006aba:	2900      	cmp	r1, #0
 8006abc:	d0c9      	beq.n	8006a52 <__sflush_r+0x1a>
 8006abe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ac2:	4299      	cmp	r1, r3
 8006ac4:	d002      	beq.n	8006acc <__sflush_r+0x94>
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	f7ff fbea 	bl	80062a0 <_free_r>
 8006acc:	2000      	movs	r0, #0
 8006ace:	6360      	str	r0, [r4, #52]	; 0x34
 8006ad0:	e7c0      	b.n	8006a54 <__sflush_r+0x1c>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	47b0      	blx	r6
 8006ad8:	1c41      	adds	r1, r0, #1
 8006ada:	d1c8      	bne.n	8006a6e <__sflush_r+0x36>
 8006adc:	682b      	ldr	r3, [r5, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d0c5      	beq.n	8006a6e <__sflush_r+0x36>
 8006ae2:	2b1d      	cmp	r3, #29
 8006ae4:	d001      	beq.n	8006aea <__sflush_r+0xb2>
 8006ae6:	2b16      	cmp	r3, #22
 8006ae8:	d101      	bne.n	8006aee <__sflush_r+0xb6>
 8006aea:	602f      	str	r7, [r5, #0]
 8006aec:	e7b1      	b.n	8006a52 <__sflush_r+0x1a>
 8006aee:	89a3      	ldrh	r3, [r4, #12]
 8006af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006af4:	81a3      	strh	r3, [r4, #12]
 8006af6:	e7ad      	b.n	8006a54 <__sflush_r+0x1c>
 8006af8:	690f      	ldr	r7, [r1, #16]
 8006afa:	2f00      	cmp	r7, #0
 8006afc:	d0a9      	beq.n	8006a52 <__sflush_r+0x1a>
 8006afe:	0793      	lsls	r3, r2, #30
 8006b00:	680e      	ldr	r6, [r1, #0]
 8006b02:	bf08      	it	eq
 8006b04:	694b      	ldreq	r3, [r1, #20]
 8006b06:	600f      	str	r7, [r1, #0]
 8006b08:	bf18      	it	ne
 8006b0a:	2300      	movne	r3, #0
 8006b0c:	eba6 0807 	sub.w	r8, r6, r7
 8006b10:	608b      	str	r3, [r1, #8]
 8006b12:	f1b8 0f00 	cmp.w	r8, #0
 8006b16:	dd9c      	ble.n	8006a52 <__sflush_r+0x1a>
 8006b18:	6a21      	ldr	r1, [r4, #32]
 8006b1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b1c:	4643      	mov	r3, r8
 8006b1e:	463a      	mov	r2, r7
 8006b20:	4628      	mov	r0, r5
 8006b22:	47b0      	blx	r6
 8006b24:	2800      	cmp	r0, #0
 8006b26:	dc06      	bgt.n	8006b36 <__sflush_r+0xfe>
 8006b28:	89a3      	ldrh	r3, [r4, #12]
 8006b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b2e:	81a3      	strh	r3, [r4, #12]
 8006b30:	f04f 30ff 	mov.w	r0, #4294967295
 8006b34:	e78e      	b.n	8006a54 <__sflush_r+0x1c>
 8006b36:	4407      	add	r7, r0
 8006b38:	eba8 0800 	sub.w	r8, r8, r0
 8006b3c:	e7e9      	b.n	8006b12 <__sflush_r+0xda>
 8006b3e:	bf00      	nop
 8006b40:	dfbffffe 	.word	0xdfbffffe

08006b44 <_fflush_r>:
 8006b44:	b538      	push	{r3, r4, r5, lr}
 8006b46:	690b      	ldr	r3, [r1, #16]
 8006b48:	4605      	mov	r5, r0
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	b913      	cbnz	r3, 8006b54 <_fflush_r+0x10>
 8006b4e:	2500      	movs	r5, #0
 8006b50:	4628      	mov	r0, r5
 8006b52:	bd38      	pop	{r3, r4, r5, pc}
 8006b54:	b118      	cbz	r0, 8006b5e <_fflush_r+0x1a>
 8006b56:	6a03      	ldr	r3, [r0, #32]
 8006b58:	b90b      	cbnz	r3, 8006b5e <_fflush_r+0x1a>
 8006b5a:	f7ff f99b 	bl	8005e94 <__sinit>
 8006b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d0f3      	beq.n	8006b4e <_fflush_r+0xa>
 8006b66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b68:	07d0      	lsls	r0, r2, #31
 8006b6a:	d404      	bmi.n	8006b76 <_fflush_r+0x32>
 8006b6c:	0599      	lsls	r1, r3, #22
 8006b6e:	d402      	bmi.n	8006b76 <_fflush_r+0x32>
 8006b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b72:	f7ff fb84 	bl	800627e <__retarget_lock_acquire_recursive>
 8006b76:	4628      	mov	r0, r5
 8006b78:	4621      	mov	r1, r4
 8006b7a:	f7ff ff5d 	bl	8006a38 <__sflush_r>
 8006b7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b80:	07da      	lsls	r2, r3, #31
 8006b82:	4605      	mov	r5, r0
 8006b84:	d4e4      	bmi.n	8006b50 <_fflush_r+0xc>
 8006b86:	89a3      	ldrh	r3, [r4, #12]
 8006b88:	059b      	lsls	r3, r3, #22
 8006b8a:	d4e1      	bmi.n	8006b50 <_fflush_r+0xc>
 8006b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b8e:	f7ff fb77 	bl	8006280 <__retarget_lock_release_recursive>
 8006b92:	e7dd      	b.n	8006b50 <_fflush_r+0xc>

08006b94 <__swhatbuf_r>:
 8006b94:	b570      	push	{r4, r5, r6, lr}
 8006b96:	460c      	mov	r4, r1
 8006b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b9c:	2900      	cmp	r1, #0
 8006b9e:	b096      	sub	sp, #88	; 0x58
 8006ba0:	4615      	mov	r5, r2
 8006ba2:	461e      	mov	r6, r3
 8006ba4:	da0d      	bge.n	8006bc2 <__swhatbuf_r+0x2e>
 8006ba6:	89a3      	ldrh	r3, [r4, #12]
 8006ba8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006bac:	f04f 0100 	mov.w	r1, #0
 8006bb0:	bf0c      	ite	eq
 8006bb2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006bb6:	2340      	movne	r3, #64	; 0x40
 8006bb8:	2000      	movs	r0, #0
 8006bba:	6031      	str	r1, [r6, #0]
 8006bbc:	602b      	str	r3, [r5, #0]
 8006bbe:	b016      	add	sp, #88	; 0x58
 8006bc0:	bd70      	pop	{r4, r5, r6, pc}
 8006bc2:	466a      	mov	r2, sp
 8006bc4:	f000 f848 	bl	8006c58 <_fstat_r>
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	dbec      	blt.n	8006ba6 <__swhatbuf_r+0x12>
 8006bcc:	9901      	ldr	r1, [sp, #4]
 8006bce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006bd2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006bd6:	4259      	negs	r1, r3
 8006bd8:	4159      	adcs	r1, r3
 8006bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bde:	e7eb      	b.n	8006bb8 <__swhatbuf_r+0x24>

08006be0 <__smakebuf_r>:
 8006be0:	898b      	ldrh	r3, [r1, #12]
 8006be2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006be4:	079d      	lsls	r5, r3, #30
 8006be6:	4606      	mov	r6, r0
 8006be8:	460c      	mov	r4, r1
 8006bea:	d507      	bpl.n	8006bfc <__smakebuf_r+0x1c>
 8006bec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006bf0:	6023      	str	r3, [r4, #0]
 8006bf2:	6123      	str	r3, [r4, #16]
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	6163      	str	r3, [r4, #20]
 8006bf8:	b002      	add	sp, #8
 8006bfa:	bd70      	pop	{r4, r5, r6, pc}
 8006bfc:	ab01      	add	r3, sp, #4
 8006bfe:	466a      	mov	r2, sp
 8006c00:	f7ff ffc8 	bl	8006b94 <__swhatbuf_r>
 8006c04:	9900      	ldr	r1, [sp, #0]
 8006c06:	4605      	mov	r5, r0
 8006c08:	4630      	mov	r0, r6
 8006c0a:	f7ff fbb5 	bl	8006378 <_malloc_r>
 8006c0e:	b948      	cbnz	r0, 8006c24 <__smakebuf_r+0x44>
 8006c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c14:	059a      	lsls	r2, r3, #22
 8006c16:	d4ef      	bmi.n	8006bf8 <__smakebuf_r+0x18>
 8006c18:	f023 0303 	bic.w	r3, r3, #3
 8006c1c:	f043 0302 	orr.w	r3, r3, #2
 8006c20:	81a3      	strh	r3, [r4, #12]
 8006c22:	e7e3      	b.n	8006bec <__smakebuf_r+0xc>
 8006c24:	89a3      	ldrh	r3, [r4, #12]
 8006c26:	6020      	str	r0, [r4, #0]
 8006c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c2c:	81a3      	strh	r3, [r4, #12]
 8006c2e:	9b00      	ldr	r3, [sp, #0]
 8006c30:	6163      	str	r3, [r4, #20]
 8006c32:	9b01      	ldr	r3, [sp, #4]
 8006c34:	6120      	str	r0, [r4, #16]
 8006c36:	b15b      	cbz	r3, 8006c50 <__smakebuf_r+0x70>
 8006c38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c3c:	4630      	mov	r0, r6
 8006c3e:	f000 f81d 	bl	8006c7c <_isatty_r>
 8006c42:	b128      	cbz	r0, 8006c50 <__smakebuf_r+0x70>
 8006c44:	89a3      	ldrh	r3, [r4, #12]
 8006c46:	f023 0303 	bic.w	r3, r3, #3
 8006c4a:	f043 0301 	orr.w	r3, r3, #1
 8006c4e:	81a3      	strh	r3, [r4, #12]
 8006c50:	89a3      	ldrh	r3, [r4, #12]
 8006c52:	431d      	orrs	r5, r3
 8006c54:	81a5      	strh	r5, [r4, #12]
 8006c56:	e7cf      	b.n	8006bf8 <__smakebuf_r+0x18>

08006c58 <_fstat_r>:
 8006c58:	b538      	push	{r3, r4, r5, lr}
 8006c5a:	4d07      	ldr	r5, [pc, #28]	; (8006c78 <_fstat_r+0x20>)
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	4604      	mov	r4, r0
 8006c60:	4608      	mov	r0, r1
 8006c62:	4611      	mov	r1, r2
 8006c64:	602b      	str	r3, [r5, #0]
 8006c66:	f7f9 ff74 	bl	8000b52 <_fstat>
 8006c6a:	1c43      	adds	r3, r0, #1
 8006c6c:	d102      	bne.n	8006c74 <_fstat_r+0x1c>
 8006c6e:	682b      	ldr	r3, [r5, #0]
 8006c70:	b103      	cbz	r3, 8006c74 <_fstat_r+0x1c>
 8006c72:	6023      	str	r3, [r4, #0]
 8006c74:	bd38      	pop	{r3, r4, r5, pc}
 8006c76:	bf00      	nop
 8006c78:	2000479c 	.word	0x2000479c

08006c7c <_isatty_r>:
 8006c7c:	b538      	push	{r3, r4, r5, lr}
 8006c7e:	4d06      	ldr	r5, [pc, #24]	; (8006c98 <_isatty_r+0x1c>)
 8006c80:	2300      	movs	r3, #0
 8006c82:	4604      	mov	r4, r0
 8006c84:	4608      	mov	r0, r1
 8006c86:	602b      	str	r3, [r5, #0]
 8006c88:	f7f9 ff73 	bl	8000b72 <_isatty>
 8006c8c:	1c43      	adds	r3, r0, #1
 8006c8e:	d102      	bne.n	8006c96 <_isatty_r+0x1a>
 8006c90:	682b      	ldr	r3, [r5, #0]
 8006c92:	b103      	cbz	r3, 8006c96 <_isatty_r+0x1a>
 8006c94:	6023      	str	r3, [r4, #0]
 8006c96:	bd38      	pop	{r3, r4, r5, pc}
 8006c98:	2000479c 	.word	0x2000479c

08006c9c <_sbrk_r>:
 8006c9c:	b538      	push	{r3, r4, r5, lr}
 8006c9e:	4d06      	ldr	r5, [pc, #24]	; (8006cb8 <_sbrk_r+0x1c>)
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	4608      	mov	r0, r1
 8006ca6:	602b      	str	r3, [r5, #0]
 8006ca8:	f7f9 ff7c 	bl	8000ba4 <_sbrk>
 8006cac:	1c43      	adds	r3, r0, #1
 8006cae:	d102      	bne.n	8006cb6 <_sbrk_r+0x1a>
 8006cb0:	682b      	ldr	r3, [r5, #0]
 8006cb2:	b103      	cbz	r3, 8006cb6 <_sbrk_r+0x1a>
 8006cb4:	6023      	str	r3, [r4, #0]
 8006cb6:	bd38      	pop	{r3, r4, r5, pc}
 8006cb8:	2000479c 	.word	0x2000479c

08006cbc <_init>:
 8006cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cbe:	bf00      	nop
 8006cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cc2:	bc08      	pop	{r3}
 8006cc4:	469e      	mov	lr, r3
 8006cc6:	4770      	bx	lr

08006cc8 <_fini>:
 8006cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cca:	bf00      	nop
 8006ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cce:	bc08      	pop	{r3}
 8006cd0:	469e      	mov	lr, r3
 8006cd2:	4770      	bx	lr
