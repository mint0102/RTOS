
Project5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08006840  08006840  00016840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006914  08006914  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08006914  08006914  00016914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800691c  0800691c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800691c  0800691c  0001691c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006920  08006920  00016920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          000041b4  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004220  20004220  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013da6  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003146  00000000  00000000  00033e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012c0  00000000  00000000  00036fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e87  00000000  00000000  00038290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023b45  00000000  00000000  00039117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016a6b  00000000  00000000  0005cc5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5d98  00000000  00000000  000736c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005580  00000000  00000000  00149460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  0014e9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006828 	.word	0x08006828

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08006828 	.word	0x08006828

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	4a07      	ldr	r2, [pc, #28]	; (8000598 <vApplicationGetIdleTaskMemory+0x2c>)
 800057c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <vApplicationGetIdleTaskMemory+0x30>)
 8000582:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000088 	.word	0x20000088
 800059c:	200000dc 	.word	0x200000dc

080005a0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005a8:	1d39      	adds	r1, r7, #4
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	2201      	movs	r2, #1
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <__io_putchar+0x20>)
 80005b2:	f001 fe7b 	bl	80022ac <HAL_UART_Transmit>
	return ch;
 80005b6:	687b      	ldr	r3, [r7, #4]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	200002dc 	.word	0x200002dc

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b090      	sub	sp, #64	; 0x40
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fb61 	bl	8000c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f847 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f8d9 	bl	8000788 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005d6:	f000 f8ad 	bl	8000734 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Application start %d\n");
 80005da:	481b      	ldr	r0, [pc, #108]	; (8000648 <main+0x84>)
 80005dc:	f005 faa0 	bl	8005b20 <iprintf>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 80005e0:	2300      	movs	r3, #0
 80005e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80005e4:	2300      	movs	r3, #0
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 80005e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 fea0 	bl	8003332 <osMutexCreate>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a15      	ldr	r2, [pc, #84]	; (800064c <main+0x88>)
 80005f6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, StartTask1, osPriorityNormal, 0, 128);
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <main+0x8c>)
 80005fa:	f107 041c 	add.w	r4, r7, #28
 80005fe:	461d      	mov	r5, r3
 8000600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000604:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000608:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 800060c:	f107 031c 	add.w	r3, r7, #28
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f002 fe2d 	bl	8003272 <osThreadCreate>
 8000618:	4603      	mov	r3, r0
 800061a:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <main+0x90>)
 800061c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, StartTask2, osPriorityNormal, 0, 128);
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <main+0x94>)
 8000620:	463c      	mov	r4, r7
 8000622:	461d      	mov	r5, r3
 8000624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000628:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000630:	463b      	mov	r3, r7
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f002 fe1c 	bl	8003272 <osThreadCreate>
 800063a:	4603      	mov	r3, r0
 800063c:	4a07      	ldr	r2, [pc, #28]	; (800065c <main+0x98>)
 800063e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000640:	f002 fe10 	bl	8003264 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000644:	e7fe      	b.n	8000644 <main+0x80>
 8000646:	bf00      	nop
 8000648:	08006840 	.word	0x08006840
 800064c:	2000032c 	.word	0x2000032c
 8000650:	08006860 	.word	0x08006860
 8000654:	20000324 	.word	0x20000324
 8000658:	08006884 	.word	0x08006884
 800065c:	20000328 	.word	0x20000328

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	; 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f005 faab 	bl	8005bca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b28      	ldr	r3, [pc, #160]	; (800072c <SystemClock_Config+0xcc>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a27      	ldr	r2, [pc, #156]	; (800072c <SystemClock_Config+0xcc>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b25      	ldr	r3, [pc, #148]	; (800072c <SystemClock_Config+0xcc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <SystemClock_Config+0xd0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a21      	ldr	r2, [pc, #132]	; (8000730 <SystemClock_Config+0xd0>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <SystemClock_Config+0xd0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d0:	2308      	movs	r3, #8
 80006d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006d4:	23a8      	movs	r3, #168	; 0xa8
 80006d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006dc:	2304      	movs	r3, #4
 80006de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 fe25 	bl	8001334 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f0:	f000 f8c7 	bl	8000882 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	2302      	movs	r3, #2
 80006fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000700:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2105      	movs	r1, #5
 8000712:	4618      	mov	r0, r3
 8000714:	f001 f886 	bl	8001824 <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800071e:	f000 f8b0 	bl	8000882 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3750      	adds	r7, #80	; 0x50
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 800073a:	4a12      	ldr	r2, [pc, #72]	; (8000784 <MX_USART1_UART_Init+0x50>)
 800073c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000744:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 800076c:	f001 fd4e 	bl	800220c <HAL_UART_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000776:	f000 f884 	bl	8000882 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200002dc 	.word	0x200002dc
 8000784:	40011000 	.word	0x40011000

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <MX_GPIO_Init+0x68>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a16      	ldr	r2, [pc, #88]	; (80007f0 <MX_GPIO_Init+0x68>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_GPIO_Init+0x68>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_GPIO_Init+0x68>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <MX_GPIO_Init+0x68>)
 80007b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <MX_GPIO_Init+0x68>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_GPIO_Init+0x68>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <MX_GPIO_Init+0x68>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_GPIO_Init+0x68>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e2:	bf00      	nop
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800

080007f4 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void const * argument)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	for(;;)
	  {
		  osDelay(2000);
 80007fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000800:	f002 fd83 	bl	800330a <osDelay>
		  osMutexWait(myMutex01Handle,1000);
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <StartTask1+0x30>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800080c:	4618      	mov	r0, r3
 800080e:	f002 fda9 	bl	8003364 <osMutexWait>
		  printf("Task1 Print\n\r");
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <StartTask1+0x34>)
 8000814:	f005 f984 	bl	8005b20 <iprintf>
		  osMutexRelease(myMutex01Handle);
 8000818:	4b02      	ldr	r3, [pc, #8]	; (8000824 <StartTask1+0x30>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4618      	mov	r0, r3
 800081e:	f002 fdef 	bl	8003400 <osMutexRelease>
		  osDelay(2000);
 8000822:	e7eb      	b.n	80007fc <StartTask1+0x8>
 8000824:	2000032c 	.word	0x2000032c
 8000828:	080068a0 	.word	0x080068a0

0800082c <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void const * argument)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(2000);
 8000834:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000838:	f002 fd67 	bl	800330a <osDelay>
	  osMutexWait(myMutex01Handle,1000);
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <StartTask2+0x30>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000844:	4618      	mov	r0, r3
 8000846:	f002 fd8d 	bl	8003364 <osMutexWait>
	  printf("Task2 Print\n\r");
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <StartTask2+0x34>)
 800084c:	f005 f968 	bl	8005b20 <iprintf>
	  osMutexRelease(myMutex01Handle);
 8000850:	4b02      	ldr	r3, [pc, #8]	; (800085c <StartTask2+0x30>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4618      	mov	r0, r3
 8000856:	f002 fdd3 	bl	8003400 <osMutexRelease>
	  osDelay(2000);
 800085a:	e7eb      	b.n	8000834 <StartTask2+0x8>
 800085c:	2000032c 	.word	0x2000032c
 8000860:	080068b0 	.word	0x080068b0

08000864 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000874:	d101      	bne.n	800087a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000876:	f000 fa2d 	bl	8000cd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000886:	b672      	cpsid	i
}
 8000888:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088a:	e7fe      	b.n	800088a <Error_Handler+0x8>

0800088c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <HAL_MspInit+0x54>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	4a11      	ldr	r2, [pc, #68]	; (80008e0 <HAL_MspInit+0x54>)
 800089c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a0:	6453      	str	r3, [r2, #68]	; 0x44
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <HAL_MspInit+0x54>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <HAL_MspInit+0x54>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	4a0a      	ldr	r2, [pc, #40]	; (80008e0 <HAL_MspInit+0x54>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008bc:	6413      	str	r3, [r2, #64]	; 0x40
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <HAL_MspInit+0x54>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	210f      	movs	r1, #15
 80008ce:	f06f 0001 	mvn.w	r0, #1
 80008d2:	f000 fad7 	bl	8000e84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a1d      	ldr	r2, [pc, #116]	; (8000978 <HAL_UART_MspInit+0x94>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d134      	bne.n	8000970 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	4b1c      	ldr	r3, [pc, #112]	; (800097c <HAL_UART_MspInit+0x98>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	4a1b      	ldr	r2, [pc, #108]	; (800097c <HAL_UART_MspInit+0x98>)
 8000910:	f043 0310 	orr.w	r3, r3, #16
 8000914:	6453      	str	r3, [r2, #68]	; 0x44
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <HAL_UART_MspInit+0x98>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	f003 0310 	and.w	r3, r3, #16
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <HAL_UART_MspInit+0x98>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a14      	ldr	r2, [pc, #80]	; (800097c <HAL_UART_MspInit+0x98>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <HAL_UART_MspInit+0x98>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800093e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000950:	2307      	movs	r3, #7
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4619      	mov	r1, r3
 800095a:	4809      	ldr	r0, [pc, #36]	; (8000980 <HAL_UART_MspInit+0x9c>)
 800095c:	f000 fb4e 	bl	8000ffc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2105      	movs	r1, #5
 8000964:	2025      	movs	r0, #37	; 0x25
 8000966:	f000 fa8d 	bl	8000e84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800096a:	2025      	movs	r0, #37	; 0x25
 800096c:	f000 faa6 	bl	8000ebc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	; 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40011000 	.word	0x40011000
 800097c:	40023800 	.word	0x40023800
 8000980:	40020000 	.word	0x40020000

08000984 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08e      	sub	sp, #56	; 0x38
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	4b34      	ldr	r3, [pc, #208]	; (8000a6c <HAL_InitTick+0xe8>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	4a33      	ldr	r2, [pc, #204]	; (8000a6c <HAL_InitTick+0xe8>)
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	6413      	str	r3, [r2, #64]	; 0x40
 80009a4:	4b31      	ldr	r3, [pc, #196]	; (8000a6c <HAL_InitTick+0xe8>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	f003 0301 	and.w	r3, r3, #1
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009b0:	f107 0210 	add.w	r2, r7, #16
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4611      	mov	r1, r2
 80009ba:	4618      	mov	r0, r3
 80009bc:	f001 f952 	bl	8001c64 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009c0:	6a3b      	ldr	r3, [r7, #32]
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d103      	bne.n	80009d2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009ca:	f001 f923 	bl	8001c14 <HAL_RCC_GetPCLK1Freq>
 80009ce:	6378      	str	r0, [r7, #52]	; 0x34
 80009d0:	e004      	b.n	80009dc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009d2:	f001 f91f 	bl	8001c14 <HAL_RCC_GetPCLK1Freq>
 80009d6:	4603      	mov	r3, r0
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009de:	4a24      	ldr	r2, [pc, #144]	; (8000a70 <HAL_InitTick+0xec>)
 80009e0:	fba2 2303 	umull	r2, r3, r2, r3
 80009e4:	0c9b      	lsrs	r3, r3, #18
 80009e6:	3b01      	subs	r3, #1
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80009ea:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <HAL_InitTick+0xf0>)
 80009ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80009f2:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <HAL_InitTick+0xf0>)
 80009f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009f8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80009fa:	4a1e      	ldr	r2, [pc, #120]	; (8000a74 <HAL_InitTick+0xf0>)
 80009fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009fe:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <HAL_InitTick+0xf0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a06:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <HAL_InitTick+0xf0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <HAL_InitTick+0xf0>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000a12:	4818      	ldr	r0, [pc, #96]	; (8000a74 <HAL_InitTick+0xf0>)
 8000a14:	f001 f958 	bl	8001cc8 <HAL_TIM_Base_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d11b      	bne.n	8000a5e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000a26:	4813      	ldr	r0, [pc, #76]	; (8000a74 <HAL_InitTick+0xf0>)
 8000a28:	f001 f9a8 	bl	8001d7c <HAL_TIM_Base_Start_IT>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d111      	bne.n	8000a5e <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a3a:	201c      	movs	r0, #28
 8000a3c:	f000 fa3e 	bl	8000ebc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b0f      	cmp	r3, #15
 8000a44:	d808      	bhi.n	8000a58 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000a46:	2200      	movs	r2, #0
 8000a48:	6879      	ldr	r1, [r7, #4]
 8000a4a:	201c      	movs	r0, #28
 8000a4c:	f000 fa1a 	bl	8000e84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a50:	4a09      	ldr	r2, [pc, #36]	; (8000a78 <HAL_InitTick+0xf4>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6013      	str	r3, [r2, #0]
 8000a56:	e002      	b.n	8000a5e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3738      	adds	r7, #56	; 0x38
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	431bde83 	.word	0x431bde83
 8000a74:	20000330 	.word	0x20000330
 8000a78:	20000004 	.word	0x20000004

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <TIM2_IRQHandler+0x10>)
 8000aae:	f001 f9d5 	bl	8001e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000330 	.word	0x20000330

08000abc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <USART1_IRQHandler+0x10>)
 8000ac2:	f001 fc7f 	bl	80023c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200002dc 	.word	0x200002dc

08000ad0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	e00a      	b.n	8000af8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ae2:	f3af 8000 	nop.w
 8000ae6:	4601      	mov	r1, r0
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	1c5a      	adds	r2, r3, #1
 8000aec:	60ba      	str	r2, [r7, #8]
 8000aee:	b2ca      	uxtb	r2, r1
 8000af0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	3301      	adds	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697a      	ldr	r2, [r7, #20]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	dbf0      	blt.n	8000ae2 <_read+0x12>
  }

  return len;
 8000b00:	687b      	ldr	r3, [r7, #4]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b086      	sub	sp, #24
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	60f8      	str	r0, [r7, #12]
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	e009      	b.n	8000b30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	1c5a      	adds	r2, r3, #1
 8000b20:	60ba      	str	r2, [r7, #8]
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fd3b 	bl	80005a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697a      	ldr	r2, [r7, #20]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	dbf1      	blt.n	8000b1c <_write+0x12>
  }
  return len;
 8000b38:	687b      	ldr	r3, [r7, #4]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <_close>:

int _close(int file)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b6a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <_isatty>:

int _isatty(int file)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb4:	4a14      	ldr	r2, [pc, #80]	; (8000c08 <_sbrk+0x5c>)
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <_sbrk+0x60>)
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d102      	bne.n	8000bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <_sbrk+0x64>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <_sbrk+0x68>)
 8000bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d207      	bcs.n	8000bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bdc:	f005 f844 	bl	8005c68 <__errno>
 8000be0:	4603      	mov	r3, r0
 8000be2:	220c      	movs	r2, #12
 8000be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	e009      	b.n	8000c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <_sbrk+0x64>)
 8000bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20020000 	.word	0x20020000
 8000c0c:	00000400 	.word	0x00000400
 8000c10:	20000378 	.word	0x20000378
 8000c14:	20004220 	.word	0x20004220

08000c18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <SystemInit+0x20>)
 8000c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c22:	4a05      	ldr	r2, [pc, #20]	; (8000c38 <SystemInit+0x20>)
 8000c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c40:	f7ff ffea 	bl	8000c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c44:	480c      	ldr	r0, [pc, #48]	; (8000c78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c46:	490d      	ldr	r1, [pc, #52]	; (8000c7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c48:	4a0d      	ldr	r2, [pc, #52]	; (8000c80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c4c:	e002      	b.n	8000c54 <LoopCopyDataInit>

08000c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c52:	3304      	adds	r3, #4

08000c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c58:	d3f9      	bcc.n	8000c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c5c:	4c0a      	ldr	r4, [pc, #40]	; (8000c88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c60:	e001      	b.n	8000c66 <LoopFillZerobss>

08000c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c64:	3204      	adds	r2, #4

08000c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c68:	d3fb      	bcc.n	8000c62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c6a:	f005 f803 	bl	8005c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6e:	f7ff fca9 	bl	80005c4 <main>
  bx  lr    
 8000c72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c7c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c80:	08006924 	.word	0x08006924
  ldr r2, =_sbss
 8000c84:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c88:	20004220 	.word	0x20004220

08000c8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c8c:	e7fe      	b.n	8000c8c <ADC_IRQHandler>
	...

08000c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <HAL_Init+0x40>)
 8000c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <HAL_Init+0x40>)
 8000ca6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <HAL_Init+0x40>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a07      	ldr	r2, [pc, #28]	; (8000cd0 <HAL_Init+0x40>)
 8000cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb8:	2003      	movs	r0, #3
 8000cba:	f000 f8d8 	bl	8000e6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cbe:	200f      	movs	r0, #15
 8000cc0:	f7ff fe60 	bl	8000984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc4:	f7ff fde2 	bl	800088c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023c00 	.word	0x40023c00

08000cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x20>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	2000037c 	.word	0x2000037c

08000cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <HAL_GetTick+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	2000037c 	.word	0x2000037c

08000d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d46:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	60d3      	str	r3, [r2, #12]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <__NVIC_GetPriorityGrouping+0x18>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	f003 0307 	and.w	r3, r3, #7
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	db0b      	blt.n	8000da2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f003 021f 	and.w	r2, r3, #31
 8000d90:	4907      	ldr	r1, [pc, #28]	; (8000db0 <__NVIC_EnableIRQ+0x38>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	095b      	lsrs	r3, r3, #5
 8000d98:	2001      	movs	r0, #1
 8000d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000e100 	.word	0xe000e100

08000db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	db0a      	blt.n	8000dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	490c      	ldr	r1, [pc, #48]	; (8000e00 <__NVIC_SetPriority+0x4c>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	0112      	lsls	r2, r2, #4
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ddc:	e00a      	b.n	8000df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4908      	ldr	r1, [pc, #32]	; (8000e04 <__NVIC_SetPriority+0x50>)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	f003 030f 	and.w	r3, r3, #15
 8000dea:	3b04      	subs	r3, #4
 8000dec:	0112      	lsls	r2, r2, #4
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	440b      	add	r3, r1
 8000df2:	761a      	strb	r2, [r3, #24]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000e100 	.word	0xe000e100
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	; 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f1c3 0307 	rsb	r3, r3, #7
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	bf28      	it	cs
 8000e26:	2304      	movcs	r3, #4
 8000e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	2b06      	cmp	r3, #6
 8000e30:	d902      	bls.n	8000e38 <NVIC_EncodePriority+0x30>
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3b03      	subs	r3, #3
 8000e36:	e000      	b.n	8000e3a <NVIC_EncodePriority+0x32>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43da      	mvns	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43d9      	mvns	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	4313      	orrs	r3, r2
         );
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3724      	adds	r7, #36	; 0x24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ff4c 	bl	8000d14 <__NVIC_SetPriorityGrouping>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
 8000e90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e96:	f7ff ff61 	bl	8000d5c <__NVIC_GetPriorityGrouping>
 8000e9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	68b9      	ldr	r1, [r7, #8]
 8000ea0:	6978      	ldr	r0, [r7, #20]
 8000ea2:	f7ff ffb1 	bl	8000e08 <NVIC_EncodePriority>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eac:	4611      	mov	r1, r2
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff ff80 	bl	8000db4 <__NVIC_SetPriority>
}
 8000eb4:	bf00      	nop
 8000eb6:	3718      	adds	r7, #24
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff54 	bl	8000d78 <__NVIC_EnableIRQ>
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ee6:	f7ff ff09 	bl	8000cfc <HAL_GetTick>
 8000eea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d008      	beq.n	8000f0a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2280      	movs	r2, #128	; 0x80
 8000efc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e052      	b.n	8000fb0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 0216 	bic.w	r2, r2, #22
 8000f18:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	695a      	ldr	r2, [r3, #20]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f28:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d103      	bne.n	8000f3a <HAL_DMA_Abort+0x62>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d007      	beq.n	8000f4a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f022 0208 	bic.w	r2, r2, #8
 8000f48:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f022 0201 	bic.w	r2, r2, #1
 8000f58:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f5a:	e013      	b.n	8000f84 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f5c:	f7ff fece 	bl	8000cfc <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b05      	cmp	r3, #5
 8000f68:	d90c      	bls.n	8000f84 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2203      	movs	r2, #3
 8000f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e015      	b.n	8000fb0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1e4      	bne.n	8000f5c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f96:	223f      	movs	r2, #63	; 0x3f
 8000f98:	409a      	lsls	r2, r3
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d004      	beq.n	8000fd6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2280      	movs	r2, #128	; 0x80
 8000fd0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00c      	b.n	8000ff0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2205      	movs	r2, #5
 8000fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f022 0201 	bic.w	r2, r2, #1
 8000fec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
 8001016:	e16b      	b.n	80012f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001018:	2201      	movs	r2, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	429a      	cmp	r2, r3
 8001032:	f040 815a 	bne.w	80012ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	2b01      	cmp	r3, #1
 8001040:	d005      	beq.n	800104e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800104a:	2b02      	cmp	r3, #2
 800104c:	d130      	bne.n	80010b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	2203      	movs	r2, #3
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	68da      	ldr	r2, [r3, #12]
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001084:	2201      	movs	r2, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	091b      	lsrs	r3, r3, #4
 800109a:	f003 0201 	and.w	r2, r3, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d017      	beq.n	80010ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d123      	bne.n	8001140 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	08da      	lsrs	r2, r3, #3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3208      	adds	r2, #8
 8001100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	f003 0307 	and.w	r3, r3, #7
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	220f      	movs	r2, #15
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	691a      	ldr	r2, [r3, #16]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	08da      	lsrs	r2, r3, #3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3208      	adds	r2, #8
 800113a:	69b9      	ldr	r1, [r7, #24]
 800113c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0203 	and.w	r2, r3, #3
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800117c:	2b00      	cmp	r3, #0
 800117e:	f000 80b4 	beq.w	80012ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b60      	ldr	r3, [pc, #384]	; (8001308 <HAL_GPIO_Init+0x30c>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	4a5f      	ldr	r2, [pc, #380]	; (8001308 <HAL_GPIO_Init+0x30c>)
 800118c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001190:	6453      	str	r3, [r2, #68]	; 0x44
 8001192:	4b5d      	ldr	r3, [pc, #372]	; (8001308 <HAL_GPIO_Init+0x30c>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800119e:	4a5b      	ldr	r2, [pc, #364]	; (800130c <HAL_GPIO_Init+0x310>)
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3302      	adds	r3, #2
 80011a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	220f      	movs	r2, #15
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a52      	ldr	r2, [pc, #328]	; (8001310 <HAL_GPIO_Init+0x314>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d02b      	beq.n	8001222 <HAL_GPIO_Init+0x226>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a51      	ldr	r2, [pc, #324]	; (8001314 <HAL_GPIO_Init+0x318>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d025      	beq.n	800121e <HAL_GPIO_Init+0x222>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a50      	ldr	r2, [pc, #320]	; (8001318 <HAL_GPIO_Init+0x31c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d01f      	beq.n	800121a <HAL_GPIO_Init+0x21e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4f      	ldr	r2, [pc, #316]	; (800131c <HAL_GPIO_Init+0x320>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d019      	beq.n	8001216 <HAL_GPIO_Init+0x21a>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4e      	ldr	r2, [pc, #312]	; (8001320 <HAL_GPIO_Init+0x324>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d013      	beq.n	8001212 <HAL_GPIO_Init+0x216>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4d      	ldr	r2, [pc, #308]	; (8001324 <HAL_GPIO_Init+0x328>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d00d      	beq.n	800120e <HAL_GPIO_Init+0x212>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4c      	ldr	r2, [pc, #304]	; (8001328 <HAL_GPIO_Init+0x32c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d007      	beq.n	800120a <HAL_GPIO_Init+0x20e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4b      	ldr	r2, [pc, #300]	; (800132c <HAL_GPIO_Init+0x330>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d101      	bne.n	8001206 <HAL_GPIO_Init+0x20a>
 8001202:	2307      	movs	r3, #7
 8001204:	e00e      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001206:	2308      	movs	r3, #8
 8001208:	e00c      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800120a:	2306      	movs	r3, #6
 800120c:	e00a      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800120e:	2305      	movs	r3, #5
 8001210:	e008      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001212:	2304      	movs	r3, #4
 8001214:	e006      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001216:	2303      	movs	r3, #3
 8001218:	e004      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800121a:	2302      	movs	r3, #2
 800121c:	e002      	b.n	8001224 <HAL_GPIO_Init+0x228>
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <HAL_GPIO_Init+0x228>
 8001222:	2300      	movs	r3, #0
 8001224:	69fa      	ldr	r2, [r7, #28]
 8001226:	f002 0203 	and.w	r2, r2, #3
 800122a:	0092      	lsls	r2, r2, #2
 800122c:	4093      	lsls	r3, r2
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001234:	4935      	ldr	r1, [pc, #212]	; (800130c <HAL_GPIO_Init+0x310>)
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	089b      	lsrs	r3, r3, #2
 800123a:	3302      	adds	r3, #2
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001242:	4b3b      	ldr	r3, [pc, #236]	; (8001330 <HAL_GPIO_Init+0x334>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001266:	4a32      	ldr	r2, [pc, #200]	; (8001330 <HAL_GPIO_Init+0x334>)
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800126c:	4b30      	ldr	r3, [pc, #192]	; (8001330 <HAL_GPIO_Init+0x334>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001290:	4a27      	ldr	r2, [pc, #156]	; (8001330 <HAL_GPIO_Init+0x334>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001296:	4b26      	ldr	r3, [pc, #152]	; (8001330 <HAL_GPIO_Init+0x334>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ba:	4a1d      	ldr	r2, [pc, #116]	; (8001330 <HAL_GPIO_Init+0x334>)
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012c0:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <HAL_GPIO_Init+0x334>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012e4:	4a12      	ldr	r2, [pc, #72]	; (8001330 <HAL_GPIO_Init+0x334>)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3301      	adds	r3, #1
 80012ee:	61fb      	str	r3, [r7, #28]
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	2b0f      	cmp	r3, #15
 80012f4:	f67f ae90 	bls.w	8001018 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	3724      	adds	r7, #36	; 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800
 800130c:	40013800 	.word	0x40013800
 8001310:	40020000 	.word	0x40020000
 8001314:	40020400 	.word	0x40020400
 8001318:	40020800 	.word	0x40020800
 800131c:	40020c00 	.word	0x40020c00
 8001320:	40021000 	.word	0x40021000
 8001324:	40021400 	.word	0x40021400
 8001328:	40021800 	.word	0x40021800
 800132c:	40021c00 	.word	0x40021c00
 8001330:	40013c00 	.word	0x40013c00

08001334 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e267      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	d075      	beq.n	800143e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001352:	4b88      	ldr	r3, [pc, #544]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	2b04      	cmp	r3, #4
 800135c:	d00c      	beq.n	8001378 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800135e:	4b85      	ldr	r3, [pc, #532]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001366:	2b08      	cmp	r3, #8
 8001368:	d112      	bne.n	8001390 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800136a:	4b82      	ldr	r3, [pc, #520]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001372:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001376:	d10b      	bne.n	8001390 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001378:	4b7e      	ldr	r3, [pc, #504]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d05b      	beq.n	800143c <HAL_RCC_OscConfig+0x108>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d157      	bne.n	800143c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e242      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001398:	d106      	bne.n	80013a8 <HAL_RCC_OscConfig+0x74>
 800139a:	4b76      	ldr	r3, [pc, #472]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a75      	ldr	r2, [pc, #468]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 80013a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	e01d      	b.n	80013e4 <HAL_RCC_OscConfig+0xb0>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013b0:	d10c      	bne.n	80013cc <HAL_RCC_OscConfig+0x98>
 80013b2:	4b70      	ldr	r3, [pc, #448]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a6f      	ldr	r2, [pc, #444]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 80013b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	4b6d      	ldr	r3, [pc, #436]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a6c      	ldr	r2, [pc, #432]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 80013c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e00b      	b.n	80013e4 <HAL_RCC_OscConfig+0xb0>
 80013cc:	4b69      	ldr	r3, [pc, #420]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a68      	ldr	r2, [pc, #416]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 80013d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b66      	ldr	r3, [pc, #408]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a65      	ldr	r2, [pc, #404]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 80013de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d013      	beq.n	8001414 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ec:	f7ff fc86 	bl	8000cfc <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f4:	f7ff fc82 	bl	8000cfc <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b64      	cmp	r3, #100	; 0x64
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e207      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001406:	4b5b      	ldr	r3, [pc, #364]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f0      	beq.n	80013f4 <HAL_RCC_OscConfig+0xc0>
 8001412:	e014      	b.n	800143e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff fc72 	bl	8000cfc <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800141c:	f7ff fc6e 	bl	8000cfc <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b64      	cmp	r3, #100	; 0x64
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e1f3      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142e:	4b51      	ldr	r3, [pc, #324]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0xe8>
 800143a:	e000      	b.n	800143e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d063      	beq.n	8001512 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800144a:	4b4a      	ldr	r3, [pc, #296]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00b      	beq.n	800146e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001456:	4b47      	ldr	r3, [pc, #284]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800145e:	2b08      	cmp	r3, #8
 8001460:	d11c      	bne.n	800149c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001462:	4b44      	ldr	r3, [pc, #272]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d116      	bne.n	800149c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146e:	4b41      	ldr	r3, [pc, #260]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d005      	beq.n	8001486 <HAL_RCC_OscConfig+0x152>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d001      	beq.n	8001486 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e1c7      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001486:	4b3b      	ldr	r3, [pc, #236]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	4937      	ldr	r1, [pc, #220]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 8001496:	4313      	orrs	r3, r2
 8001498:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149a:	e03a      	b.n	8001512 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d020      	beq.n	80014e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a4:	4b34      	ldr	r3, [pc, #208]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014aa:	f7ff fc27 	bl	8000cfc <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b2:	f7ff fc23 	bl	8000cfc <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e1a8      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c4:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0f0      	beq.n	80014b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d0:	4b28      	ldr	r3, [pc, #160]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4925      	ldr	r1, [pc, #148]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	600b      	str	r3, [r1, #0]
 80014e4:	e015      	b.n	8001512 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e6:	4b24      	ldr	r3, [pc, #144]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ec:	f7ff fc06 	bl	8000cfc <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f4:	f7ff fc02 	bl	8000cfc <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e187      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001506:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	2b00      	cmp	r3, #0
 800151c:	d036      	beq.n	800158c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d016      	beq.n	8001554 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_RCC_OscConfig+0x248>)
 8001528:	2201      	movs	r2, #1
 800152a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152c:	f7ff fbe6 	bl	8000cfc <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001534:	f7ff fbe2 	bl	8000cfc <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e167      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <HAL_RCC_OscConfig+0x240>)
 8001548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0x200>
 8001552:	e01b      	b.n	800158c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <HAL_RCC_OscConfig+0x248>)
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155a:	f7ff fbcf 	bl	8000cfc <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001560:	e00e      	b.n	8001580 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001562:	f7ff fbcb 	bl	8000cfc <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d907      	bls.n	8001580 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e150      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
 8001574:	40023800 	.word	0x40023800
 8001578:	42470000 	.word	0x42470000
 800157c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001580:	4b88      	ldr	r3, [pc, #544]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1ea      	bne.n	8001562 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 8097 	beq.w	80016c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800159e:	4b81      	ldr	r3, [pc, #516]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10f      	bne.n	80015ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	4b7d      	ldr	r3, [pc, #500]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	4a7c      	ldr	r2, [pc, #496]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ba:	4b7a      	ldr	r3, [pc, #488]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015c6:	2301      	movs	r3, #1
 80015c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ca:	4b77      	ldr	r3, [pc, #476]	; (80017a8 <HAL_RCC_OscConfig+0x474>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d118      	bne.n	8001608 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015d6:	4b74      	ldr	r3, [pc, #464]	; (80017a8 <HAL_RCC_OscConfig+0x474>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a73      	ldr	r2, [pc, #460]	; (80017a8 <HAL_RCC_OscConfig+0x474>)
 80015dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015e2:	f7ff fb8b 	bl	8000cfc <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ea:	f7ff fb87 	bl	8000cfc <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e10c      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fc:	4b6a      	ldr	r3, [pc, #424]	; (80017a8 <HAL_RCC_OscConfig+0x474>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0f0      	beq.n	80015ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d106      	bne.n	800161e <HAL_RCC_OscConfig+0x2ea>
 8001610:	4b64      	ldr	r3, [pc, #400]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001614:	4a63      	ldr	r2, [pc, #396]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6713      	str	r3, [r2, #112]	; 0x70
 800161c:	e01c      	b.n	8001658 <HAL_RCC_OscConfig+0x324>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2b05      	cmp	r3, #5
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0x30c>
 8001626:	4b5f      	ldr	r3, [pc, #380]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162a:	4a5e      	ldr	r2, [pc, #376]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 800162c:	f043 0304 	orr.w	r3, r3, #4
 8001630:	6713      	str	r3, [r2, #112]	; 0x70
 8001632:	4b5c      	ldr	r3, [pc, #368]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001636:	4a5b      	ldr	r2, [pc, #364]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6713      	str	r3, [r2, #112]	; 0x70
 800163e:	e00b      	b.n	8001658 <HAL_RCC_OscConfig+0x324>
 8001640:	4b58      	ldr	r3, [pc, #352]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001644:	4a57      	ldr	r2, [pc, #348]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001646:	f023 0301 	bic.w	r3, r3, #1
 800164a:	6713      	str	r3, [r2, #112]	; 0x70
 800164c:	4b55      	ldr	r3, [pc, #340]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 800164e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001650:	4a54      	ldr	r2, [pc, #336]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001652:	f023 0304 	bic.w	r3, r3, #4
 8001656:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d015      	beq.n	800168c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001660:	f7ff fb4c 	bl	8000cfc <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001666:	e00a      	b.n	800167e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001668:	f7ff fb48 	bl	8000cfc <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	f241 3288 	movw	r2, #5000	; 0x1388
 8001676:	4293      	cmp	r3, r2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e0cb      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800167e:	4b49      	ldr	r3, [pc, #292]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0ee      	beq.n	8001668 <HAL_RCC_OscConfig+0x334>
 800168a:	e014      	b.n	80016b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168c:	f7ff fb36 	bl	8000cfc <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001692:	e00a      	b.n	80016aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001694:	f7ff fb32 	bl	8000cfc <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e0b5      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016aa:	4b3e      	ldr	r3, [pc, #248]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 80016ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1ee      	bne.n	8001694 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016b6:	7dfb      	ldrb	r3, [r7, #23]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d105      	bne.n	80016c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016bc:	4b39      	ldr	r3, [pc, #228]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	4a38      	ldr	r2, [pc, #224]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 80016c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 80a1 	beq.w	8001814 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016d2:	4b34      	ldr	r3, [pc, #208]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d05c      	beq.n	8001798 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d141      	bne.n	800176a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e6:	4b31      	ldr	r3, [pc, #196]	; (80017ac <HAL_RCC_OscConfig+0x478>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ec:	f7ff fb06 	bl	8000cfc <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f4:	f7ff fb02 	bl	8000cfc <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e087      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001706:	4b27      	ldr	r3, [pc, #156]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69da      	ldr	r2, [r3, #28]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	019b      	lsls	r3, r3, #6
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001728:	085b      	lsrs	r3, r3, #1
 800172a:	3b01      	subs	r3, #1
 800172c:	041b      	lsls	r3, r3, #16
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001734:	061b      	lsls	r3, r3, #24
 8001736:	491b      	ldr	r1, [pc, #108]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 8001738:	4313      	orrs	r3, r2
 800173a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800173c:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <HAL_RCC_OscConfig+0x478>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001742:	f7ff fadb 	bl	8000cfc <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800174a:	f7ff fad7 	bl	8000cfc <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e05c      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x416>
 8001768:	e054      	b.n	8001814 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <HAL_RCC_OscConfig+0x478>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff fac4 	bl	8000cfc <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001778:	f7ff fac0 	bl	8000cfc <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e045      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_RCC_OscConfig+0x470>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x444>
 8001796:	e03d      	b.n	8001814 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d107      	bne.n	80017b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e038      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40007000 	.word	0x40007000
 80017ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <HAL_RCC_OscConfig+0x4ec>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d028      	beq.n	8001810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d121      	bne.n	8001810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d11a      	bne.n	8001810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017e0:	4013      	ands	r3, r2
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d111      	bne.n	8001810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f6:	085b      	lsrs	r3, r3, #1
 80017f8:	3b01      	subs	r3, #1
 80017fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d107      	bne.n	8001810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800180c:	429a      	cmp	r2, r3
 800180e:	d001      	beq.n	8001814 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e000      	b.n	8001816 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40023800 	.word	0x40023800

08001824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e0cc      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001838:	4b68      	ldr	r3, [pc, #416]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d90c      	bls.n	8001860 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001846:	4b65      	ldr	r3, [pc, #404]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800184e:	4b63      	ldr	r3, [pc, #396]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d001      	beq.n	8001860 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0b8      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d020      	beq.n	80018ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d005      	beq.n	8001884 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001878:	4b59      	ldr	r3, [pc, #356]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	4a58      	ldr	r2, [pc, #352]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001882:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0308 	and.w	r3, r3, #8
 800188c:	2b00      	cmp	r3, #0
 800188e:	d005      	beq.n	800189c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001890:	4b53      	ldr	r3, [pc, #332]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	4a52      	ldr	r2, [pc, #328]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800189a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800189c:	4b50      	ldr	r3, [pc, #320]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	494d      	ldr	r1, [pc, #308]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d044      	beq.n	8001944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d107      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c2:	4b47      	ldr	r3, [pc, #284]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d119      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e07f      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d003      	beq.n	80018e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d107      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e2:	4b3f      	ldr	r3, [pc, #252]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d109      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e06f      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f2:	4b3b      	ldr	r3, [pc, #236]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e067      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001902:	4b37      	ldr	r3, [pc, #220]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f023 0203 	bic.w	r2, r3, #3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	4934      	ldr	r1, [pc, #208]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	4313      	orrs	r3, r2
 8001912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001914:	f7ff f9f2 	bl	8000cfc <HAL_GetTick>
 8001918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191a:	e00a      	b.n	8001932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800191c:	f7ff f9ee 	bl	8000cfc <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	f241 3288 	movw	r2, #5000	; 0x1388
 800192a:	4293      	cmp	r3, r2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e04f      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001932:	4b2b      	ldr	r3, [pc, #172]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 020c 	and.w	r2, r3, #12
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	429a      	cmp	r2, r3
 8001942:	d1eb      	bne.n	800191c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001944:	4b25      	ldr	r3, [pc, #148]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d20c      	bcs.n	800196c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001952:	4b22      	ldr	r3, [pc, #136]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195a:	4b20      	ldr	r3, [pc, #128]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d001      	beq.n	800196c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e032      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d008      	beq.n	800198a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001978:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	4916      	ldr	r1, [pc, #88]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	4313      	orrs	r3, r2
 8001988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b00      	cmp	r3, #0
 8001994:	d009      	beq.n	80019aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001996:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	490e      	ldr	r1, [pc, #56]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019aa:	f000 f821 	bl	80019f0 <HAL_RCC_GetSysClockFreq>
 80019ae:	4602      	mov	r2, r0
 80019b0:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	091b      	lsrs	r3, r3, #4
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	490a      	ldr	r1, [pc, #40]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 80019bc:	5ccb      	ldrb	r3, [r1, r3]
 80019be:	fa22 f303 	lsr.w	r3, r2, r3
 80019c2:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80019c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019c6:	4b09      	ldr	r3, [pc, #36]	; (80019ec <HAL_RCC_ClockConfig+0x1c8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe ffda 	bl	8000984 <HAL_InitTick>

  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40023c00 	.word	0x40023c00
 80019e0:	40023800 	.word	0x40023800
 80019e4:	080068c8 	.word	0x080068c8
 80019e8:	20000000 	.word	0x20000000
 80019ec:	20000004 	.word	0x20000004

080019f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019f4:	b094      	sub	sp, #80	; 0x50
 80019f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	647b      	str	r3, [r7, #68]	; 0x44
 80019fc:	2300      	movs	r3, #0
 80019fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a00:	2300      	movs	r3, #0
 8001a02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a08:	4b79      	ldr	r3, [pc, #484]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 030c 	and.w	r3, r3, #12
 8001a10:	2b08      	cmp	r3, #8
 8001a12:	d00d      	beq.n	8001a30 <HAL_RCC_GetSysClockFreq+0x40>
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	f200 80e1 	bhi.w	8001bdc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <HAL_RCC_GetSysClockFreq+0x34>
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d003      	beq.n	8001a2a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a22:	e0db      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a24:	4b73      	ldr	r3, [pc, #460]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a26:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a28:	e0db      	b.n	8001be2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a2a:	4b73      	ldr	r3, [pc, #460]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a2e:	e0d8      	b.n	8001be2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a30:	4b6f      	ldr	r3, [pc, #444]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a38:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a3a:	4b6d      	ldr	r3, [pc, #436]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d063      	beq.n	8001b0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a46:	4b6a      	ldr	r3, [pc, #424]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	099b      	lsrs	r3, r3, #6
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a58:	633b      	str	r3, [r7, #48]	; 0x30
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a62:	4622      	mov	r2, r4
 8001a64:	462b      	mov	r3, r5
 8001a66:	f04f 0000 	mov.w	r0, #0
 8001a6a:	f04f 0100 	mov.w	r1, #0
 8001a6e:	0159      	lsls	r1, r3, #5
 8001a70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a74:	0150      	lsls	r0, r2, #5
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	1a51      	subs	r1, r2, r1
 8001a7e:	6139      	str	r1, [r7, #16]
 8001a80:	4629      	mov	r1, r5
 8001a82:	eb63 0301 	sbc.w	r3, r3, r1
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a94:	4659      	mov	r1, fp
 8001a96:	018b      	lsls	r3, r1, #6
 8001a98:	4651      	mov	r1, sl
 8001a9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a9e:	4651      	mov	r1, sl
 8001aa0:	018a      	lsls	r2, r1, #6
 8001aa2:	4651      	mov	r1, sl
 8001aa4:	ebb2 0801 	subs.w	r8, r2, r1
 8001aa8:	4659      	mov	r1, fp
 8001aaa:	eb63 0901 	sbc.w	r9, r3, r1
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001abe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ac2:	4690      	mov	r8, r2
 8001ac4:	4699      	mov	r9, r3
 8001ac6:	4623      	mov	r3, r4
 8001ac8:	eb18 0303 	adds.w	r3, r8, r3
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	462b      	mov	r3, r5
 8001ad0:	eb49 0303 	adc.w	r3, r9, r3
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ae2:	4629      	mov	r1, r5
 8001ae4:	024b      	lsls	r3, r1, #9
 8001ae6:	4621      	mov	r1, r4
 8001ae8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001aec:	4621      	mov	r1, r4
 8001aee:	024a      	lsls	r2, r1, #9
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001af6:	2200      	movs	r2, #0
 8001af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001afa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001afc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b00:	f7fe fbb6 	bl	8000270 <__aeabi_uldivmod>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4613      	mov	r3, r2
 8001b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b0c:	e058      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0e:	4b38      	ldr	r3, [pc, #224]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	099b      	lsrs	r3, r3, #6
 8001b14:	2200      	movs	r2, #0
 8001b16:	4618      	mov	r0, r3
 8001b18:	4611      	mov	r1, r2
 8001b1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b1e:	623b      	str	r3, [r7, #32]
 8001b20:	2300      	movs	r3, #0
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
 8001b24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b28:	4642      	mov	r2, r8
 8001b2a:	464b      	mov	r3, r9
 8001b2c:	f04f 0000 	mov.w	r0, #0
 8001b30:	f04f 0100 	mov.w	r1, #0
 8001b34:	0159      	lsls	r1, r3, #5
 8001b36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b3a:	0150      	lsls	r0, r2, #5
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4641      	mov	r1, r8
 8001b42:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b46:	4649      	mov	r1, r9
 8001b48:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b60:	ebb2 040a 	subs.w	r4, r2, sl
 8001b64:	eb63 050b 	sbc.w	r5, r3, fp
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	f04f 0300 	mov.w	r3, #0
 8001b70:	00eb      	lsls	r3, r5, #3
 8001b72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b76:	00e2      	lsls	r2, r4, #3
 8001b78:	4614      	mov	r4, r2
 8001b7a:	461d      	mov	r5, r3
 8001b7c:	4643      	mov	r3, r8
 8001b7e:	18e3      	adds	r3, r4, r3
 8001b80:	603b      	str	r3, [r7, #0]
 8001b82:	464b      	mov	r3, r9
 8001b84:	eb45 0303 	adc.w	r3, r5, r3
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	f04f 0300 	mov.w	r3, #0
 8001b92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b96:	4629      	mov	r1, r5
 8001b98:	028b      	lsls	r3, r1, #10
 8001b9a:	4621      	mov	r1, r4
 8001b9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ba0:	4621      	mov	r1, r4
 8001ba2:	028a      	lsls	r2, r1, #10
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001baa:	2200      	movs	r2, #0
 8001bac:	61bb      	str	r3, [r7, #24]
 8001bae:	61fa      	str	r2, [r7, #28]
 8001bb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bb4:	f7fe fb5c 	bl	8000270 <__aeabi_uldivmod>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	0c1b      	lsrs	r3, r3, #16
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	3301      	adds	r3, #1
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001bd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bda:	e002      	b.n	8001be2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bde:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3750      	adds	r7, #80	; 0x50
 8001be8:	46bd      	mov	sp, r7
 8001bea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	00f42400 	.word	0x00f42400
 8001bf8:	007a1200 	.word	0x007a1200

08001bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c00:	4b03      	ldr	r3, [pc, #12]	; (8001c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c02:	681b      	ldr	r3, [r3, #0]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20000000 	.word	0x20000000

08001c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c18:	f7ff fff0 	bl	8001bfc <HAL_RCC_GetHCLKFreq>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	0a9b      	lsrs	r3, r3, #10
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	4903      	ldr	r1, [pc, #12]	; (8001c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c2a:	5ccb      	ldrb	r3, [r1, r3]
 8001c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40023800 	.word	0x40023800
 8001c38:	080068d8 	.word	0x080068d8

08001c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c40:	f7ff ffdc 	bl	8001bfc <HAL_RCC_GetHCLKFreq>
 8001c44:	4602      	mov	r2, r0
 8001c46:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	0b5b      	lsrs	r3, r3, #13
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	4903      	ldr	r1, [pc, #12]	; (8001c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c52:	5ccb      	ldrb	r3, [r1, r3]
 8001c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	080068d8 	.word	0x080068d8

08001c64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	220f      	movs	r2, #15
 8001c72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 0203 	and.w	r2, r3, #3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c80:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	08db      	lsrs	r3, r3, #3
 8001c9e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ca6:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <HAL_RCC_GetClockConfig+0x60>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0207 	and.w	r2, r3, #7
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	601a      	str	r2, [r3, #0]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40023c00 	.word	0x40023c00

08001cc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e041      	b.n	8001d5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d106      	bne.n	8001cf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f839 	bl	8001d66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3304      	adds	r3, #4
 8001d04:	4619      	mov	r1, r3
 8001d06:	4610      	mov	r0, r2
 8001d08:	f000 f9c0 	bl	800208c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d001      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e04e      	b.n	8001e32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2202      	movs	r2, #2
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0201 	orr.w	r2, r2, #1
 8001daa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a23      	ldr	r2, [pc, #140]	; (8001e40 <HAL_TIM_Base_Start_IT+0xc4>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d022      	beq.n	8001dfc <HAL_TIM_Base_Start_IT+0x80>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dbe:	d01d      	beq.n	8001dfc <HAL_TIM_Base_Start_IT+0x80>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a1f      	ldr	r2, [pc, #124]	; (8001e44 <HAL_TIM_Base_Start_IT+0xc8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d018      	beq.n	8001dfc <HAL_TIM_Base_Start_IT+0x80>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a1e      	ldr	r2, [pc, #120]	; (8001e48 <HAL_TIM_Base_Start_IT+0xcc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d013      	beq.n	8001dfc <HAL_TIM_Base_Start_IT+0x80>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a1c      	ldr	r2, [pc, #112]	; (8001e4c <HAL_TIM_Base_Start_IT+0xd0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d00e      	beq.n	8001dfc <HAL_TIM_Base_Start_IT+0x80>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a1b      	ldr	r2, [pc, #108]	; (8001e50 <HAL_TIM_Base_Start_IT+0xd4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d009      	beq.n	8001dfc <HAL_TIM_Base_Start_IT+0x80>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a19      	ldr	r2, [pc, #100]	; (8001e54 <HAL_TIM_Base_Start_IT+0xd8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d004      	beq.n	8001dfc <HAL_TIM_Base_Start_IT+0x80>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a18      	ldr	r2, [pc, #96]	; (8001e58 <HAL_TIM_Base_Start_IT+0xdc>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d111      	bne.n	8001e20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2b06      	cmp	r3, #6
 8001e0c:	d010      	beq.n	8001e30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0201 	orr.w	r2, r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e1e:	e007      	b.n	8001e30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0201 	orr.w	r2, r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40010000 	.word	0x40010000
 8001e44:	40000400 	.word	0x40000400
 8001e48:	40000800 	.word	0x40000800
 8001e4c:	40000c00 	.word	0x40000c00
 8001e50:	40010400 	.word	0x40010400
 8001e54:	40014000 	.word	0x40014000
 8001e58:	40001800 	.word	0x40001800

08001e5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d020      	beq.n	8001ec0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d01b      	beq.n	8001ec0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f06f 0202 	mvn.w	r2, #2
 8001e90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f8d2 	bl	8002050 <HAL_TIM_IC_CaptureCallback>
 8001eac:	e005      	b.n	8001eba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f8c4 	bl	800203c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f8d5 	bl	8002064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d020      	beq.n	8001f0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d01b      	beq.n	8001f0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0204 	mvn.w	r2, #4
 8001edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f8ac 	bl	8002050 <HAL_TIM_IC_CaptureCallback>
 8001ef8:	e005      	b.n	8001f06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f89e 	bl	800203c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f8af 	bl	8002064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d020      	beq.n	8001f58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d01b      	beq.n	8001f58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f06f 0208 	mvn.w	r2, #8
 8001f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2204      	movs	r2, #4
 8001f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f886 	bl	8002050 <HAL_TIM_IC_CaptureCallback>
 8001f44:	e005      	b.n	8001f52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f878 	bl	800203c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f889 	bl	8002064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f003 0310 	and.w	r3, r3, #16
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d020      	beq.n	8001fa4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d01b      	beq.n	8001fa4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0210 	mvn.w	r2, #16
 8001f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2208      	movs	r2, #8
 8001f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f860 	bl	8002050 <HAL_TIM_IC_CaptureCallback>
 8001f90:	e005      	b.n	8001f9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f852 	bl	800203c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f863 	bl	8002064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00c      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d007      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f06f 0201 	mvn.w	r2, #1
 8001fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7fe fc4e 	bl	8000864 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00c      	beq.n	8001fec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d007      	beq.n	8001fec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f906 	bl	80021f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00c      	beq.n	8002010 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d007      	beq.n	8002010 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f834 	bl	8002078 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f003 0320 	and.w	r3, r3, #32
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00c      	beq.n	8002034 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f003 0320 	and.w	r3, r3, #32
 8002020:	2b00      	cmp	r3, #0
 8002022:	d007      	beq.n	8002034 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0220 	mvn.w	r2, #32
 800202c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f8d8 	bl	80021e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002034:	bf00      	nop
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a46      	ldr	r2, [pc, #280]	; (80021b8 <TIM_Base_SetConfig+0x12c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d013      	beq.n	80020cc <TIM_Base_SetConfig+0x40>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020aa:	d00f      	beq.n	80020cc <TIM_Base_SetConfig+0x40>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a43      	ldr	r2, [pc, #268]	; (80021bc <TIM_Base_SetConfig+0x130>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d00b      	beq.n	80020cc <TIM_Base_SetConfig+0x40>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a42      	ldr	r2, [pc, #264]	; (80021c0 <TIM_Base_SetConfig+0x134>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d007      	beq.n	80020cc <TIM_Base_SetConfig+0x40>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a41      	ldr	r2, [pc, #260]	; (80021c4 <TIM_Base_SetConfig+0x138>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d003      	beq.n	80020cc <TIM_Base_SetConfig+0x40>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a40      	ldr	r2, [pc, #256]	; (80021c8 <TIM_Base_SetConfig+0x13c>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d108      	bne.n	80020de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4313      	orrs	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a35      	ldr	r2, [pc, #212]	; (80021b8 <TIM_Base_SetConfig+0x12c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d02b      	beq.n	800213e <TIM_Base_SetConfig+0xb2>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ec:	d027      	beq.n	800213e <TIM_Base_SetConfig+0xb2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a32      	ldr	r2, [pc, #200]	; (80021bc <TIM_Base_SetConfig+0x130>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d023      	beq.n	800213e <TIM_Base_SetConfig+0xb2>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a31      	ldr	r2, [pc, #196]	; (80021c0 <TIM_Base_SetConfig+0x134>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d01f      	beq.n	800213e <TIM_Base_SetConfig+0xb2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a30      	ldr	r2, [pc, #192]	; (80021c4 <TIM_Base_SetConfig+0x138>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d01b      	beq.n	800213e <TIM_Base_SetConfig+0xb2>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a2f      	ldr	r2, [pc, #188]	; (80021c8 <TIM_Base_SetConfig+0x13c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d017      	beq.n	800213e <TIM_Base_SetConfig+0xb2>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a2e      	ldr	r2, [pc, #184]	; (80021cc <TIM_Base_SetConfig+0x140>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d013      	beq.n	800213e <TIM_Base_SetConfig+0xb2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a2d      	ldr	r2, [pc, #180]	; (80021d0 <TIM_Base_SetConfig+0x144>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d00f      	beq.n	800213e <TIM_Base_SetConfig+0xb2>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a2c      	ldr	r2, [pc, #176]	; (80021d4 <TIM_Base_SetConfig+0x148>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d00b      	beq.n	800213e <TIM_Base_SetConfig+0xb2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a2b      	ldr	r2, [pc, #172]	; (80021d8 <TIM_Base_SetConfig+0x14c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d007      	beq.n	800213e <TIM_Base_SetConfig+0xb2>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a2a      	ldr	r2, [pc, #168]	; (80021dc <TIM_Base_SetConfig+0x150>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d003      	beq.n	800213e <TIM_Base_SetConfig+0xb2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a29      	ldr	r2, [pc, #164]	; (80021e0 <TIM_Base_SetConfig+0x154>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d108      	bne.n	8002150 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4313      	orrs	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	4313      	orrs	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a10      	ldr	r2, [pc, #64]	; (80021b8 <TIM_Base_SetConfig+0x12c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d003      	beq.n	8002184 <TIM_Base_SetConfig+0xf8>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a12      	ldr	r2, [pc, #72]	; (80021c8 <TIM_Base_SetConfig+0x13c>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d103      	bne.n	800218c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b01      	cmp	r3, #1
 800219c:	d105      	bne.n	80021aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	f023 0201 	bic.w	r2, r3, #1
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	611a      	str	r2, [r3, #16]
  }
}
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40010000 	.word	0x40010000
 80021bc:	40000400 	.word	0x40000400
 80021c0:	40000800 	.word	0x40000800
 80021c4:	40000c00 	.word	0x40000c00
 80021c8:	40010400 	.word	0x40010400
 80021cc:	40014000 	.word	0x40014000
 80021d0:	40014400 	.word	0x40014400
 80021d4:	40014800 	.word	0x40014800
 80021d8:	40001800 	.word	0x40001800
 80021dc:	40001c00 	.word	0x40001c00
 80021e0:	40002000 	.word	0x40002000

080021e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e042      	b.n	80022a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7fe fb56 	bl	80008e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2224      	movs	r2, #36	; 0x24
 800223c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800224e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 fd69 	bl	8002d28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002264:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002274:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002284:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2220      	movs	r2, #32
 8002290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08a      	sub	sp, #40	; 0x28
 80022b0:	af02      	add	r7, sp, #8
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	4613      	mov	r3, r2
 80022ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b20      	cmp	r3, #32
 80022ca:	d175      	bne.n	80023b8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <HAL_UART_Transmit+0x2c>
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e06e      	b.n	80023ba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2221      	movs	r2, #33	; 0x21
 80022e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022ea:	f7fe fd07 	bl	8000cfc <HAL_GetTick>
 80022ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	88fa      	ldrh	r2, [r7, #6]
 80022f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	88fa      	ldrh	r2, [r7, #6]
 80022fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002304:	d108      	bne.n	8002318 <HAL_UART_Transmit+0x6c>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d104      	bne.n	8002318 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	61bb      	str	r3, [r7, #24]
 8002316:	e003      	b.n	8002320 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800231c:	2300      	movs	r3, #0
 800231e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002320:	e02e      	b.n	8002380 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2200      	movs	r2, #0
 800232a:	2180      	movs	r1, #128	; 0x80
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f000 fb05 	bl	800293c <UART_WaitOnFlagUntilTimeout>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e03a      	b.n	80023ba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10b      	bne.n	8002362 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002358:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	3302      	adds	r3, #2
 800235e:	61bb      	str	r3, [r7, #24]
 8002360:	e007      	b.n	8002372 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	781a      	ldrb	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	3301      	adds	r3, #1
 8002370:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002376:	b29b      	uxth	r3, r3
 8002378:	3b01      	subs	r3, #1
 800237a:	b29a      	uxth	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002384:	b29b      	uxth	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1cb      	bne.n	8002322 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2200      	movs	r2, #0
 8002392:	2140      	movs	r1, #64	; 0x40
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 fad1 	bl	800293c <UART_WaitOnFlagUntilTimeout>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2220      	movs	r2, #32
 80023a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e006      	b.n	80023ba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	e000      	b.n	80023ba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80023b8:	2302      	movs	r3, #2
  }
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3720      	adds	r7, #32
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b0ba      	sub	sp, #232	; 0xe8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80023f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002402:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10f      	bne.n	800242a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800240a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800240e:	f003 0320 	and.w	r3, r3, #32
 8002412:	2b00      	cmp	r3, #0
 8002414:	d009      	beq.n	800242a <HAL_UART_IRQHandler+0x66>
 8002416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800241a:	f003 0320 	and.w	r3, r3, #32
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 fbc2 	bl	8002bac <UART_Receive_IT>
      return;
 8002428:	e25b      	b.n	80028e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800242a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 80de 	beq.w	80025f0 <HAL_UART_IRQHandler+0x22c>
 8002434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d106      	bne.n	800244e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002444:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80d1 	beq.w	80025f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800244e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_UART_IRQHandler+0xae>
 800245a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800245e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002462:	2b00      	cmp	r3, #0
 8002464:	d005      	beq.n	8002472 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	f043 0201 	orr.w	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00b      	beq.n	8002496 <HAL_UART_IRQHandler+0xd2>
 800247e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d005      	beq.n	8002496 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	f043 0202 	orr.w	r2, r3, #2
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00b      	beq.n	80024ba <HAL_UART_IRQHandler+0xf6>
 80024a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d005      	beq.n	80024ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	f043 0204 	orr.w	r2, r3, #4
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80024ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d011      	beq.n	80024ea <HAL_UART_IRQHandler+0x126>
 80024c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024ca:	f003 0320 	and.w	r3, r3, #32
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d105      	bne.n	80024de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80024d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d005      	beq.n	80024ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	f043 0208 	orr.w	r2, r3, #8
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 81f2 	beq.w	80028d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024f8:	f003 0320 	and.w	r3, r3, #32
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_UART_IRQHandler+0x14e>
 8002500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002504:	f003 0320 	and.w	r3, r3, #32
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 fb4d 	bl	8002bac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251c:	2b40      	cmp	r3, #64	; 0x40
 800251e:	bf0c      	ite	eq
 8002520:	2301      	moveq	r3, #1
 8002522:	2300      	movne	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d103      	bne.n	800253e <HAL_UART_IRQHandler+0x17a>
 8002536:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800253a:	2b00      	cmp	r3, #0
 800253c:	d04f      	beq.n	80025de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 fa55 	bl	80029ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254e:	2b40      	cmp	r3, #64	; 0x40
 8002550:	d141      	bne.n	80025d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	3314      	adds	r3, #20
 8002558:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800255c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002560:	e853 3f00 	ldrex	r3, [r3]
 8002564:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002568:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800256c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002570:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	3314      	adds	r3, #20
 800257a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800257e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002582:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002586:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800258a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800258e:	e841 2300 	strex	r3, r2, [r1]
 8002592:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002596:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1d9      	bne.n	8002552 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d013      	beq.n	80025ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025aa:	4a7e      	ldr	r2, [pc, #504]	; (80027a4 <HAL_UART_IRQHandler+0x3e0>)
 80025ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fe fd00 	bl	8000fb8 <HAL_DMA_Abort_IT>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d016      	beq.n	80025ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025c8:	4610      	mov	r0, r2
 80025ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025cc:	e00e      	b.n	80025ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f99e 	bl	8002910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d4:	e00a      	b.n	80025ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f99a 	bl	8002910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025dc:	e006      	b.n	80025ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f996 	bl	8002910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80025ea:	e175      	b.n	80028d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025ec:	bf00      	nop
    return;
 80025ee:	e173      	b.n	80028d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	f040 814f 	bne.w	8002898 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80025fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025fe:	f003 0310 	and.w	r3, r3, #16
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 8148 	beq.w	8002898 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800260c:	f003 0310 	and.w	r3, r3, #16
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 8141 	beq.w	8002898 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002616:	2300      	movs	r3, #0
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002636:	2b40      	cmp	r3, #64	; 0x40
 8002638:	f040 80b6 	bne.w	80027a8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002648:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 8145 	beq.w	80028dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002656:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800265a:	429a      	cmp	r2, r3
 800265c:	f080 813e 	bcs.w	80028dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002666:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002672:	f000 8088 	beq.w	8002786 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	330c      	adds	r3, #12
 800267c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002680:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002684:	e853 3f00 	ldrex	r3, [r3]
 8002688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800268c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002694:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	330c      	adds	r3, #12
 800269e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80026a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80026a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80026ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80026b2:	e841 2300 	strex	r3, r2, [r1]
 80026b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80026ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1d9      	bne.n	8002676 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	3314      	adds	r3, #20
 80026c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026cc:	e853 3f00 	ldrex	r3, [r3]
 80026d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80026d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026d4:	f023 0301 	bic.w	r3, r3, #1
 80026d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	3314      	adds	r3, #20
 80026e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80026e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80026ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80026ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80026f2:	e841 2300 	strex	r3, r2, [r1]
 80026f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80026f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1e1      	bne.n	80026c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	3314      	adds	r3, #20
 8002704:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002706:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002708:	e853 3f00 	ldrex	r3, [r3]
 800270c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800270e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002714:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	3314      	adds	r3, #20
 800271e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002722:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002724:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002726:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002728:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800272a:	e841 2300 	strex	r3, r2, [r1]
 800272e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002730:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1e3      	bne.n	80026fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2220      	movs	r2, #32
 800273a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	330c      	adds	r3, #12
 800274a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800274c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800274e:	e853 3f00 	ldrex	r3, [r3]
 8002752:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002756:	f023 0310 	bic.w	r3, r3, #16
 800275a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	330c      	adds	r3, #12
 8002764:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002768:	65ba      	str	r2, [r7, #88]	; 0x58
 800276a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800276c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800276e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002770:	e841 2300 	strex	r3, r2, [r1]
 8002774:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1e3      	bne.n	8002744 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002780:	4618      	mov	r0, r3
 8002782:	f7fe fba9 	bl	8000ed8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2202      	movs	r2, #2
 800278a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002794:	b29b      	uxth	r3, r3
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	b29b      	uxth	r3, r3
 800279a:	4619      	mov	r1, r3
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f8c1 	bl	8002924 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027a2:	e09b      	b.n	80028dc <HAL_UART_IRQHandler+0x518>
 80027a4:	08002ab5 	.word	0x08002ab5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027bc:	b29b      	uxth	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 808e 	beq.w	80028e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80027c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 8089 	beq.w	80028e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	330c      	adds	r3, #12
 80027d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d8:	e853 3f00 	ldrex	r3, [r3]
 80027dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80027de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	330c      	adds	r3, #12
 80027ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80027f2:	647a      	str	r2, [r7, #68]	; 0x44
 80027f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80027f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027fa:	e841 2300 	strex	r3, r2, [r1]
 80027fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1e3      	bne.n	80027ce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	3314      	adds	r3, #20
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	e853 3f00 	ldrex	r3, [r3]
 8002814:	623b      	str	r3, [r7, #32]
   return(result);
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	f023 0301 	bic.w	r3, r3, #1
 800281c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	3314      	adds	r3, #20
 8002826:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800282a:	633a      	str	r2, [r7, #48]	; 0x30
 800282c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800282e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002832:	e841 2300 	strex	r3, r2, [r1]
 8002836:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1e3      	bne.n	8002806 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2220      	movs	r2, #32
 8002842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	330c      	adds	r3, #12
 8002852:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	e853 3f00 	ldrex	r3, [r3]
 800285a:	60fb      	str	r3, [r7, #12]
   return(result);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f023 0310 	bic.w	r3, r3, #16
 8002862:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	330c      	adds	r3, #12
 800286c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002870:	61fa      	str	r2, [r7, #28]
 8002872:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002874:	69b9      	ldr	r1, [r7, #24]
 8002876:	69fa      	ldr	r2, [r7, #28]
 8002878:	e841 2300 	strex	r3, r2, [r1]
 800287c:	617b      	str	r3, [r7, #20]
   return(result);
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1e3      	bne.n	800284c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800288a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800288e:	4619      	mov	r1, r3
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 f847 	bl	8002924 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002896:	e023      	b.n	80028e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800289c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d009      	beq.n	80028b8 <HAL_UART_IRQHandler+0x4f4>
 80028a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f913 	bl	8002adc <UART_Transmit_IT>
    return;
 80028b6:	e014      	b.n	80028e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00e      	beq.n	80028e2 <HAL_UART_IRQHandler+0x51e>
 80028c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f953 	bl	8002b7c <UART_EndTransmit_IT>
    return;
 80028d6:	e004      	b.n	80028e2 <HAL_UART_IRQHandler+0x51e>
    return;
 80028d8:	bf00      	nop
 80028da:	e002      	b.n	80028e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80028dc:	bf00      	nop
 80028de:	e000      	b.n	80028e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80028e0:	bf00      	nop
  }
}
 80028e2:	37e8      	adds	r7, #232	; 0xe8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	460b      	mov	r3, r1
 800292e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800294c:	e03b      	b.n	80029c6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002954:	d037      	beq.n	80029c6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002956:	f7fe f9d1 	bl	8000cfc <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	6a3a      	ldr	r2, [r7, #32]
 8002962:	429a      	cmp	r2, r3
 8002964:	d302      	bcc.n	800296c <UART_WaitOnFlagUntilTimeout+0x30>
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e03a      	b.n	80029e6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b00      	cmp	r3, #0
 800297c:	d023      	beq.n	80029c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b80      	cmp	r3, #128	; 0x80
 8002982:	d020      	beq.n	80029c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b40      	cmp	r3, #64	; 0x40
 8002988:	d01d      	beq.n	80029c6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b08      	cmp	r3, #8
 8002996:	d116      	bne.n	80029c6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f81d 	bl	80029ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2208      	movs	r2, #8
 80029b8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e00f      	b.n	80029e6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	4013      	ands	r3, r2
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	bf0c      	ite	eq
 80029d6:	2301      	moveq	r3, #1
 80029d8:	2300      	movne	r3, #0
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d0b4      	beq.n	800294e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b095      	sub	sp, #84	; 0x54
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	330c      	adds	r3, #12
 80029fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a00:	e853 3f00 	ldrex	r3, [r3]
 8002a04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	330c      	adds	r3, #12
 8002a14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a16:	643a      	str	r2, [r7, #64]	; 0x40
 8002a18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a1e:	e841 2300 	strex	r3, r2, [r1]
 8002a22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1e5      	bne.n	80029f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	3314      	adds	r3, #20
 8002a30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	e853 3f00 	ldrex	r3, [r3]
 8002a38:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	f023 0301 	bic.w	r3, r3, #1
 8002a40:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	3314      	adds	r3, #20
 8002a48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a52:	e841 2300 	strex	r3, r2, [r1]
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1e5      	bne.n	8002a2a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d119      	bne.n	8002a9a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	330c      	adds	r3, #12
 8002a6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	e853 3f00 	ldrex	r3, [r3]
 8002a74:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f023 0310 	bic.w	r3, r3, #16
 8002a7c:	647b      	str	r3, [r7, #68]	; 0x44
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	330c      	adds	r3, #12
 8002a84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a86:	61ba      	str	r2, [r7, #24]
 8002a88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8a:	6979      	ldr	r1, [r7, #20]
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	e841 2300 	strex	r3, r2, [r1]
 8002a92:	613b      	str	r3, [r7, #16]
   return(result);
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1e5      	bne.n	8002a66 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002aa8:	bf00      	nop
 8002aaa:	3754      	adds	r7, #84	; 0x54
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f7ff ff1e 	bl	8002910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ad4:	bf00      	nop
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b21      	cmp	r3, #33	; 0x21
 8002aee:	d13e      	bne.n	8002b6e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af8:	d114      	bne.n	8002b24 <UART_Transmit_IT+0x48>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d110      	bne.n	8002b24 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b16:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	1c9a      	adds	r2, r3, #2
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	621a      	str	r2, [r3, #32]
 8002b22:	e008      	b.n	8002b36 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	1c59      	adds	r1, r3, #1
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6211      	str	r1, [r2, #32]
 8002b2e:	781a      	ldrb	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	4619      	mov	r1, r3
 8002b44:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10f      	bne.n	8002b6a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b58:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b68:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	e000      	b.n	8002b70 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b6e:	2302      	movs	r3, #2
  }
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b92:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff fea3 	bl	80028e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08c      	sub	sp, #48	; 0x30
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b22      	cmp	r3, #34	; 0x22
 8002bbe:	f040 80ae 	bne.w	8002d1e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bca:	d117      	bne.n	8002bfc <UART_Receive_IT+0x50>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d113      	bne.n	8002bfc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bdc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf4:	1c9a      	adds	r2, r3, #2
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	629a      	str	r2, [r3, #40]	; 0x28
 8002bfa:	e026      	b.n	8002c4a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c0e:	d007      	beq.n	8002c20 <UART_Receive_IT+0x74>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10a      	bne.n	8002c2e <UART_Receive_IT+0x82>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d106      	bne.n	8002c2e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2a:	701a      	strb	r2, [r3, #0]
 8002c2c:	e008      	b.n	8002c40 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c44:	1c5a      	adds	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	4619      	mov	r1, r3
 8002c58:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d15d      	bne.n	8002d1a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0220 	bic.w	r2, r2, #32
 8002c6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695a      	ldr	r2, [r3, #20]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0201 	bic.w	r2, r2, #1
 8002c8c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d135      	bne.n	8002d10 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	330c      	adds	r3, #12
 8002cb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	e853 3f00 	ldrex	r3, [r3]
 8002cb8:	613b      	str	r3, [r7, #16]
   return(result);
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	f023 0310 	bic.w	r3, r3, #16
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	330c      	adds	r3, #12
 8002cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cca:	623a      	str	r2, [r7, #32]
 8002ccc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cce:	69f9      	ldr	r1, [r7, #28]
 8002cd0:	6a3a      	ldr	r2, [r7, #32]
 8002cd2:	e841 2300 	strex	r3, r2, [r1]
 8002cd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1e5      	bne.n	8002caa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0310 	and.w	r3, r3, #16
 8002ce8:	2b10      	cmp	r3, #16
 8002cea:	d10a      	bne.n	8002d02 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d06:	4619      	mov	r1, r3
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff fe0b 	bl	8002924 <HAL_UARTEx_RxEventCallback>
 8002d0e:	e002      	b.n	8002d16 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f7ff fdf3 	bl	80028fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	e002      	b.n	8002d20 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	e000      	b.n	8002d20 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002d1e:	2302      	movs	r3, #2
  }
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3730      	adds	r7, #48	; 0x30
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d2c:	b0c0      	sub	sp, #256	; 0x100
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d44:	68d9      	ldr	r1, [r3, #12]
 8002d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	ea40 0301 	orr.w	r3, r0, r1
 8002d50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	431a      	orrs	r2, r3
 8002d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d80:	f021 010c 	bic.w	r1, r1, #12
 8002d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d8e:	430b      	orrs	r3, r1
 8002d90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da2:	6999      	ldr	r1, [r3, #24]
 8002da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	ea40 0301 	orr.w	r3, r0, r1
 8002dae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	4b8f      	ldr	r3, [pc, #572]	; (8002ff4 <UART_SetConfig+0x2cc>)
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d005      	beq.n	8002dc8 <UART_SetConfig+0xa0>
 8002dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	4b8d      	ldr	r3, [pc, #564]	; (8002ff8 <UART_SetConfig+0x2d0>)
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d104      	bne.n	8002dd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002dc8:	f7fe ff38 	bl	8001c3c <HAL_RCC_GetPCLK2Freq>
 8002dcc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002dd0:	e003      	b.n	8002dda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002dd2:	f7fe ff1f 	bl	8001c14 <HAL_RCC_GetPCLK1Freq>
 8002dd6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002de4:	f040 810c 	bne.w	8003000 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dec:	2200      	movs	r2, #0
 8002dee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002df2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002df6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002dfa:	4622      	mov	r2, r4
 8002dfc:	462b      	mov	r3, r5
 8002dfe:	1891      	adds	r1, r2, r2
 8002e00:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e02:	415b      	adcs	r3, r3
 8002e04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	eb12 0801 	adds.w	r8, r2, r1
 8002e10:	4629      	mov	r1, r5
 8002e12:	eb43 0901 	adc.w	r9, r3, r1
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e2a:	4690      	mov	r8, r2
 8002e2c:	4699      	mov	r9, r3
 8002e2e:	4623      	mov	r3, r4
 8002e30:	eb18 0303 	adds.w	r3, r8, r3
 8002e34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e38:	462b      	mov	r3, r5
 8002e3a:	eb49 0303 	adc.w	r3, r9, r3
 8002e3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e56:	460b      	mov	r3, r1
 8002e58:	18db      	adds	r3, r3, r3
 8002e5a:	653b      	str	r3, [r7, #80]	; 0x50
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	eb42 0303 	adc.w	r3, r2, r3
 8002e62:	657b      	str	r3, [r7, #84]	; 0x54
 8002e64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e6c:	f7fd fa00 	bl	8000270 <__aeabi_uldivmod>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4b61      	ldr	r3, [pc, #388]	; (8002ffc <UART_SetConfig+0x2d4>)
 8002e76:	fba3 2302 	umull	r2, r3, r3, r2
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	011c      	lsls	r4, r3, #4
 8002e7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e82:	2200      	movs	r2, #0
 8002e84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e90:	4642      	mov	r2, r8
 8002e92:	464b      	mov	r3, r9
 8002e94:	1891      	adds	r1, r2, r2
 8002e96:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e98:	415b      	adcs	r3, r3
 8002e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ea0:	4641      	mov	r1, r8
 8002ea2:	eb12 0a01 	adds.w	sl, r2, r1
 8002ea6:	4649      	mov	r1, r9
 8002ea8:	eb43 0b01 	adc.w	fp, r3, r1
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002eb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ebc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ec0:	4692      	mov	sl, r2
 8002ec2:	469b      	mov	fp, r3
 8002ec4:	4643      	mov	r3, r8
 8002ec6:	eb1a 0303 	adds.w	r3, sl, r3
 8002eca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ece:	464b      	mov	r3, r9
 8002ed0:	eb4b 0303 	adc.w	r3, fp, r3
 8002ed4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ee4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ee8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002eec:	460b      	mov	r3, r1
 8002eee:	18db      	adds	r3, r3, r3
 8002ef0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	eb42 0303 	adc.w	r3, r2, r3
 8002ef8:	647b      	str	r3, [r7, #68]	; 0x44
 8002efa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002efe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f02:	f7fd f9b5 	bl	8000270 <__aeabi_uldivmod>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	4b3b      	ldr	r3, [pc, #236]	; (8002ffc <UART_SetConfig+0x2d4>)
 8002f0e:	fba3 2301 	umull	r2, r3, r3, r1
 8002f12:	095b      	lsrs	r3, r3, #5
 8002f14:	2264      	movs	r2, #100	; 0x64
 8002f16:	fb02 f303 	mul.w	r3, r2, r3
 8002f1a:	1acb      	subs	r3, r1, r3
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f22:	4b36      	ldr	r3, [pc, #216]	; (8002ffc <UART_SetConfig+0x2d4>)
 8002f24:	fba3 2302 	umull	r2, r3, r3, r2
 8002f28:	095b      	lsrs	r3, r3, #5
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f30:	441c      	add	r4, r3
 8002f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f36:	2200      	movs	r2, #0
 8002f38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f44:	4642      	mov	r2, r8
 8002f46:	464b      	mov	r3, r9
 8002f48:	1891      	adds	r1, r2, r2
 8002f4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f4c:	415b      	adcs	r3, r3
 8002f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f54:	4641      	mov	r1, r8
 8002f56:	1851      	adds	r1, r2, r1
 8002f58:	6339      	str	r1, [r7, #48]	; 0x30
 8002f5a:	4649      	mov	r1, r9
 8002f5c:	414b      	adcs	r3, r1
 8002f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f6c:	4659      	mov	r1, fp
 8002f6e:	00cb      	lsls	r3, r1, #3
 8002f70:	4651      	mov	r1, sl
 8002f72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f76:	4651      	mov	r1, sl
 8002f78:	00ca      	lsls	r2, r1, #3
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4603      	mov	r3, r0
 8002f80:	4642      	mov	r2, r8
 8002f82:	189b      	adds	r3, r3, r2
 8002f84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f88:	464b      	mov	r3, r9
 8002f8a:	460a      	mov	r2, r1
 8002f8c:	eb42 0303 	adc.w	r3, r2, r3
 8002f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002fa0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002fa4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002fa8:	460b      	mov	r3, r1
 8002faa:	18db      	adds	r3, r3, r3
 8002fac:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fae:	4613      	mov	r3, r2
 8002fb0:	eb42 0303 	adc.w	r3, r2, r3
 8002fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002fbe:	f7fd f957 	bl	8000270 <__aeabi_uldivmod>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	4b0d      	ldr	r3, [pc, #52]	; (8002ffc <UART_SetConfig+0x2d4>)
 8002fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8002fcc:	095b      	lsrs	r3, r3, #5
 8002fce:	2164      	movs	r1, #100	; 0x64
 8002fd0:	fb01 f303 	mul.w	r3, r1, r3
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	3332      	adds	r3, #50	; 0x32
 8002fda:	4a08      	ldr	r2, [pc, #32]	; (8002ffc <UART_SetConfig+0x2d4>)
 8002fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe0:	095b      	lsrs	r3, r3, #5
 8002fe2:	f003 0207 	and.w	r2, r3, #7
 8002fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4422      	add	r2, r4
 8002fee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ff0:	e106      	b.n	8003200 <UART_SetConfig+0x4d8>
 8002ff2:	bf00      	nop
 8002ff4:	40011000 	.word	0x40011000
 8002ff8:	40011400 	.word	0x40011400
 8002ffc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003000:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003004:	2200      	movs	r2, #0
 8003006:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800300a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800300e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003012:	4642      	mov	r2, r8
 8003014:	464b      	mov	r3, r9
 8003016:	1891      	adds	r1, r2, r2
 8003018:	6239      	str	r1, [r7, #32]
 800301a:	415b      	adcs	r3, r3
 800301c:	627b      	str	r3, [r7, #36]	; 0x24
 800301e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003022:	4641      	mov	r1, r8
 8003024:	1854      	adds	r4, r2, r1
 8003026:	4649      	mov	r1, r9
 8003028:	eb43 0501 	adc.w	r5, r3, r1
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	00eb      	lsls	r3, r5, #3
 8003036:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800303a:	00e2      	lsls	r2, r4, #3
 800303c:	4614      	mov	r4, r2
 800303e:	461d      	mov	r5, r3
 8003040:	4643      	mov	r3, r8
 8003042:	18e3      	adds	r3, r4, r3
 8003044:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003048:	464b      	mov	r3, r9
 800304a:	eb45 0303 	adc.w	r3, r5, r3
 800304e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800305e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800306e:	4629      	mov	r1, r5
 8003070:	008b      	lsls	r3, r1, #2
 8003072:	4621      	mov	r1, r4
 8003074:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003078:	4621      	mov	r1, r4
 800307a:	008a      	lsls	r2, r1, #2
 800307c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003080:	f7fd f8f6 	bl	8000270 <__aeabi_uldivmod>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4b60      	ldr	r3, [pc, #384]	; (800320c <UART_SetConfig+0x4e4>)
 800308a:	fba3 2302 	umull	r2, r3, r3, r2
 800308e:	095b      	lsrs	r3, r3, #5
 8003090:	011c      	lsls	r4, r3, #4
 8003092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003096:	2200      	movs	r2, #0
 8003098:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800309c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80030a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80030a4:	4642      	mov	r2, r8
 80030a6:	464b      	mov	r3, r9
 80030a8:	1891      	adds	r1, r2, r2
 80030aa:	61b9      	str	r1, [r7, #24]
 80030ac:	415b      	adcs	r3, r3
 80030ae:	61fb      	str	r3, [r7, #28]
 80030b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030b4:	4641      	mov	r1, r8
 80030b6:	1851      	adds	r1, r2, r1
 80030b8:	6139      	str	r1, [r7, #16]
 80030ba:	4649      	mov	r1, r9
 80030bc:	414b      	adcs	r3, r1
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	f04f 0300 	mov.w	r3, #0
 80030c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030cc:	4659      	mov	r1, fp
 80030ce:	00cb      	lsls	r3, r1, #3
 80030d0:	4651      	mov	r1, sl
 80030d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030d6:	4651      	mov	r1, sl
 80030d8:	00ca      	lsls	r2, r1, #3
 80030da:	4610      	mov	r0, r2
 80030dc:	4619      	mov	r1, r3
 80030de:	4603      	mov	r3, r0
 80030e0:	4642      	mov	r2, r8
 80030e2:	189b      	adds	r3, r3, r2
 80030e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030e8:	464b      	mov	r3, r9
 80030ea:	460a      	mov	r2, r1
 80030ec:	eb42 0303 	adc.w	r3, r2, r3
 80030f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80030fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800310c:	4649      	mov	r1, r9
 800310e:	008b      	lsls	r3, r1, #2
 8003110:	4641      	mov	r1, r8
 8003112:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003116:	4641      	mov	r1, r8
 8003118:	008a      	lsls	r2, r1, #2
 800311a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800311e:	f7fd f8a7 	bl	8000270 <__aeabi_uldivmod>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	4611      	mov	r1, r2
 8003128:	4b38      	ldr	r3, [pc, #224]	; (800320c <UART_SetConfig+0x4e4>)
 800312a:	fba3 2301 	umull	r2, r3, r3, r1
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	2264      	movs	r2, #100	; 0x64
 8003132:	fb02 f303 	mul.w	r3, r2, r3
 8003136:	1acb      	subs	r3, r1, r3
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	3332      	adds	r3, #50	; 0x32
 800313c:	4a33      	ldr	r2, [pc, #204]	; (800320c <UART_SetConfig+0x4e4>)
 800313e:	fba2 2303 	umull	r2, r3, r2, r3
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003148:	441c      	add	r4, r3
 800314a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800314e:	2200      	movs	r2, #0
 8003150:	673b      	str	r3, [r7, #112]	; 0x70
 8003152:	677a      	str	r2, [r7, #116]	; 0x74
 8003154:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003158:	4642      	mov	r2, r8
 800315a:	464b      	mov	r3, r9
 800315c:	1891      	adds	r1, r2, r2
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	415b      	adcs	r3, r3
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003168:	4641      	mov	r1, r8
 800316a:	1851      	adds	r1, r2, r1
 800316c:	6039      	str	r1, [r7, #0]
 800316e:	4649      	mov	r1, r9
 8003170:	414b      	adcs	r3, r1
 8003172:	607b      	str	r3, [r7, #4]
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003180:	4659      	mov	r1, fp
 8003182:	00cb      	lsls	r3, r1, #3
 8003184:	4651      	mov	r1, sl
 8003186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800318a:	4651      	mov	r1, sl
 800318c:	00ca      	lsls	r2, r1, #3
 800318e:	4610      	mov	r0, r2
 8003190:	4619      	mov	r1, r3
 8003192:	4603      	mov	r3, r0
 8003194:	4642      	mov	r2, r8
 8003196:	189b      	adds	r3, r3, r2
 8003198:	66bb      	str	r3, [r7, #104]	; 0x68
 800319a:	464b      	mov	r3, r9
 800319c:	460a      	mov	r2, r1
 800319e:	eb42 0303 	adc.w	r3, r2, r3
 80031a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	663b      	str	r3, [r7, #96]	; 0x60
 80031ae:	667a      	str	r2, [r7, #100]	; 0x64
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	f04f 0300 	mov.w	r3, #0
 80031b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80031bc:	4649      	mov	r1, r9
 80031be:	008b      	lsls	r3, r1, #2
 80031c0:	4641      	mov	r1, r8
 80031c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031c6:	4641      	mov	r1, r8
 80031c8:	008a      	lsls	r2, r1, #2
 80031ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80031ce:	f7fd f84f 	bl	8000270 <__aeabi_uldivmod>
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	4b0d      	ldr	r3, [pc, #52]	; (800320c <UART_SetConfig+0x4e4>)
 80031d8:	fba3 1302 	umull	r1, r3, r3, r2
 80031dc:	095b      	lsrs	r3, r3, #5
 80031de:	2164      	movs	r1, #100	; 0x64
 80031e0:	fb01 f303 	mul.w	r3, r1, r3
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	3332      	adds	r3, #50	; 0x32
 80031ea:	4a08      	ldr	r2, [pc, #32]	; (800320c <UART_SetConfig+0x4e4>)
 80031ec:	fba2 2303 	umull	r2, r3, r2, r3
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	f003 020f 	and.w	r2, r3, #15
 80031f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4422      	add	r2, r4
 80031fe:	609a      	str	r2, [r3, #8]
}
 8003200:	bf00      	nop
 8003202:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003206:	46bd      	mov	sp, r7
 8003208:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800320c:	51eb851f 	.word	0x51eb851f

08003210 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800321a:	2300      	movs	r3, #0
 800321c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800321e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003222:	2b84      	cmp	r3, #132	; 0x84
 8003224:	d005      	beq.n	8003232 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003226:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4413      	add	r3, r2
 800322e:	3303      	adds	r3, #3
 8003230:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003232:	68fb      	ldr	r3, [r7, #12]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003246:	f3ef 8305 	mrs	r3, IPSR
 800324a:	607b      	str	r3, [r7, #4]
  return(result);
 800324c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800324e:	2b00      	cmp	r3, #0
 8003250:	bf14      	ite	ne
 8003252:	2301      	movne	r3, #1
 8003254:	2300      	moveq	r3, #0
 8003256:	b2db      	uxtb	r3, r3
}
 8003258:	4618      	mov	r0, r3
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003268:	f001 f942 	bl	80044f0 <vTaskStartScheduler>
  
  return osOK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	bd80      	pop	{r7, pc}

08003272 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003272:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003274:	b089      	sub	sp, #36	; 0x24
 8003276:	af04      	add	r7, sp, #16
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d020      	beq.n	80032c6 <osThreadCreate+0x54>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d01c      	beq.n	80032c6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685c      	ldr	r4, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691e      	ldr	r6, [r3, #16]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff ffb6 	bl	8003210 <makeFreeRtosPriority>
 80032a4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032ae:	9202      	str	r2, [sp, #8]
 80032b0:	9301      	str	r3, [sp, #4]
 80032b2:	9100      	str	r1, [sp, #0]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	4632      	mov	r2, r6
 80032b8:	4629      	mov	r1, r5
 80032ba:	4620      	mov	r0, r4
 80032bc:	f000 ff50 	bl	8004160 <xTaskCreateStatic>
 80032c0:	4603      	mov	r3, r0
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	e01c      	b.n	8003300 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685c      	ldr	r4, [r3, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032d2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff ff98 	bl	8003210 <makeFreeRtosPriority>
 80032e0:	4602      	mov	r2, r0
 80032e2:	f107 030c 	add.w	r3, r7, #12
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	9200      	str	r2, [sp, #0]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	4632      	mov	r2, r6
 80032ee:	4629      	mov	r1, r5
 80032f0:	4620      	mov	r0, r4
 80032f2:	f000 ff92 	bl	800421a <xTaskCreate>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d001      	beq.n	8003300 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	e000      	b.n	8003302 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003300:	68fb      	ldr	r3, [r7, #12]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800330a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b084      	sub	sp, #16
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <osDelay+0x16>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	e000      	b.n	8003322 <osDelay+0x18>
 8003320:	2301      	movs	r3, #1
 8003322:	4618      	mov	r0, r3
 8003324:	f001 f8b0 	bl	8004488 <vTaskDelay>
  
  return osOK;
 8003328:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d007      	beq.n	8003352 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	4619      	mov	r1, r3
 8003348:	2001      	movs	r0, #1
 800334a:	f000 faae 	bl	80038aa <xQueueCreateMutexStatic>
 800334e:	4603      	mov	r3, r0
 8003350:	e003      	b.n	800335a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003352:	2001      	movs	r0, #1
 8003354:	f000 fa91 	bl	800387a <xQueueCreateMutex>
 8003358:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800335a:	4618      	mov	r0, r3
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800336e:	2300      	movs	r3, #0
 8003370:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <osMutexWait+0x18>
    return osErrorParameter;
 8003378:	2380      	movs	r3, #128	; 0x80
 800337a:	e03a      	b.n	80033f2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800337c:	2300      	movs	r3, #0
 800337e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003386:	d103      	bne.n	8003390 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8003388:	f04f 33ff 	mov.w	r3, #4294967295
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	e009      	b.n	80033a4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d006      	beq.n	80033a4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <osMutexWait+0x40>
      ticks = 1;
 80033a0:	2301      	movs	r3, #1
 80033a2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80033a4:	f7ff ff4c 	bl	8003240 <inHandlerMode>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d017      	beq.n	80033de <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80033ae:	f107 0308 	add.w	r3, r7, #8
 80033b2:	461a      	mov	r2, r3
 80033b4:	2100      	movs	r1, #0
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fd2a 	bl	8003e10 <xQueueReceiveFromISR>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d001      	beq.n	80033c6 <osMutexWait+0x62>
      return osErrorOS;
 80033c2:	23ff      	movs	r3, #255	; 0xff
 80033c4:	e015      	b.n	80033f2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d011      	beq.n	80033f0 <osMutexWait+0x8c>
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <osMutexWait+0x98>)
 80033ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	f3bf 8f6f 	isb	sy
 80033dc:	e008      	b.n	80033f0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80033de:	68f9      	ldr	r1, [r7, #12]
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 fc09 	bl	8003bf8 <xQueueSemaphoreTake>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d001      	beq.n	80033f0 <osMutexWait+0x8c>
    return osErrorOS;
 80033ec:	23ff      	movs	r3, #255	; 0xff
 80033ee:	e000      	b.n	80033f2 <osMutexWait+0x8e>
  }
  
  return osOK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	e000ed04 	.word	0xe000ed04

08003400 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800340c:	2300      	movs	r3, #0
 800340e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003410:	f7ff ff16 	bl	8003240 <inHandlerMode>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d016      	beq.n	8003448 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800341a:	f107 0308 	add.w	r3, r7, #8
 800341e:	4619      	mov	r1, r3
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 fb5b 	bl	8003adc <xQueueGiveFromISR>
 8003426:	4603      	mov	r3, r0
 8003428:	2b01      	cmp	r3, #1
 800342a:	d001      	beq.n	8003430 <osMutexRelease+0x30>
      return osErrorOS;
 800342c:	23ff      	movs	r3, #255	; 0xff
 800342e:	e017      	b.n	8003460 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d013      	beq.n	800345e <osMutexRelease+0x5e>
 8003436:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <osMutexRelease+0x68>)
 8003438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	f3bf 8f4f 	dsb	sy
 8003442:	f3bf 8f6f 	isb	sy
 8003446:	e00a      	b.n	800345e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003448:	2300      	movs	r3, #0
 800344a:	2200      	movs	r2, #0
 800344c:	2100      	movs	r1, #0
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fa46 	bl	80038e0 <xQueueGenericSend>
 8003454:	4603      	mov	r3, r0
 8003456:	2b01      	cmp	r3, #1
 8003458:	d001      	beq.n	800345e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800345a:	23ff      	movs	r3, #255	; 0xff
 800345c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800345e:	68fb      	ldr	r3, [r7, #12]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	e000ed04 	.word	0xe000ed04

0800346c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f103 0208 	add.w	r2, r3, #8
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f04f 32ff 	mov.w	r2, #4294967295
 8003484:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f103 0208 	add.w	r2, r3, #8
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f103 0208 	add.w	r2, r3, #8
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034c6:	b480      	push	{r7}
 80034c8:	b085      	sub	sp, #20
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
 80034ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	601a      	str	r2, [r3, #0]
}
 8003502:	bf00      	nop
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800350e:	b480      	push	{r7}
 8003510:	b085      	sub	sp, #20
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003524:	d103      	bne.n	800352e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	e00c      	b.n	8003548 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3308      	adds	r3, #8
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	e002      	b.n	800353c <vListInsert+0x2e>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	429a      	cmp	r2, r3
 8003546:	d2f6      	bcs.n	8003536 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	1c5a      	adds	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	601a      	str	r2, [r3, #0]
}
 8003574:	bf00      	nop
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6892      	ldr	r2, [r2, #8]
 8003596:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6852      	ldr	r2, [r2, #4]
 80035a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d103      	bne.n	80035b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	1e5a      	subs	r2, r3, #1
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10a      	bne.n	80035fe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80035e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ec:	f383 8811 	msr	BASEPRI, r3
 80035f0:	f3bf 8f6f 	isb	sy
 80035f4:	f3bf 8f4f 	dsb	sy
 80035f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80035fa:	bf00      	nop
 80035fc:	e7fe      	b.n	80035fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80035fe:	f001 fec1 	bl	8005384 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360a:	68f9      	ldr	r1, [r7, #12]
 800360c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800360e:	fb01 f303 	mul.w	r3, r1, r3
 8003612:	441a      	add	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362e:	3b01      	subs	r3, #1
 8003630:	68f9      	ldr	r1, [r7, #12]
 8003632:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003634:	fb01 f303 	mul.w	r3, r1, r3
 8003638:	441a      	add	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	22ff      	movs	r2, #255	; 0xff
 8003642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	22ff      	movs	r2, #255	; 0xff
 800364a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d114      	bne.n	800367e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01a      	beq.n	8003692 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	3310      	adds	r3, #16
 8003660:	4618      	mov	r0, r3
 8003662:	f001 f987 	bl	8004974 <xTaskRemoveFromEventList>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d012      	beq.n	8003692 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800366c:	4b0c      	ldr	r3, [pc, #48]	; (80036a0 <xQueueGenericReset+0xcc>)
 800366e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	e009      	b.n	8003692 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	3310      	adds	r3, #16
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff fef2 	bl	800346c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	3324      	adds	r3, #36	; 0x24
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff feed 	bl	800346c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003692:	f001 fea7 	bl	80053e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003696:	2301      	movs	r3, #1
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	e000ed04 	.word	0xe000ed04

080036a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08e      	sub	sp, #56	; 0x38
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10a      	bne.n	80036ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80036b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036bc:	f383 8811 	msr	BASEPRI, r3
 80036c0:	f3bf 8f6f 	isb	sy
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80036ca:	bf00      	nop
 80036cc:	e7fe      	b.n	80036cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10a      	bne.n	80036ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80036d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d8:	f383 8811 	msr	BASEPRI, r3
 80036dc:	f3bf 8f6f 	isb	sy
 80036e0:	f3bf 8f4f 	dsb	sy
 80036e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80036e6:	bf00      	nop
 80036e8:	e7fe      	b.n	80036e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <xQueueGenericCreateStatic+0x52>
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <xQueueGenericCreateStatic+0x56>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <xQueueGenericCreateStatic+0x58>
 80036fa:	2300      	movs	r3, #0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10a      	bne.n	8003716 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003704:	f383 8811 	msr	BASEPRI, r3
 8003708:	f3bf 8f6f 	isb	sy
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	623b      	str	r3, [r7, #32]
}
 8003712:	bf00      	nop
 8003714:	e7fe      	b.n	8003714 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d102      	bne.n	8003722 <xQueueGenericCreateStatic+0x7e>
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <xQueueGenericCreateStatic+0x82>
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <xQueueGenericCreateStatic+0x84>
 8003726:	2300      	movs	r3, #0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10a      	bne.n	8003742 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800372c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003730:	f383 8811 	msr	BASEPRI, r3
 8003734:	f3bf 8f6f 	isb	sy
 8003738:	f3bf 8f4f 	dsb	sy
 800373c:	61fb      	str	r3, [r7, #28]
}
 800373e:	bf00      	nop
 8003740:	e7fe      	b.n	8003740 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003742:	2348      	movs	r3, #72	; 0x48
 8003744:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2b48      	cmp	r3, #72	; 0x48
 800374a:	d00a      	beq.n	8003762 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800374c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003750:	f383 8811 	msr	BASEPRI, r3
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	61bb      	str	r3, [r7, #24]
}
 800375e:	bf00      	nop
 8003760:	e7fe      	b.n	8003760 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003762:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00d      	beq.n	800378a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800376e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003776:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800377a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	4613      	mov	r3, r2
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	68b9      	ldr	r1, [r7, #8]
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 f83f 	bl	8003808 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800378a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800378c:	4618      	mov	r0, r3
 800378e:	3730      	adds	r7, #48	; 0x30
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08a      	sub	sp, #40	; 0x28
 8003798:	af02      	add	r7, sp, #8
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	4613      	mov	r3, r2
 80037a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10a      	bne.n	80037be <xQueueGenericCreate+0x2a>
	__asm volatile
 80037a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ac:	f383 8811 	msr	BASEPRI, r3
 80037b0:	f3bf 8f6f 	isb	sy
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	613b      	str	r3, [r7, #16]
}
 80037ba:	bf00      	nop
 80037bc:	e7fe      	b.n	80037bc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	fb02 f303 	mul.w	r3, r2, r3
 80037c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	3348      	adds	r3, #72	; 0x48
 80037cc:	4618      	mov	r0, r3
 80037ce:	f001 fefb 	bl	80055c8 <pvPortMalloc>
 80037d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d011      	beq.n	80037fe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	3348      	adds	r3, #72	; 0x48
 80037e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037ec:	79fa      	ldrb	r2, [r7, #7]
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	4613      	mov	r3, r2
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	68b9      	ldr	r1, [r7, #8]
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 f805 	bl	8003808 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80037fe:	69bb      	ldr	r3, [r7, #24]
	}
 8003800:	4618      	mov	r0, r3
 8003802:	3720      	adds	r7, #32
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
 8003814:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d103      	bne.n	8003824 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	e002      	b.n	800382a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003836:	2101      	movs	r1, #1
 8003838:	69b8      	ldr	r0, [r7, #24]
 800383a:	f7ff fecb 	bl	80035d4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00e      	beq.n	8003872 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003866:	2300      	movs	r3, #0
 8003868:	2200      	movs	r2, #0
 800386a:	2100      	movs	r1, #0
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f837 	bl	80038e0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003872:	bf00      	nop
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800387a:	b580      	push	{r7, lr}
 800387c:	b086      	sub	sp, #24
 800387e:	af00      	add	r7, sp, #0
 8003880:	4603      	mov	r3, r0
 8003882:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003884:	2301      	movs	r3, #1
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	2300      	movs	r3, #0
 800388a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	461a      	mov	r2, r3
 8003890:	6939      	ldr	r1, [r7, #16]
 8003892:	6978      	ldr	r0, [r7, #20]
 8003894:	f7ff ff7e 	bl	8003794 <xQueueGenericCreate>
 8003898:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f7ff ffd3 	bl	8003846 <prvInitialiseMutex>

		return xNewQueue;
 80038a0:	68fb      	ldr	r3, [r7, #12]
	}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b088      	sub	sp, #32
 80038ae:	af02      	add	r7, sp, #8
 80038b0:	4603      	mov	r3, r0
 80038b2:	6039      	str	r1, [r7, #0]
 80038b4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80038b6:	2301      	movs	r3, #1
 80038b8:	617b      	str	r3, [r7, #20]
 80038ba:	2300      	movs	r3, #0
 80038bc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80038be:	79fb      	ldrb	r3, [r7, #7]
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2200      	movs	r2, #0
 80038c6:	6939      	ldr	r1, [r7, #16]
 80038c8:	6978      	ldr	r0, [r7, #20]
 80038ca:	f7ff feeb 	bl	80036a4 <xQueueGenericCreateStatic>
 80038ce:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f7ff ffb8 	bl	8003846 <prvInitialiseMutex>

		return xNewQueue;
 80038d6:	68fb      	ldr	r3, [r7, #12]
	}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08e      	sub	sp, #56	; 0x38
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038ee:	2300      	movs	r3, #0
 80038f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80038f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10a      	bne.n	8003912 <xQueueGenericSend+0x32>
	__asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800390e:	bf00      	nop
 8003910:	e7fe      	b.n	8003910 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d103      	bne.n	8003920 <xQueueGenericSend+0x40>
 8003918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <xQueueGenericSend+0x44>
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <xQueueGenericSend+0x46>
 8003924:	2300      	movs	r3, #0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10a      	bne.n	8003940 <xQueueGenericSend+0x60>
	__asm volatile
 800392a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392e:	f383 8811 	msr	BASEPRI, r3
 8003932:	f3bf 8f6f 	isb	sy
 8003936:	f3bf 8f4f 	dsb	sy
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800393c:	bf00      	nop
 800393e:	e7fe      	b.n	800393e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d103      	bne.n	800394e <xQueueGenericSend+0x6e>
 8003946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <xQueueGenericSend+0x72>
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <xQueueGenericSend+0x74>
 8003952:	2300      	movs	r3, #0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10a      	bne.n	800396e <xQueueGenericSend+0x8e>
	__asm volatile
 8003958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	623b      	str	r3, [r7, #32]
}
 800396a:	bf00      	nop
 800396c:	e7fe      	b.n	800396c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800396e:	f001 f9bd 	bl	8004cec <xTaskGetSchedulerState>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <xQueueGenericSend+0x9e>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <xQueueGenericSend+0xa2>
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <xQueueGenericSend+0xa4>
 8003982:	2300      	movs	r3, #0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10a      	bne.n	800399e <xQueueGenericSend+0xbe>
	__asm volatile
 8003988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398c:	f383 8811 	msr	BASEPRI, r3
 8003990:	f3bf 8f6f 	isb	sy
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	61fb      	str	r3, [r7, #28]
}
 800399a:	bf00      	nop
 800399c:	e7fe      	b.n	800399c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800399e:	f001 fcf1 	bl	8005384 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d302      	bcc.n	80039b4 <xQueueGenericSend+0xd4>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d129      	bne.n	8003a08 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	68b9      	ldr	r1, [r7, #8]
 80039b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039ba:	f000 fac1 	bl	8003f40 <prvCopyDataToQueue>
 80039be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d010      	beq.n	80039ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ca:	3324      	adds	r3, #36	; 0x24
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 ffd1 	bl	8004974 <xTaskRemoveFromEventList>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d013      	beq.n	8003a00 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039d8:	4b3f      	ldr	r3, [pc, #252]	; (8003ad8 <xQueueGenericSend+0x1f8>)
 80039da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	f3bf 8f6f 	isb	sy
 80039e8:	e00a      	b.n	8003a00 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d007      	beq.n	8003a00 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039f0:	4b39      	ldr	r3, [pc, #228]	; (8003ad8 <xQueueGenericSend+0x1f8>)
 80039f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a00:	f001 fcf0 	bl	80053e4 <vPortExitCritical>
				return pdPASS;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e063      	b.n	8003ad0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d103      	bne.n	8003a16 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a0e:	f001 fce9 	bl	80053e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a12:	2300      	movs	r3, #0
 8003a14:	e05c      	b.n	8003ad0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d106      	bne.n	8003a2a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a1c:	f107 0314 	add.w	r3, r7, #20
 8003a20:	4618      	mov	r0, r3
 8003a22:	f001 f809 	bl	8004a38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a26:	2301      	movs	r3, #1
 8003a28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a2a:	f001 fcdb 	bl	80053e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a2e:	f000 fdbf 	bl	80045b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a32:	f001 fca7 	bl	8005384 <vPortEnterCritical>
 8003a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a3c:	b25b      	sxtb	r3, r3
 8003a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a42:	d103      	bne.n	8003a4c <xQueueGenericSend+0x16c>
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a52:	b25b      	sxtb	r3, r3
 8003a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a58:	d103      	bne.n	8003a62 <xQueueGenericSend+0x182>
 8003a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a62:	f001 fcbf 	bl	80053e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a66:	1d3a      	adds	r2, r7, #4
 8003a68:	f107 0314 	add.w	r3, r7, #20
 8003a6c:	4611      	mov	r1, r2
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fff8 	bl	8004a64 <xTaskCheckForTimeOut>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d124      	bne.n	8003ac4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a7c:	f000 fb58 	bl	8004130 <prvIsQueueFull>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d018      	beq.n	8003ab8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a88:	3310      	adds	r3, #16
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	4611      	mov	r1, r2
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 ff4c 	bl	800492c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a96:	f000 fae3 	bl	8004060 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a9a:	f000 fd97 	bl	80045cc <xTaskResumeAll>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f47f af7c 	bne.w	800399e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003aa6:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <xQueueGenericSend+0x1f8>)
 8003aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	e772      	b.n	800399e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aba:	f000 fad1 	bl	8004060 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003abe:	f000 fd85 	bl	80045cc <xTaskResumeAll>
 8003ac2:	e76c      	b.n	800399e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ac6:	f000 facb 	bl	8004060 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003aca:	f000 fd7f 	bl	80045cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ace:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3738      	adds	r7, #56	; 0x38
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	e000ed04 	.word	0xe000ed04

08003adc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08e      	sub	sp, #56	; 0x38
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af4:	f383 8811 	msr	BASEPRI, r3
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	623b      	str	r3, [r7, #32]
}
 8003b02:	bf00      	nop
 8003b04:	e7fe      	b.n	8003b04 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <xQueueGiveFromISR+0x48>
	__asm volatile
 8003b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b12:	f383 8811 	msr	BASEPRI, r3
 8003b16:	f3bf 8f6f 	isb	sy
 8003b1a:	f3bf 8f4f 	dsb	sy
 8003b1e:	61fb      	str	r3, [r7, #28]
}
 8003b20:	bf00      	nop
 8003b22:	e7fe      	b.n	8003b22 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d103      	bne.n	8003b34 <xQueueGiveFromISR+0x58>
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <xQueueGiveFromISR+0x5c>
 8003b34:	2301      	movs	r3, #1
 8003b36:	e000      	b.n	8003b3a <xQueueGiveFromISR+0x5e>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10a      	bne.n	8003b54 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b42:	f383 8811 	msr	BASEPRI, r3
 8003b46:	f3bf 8f6f 	isb	sy
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	61bb      	str	r3, [r7, #24]
}
 8003b50:	bf00      	nop
 8003b52:	e7fe      	b.n	8003b52 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b54:	f001 fcf8 	bl	8005548 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b58:	f3ef 8211 	mrs	r2, BASEPRI
 8003b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b60:	f383 8811 	msr	BASEPRI, r3
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	617a      	str	r2, [r7, #20]
 8003b6e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b70:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b72:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b78:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d22b      	bcs.n	8003bdc <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b94:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9e:	d112      	bne.n	8003bc6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d016      	beq.n	8003bd6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003baa:	3324      	adds	r3, #36	; 0x24
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 fee1 	bl	8004974 <xTaskRemoveFromEventList>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00e      	beq.n	8003bd6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00b      	beq.n	8003bd6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	e007      	b.n	8003bd6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bca:	3301      	adds	r3, #1
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	b25a      	sxtb	r2, r3
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8003bda:	e001      	b.n	8003be0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	637b      	str	r3, [r7, #52]	; 0x34
 8003be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003bea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3738      	adds	r7, #56	; 0x38
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08e      	sub	sp, #56	; 0x38
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c02:	2300      	movs	r3, #0
 8003c04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10a      	bne.n	8003c2a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	623b      	str	r3, [r7, #32]
}
 8003c26:	bf00      	nop
 8003c28:	e7fe      	b.n	8003c28 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c36:	f383 8811 	msr	BASEPRI, r3
 8003c3a:	f3bf 8f6f 	isb	sy
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	61fb      	str	r3, [r7, #28]
}
 8003c44:	bf00      	nop
 8003c46:	e7fe      	b.n	8003c46 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c48:	f001 f850 	bl	8004cec <xTaskGetSchedulerState>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d102      	bne.n	8003c58 <xQueueSemaphoreTake+0x60>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <xQueueSemaphoreTake+0x64>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <xQueueSemaphoreTake+0x66>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10a      	bne.n	8003c78 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	61bb      	str	r3, [r7, #24]
}
 8003c74:	bf00      	nop
 8003c76:	e7fe      	b.n	8003c76 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c78:	f001 fb84 	bl	8005384 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d024      	beq.n	8003cd2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8a:	1e5a      	subs	r2, r3, #1
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d104      	bne.n	8003ca2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003c98:	f001 f9d0 	bl	800503c <pvTaskIncrementMutexHeldCount>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00f      	beq.n	8003cca <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cac:	3310      	adds	r3, #16
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fe60 	bl	8004974 <xTaskRemoveFromEventList>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d007      	beq.n	8003cca <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003cba:	4b54      	ldr	r3, [pc, #336]	; (8003e0c <xQueueSemaphoreTake+0x214>)
 8003cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	f3bf 8f4f 	dsb	sy
 8003cc6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003cca:	f001 fb8b 	bl	80053e4 <vPortExitCritical>
				return pdPASS;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e097      	b.n	8003e02 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d111      	bne.n	8003cfc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce2:	f383 8811 	msr	BASEPRI, r3
 8003ce6:	f3bf 8f6f 	isb	sy
 8003cea:	f3bf 8f4f 	dsb	sy
 8003cee:	617b      	str	r3, [r7, #20]
}
 8003cf0:	bf00      	nop
 8003cf2:	e7fe      	b.n	8003cf2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003cf4:	f001 fb76 	bl	80053e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	e082      	b.n	8003e02 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d02:	f107 030c 	add.w	r3, r7, #12
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fe96 	bl	8004a38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d10:	f001 fb68 	bl	80053e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d14:	f000 fc4c 	bl	80045b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d18:	f001 fb34 	bl	8005384 <vPortEnterCritical>
 8003d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d22:	b25b      	sxtb	r3, r3
 8003d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d28:	d103      	bne.n	8003d32 <xQueueSemaphoreTake+0x13a>
 8003d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d38:	b25b      	sxtb	r3, r3
 8003d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3e:	d103      	bne.n	8003d48 <xQueueSemaphoreTake+0x150>
 8003d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d48:	f001 fb4c 	bl	80053e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d4c:	463a      	mov	r2, r7
 8003d4e:	f107 030c 	add.w	r3, r7, #12
 8003d52:	4611      	mov	r1, r2
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 fe85 	bl	8004a64 <xTaskCheckForTimeOut>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d132      	bne.n	8003dc6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d62:	f000 f9cf 	bl	8004104 <prvIsQueueEmpty>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d026      	beq.n	8003dba <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d109      	bne.n	8003d88 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003d74:	f001 fb06 	bl	8005384 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 ffd3 	bl	8004d28 <xTaskPriorityInherit>
 8003d82:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003d84:	f001 fb2e 	bl	80053e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8a:	3324      	adds	r3, #36	; 0x24
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	4611      	mov	r1, r2
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 fdcb 	bl	800492c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d98:	f000 f962 	bl	8004060 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d9c:	f000 fc16 	bl	80045cc <xTaskResumeAll>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f47f af68 	bne.w	8003c78 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003da8:	4b18      	ldr	r3, [pc, #96]	; (8003e0c <xQueueSemaphoreTake+0x214>)
 8003daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	e75e      	b.n	8003c78 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003dba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003dbc:	f000 f950 	bl	8004060 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dc0:	f000 fc04 	bl	80045cc <xTaskResumeAll>
 8003dc4:	e758      	b.n	8003c78 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003dc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003dc8:	f000 f94a 	bl	8004060 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dcc:	f000 fbfe 	bl	80045cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003dd2:	f000 f997 	bl	8004104 <prvIsQueueEmpty>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f43f af4d 	beq.w	8003c78 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00d      	beq.n	8003e00 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003de4:	f001 face 	bl	8005384 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003de8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003dea:	f000 f891 	bl	8003f10 <prvGetDisinheritPriorityAfterTimeout>
 8003dee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003df6:	4618      	mov	r0, r3
 8003df8:	f001 f892 	bl	8004f20 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003dfc:	f001 faf2 	bl	80053e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3738      	adds	r7, #56	; 0x38
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	e000ed04 	.word	0xe000ed04

08003e10 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08e      	sub	sp, #56	; 0x38
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10a      	bne.n	8003e3c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	623b      	str	r3, [r7, #32]
}
 8003e38:	bf00      	nop
 8003e3a:	e7fe      	b.n	8003e3a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d103      	bne.n	8003e4a <xQueueReceiveFromISR+0x3a>
 8003e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <xQueueReceiveFromISR+0x3e>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e000      	b.n	8003e50 <xQueueReceiveFromISR+0x40>
 8003e4e:	2300      	movs	r3, #0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10a      	bne.n	8003e6a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e58:	f383 8811 	msr	BASEPRI, r3
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	61fb      	str	r3, [r7, #28]
}
 8003e66:	bf00      	nop
 8003e68:	e7fe      	b.n	8003e68 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e6a:	f001 fb6d 	bl	8005548 <vPortValidateInterruptPriority>
	__asm volatile
 8003e6e:	f3ef 8211 	mrs	r2, BASEPRI
 8003e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e76:	f383 8811 	msr	BASEPRI, r3
 8003e7a:	f3bf 8f6f 	isb	sy
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	61ba      	str	r2, [r7, #24]
 8003e84:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003e86:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d02f      	beq.n	8003ef6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ea0:	68b9      	ldr	r1, [r7, #8]
 8003ea2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ea4:	f000 f8b6 	bl	8004014 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eaa:	1e5a      	subs	r2, r3, #1
 8003eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003eb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb8:	d112      	bne.n	8003ee0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d016      	beq.n	8003ef0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec4:	3310      	adds	r3, #16
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fd54 	bl	8004974 <xTaskRemoveFromEventList>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00e      	beq.n	8003ef0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00b      	beq.n	8003ef0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	e007      	b.n	8003ef0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	b25a      	sxtb	r2, r3
 8003eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ef4:	e001      	b.n	8003efa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8003efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	f383 8811 	msr	BASEPRI, r3
}
 8003f04:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3738      	adds	r7, #56	; 0x38
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d006      	beq.n	8003f2e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f1c3 0307 	rsb	r3, r3, #7
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	e001      	b.n	8003f32 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003f32:	68fb      	ldr	r3, [r7, #12]
	}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10d      	bne.n	8003f7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d14d      	bne.n	8004002 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 ff52 	bl	8004e14 <xTaskPriorityDisinherit>
 8003f70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	609a      	str	r2, [r3, #8]
 8003f78:	e043      	b.n	8004002 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d119      	bne.n	8003fb4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6858      	ldr	r0, [r3, #4]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	461a      	mov	r2, r3
 8003f8a:	68b9      	ldr	r1, [r7, #8]
 8003f8c:	f001 fe99 	bl	8005cc2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	441a      	add	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d32b      	bcc.n	8004002 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	e026      	b.n	8004002 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	68d8      	ldr	r0, [r3, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	68b9      	ldr	r1, [r7, #8]
 8003fc0:	f001 fe7f 	bl	8005cc2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	425b      	negs	r3, r3
 8003fce:	441a      	add	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d207      	bcs.n	8003ff0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	425b      	negs	r3, r3
 8003fea:	441a      	add	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d105      	bne.n	8004002 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d002      	beq.n	8004002 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800400a:	697b      	ldr	r3, [r7, #20]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	2b00      	cmp	r3, #0
 8004024:	d018      	beq.n	8004058 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	441a      	add	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	429a      	cmp	r2, r3
 800403e:	d303      	bcc.n	8004048 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68d9      	ldr	r1, [r3, #12]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	461a      	mov	r2, r3
 8004052:	6838      	ldr	r0, [r7, #0]
 8004054:	f001 fe35 	bl	8005cc2 <memcpy>
	}
}
 8004058:	bf00      	nop
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004068:	f001 f98c 	bl	8005384 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004072:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004074:	e011      	b.n	800409a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	2b00      	cmp	r3, #0
 800407c:	d012      	beq.n	80040a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3324      	adds	r3, #36	; 0x24
 8004082:	4618      	mov	r0, r3
 8004084:	f000 fc76 	bl	8004974 <xTaskRemoveFromEventList>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800408e:	f000 fd4b 	bl	8004b28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004092:	7bfb      	ldrb	r3, [r7, #15]
 8004094:	3b01      	subs	r3, #1
 8004096:	b2db      	uxtb	r3, r3
 8004098:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800409a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	dce9      	bgt.n	8004076 <prvUnlockQueue+0x16>
 80040a2:	e000      	b.n	80040a6 <prvUnlockQueue+0x46>
					break;
 80040a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	22ff      	movs	r2, #255	; 0xff
 80040aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80040ae:	f001 f999 	bl	80053e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80040b2:	f001 f967 	bl	8005384 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040be:	e011      	b.n	80040e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d012      	beq.n	80040ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3310      	adds	r3, #16
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 fc51 	bl	8004974 <xTaskRemoveFromEventList>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040d8:	f000 fd26 	bl	8004b28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040dc:	7bbb      	ldrb	r3, [r7, #14]
 80040de:	3b01      	subs	r3, #1
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	dce9      	bgt.n	80040c0 <prvUnlockQueue+0x60>
 80040ec:	e000      	b.n	80040f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80040ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	22ff      	movs	r2, #255	; 0xff
 80040f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80040f8:	f001 f974 	bl	80053e4 <vPortExitCritical>
}
 80040fc:	bf00      	nop
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800410c:	f001 f93a 	bl	8005384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004114:	2b00      	cmp	r3, #0
 8004116:	d102      	bne.n	800411e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004118:	2301      	movs	r3, #1
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	e001      	b.n	8004122 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004122:	f001 f95f 	bl	80053e4 <vPortExitCritical>

	return xReturn;
 8004126:	68fb      	ldr	r3, [r7, #12]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004138:	f001 f924 	bl	8005384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004144:	429a      	cmp	r2, r3
 8004146:	d102      	bne.n	800414e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004148:	2301      	movs	r3, #1
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	e001      	b.n	8004152 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004152:	f001 f947 	bl	80053e4 <vPortExitCritical>

	return xReturn;
 8004156:	68fb      	ldr	r3, [r7, #12]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004160:	b580      	push	{r7, lr}
 8004162:	b08e      	sub	sp, #56	; 0x38
 8004164:	af04      	add	r7, sp, #16
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800416e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10a      	bne.n	800418a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	623b      	str	r3, [r7, #32]
}
 8004186:	bf00      	nop
 8004188:	e7fe      	b.n	8004188 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800418a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10a      	bne.n	80041a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	61fb      	str	r3, [r7, #28]
}
 80041a2:	bf00      	nop
 80041a4:	e7fe      	b.n	80041a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80041a6:	2354      	movs	r3, #84	; 0x54
 80041a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	2b54      	cmp	r3, #84	; 0x54
 80041ae:	d00a      	beq.n	80041c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	61bb      	str	r3, [r7, #24]
}
 80041c2:	bf00      	nop
 80041c4:	e7fe      	b.n	80041c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d01e      	beq.n	800420c <xTaskCreateStatic+0xac>
 80041ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01b      	beq.n	800420c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	2202      	movs	r2, #2
 80041e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041e6:	2300      	movs	r3, #0
 80041e8:	9303      	str	r3, [sp, #12]
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	9302      	str	r3, [sp, #8]
 80041ee:	f107 0314 	add.w	r3, r7, #20
 80041f2:	9301      	str	r3, [sp, #4]
 80041f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	68b9      	ldr	r1, [r7, #8]
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 f850 	bl	80042a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004204:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004206:	f000 f8d5 	bl	80043b4 <prvAddNewTaskToReadyList>
 800420a:	e001      	b.n	8004210 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800420c:	2300      	movs	r3, #0
 800420e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004210:	697b      	ldr	r3, [r7, #20]
	}
 8004212:	4618      	mov	r0, r3
 8004214:	3728      	adds	r7, #40	; 0x28
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800421a:	b580      	push	{r7, lr}
 800421c:	b08c      	sub	sp, #48	; 0x30
 800421e:	af04      	add	r7, sp, #16
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	603b      	str	r3, [r7, #0]
 8004226:	4613      	mov	r3, r2
 8004228:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800422a:	88fb      	ldrh	r3, [r7, #6]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4618      	mov	r0, r3
 8004230:	f001 f9ca 	bl	80055c8 <pvPortMalloc>
 8004234:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00e      	beq.n	800425a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800423c:	2054      	movs	r0, #84	; 0x54
 800423e:	f001 f9c3 	bl	80055c8 <pvPortMalloc>
 8004242:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	631a      	str	r2, [r3, #48]	; 0x30
 8004250:	e005      	b.n	800425e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004252:	6978      	ldr	r0, [r7, #20]
 8004254:	f001 fa84 	bl	8005760 <vPortFree>
 8004258:	e001      	b.n	800425e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800425a:	2300      	movs	r3, #0
 800425c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d017      	beq.n	8004294 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800426c:	88fa      	ldrh	r2, [r7, #6]
 800426e:	2300      	movs	r3, #0
 8004270:	9303      	str	r3, [sp, #12]
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	9302      	str	r3, [sp, #8]
 8004276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004278:	9301      	str	r3, [sp, #4]
 800427a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 f80e 	bl	80042a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004288:	69f8      	ldr	r0, [r7, #28]
 800428a:	f000 f893 	bl	80043b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800428e:	2301      	movs	r3, #1
 8004290:	61bb      	str	r3, [r7, #24]
 8004292:	e002      	b.n	800429a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004294:	f04f 33ff 	mov.w	r3, #4294967295
 8004298:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800429a:	69bb      	ldr	r3, [r7, #24]
	}
 800429c:	4618      	mov	r0, r3
 800429e:	3720      	adds	r7, #32
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
 80042b0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042bc:	3b01      	subs	r3, #1
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	f023 0307 	bic.w	r3, r3, #7
 80042ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <prvInitialiseNewTask+0x48>
	__asm volatile
 80042d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042da:	f383 8811 	msr	BASEPRI, r3
 80042de:	f3bf 8f6f 	isb	sy
 80042e2:	f3bf 8f4f 	dsb	sy
 80042e6:	617b      	str	r3, [r7, #20]
}
 80042e8:	bf00      	nop
 80042ea:	e7fe      	b.n	80042ea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d01f      	beq.n	8004332 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042f2:	2300      	movs	r3, #0
 80042f4:	61fb      	str	r3, [r7, #28]
 80042f6:	e012      	b.n	800431e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	4413      	add	r3, r2
 80042fe:	7819      	ldrb	r1, [r3, #0]
 8004300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	4413      	add	r3, r2
 8004306:	3334      	adds	r3, #52	; 0x34
 8004308:	460a      	mov	r2, r1
 800430a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	4413      	add	r3, r2
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d006      	beq.n	8004326 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	3301      	adds	r3, #1
 800431c:	61fb      	str	r3, [r7, #28]
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	2b0f      	cmp	r3, #15
 8004322:	d9e9      	bls.n	80042f8 <prvInitialiseNewTask+0x54>
 8004324:	e000      	b.n	8004328 <prvInitialiseNewTask+0x84>
			{
				break;
 8004326:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004330:	e003      	b.n	800433a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433c:	2b06      	cmp	r3, #6
 800433e:	d901      	bls.n	8004344 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004340:	2306      	movs	r3, #6
 8004342:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004348:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800434e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004352:	2200      	movs	r2, #0
 8004354:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	3304      	adds	r3, #4
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff f8a6 	bl	80034ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004362:	3318      	adds	r3, #24
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff f8a1 	bl	80034ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800436e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004372:	f1c3 0207 	rsb	r2, r3, #7
 8004376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004378:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800437a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800437e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004382:	2200      	movs	r2, #0
 8004384:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	68f9      	ldr	r1, [r7, #12]
 8004392:	69b8      	ldr	r0, [r7, #24]
 8004394:	f000 fecc 	bl	8005130 <pxPortInitialiseStack>
 8004398:	4602      	mov	r2, r0
 800439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800439e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d002      	beq.n	80043aa <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043aa:	bf00      	nop
 80043ac:	3720      	adds	r7, #32
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043bc:	f000 ffe2 	bl	8005384 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043c0:	4b2a      	ldr	r3, [pc, #168]	; (800446c <prvAddNewTaskToReadyList+0xb8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3301      	adds	r3, #1
 80043c6:	4a29      	ldr	r2, [pc, #164]	; (800446c <prvAddNewTaskToReadyList+0xb8>)
 80043c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043ca:	4b29      	ldr	r3, [pc, #164]	; (8004470 <prvAddNewTaskToReadyList+0xbc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d109      	bne.n	80043e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043d2:	4a27      	ldr	r2, [pc, #156]	; (8004470 <prvAddNewTaskToReadyList+0xbc>)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043d8:	4b24      	ldr	r3, [pc, #144]	; (800446c <prvAddNewTaskToReadyList+0xb8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d110      	bne.n	8004402 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80043e0:	f000 fbc6 	bl	8004b70 <prvInitialiseTaskLists>
 80043e4:	e00d      	b.n	8004402 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80043e6:	4b23      	ldr	r3, [pc, #140]	; (8004474 <prvAddNewTaskToReadyList+0xc0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043ee:	4b20      	ldr	r3, [pc, #128]	; (8004470 <prvAddNewTaskToReadyList+0xbc>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d802      	bhi.n	8004402 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043fc:	4a1c      	ldr	r2, [pc, #112]	; (8004470 <prvAddNewTaskToReadyList+0xbc>)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004402:	4b1d      	ldr	r3, [pc, #116]	; (8004478 <prvAddNewTaskToReadyList+0xc4>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	3301      	adds	r3, #1
 8004408:	4a1b      	ldr	r2, [pc, #108]	; (8004478 <prvAddNewTaskToReadyList+0xc4>)
 800440a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004410:	2201      	movs	r2, #1
 8004412:	409a      	lsls	r2, r3
 8004414:	4b19      	ldr	r3, [pc, #100]	; (800447c <prvAddNewTaskToReadyList+0xc8>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4313      	orrs	r3, r2
 800441a:	4a18      	ldr	r2, [pc, #96]	; (800447c <prvAddNewTaskToReadyList+0xc8>)
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004422:	4613      	mov	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4a15      	ldr	r2, [pc, #84]	; (8004480 <prvAddNewTaskToReadyList+0xcc>)
 800442c:	441a      	add	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	3304      	adds	r3, #4
 8004432:	4619      	mov	r1, r3
 8004434:	4610      	mov	r0, r2
 8004436:	f7ff f846 	bl	80034c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800443a:	f000 ffd3 	bl	80053e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800443e:	4b0d      	ldr	r3, [pc, #52]	; (8004474 <prvAddNewTaskToReadyList+0xc0>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00e      	beq.n	8004464 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004446:	4b0a      	ldr	r3, [pc, #40]	; (8004470 <prvAddNewTaskToReadyList+0xbc>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	429a      	cmp	r2, r3
 8004452:	d207      	bcs.n	8004464 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004454:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <prvAddNewTaskToReadyList+0xd0>)
 8004456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004464:	bf00      	nop
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	20000480 	.word	0x20000480
 8004470:	20000380 	.word	0x20000380
 8004474:	2000048c 	.word	0x2000048c
 8004478:	2000049c 	.word	0x2000049c
 800447c:	20000488 	.word	0x20000488
 8004480:	20000384 	.word	0x20000384
 8004484:	e000ed04 	.word	0xe000ed04

08004488 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004490:	2300      	movs	r3, #0
 8004492:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d017      	beq.n	80044ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800449a:	4b13      	ldr	r3, [pc, #76]	; (80044e8 <vTaskDelay+0x60>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <vTaskDelay+0x30>
	__asm volatile
 80044a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a6:	f383 8811 	msr	BASEPRI, r3
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	60bb      	str	r3, [r7, #8]
}
 80044b4:	bf00      	nop
 80044b6:	e7fe      	b.n	80044b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80044b8:	f000 f87a 	bl	80045b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044bc:	2100      	movs	r1, #0
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fdd0 	bl	8005064 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80044c4:	f000 f882 	bl	80045cc <xTaskResumeAll>
 80044c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d107      	bne.n	80044e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80044d0:	4b06      	ldr	r3, [pc, #24]	; (80044ec <vTaskDelay+0x64>)
 80044d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044e0:	bf00      	nop
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	200004a8 	.word	0x200004a8
 80044ec:	e000ed04 	.word	0xe000ed04

080044f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08a      	sub	sp, #40	; 0x28
 80044f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044fe:	463a      	mov	r2, r7
 8004500:	1d39      	adds	r1, r7, #4
 8004502:	f107 0308 	add.w	r3, r7, #8
 8004506:	4618      	mov	r0, r3
 8004508:	f7fc f830 	bl	800056c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800450c:	6839      	ldr	r1, [r7, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	9202      	str	r2, [sp, #8]
 8004514:	9301      	str	r3, [sp, #4]
 8004516:	2300      	movs	r3, #0
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	2300      	movs	r3, #0
 800451c:	460a      	mov	r2, r1
 800451e:	491e      	ldr	r1, [pc, #120]	; (8004598 <vTaskStartScheduler+0xa8>)
 8004520:	481e      	ldr	r0, [pc, #120]	; (800459c <vTaskStartScheduler+0xac>)
 8004522:	f7ff fe1d 	bl	8004160 <xTaskCreateStatic>
 8004526:	4603      	mov	r3, r0
 8004528:	4a1d      	ldr	r2, [pc, #116]	; (80045a0 <vTaskStartScheduler+0xb0>)
 800452a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800452c:	4b1c      	ldr	r3, [pc, #112]	; (80045a0 <vTaskStartScheduler+0xb0>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004534:	2301      	movs	r3, #1
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	e001      	b.n	800453e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800453a:	2300      	movs	r3, #0
 800453c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d116      	bne.n	8004572 <vTaskStartScheduler+0x82>
	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	613b      	str	r3, [r7, #16]
}
 8004556:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004558:	4b12      	ldr	r3, [pc, #72]	; (80045a4 <vTaskStartScheduler+0xb4>)
 800455a:	f04f 32ff 	mov.w	r2, #4294967295
 800455e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004560:	4b11      	ldr	r3, [pc, #68]	; (80045a8 <vTaskStartScheduler+0xb8>)
 8004562:	2201      	movs	r2, #1
 8004564:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004566:	4b11      	ldr	r3, [pc, #68]	; (80045ac <vTaskStartScheduler+0xbc>)
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800456c:	f000 fe68 	bl	8005240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004570:	e00e      	b.n	8004590 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004578:	d10a      	bne.n	8004590 <vTaskStartScheduler+0xa0>
	__asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	60fb      	str	r3, [r7, #12]
}
 800458c:	bf00      	nop
 800458e:	e7fe      	b.n	800458e <vTaskStartScheduler+0x9e>
}
 8004590:	bf00      	nop
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	080068c0 	.word	0x080068c0
 800459c:	08004b41 	.word	0x08004b41
 80045a0:	200004a4 	.word	0x200004a4
 80045a4:	200004a0 	.word	0x200004a0
 80045a8:	2000048c 	.word	0x2000048c
 80045ac:	20000484 	.word	0x20000484

080045b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80045b4:	4b04      	ldr	r3, [pc, #16]	; (80045c8 <vTaskSuspendAll+0x18>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3301      	adds	r3, #1
 80045ba:	4a03      	ldr	r2, [pc, #12]	; (80045c8 <vTaskSuspendAll+0x18>)
 80045bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80045be:	bf00      	nop
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	200004a8 	.word	0x200004a8

080045cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045d6:	2300      	movs	r3, #0
 80045d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045da:	4b41      	ldr	r3, [pc, #260]	; (80046e0 <xTaskResumeAll+0x114>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10a      	bne.n	80045f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80045e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e6:	f383 8811 	msr	BASEPRI, r3
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	603b      	str	r3, [r7, #0]
}
 80045f4:	bf00      	nop
 80045f6:	e7fe      	b.n	80045f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045f8:	f000 fec4 	bl	8005384 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045fc:	4b38      	ldr	r3, [pc, #224]	; (80046e0 <xTaskResumeAll+0x114>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3b01      	subs	r3, #1
 8004602:	4a37      	ldr	r2, [pc, #220]	; (80046e0 <xTaskResumeAll+0x114>)
 8004604:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004606:	4b36      	ldr	r3, [pc, #216]	; (80046e0 <xTaskResumeAll+0x114>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d161      	bne.n	80046d2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800460e:	4b35      	ldr	r3, [pc, #212]	; (80046e4 <xTaskResumeAll+0x118>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d05d      	beq.n	80046d2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004616:	e02e      	b.n	8004676 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004618:	4b33      	ldr	r3, [pc, #204]	; (80046e8 <xTaskResumeAll+0x11c>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	3318      	adds	r3, #24
 8004624:	4618      	mov	r0, r3
 8004626:	f7fe ffab 	bl	8003580 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3304      	adds	r3, #4
 800462e:	4618      	mov	r0, r3
 8004630:	f7fe ffa6 	bl	8003580 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	2201      	movs	r2, #1
 800463a:	409a      	lsls	r2, r3
 800463c:	4b2b      	ldr	r3, [pc, #172]	; (80046ec <xTaskResumeAll+0x120>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4313      	orrs	r3, r2
 8004642:	4a2a      	ldr	r2, [pc, #168]	; (80046ec <xTaskResumeAll+0x120>)
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464a:	4613      	mov	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4a27      	ldr	r2, [pc, #156]	; (80046f0 <xTaskResumeAll+0x124>)
 8004654:	441a      	add	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	3304      	adds	r3, #4
 800465a:	4619      	mov	r1, r3
 800465c:	4610      	mov	r0, r2
 800465e:	f7fe ff32 	bl	80034c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004666:	4b23      	ldr	r3, [pc, #140]	; (80046f4 <xTaskResumeAll+0x128>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466c:	429a      	cmp	r2, r3
 800466e:	d302      	bcc.n	8004676 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004670:	4b21      	ldr	r3, [pc, #132]	; (80046f8 <xTaskResumeAll+0x12c>)
 8004672:	2201      	movs	r2, #1
 8004674:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004676:	4b1c      	ldr	r3, [pc, #112]	; (80046e8 <xTaskResumeAll+0x11c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1cc      	bne.n	8004618 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004684:	f000 fb12 	bl	8004cac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004688:	4b1c      	ldr	r3, [pc, #112]	; (80046fc <xTaskResumeAll+0x130>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d010      	beq.n	80046b6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004694:	f000 f836 	bl	8004704 <xTaskIncrementTick>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800469e:	4b16      	ldr	r3, [pc, #88]	; (80046f8 <xTaskResumeAll+0x12c>)
 80046a0:	2201      	movs	r2, #1
 80046a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1f1      	bne.n	8004694 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80046b0:	4b12      	ldr	r3, [pc, #72]	; (80046fc <xTaskResumeAll+0x130>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80046b6:	4b10      	ldr	r3, [pc, #64]	; (80046f8 <xTaskResumeAll+0x12c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d009      	beq.n	80046d2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80046be:	2301      	movs	r3, #1
 80046c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80046c2:	4b0f      	ldr	r3, [pc, #60]	; (8004700 <xTaskResumeAll+0x134>)
 80046c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046d2:	f000 fe87 	bl	80053e4 <vPortExitCritical>

	return xAlreadyYielded;
 80046d6:	68bb      	ldr	r3, [r7, #8]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	200004a8 	.word	0x200004a8
 80046e4:	20000480 	.word	0x20000480
 80046e8:	20000440 	.word	0x20000440
 80046ec:	20000488 	.word	0x20000488
 80046f0:	20000384 	.word	0x20000384
 80046f4:	20000380 	.word	0x20000380
 80046f8:	20000494 	.word	0x20000494
 80046fc:	20000490 	.word	0x20000490
 8004700:	e000ed04 	.word	0xe000ed04

08004704 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800470a:	2300      	movs	r3, #0
 800470c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800470e:	4b4e      	ldr	r3, [pc, #312]	; (8004848 <xTaskIncrementTick+0x144>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	f040 808e 	bne.w	8004834 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004718:	4b4c      	ldr	r3, [pc, #304]	; (800484c <xTaskIncrementTick+0x148>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3301      	adds	r3, #1
 800471e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004720:	4a4a      	ldr	r2, [pc, #296]	; (800484c <xTaskIncrementTick+0x148>)
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d120      	bne.n	800476e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800472c:	4b48      	ldr	r3, [pc, #288]	; (8004850 <xTaskIncrementTick+0x14c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <xTaskIncrementTick+0x48>
	__asm volatile
 8004736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	603b      	str	r3, [r7, #0]
}
 8004748:	bf00      	nop
 800474a:	e7fe      	b.n	800474a <xTaskIncrementTick+0x46>
 800474c:	4b40      	ldr	r3, [pc, #256]	; (8004850 <xTaskIncrementTick+0x14c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	4b40      	ldr	r3, [pc, #256]	; (8004854 <xTaskIncrementTick+0x150>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a3e      	ldr	r2, [pc, #248]	; (8004850 <xTaskIncrementTick+0x14c>)
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	4a3e      	ldr	r2, [pc, #248]	; (8004854 <xTaskIncrementTick+0x150>)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	4b3d      	ldr	r3, [pc, #244]	; (8004858 <xTaskIncrementTick+0x154>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3301      	adds	r3, #1
 8004766:	4a3c      	ldr	r2, [pc, #240]	; (8004858 <xTaskIncrementTick+0x154>)
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	f000 fa9f 	bl	8004cac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800476e:	4b3b      	ldr	r3, [pc, #236]	; (800485c <xTaskIncrementTick+0x158>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	429a      	cmp	r2, r3
 8004776:	d348      	bcc.n	800480a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004778:	4b35      	ldr	r3, [pc, #212]	; (8004850 <xTaskIncrementTick+0x14c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d104      	bne.n	800478c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004782:	4b36      	ldr	r3, [pc, #216]	; (800485c <xTaskIncrementTick+0x158>)
 8004784:	f04f 32ff 	mov.w	r2, #4294967295
 8004788:	601a      	str	r2, [r3, #0]
					break;
 800478a:	e03e      	b.n	800480a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800478c:	4b30      	ldr	r3, [pc, #192]	; (8004850 <xTaskIncrementTick+0x14c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d203      	bcs.n	80047ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80047a4:	4a2d      	ldr	r2, [pc, #180]	; (800485c <xTaskIncrementTick+0x158>)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80047aa:	e02e      	b.n	800480a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	3304      	adds	r3, #4
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fe fee5 	bl	8003580 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d004      	beq.n	80047c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	3318      	adds	r3, #24
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fe fedc 	bl	8003580 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	2201      	movs	r2, #1
 80047ce:	409a      	lsls	r2, r3
 80047d0:	4b23      	ldr	r3, [pc, #140]	; (8004860 <xTaskIncrementTick+0x15c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	4a22      	ldr	r2, [pc, #136]	; (8004860 <xTaskIncrementTick+0x15c>)
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047de:	4613      	mov	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4a1f      	ldr	r2, [pc, #124]	; (8004864 <xTaskIncrementTick+0x160>)
 80047e8:	441a      	add	r2, r3
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	3304      	adds	r3, #4
 80047ee:	4619      	mov	r1, r3
 80047f0:	4610      	mov	r0, r2
 80047f2:	f7fe fe68 	bl	80034c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047fa:	4b1b      	ldr	r3, [pc, #108]	; (8004868 <xTaskIncrementTick+0x164>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004800:	429a      	cmp	r2, r3
 8004802:	d3b9      	bcc.n	8004778 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004804:	2301      	movs	r3, #1
 8004806:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004808:	e7b6      	b.n	8004778 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800480a:	4b17      	ldr	r3, [pc, #92]	; (8004868 <xTaskIncrementTick+0x164>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004810:	4914      	ldr	r1, [pc, #80]	; (8004864 <xTaskIncrementTick+0x160>)
 8004812:	4613      	mov	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4413      	add	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	440b      	add	r3, r1
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d901      	bls.n	8004826 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004822:	2301      	movs	r3, #1
 8004824:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004826:	4b11      	ldr	r3, [pc, #68]	; (800486c <xTaskIncrementTick+0x168>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d007      	beq.n	800483e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800482e:	2301      	movs	r3, #1
 8004830:	617b      	str	r3, [r7, #20]
 8004832:	e004      	b.n	800483e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004834:	4b0e      	ldr	r3, [pc, #56]	; (8004870 <xTaskIncrementTick+0x16c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3301      	adds	r3, #1
 800483a:	4a0d      	ldr	r2, [pc, #52]	; (8004870 <xTaskIncrementTick+0x16c>)
 800483c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800483e:	697b      	ldr	r3, [r7, #20]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	200004a8 	.word	0x200004a8
 800484c:	20000484 	.word	0x20000484
 8004850:	20000438 	.word	0x20000438
 8004854:	2000043c 	.word	0x2000043c
 8004858:	20000498 	.word	0x20000498
 800485c:	200004a0 	.word	0x200004a0
 8004860:	20000488 	.word	0x20000488
 8004864:	20000384 	.word	0x20000384
 8004868:	20000380 	.word	0x20000380
 800486c:	20000494 	.word	0x20000494
 8004870:	20000490 	.word	0x20000490

08004874 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800487a:	4b27      	ldr	r3, [pc, #156]	; (8004918 <vTaskSwitchContext+0xa4>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004882:	4b26      	ldr	r3, [pc, #152]	; (800491c <vTaskSwitchContext+0xa8>)
 8004884:	2201      	movs	r2, #1
 8004886:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004888:	e03f      	b.n	800490a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800488a:	4b24      	ldr	r3, [pc, #144]	; (800491c <vTaskSwitchContext+0xa8>)
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004890:	4b23      	ldr	r3, [pc, #140]	; (8004920 <vTaskSwitchContext+0xac>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	fab3 f383 	clz	r3, r3
 800489c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800489e:	7afb      	ldrb	r3, [r7, #11]
 80048a0:	f1c3 031f 	rsb	r3, r3, #31
 80048a4:	617b      	str	r3, [r7, #20]
 80048a6:	491f      	ldr	r1, [pc, #124]	; (8004924 <vTaskSwitchContext+0xb0>)
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	4613      	mov	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	440b      	add	r3, r1
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10a      	bne.n	80048d0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80048ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	607b      	str	r3, [r7, #4]
}
 80048cc:	bf00      	nop
 80048ce:	e7fe      	b.n	80048ce <vTaskSwitchContext+0x5a>
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4a12      	ldr	r2, [pc, #72]	; (8004924 <vTaskSwitchContext+0xb0>)
 80048dc:	4413      	add	r3, r2
 80048de:	613b      	str	r3, [r7, #16]
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	605a      	str	r2, [r3, #4]
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	3308      	adds	r3, #8
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d104      	bne.n	8004900 <vTaskSwitchContext+0x8c>
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	605a      	str	r2, [r3, #4]
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	4a08      	ldr	r2, [pc, #32]	; (8004928 <vTaskSwitchContext+0xb4>)
 8004908:	6013      	str	r3, [r2, #0]
}
 800490a:	bf00      	nop
 800490c:	371c      	adds	r7, #28
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	200004a8 	.word	0x200004a8
 800491c:	20000494 	.word	0x20000494
 8004920:	20000488 	.word	0x20000488
 8004924:	20000384 	.word	0x20000384
 8004928:	20000380 	.word	0x20000380

0800492c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10a      	bne.n	8004952 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800493c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004940:	f383 8811 	msr	BASEPRI, r3
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	60fb      	str	r3, [r7, #12]
}
 800494e:	bf00      	nop
 8004950:	e7fe      	b.n	8004950 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004952:	4b07      	ldr	r3, [pc, #28]	; (8004970 <vTaskPlaceOnEventList+0x44>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3318      	adds	r3, #24
 8004958:	4619      	mov	r1, r3
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7fe fdd7 	bl	800350e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004960:	2101      	movs	r1, #1
 8004962:	6838      	ldr	r0, [r7, #0]
 8004964:	f000 fb7e 	bl	8005064 <prvAddCurrentTaskToDelayedList>
}
 8004968:	bf00      	nop
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	20000380 	.word	0x20000380

08004974 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10a      	bne.n	80049a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	60fb      	str	r3, [r7, #12]
}
 800499c:	bf00      	nop
 800499e:	e7fe      	b.n	800499e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	3318      	adds	r3, #24
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fe fdeb 	bl	8003580 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049aa:	4b1d      	ldr	r3, [pc, #116]	; (8004a20 <xTaskRemoveFromEventList+0xac>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d11c      	bne.n	80049ec <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	3304      	adds	r3, #4
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fe fde2 	bl	8003580 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c0:	2201      	movs	r2, #1
 80049c2:	409a      	lsls	r2, r3
 80049c4:	4b17      	ldr	r3, [pc, #92]	; (8004a24 <xTaskRemoveFromEventList+0xb0>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	4a16      	ldr	r2, [pc, #88]	; (8004a24 <xTaskRemoveFromEventList+0xb0>)
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d2:	4613      	mov	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4a13      	ldr	r2, [pc, #76]	; (8004a28 <xTaskRemoveFromEventList+0xb4>)
 80049dc:	441a      	add	r2, r3
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	3304      	adds	r3, #4
 80049e2:	4619      	mov	r1, r3
 80049e4:	4610      	mov	r0, r2
 80049e6:	f7fe fd6e 	bl	80034c6 <vListInsertEnd>
 80049ea:	e005      	b.n	80049f8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	3318      	adds	r3, #24
 80049f0:	4619      	mov	r1, r3
 80049f2:	480e      	ldr	r0, [pc, #56]	; (8004a2c <xTaskRemoveFromEventList+0xb8>)
 80049f4:	f7fe fd67 	bl	80034c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fc:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <xTaskRemoveFromEventList+0xbc>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d905      	bls.n	8004a12 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a06:	2301      	movs	r3, #1
 8004a08:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a0a:	4b0a      	ldr	r3, [pc, #40]	; (8004a34 <xTaskRemoveFromEventList+0xc0>)
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	e001      	b.n	8004a16 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004a12:	2300      	movs	r3, #0
 8004a14:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a16:	697b      	ldr	r3, [r7, #20]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	200004a8 	.word	0x200004a8
 8004a24:	20000488 	.word	0x20000488
 8004a28:	20000384 	.word	0x20000384
 8004a2c:	20000440 	.word	0x20000440
 8004a30:	20000380 	.word	0x20000380
 8004a34:	20000494 	.word	0x20000494

08004a38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a40:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <vTaskInternalSetTimeOutState+0x24>)
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a48:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <vTaskInternalSetTimeOutState+0x28>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	605a      	str	r2, [r3, #4]
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	20000498 	.word	0x20000498
 8004a60:	20000484 	.word	0x20000484

08004a64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10a      	bne.n	8004a8a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	613b      	str	r3, [r7, #16]
}
 8004a86:	bf00      	nop
 8004a88:	e7fe      	b.n	8004a88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10a      	bne.n	8004aa6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	60fb      	str	r3, [r7, #12]
}
 8004aa2:	bf00      	nop
 8004aa4:	e7fe      	b.n	8004aa4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004aa6:	f000 fc6d 	bl	8005384 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004aaa:	4b1d      	ldr	r3, [pc, #116]	; (8004b20 <xTaskCheckForTimeOut+0xbc>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac2:	d102      	bne.n	8004aca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	61fb      	str	r3, [r7, #28]
 8004ac8:	e023      	b.n	8004b12 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	4b15      	ldr	r3, [pc, #84]	; (8004b24 <xTaskCheckForTimeOut+0xc0>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d007      	beq.n	8004ae6 <xTaskCheckForTimeOut+0x82>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d302      	bcc.n	8004ae6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	61fb      	str	r3, [r7, #28]
 8004ae4:	e015      	b.n	8004b12 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d20b      	bcs.n	8004b08 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	1ad2      	subs	r2, r2, r3
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7ff ff9b 	bl	8004a38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b02:	2300      	movs	r3, #0
 8004b04:	61fb      	str	r3, [r7, #28]
 8004b06:	e004      	b.n	8004b12 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b12:	f000 fc67 	bl	80053e4 <vPortExitCritical>

	return xReturn;
 8004b16:	69fb      	ldr	r3, [r7, #28]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3720      	adds	r7, #32
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	20000484 	.word	0x20000484
 8004b24:	20000498 	.word	0x20000498

08004b28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b2c:	4b03      	ldr	r3, [pc, #12]	; (8004b3c <vTaskMissedYield+0x14>)
 8004b2e:	2201      	movs	r2, #1
 8004b30:	601a      	str	r2, [r3, #0]
}
 8004b32:	bf00      	nop
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	20000494 	.word	0x20000494

08004b40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b48:	f000 f852 	bl	8004bf0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b4c:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <prvIdleTask+0x28>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d9f9      	bls.n	8004b48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b54:	4b05      	ldr	r3, [pc, #20]	; (8004b6c <prvIdleTask+0x2c>)
 8004b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b64:	e7f0      	b.n	8004b48 <prvIdleTask+0x8>
 8004b66:	bf00      	nop
 8004b68:	20000384 	.word	0x20000384
 8004b6c:	e000ed04 	.word	0xe000ed04

08004b70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b76:	2300      	movs	r3, #0
 8004b78:	607b      	str	r3, [r7, #4]
 8004b7a:	e00c      	b.n	8004b96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4a12      	ldr	r2, [pc, #72]	; (8004bd0 <prvInitialiseTaskLists+0x60>)
 8004b88:	4413      	add	r3, r2
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fe fc6e 	bl	800346c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3301      	adds	r3, #1
 8004b94:	607b      	str	r3, [r7, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b06      	cmp	r3, #6
 8004b9a:	d9ef      	bls.n	8004b7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b9c:	480d      	ldr	r0, [pc, #52]	; (8004bd4 <prvInitialiseTaskLists+0x64>)
 8004b9e:	f7fe fc65 	bl	800346c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ba2:	480d      	ldr	r0, [pc, #52]	; (8004bd8 <prvInitialiseTaskLists+0x68>)
 8004ba4:	f7fe fc62 	bl	800346c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ba8:	480c      	ldr	r0, [pc, #48]	; (8004bdc <prvInitialiseTaskLists+0x6c>)
 8004baa:	f7fe fc5f 	bl	800346c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004bae:	480c      	ldr	r0, [pc, #48]	; (8004be0 <prvInitialiseTaskLists+0x70>)
 8004bb0:	f7fe fc5c 	bl	800346c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004bb4:	480b      	ldr	r0, [pc, #44]	; (8004be4 <prvInitialiseTaskLists+0x74>)
 8004bb6:	f7fe fc59 	bl	800346c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004bba:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <prvInitialiseTaskLists+0x78>)
 8004bbc:	4a05      	ldr	r2, [pc, #20]	; (8004bd4 <prvInitialiseTaskLists+0x64>)
 8004bbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004bc0:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <prvInitialiseTaskLists+0x7c>)
 8004bc2:	4a05      	ldr	r2, [pc, #20]	; (8004bd8 <prvInitialiseTaskLists+0x68>)
 8004bc4:	601a      	str	r2, [r3, #0]
}
 8004bc6:	bf00      	nop
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	20000384 	.word	0x20000384
 8004bd4:	20000410 	.word	0x20000410
 8004bd8:	20000424 	.word	0x20000424
 8004bdc:	20000440 	.word	0x20000440
 8004be0:	20000454 	.word	0x20000454
 8004be4:	2000046c 	.word	0x2000046c
 8004be8:	20000438 	.word	0x20000438
 8004bec:	2000043c 	.word	0x2000043c

08004bf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bf6:	e019      	b.n	8004c2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004bf8:	f000 fbc4 	bl	8005384 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bfc:	4b10      	ldr	r3, [pc, #64]	; (8004c40 <prvCheckTasksWaitingTermination+0x50>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3304      	adds	r3, #4
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7fe fcb9 	bl	8003580 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c0e:	4b0d      	ldr	r3, [pc, #52]	; (8004c44 <prvCheckTasksWaitingTermination+0x54>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	4a0b      	ldr	r2, [pc, #44]	; (8004c44 <prvCheckTasksWaitingTermination+0x54>)
 8004c16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c18:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <prvCheckTasksWaitingTermination+0x58>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	4a0a      	ldr	r2, [pc, #40]	; (8004c48 <prvCheckTasksWaitingTermination+0x58>)
 8004c20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c22:	f000 fbdf 	bl	80053e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f810 	bl	8004c4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c2c:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <prvCheckTasksWaitingTermination+0x58>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1e1      	bne.n	8004bf8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	20000454 	.word	0x20000454
 8004c44:	20000480 	.word	0x20000480
 8004c48:	20000468 	.word	0x20000468

08004c4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d108      	bne.n	8004c70 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fd7c 	bl	8005760 <vPortFree>
				vPortFree( pxTCB );
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 fd79 	bl	8005760 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c6e:	e018      	b.n	8004ca2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d103      	bne.n	8004c82 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fd70 	bl	8005760 <vPortFree>
	}
 8004c80:	e00f      	b.n	8004ca2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d00a      	beq.n	8004ca2 <prvDeleteTCB+0x56>
	__asm volatile
 8004c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c90:	f383 8811 	msr	BASEPRI, r3
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	60fb      	str	r3, [r7, #12]
}
 8004c9e:	bf00      	nop
 8004ca0:	e7fe      	b.n	8004ca0 <prvDeleteTCB+0x54>
	}
 8004ca2:	bf00      	nop
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
	...

08004cac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cb2:	4b0c      	ldr	r3, [pc, #48]	; (8004ce4 <prvResetNextTaskUnblockTime+0x38>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d104      	bne.n	8004cc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cbc:	4b0a      	ldr	r3, [pc, #40]	; (8004ce8 <prvResetNextTaskUnblockTime+0x3c>)
 8004cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004cc4:	e008      	b.n	8004cd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cc6:	4b07      	ldr	r3, [pc, #28]	; (8004ce4 <prvResetNextTaskUnblockTime+0x38>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	4a04      	ldr	r2, [pc, #16]	; (8004ce8 <prvResetNextTaskUnblockTime+0x3c>)
 8004cd6:	6013      	str	r3, [r2, #0]
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	20000438 	.word	0x20000438
 8004ce8:	200004a0 	.word	0x200004a0

08004cec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004cf2:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <xTaskGetSchedulerState+0x34>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d102      	bne.n	8004d00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	607b      	str	r3, [r7, #4]
 8004cfe:	e008      	b.n	8004d12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d00:	4b08      	ldr	r3, [pc, #32]	; (8004d24 <xTaskGetSchedulerState+0x38>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d102      	bne.n	8004d0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d08:	2302      	movs	r3, #2
 8004d0a:	607b      	str	r3, [r7, #4]
 8004d0c:	e001      	b.n	8004d12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d12:	687b      	ldr	r3, [r7, #4]
	}
 8004d14:	4618      	mov	r0, r3
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	2000048c 	.word	0x2000048c
 8004d24:	200004a8 	.word	0x200004a8

08004d28 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004d34:	2300      	movs	r3, #0
 8004d36:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d05e      	beq.n	8004dfc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d42:	4b31      	ldr	r3, [pc, #196]	; (8004e08 <xTaskPriorityInherit+0xe0>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d24e      	bcs.n	8004dea <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	db06      	blt.n	8004d62 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d54:	4b2c      	ldr	r3, [pc, #176]	; (8004e08 <xTaskPriorityInherit+0xe0>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5a:	f1c3 0207 	rsb	r2, r3, #7
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	6959      	ldr	r1, [r3, #20]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4a26      	ldr	r2, [pc, #152]	; (8004e0c <xTaskPriorityInherit+0xe4>)
 8004d74:	4413      	add	r3, r2
 8004d76:	4299      	cmp	r1, r3
 8004d78:	d12f      	bne.n	8004dda <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fe fbfe 	bl	8003580 <uxListRemove>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10a      	bne.n	8004da0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8e:	2201      	movs	r2, #1
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	43da      	mvns	r2, r3
 8004d96:	4b1e      	ldr	r3, [pc, #120]	; (8004e10 <xTaskPriorityInherit+0xe8>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	4a1c      	ldr	r2, [pc, #112]	; (8004e10 <xTaskPriorityInherit+0xe8>)
 8004d9e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004da0:	4b19      	ldr	r3, [pc, #100]	; (8004e08 <xTaskPriorityInherit+0xe0>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dae:	2201      	movs	r2, #1
 8004db0:	409a      	lsls	r2, r3
 8004db2:	4b17      	ldr	r3, [pc, #92]	; (8004e10 <xTaskPriorityInherit+0xe8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	4a15      	ldr	r2, [pc, #84]	; (8004e10 <xTaskPriorityInherit+0xe8>)
 8004dba:	6013      	str	r3, [r2, #0]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4a10      	ldr	r2, [pc, #64]	; (8004e0c <xTaskPriorityInherit+0xe4>)
 8004dca:	441a      	add	r2, r3
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	3304      	adds	r3, #4
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	f7fe fb77 	bl	80034c6 <vListInsertEnd>
 8004dd8:	e004      	b.n	8004de4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004dda:	4b0b      	ldr	r3, [pc, #44]	; (8004e08 <xTaskPriorityInherit+0xe0>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004de4:	2301      	movs	r3, #1
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	e008      	b.n	8004dfc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dee:	4b06      	ldr	r3, [pc, #24]	; (8004e08 <xTaskPriorityInherit+0xe0>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d201      	bcs.n	8004dfc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
	}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	20000380 	.word	0x20000380
 8004e0c:	20000384 	.word	0x20000384
 8004e10:	20000488 	.word	0x20000488

08004e14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e20:	2300      	movs	r3, #0
 8004e22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d06e      	beq.n	8004f08 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e2a:	4b3a      	ldr	r3, [pc, #232]	; (8004f14 <xTaskPriorityDisinherit+0x100>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d00a      	beq.n	8004e4a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	60fb      	str	r3, [r7, #12]
}
 8004e46:	bf00      	nop
 8004e48:	e7fe      	b.n	8004e48 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10a      	bne.n	8004e68 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	60bb      	str	r3, [r7, #8]
}
 8004e64:	bf00      	nop
 8004e66:	e7fe      	b.n	8004e66 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e6c:	1e5a      	subs	r2, r3, #1
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d044      	beq.n	8004f08 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d140      	bne.n	8004f08 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	3304      	adds	r3, #4
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fe fb78 	bl	8003580 <uxListRemove>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d115      	bne.n	8004ec2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e9a:	491f      	ldr	r1, [pc, #124]	; (8004f18 <xTaskPriorityDisinherit+0x104>)
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	440b      	add	r3, r1
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10a      	bne.n	8004ec2 <xTaskPriorityDisinherit+0xae>
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb6:	43da      	mvns	r2, r3
 8004eb8:	4b18      	ldr	r3, [pc, #96]	; (8004f1c <xTaskPriorityDisinherit+0x108>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	4a17      	ldr	r2, [pc, #92]	; (8004f1c <xTaskPriorityDisinherit+0x108>)
 8004ec0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ece:	f1c3 0207 	rsb	r2, r3, #7
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eda:	2201      	movs	r2, #1
 8004edc:	409a      	lsls	r2, r3
 8004ede:	4b0f      	ldr	r3, [pc, #60]	; (8004f1c <xTaskPriorityDisinherit+0x108>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	4a0d      	ldr	r2, [pc, #52]	; (8004f1c <xTaskPriorityDisinherit+0x108>)
 8004ee6:	6013      	str	r3, [r2, #0]
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4a08      	ldr	r2, [pc, #32]	; (8004f18 <xTaskPriorityDisinherit+0x104>)
 8004ef6:	441a      	add	r2, r3
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	3304      	adds	r3, #4
 8004efc:	4619      	mov	r1, r3
 8004efe:	4610      	mov	r0, r2
 8004f00:	f7fe fae1 	bl	80034c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f04:	2301      	movs	r3, #1
 8004f06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f08:	697b      	ldr	r3, [r7, #20]
	}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20000380 	.word	0x20000380
 8004f18:	20000384 	.word	0x20000384
 8004f1c:	20000488 	.word	0x20000488

08004f20 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b088      	sub	sp, #32
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d077      	beq.n	8005028 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10a      	bne.n	8004f56 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	60fb      	str	r3, [r7, #12]
}
 8004f52:	bf00      	nop
 8004f54:	e7fe      	b.n	8004f54 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d902      	bls.n	8004f66 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	61fb      	str	r3, [r7, #28]
 8004f64:	e002      	b.n	8004f6c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f70:	69fa      	ldr	r2, [r7, #28]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d058      	beq.n	8005028 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d153      	bne.n	8005028 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004f80:	4b2b      	ldr	r3, [pc, #172]	; (8005030 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d10a      	bne.n	8004fa0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	60bb      	str	r3, [r7, #8]
}
 8004f9c:	bf00      	nop
 8004f9e:	e7fe      	b.n	8004f9e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	69fa      	ldr	r2, [r7, #28]
 8004faa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	db04      	blt.n	8004fbe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	f1c3 0207 	rsb	r2, r3, #7
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	6959      	ldr	r1, [r3, #20]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4a19      	ldr	r2, [pc, #100]	; (8005034 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004fce:	4413      	add	r3, r2
 8004fd0:	4299      	cmp	r1, r3
 8004fd2:	d129      	bne.n	8005028 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7fe fad1 	bl	8003580 <uxListRemove>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10a      	bne.n	8004ffa <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	2201      	movs	r2, #1
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	43da      	mvns	r2, r3
 8004ff0:	4b11      	ldr	r3, [pc, #68]	; (8005038 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	4a10      	ldr	r2, [pc, #64]	; (8005038 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004ff8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffe:	2201      	movs	r2, #1
 8005000:	409a      	lsls	r2, r3
 8005002:	4b0d      	ldr	r3, [pc, #52]	; (8005038 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4313      	orrs	r3, r2
 8005008:	4a0b      	ldr	r2, [pc, #44]	; (8005038 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800500a:	6013      	str	r3, [r2, #0]
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005010:	4613      	mov	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4a06      	ldr	r2, [pc, #24]	; (8005034 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800501a:	441a      	add	r2, r3
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	3304      	adds	r3, #4
 8005020:	4619      	mov	r1, r3
 8005022:	4610      	mov	r0, r2
 8005024:	f7fe fa4f 	bl	80034c6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005028:	bf00      	nop
 800502a:	3720      	adds	r7, #32
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	20000380 	.word	0x20000380
 8005034:	20000384 	.word	0x20000384
 8005038:	20000488 	.word	0x20000488

0800503c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005040:	4b07      	ldr	r3, [pc, #28]	; (8005060 <pvTaskIncrementMutexHeldCount+0x24>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d004      	beq.n	8005052 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005048:	4b05      	ldr	r3, [pc, #20]	; (8005060 <pvTaskIncrementMutexHeldCount+0x24>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800504e:	3201      	adds	r2, #1
 8005050:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005052:	4b03      	ldr	r3, [pc, #12]	; (8005060 <pvTaskIncrementMutexHeldCount+0x24>)
 8005054:	681b      	ldr	r3, [r3, #0]
	}
 8005056:	4618      	mov	r0, r3
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	20000380 	.word	0x20000380

08005064 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800506e:	4b29      	ldr	r3, [pc, #164]	; (8005114 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005074:	4b28      	ldr	r3, [pc, #160]	; (8005118 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3304      	adds	r3, #4
 800507a:	4618      	mov	r0, r3
 800507c:	f7fe fa80 	bl	8003580 <uxListRemove>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10b      	bne.n	800509e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005086:	4b24      	ldr	r3, [pc, #144]	; (8005118 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	2201      	movs	r2, #1
 800508e:	fa02 f303 	lsl.w	r3, r2, r3
 8005092:	43da      	mvns	r2, r3
 8005094:	4b21      	ldr	r3, [pc, #132]	; (800511c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4013      	ands	r3, r2
 800509a:	4a20      	ldr	r2, [pc, #128]	; (800511c <prvAddCurrentTaskToDelayedList+0xb8>)
 800509c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a4:	d10a      	bne.n	80050bc <prvAddCurrentTaskToDelayedList+0x58>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d007      	beq.n	80050bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050ac:	4b1a      	ldr	r3, [pc, #104]	; (8005118 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3304      	adds	r3, #4
 80050b2:	4619      	mov	r1, r3
 80050b4:	481a      	ldr	r0, [pc, #104]	; (8005120 <prvAddCurrentTaskToDelayedList+0xbc>)
 80050b6:	f7fe fa06 	bl	80034c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050ba:	e026      	b.n	800510a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4413      	add	r3, r2
 80050c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050c4:	4b14      	ldr	r3, [pc, #80]	; (8005118 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d209      	bcs.n	80050e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050d4:	4b13      	ldr	r3, [pc, #76]	; (8005124 <prvAddCurrentTaskToDelayedList+0xc0>)
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3304      	adds	r3, #4
 80050de:	4619      	mov	r1, r3
 80050e0:	4610      	mov	r0, r2
 80050e2:	f7fe fa14 	bl	800350e <vListInsert>
}
 80050e6:	e010      	b.n	800510a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050e8:	4b0f      	ldr	r3, [pc, #60]	; (8005128 <prvAddCurrentTaskToDelayedList+0xc4>)
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	4b0a      	ldr	r3, [pc, #40]	; (8005118 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3304      	adds	r3, #4
 80050f2:	4619      	mov	r1, r3
 80050f4:	4610      	mov	r0, r2
 80050f6:	f7fe fa0a 	bl	800350e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050fa:	4b0c      	ldr	r3, [pc, #48]	; (800512c <prvAddCurrentTaskToDelayedList+0xc8>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	429a      	cmp	r2, r3
 8005102:	d202      	bcs.n	800510a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005104:	4a09      	ldr	r2, [pc, #36]	; (800512c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	6013      	str	r3, [r2, #0]
}
 800510a:	bf00      	nop
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	20000484 	.word	0x20000484
 8005118:	20000380 	.word	0x20000380
 800511c:	20000488 	.word	0x20000488
 8005120:	2000046c 	.word	0x2000046c
 8005124:	2000043c 	.word	0x2000043c
 8005128:	20000438 	.word	0x20000438
 800512c:	200004a0 	.word	0x200004a0

08005130 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	3b04      	subs	r3, #4
 8005140:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005148:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	3b04      	subs	r3, #4
 800514e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f023 0201 	bic.w	r2, r3, #1
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	3b04      	subs	r3, #4
 800515e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005160:	4a0c      	ldr	r2, [pc, #48]	; (8005194 <pxPortInitialiseStack+0x64>)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3b14      	subs	r3, #20
 800516a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	3b04      	subs	r3, #4
 8005176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f06f 0202 	mvn.w	r2, #2
 800517e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	3b20      	subs	r3, #32
 8005184:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005186:	68fb      	ldr	r3, [r7, #12]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3714      	adds	r7, #20
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	08005199 	.word	0x08005199

08005198 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800519e:	2300      	movs	r3, #0
 80051a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051a2:	4b12      	ldr	r3, [pc, #72]	; (80051ec <prvTaskExitError+0x54>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051aa:	d00a      	beq.n	80051c2 <prvTaskExitError+0x2a>
	__asm volatile
 80051ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b0:	f383 8811 	msr	BASEPRI, r3
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	60fb      	str	r3, [r7, #12]
}
 80051be:	bf00      	nop
 80051c0:	e7fe      	b.n	80051c0 <prvTaskExitError+0x28>
	__asm volatile
 80051c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	60bb      	str	r3, [r7, #8]
}
 80051d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80051d6:	bf00      	nop
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0fc      	beq.n	80051d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80051de:	bf00      	nop
 80051e0:	bf00      	nop
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	2000000c 	.word	0x2000000c

080051f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80051f0:	4b07      	ldr	r3, [pc, #28]	; (8005210 <pxCurrentTCBConst2>)
 80051f2:	6819      	ldr	r1, [r3, #0]
 80051f4:	6808      	ldr	r0, [r1, #0]
 80051f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051fa:	f380 8809 	msr	PSP, r0
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f04f 0000 	mov.w	r0, #0
 8005206:	f380 8811 	msr	BASEPRI, r0
 800520a:	4770      	bx	lr
 800520c:	f3af 8000 	nop.w

08005210 <pxCurrentTCBConst2>:
 8005210:	20000380 	.word	0x20000380
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005214:	bf00      	nop
 8005216:	bf00      	nop

08005218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005218:	4808      	ldr	r0, [pc, #32]	; (800523c <prvPortStartFirstTask+0x24>)
 800521a:	6800      	ldr	r0, [r0, #0]
 800521c:	6800      	ldr	r0, [r0, #0]
 800521e:	f380 8808 	msr	MSP, r0
 8005222:	f04f 0000 	mov.w	r0, #0
 8005226:	f380 8814 	msr	CONTROL, r0
 800522a:	b662      	cpsie	i
 800522c:	b661      	cpsie	f
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	df00      	svc	0
 8005238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800523a:	bf00      	nop
 800523c:	e000ed08 	.word	0xe000ed08

08005240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005246:	4b46      	ldr	r3, [pc, #280]	; (8005360 <xPortStartScheduler+0x120>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a46      	ldr	r2, [pc, #280]	; (8005364 <xPortStartScheduler+0x124>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d10a      	bne.n	8005266 <xPortStartScheduler+0x26>
	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	613b      	str	r3, [r7, #16]
}
 8005262:	bf00      	nop
 8005264:	e7fe      	b.n	8005264 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005266:	4b3e      	ldr	r3, [pc, #248]	; (8005360 <xPortStartScheduler+0x120>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a3f      	ldr	r2, [pc, #252]	; (8005368 <xPortStartScheduler+0x128>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d10a      	bne.n	8005286 <xPortStartScheduler+0x46>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	60fb      	str	r3, [r7, #12]
}
 8005282:	bf00      	nop
 8005284:	e7fe      	b.n	8005284 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005286:	4b39      	ldr	r3, [pc, #228]	; (800536c <xPortStartScheduler+0x12c>)
 8005288:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	b2db      	uxtb	r3, r3
 8005290:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	22ff      	movs	r2, #255	; 0xff
 8005296:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	b2db      	uxtb	r3, r3
 800529e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052a0:	78fb      	ldrb	r3, [r7, #3]
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	4b31      	ldr	r3, [pc, #196]	; (8005370 <xPortStartScheduler+0x130>)
 80052ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052ae:	4b31      	ldr	r3, [pc, #196]	; (8005374 <xPortStartScheduler+0x134>)
 80052b0:	2207      	movs	r2, #7
 80052b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052b4:	e009      	b.n	80052ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80052b6:	4b2f      	ldr	r3, [pc, #188]	; (8005374 <xPortStartScheduler+0x134>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	4a2d      	ldr	r2, [pc, #180]	; (8005374 <xPortStartScheduler+0x134>)
 80052be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052c0:	78fb      	ldrb	r3, [r7, #3]
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052ca:	78fb      	ldrb	r3, [r7, #3]
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d2:	2b80      	cmp	r3, #128	; 0x80
 80052d4:	d0ef      	beq.n	80052b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052d6:	4b27      	ldr	r3, [pc, #156]	; (8005374 <xPortStartScheduler+0x134>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f1c3 0307 	rsb	r3, r3, #7
 80052de:	2b04      	cmp	r3, #4
 80052e0:	d00a      	beq.n	80052f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80052e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	60bb      	str	r3, [r7, #8]
}
 80052f4:	bf00      	nop
 80052f6:	e7fe      	b.n	80052f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80052f8:	4b1e      	ldr	r3, [pc, #120]	; (8005374 <xPortStartScheduler+0x134>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	021b      	lsls	r3, r3, #8
 80052fe:	4a1d      	ldr	r2, [pc, #116]	; (8005374 <xPortStartScheduler+0x134>)
 8005300:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005302:	4b1c      	ldr	r3, [pc, #112]	; (8005374 <xPortStartScheduler+0x134>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800530a:	4a1a      	ldr	r2, [pc, #104]	; (8005374 <xPortStartScheduler+0x134>)
 800530c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	b2da      	uxtb	r2, r3
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005316:	4b18      	ldr	r3, [pc, #96]	; (8005378 <xPortStartScheduler+0x138>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a17      	ldr	r2, [pc, #92]	; (8005378 <xPortStartScheduler+0x138>)
 800531c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005320:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005322:	4b15      	ldr	r3, [pc, #84]	; (8005378 <xPortStartScheduler+0x138>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a14      	ldr	r2, [pc, #80]	; (8005378 <xPortStartScheduler+0x138>)
 8005328:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800532c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800532e:	f000 f8dd 	bl	80054ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005332:	4b12      	ldr	r3, [pc, #72]	; (800537c <xPortStartScheduler+0x13c>)
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005338:	f000 f8fc 	bl	8005534 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800533c:	4b10      	ldr	r3, [pc, #64]	; (8005380 <xPortStartScheduler+0x140>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a0f      	ldr	r2, [pc, #60]	; (8005380 <xPortStartScheduler+0x140>)
 8005342:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005346:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005348:	f7ff ff66 	bl	8005218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800534c:	f7ff fa92 	bl	8004874 <vTaskSwitchContext>
	prvTaskExitError();
 8005350:	f7ff ff22 	bl	8005198 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3718      	adds	r7, #24
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	e000ed00 	.word	0xe000ed00
 8005364:	410fc271 	.word	0x410fc271
 8005368:	410fc270 	.word	0x410fc270
 800536c:	e000e400 	.word	0xe000e400
 8005370:	200004ac 	.word	0x200004ac
 8005374:	200004b0 	.word	0x200004b0
 8005378:	e000ed20 	.word	0xe000ed20
 800537c:	2000000c 	.word	0x2000000c
 8005380:	e000ef34 	.word	0xe000ef34

08005384 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	607b      	str	r3, [r7, #4]
}
 800539c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800539e:	4b0f      	ldr	r3, [pc, #60]	; (80053dc <vPortEnterCritical+0x58>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3301      	adds	r3, #1
 80053a4:	4a0d      	ldr	r2, [pc, #52]	; (80053dc <vPortEnterCritical+0x58>)
 80053a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80053a8:	4b0c      	ldr	r3, [pc, #48]	; (80053dc <vPortEnterCritical+0x58>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d10f      	bne.n	80053d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053b0:	4b0b      	ldr	r3, [pc, #44]	; (80053e0 <vPortEnterCritical+0x5c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	603b      	str	r3, [r7, #0]
}
 80053cc:	bf00      	nop
 80053ce:	e7fe      	b.n	80053ce <vPortEnterCritical+0x4a>
	}
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	2000000c 	.word	0x2000000c
 80053e0:	e000ed04 	.word	0xe000ed04

080053e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80053ea:	4b12      	ldr	r3, [pc, #72]	; (8005434 <vPortExitCritical+0x50>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10a      	bne.n	8005408 <vPortExitCritical+0x24>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	607b      	str	r3, [r7, #4]
}
 8005404:	bf00      	nop
 8005406:	e7fe      	b.n	8005406 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005408:	4b0a      	ldr	r3, [pc, #40]	; (8005434 <vPortExitCritical+0x50>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3b01      	subs	r3, #1
 800540e:	4a09      	ldr	r2, [pc, #36]	; (8005434 <vPortExitCritical+0x50>)
 8005410:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005412:	4b08      	ldr	r3, [pc, #32]	; (8005434 <vPortExitCritical+0x50>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d105      	bne.n	8005426 <vPortExitCritical+0x42>
 800541a:	2300      	movs	r3, #0
 800541c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	f383 8811 	msr	BASEPRI, r3
}
 8005424:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	2000000c 	.word	0x2000000c
	...

08005440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005440:	f3ef 8009 	mrs	r0, PSP
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	4b15      	ldr	r3, [pc, #84]	; (80054a0 <pxCurrentTCBConst>)
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	f01e 0f10 	tst.w	lr, #16
 8005450:	bf08      	it	eq
 8005452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800545a:	6010      	str	r0, [r2, #0]
 800545c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005464:	f380 8811 	msr	BASEPRI, r0
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f7ff fa00 	bl	8004874 <vTaskSwitchContext>
 8005474:	f04f 0000 	mov.w	r0, #0
 8005478:	f380 8811 	msr	BASEPRI, r0
 800547c:	bc09      	pop	{r0, r3}
 800547e:	6819      	ldr	r1, [r3, #0]
 8005480:	6808      	ldr	r0, [r1, #0]
 8005482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005486:	f01e 0f10 	tst.w	lr, #16
 800548a:	bf08      	it	eq
 800548c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005490:	f380 8809 	msr	PSP, r0
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	f3af 8000 	nop.w

080054a0 <pxCurrentTCBConst>:
 80054a0:	20000380 	.word	0x20000380
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop

080054a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
	__asm volatile
 80054ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	607b      	str	r3, [r7, #4]
}
 80054c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80054c2:	f7ff f91f 	bl	8004704 <xTaskIncrementTick>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054cc:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <SysTick_Handler+0x40>)
 80054ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	2300      	movs	r3, #0
 80054d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	f383 8811 	msr	BASEPRI, r3
}
 80054de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80054e0:	bf00      	nop
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	e000ed04 	.word	0xe000ed04

080054ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80054f0:	4b0b      	ldr	r3, [pc, #44]	; (8005520 <vPortSetupTimerInterrupt+0x34>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054f6:	4b0b      	ldr	r3, [pc, #44]	; (8005524 <vPortSetupTimerInterrupt+0x38>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054fc:	4b0a      	ldr	r3, [pc, #40]	; (8005528 <vPortSetupTimerInterrupt+0x3c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a0a      	ldr	r2, [pc, #40]	; (800552c <vPortSetupTimerInterrupt+0x40>)
 8005502:	fba2 2303 	umull	r2, r3, r2, r3
 8005506:	099b      	lsrs	r3, r3, #6
 8005508:	4a09      	ldr	r2, [pc, #36]	; (8005530 <vPortSetupTimerInterrupt+0x44>)
 800550a:	3b01      	subs	r3, #1
 800550c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800550e:	4b04      	ldr	r3, [pc, #16]	; (8005520 <vPortSetupTimerInterrupt+0x34>)
 8005510:	2207      	movs	r2, #7
 8005512:	601a      	str	r2, [r3, #0]
}
 8005514:	bf00      	nop
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	e000e010 	.word	0xe000e010
 8005524:	e000e018 	.word	0xe000e018
 8005528:	20000000 	.word	0x20000000
 800552c:	10624dd3 	.word	0x10624dd3
 8005530:	e000e014 	.word	0xe000e014

08005534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005544 <vPortEnableVFP+0x10>
 8005538:	6801      	ldr	r1, [r0, #0]
 800553a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800553e:	6001      	str	r1, [r0, #0]
 8005540:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005542:	bf00      	nop
 8005544:	e000ed88 	.word	0xe000ed88

08005548 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800554e:	f3ef 8305 	mrs	r3, IPSR
 8005552:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2b0f      	cmp	r3, #15
 8005558:	d914      	bls.n	8005584 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800555a:	4a17      	ldr	r2, [pc, #92]	; (80055b8 <vPortValidateInterruptPriority+0x70>)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4413      	add	r3, r2
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005564:	4b15      	ldr	r3, [pc, #84]	; (80055bc <vPortValidateInterruptPriority+0x74>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	7afa      	ldrb	r2, [r7, #11]
 800556a:	429a      	cmp	r2, r3
 800556c:	d20a      	bcs.n	8005584 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	607b      	str	r3, [r7, #4]
}
 8005580:	bf00      	nop
 8005582:	e7fe      	b.n	8005582 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005584:	4b0e      	ldr	r3, [pc, #56]	; (80055c0 <vPortValidateInterruptPriority+0x78>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800558c:	4b0d      	ldr	r3, [pc, #52]	; (80055c4 <vPortValidateInterruptPriority+0x7c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	d90a      	bls.n	80055aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	603b      	str	r3, [r7, #0]
}
 80055a6:	bf00      	nop
 80055a8:	e7fe      	b.n	80055a8 <vPortValidateInterruptPriority+0x60>
	}
 80055aa:	bf00      	nop
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	e000e3f0 	.word	0xe000e3f0
 80055bc:	200004ac 	.word	0x200004ac
 80055c0:	e000ed0c 	.word	0xe000ed0c
 80055c4:	200004b0 	.word	0x200004b0

080055c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08a      	sub	sp, #40	; 0x28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80055d4:	f7fe ffec 	bl	80045b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80055d8:	4b5b      	ldr	r3, [pc, #364]	; (8005748 <pvPortMalloc+0x180>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80055e0:	f000 f920 	bl	8005824 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055e4:	4b59      	ldr	r3, [pc, #356]	; (800574c <pvPortMalloc+0x184>)
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f040 8093 	bne.w	8005718 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d01d      	beq.n	8005634 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80055f8:	2208      	movs	r2, #8
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4413      	add	r3, r2
 80055fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f003 0307 	and.w	r3, r3, #7
 8005606:	2b00      	cmp	r3, #0
 8005608:	d014      	beq.n	8005634 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f023 0307 	bic.w	r3, r3, #7
 8005610:	3308      	adds	r3, #8
 8005612:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00a      	beq.n	8005634 <pvPortMalloc+0x6c>
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	617b      	str	r3, [r7, #20]
}
 8005630:	bf00      	nop
 8005632:	e7fe      	b.n	8005632 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d06e      	beq.n	8005718 <pvPortMalloc+0x150>
 800563a:	4b45      	ldr	r3, [pc, #276]	; (8005750 <pvPortMalloc+0x188>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	429a      	cmp	r2, r3
 8005642:	d869      	bhi.n	8005718 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005644:	4b43      	ldr	r3, [pc, #268]	; (8005754 <pvPortMalloc+0x18c>)
 8005646:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005648:	4b42      	ldr	r3, [pc, #264]	; (8005754 <pvPortMalloc+0x18c>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800564e:	e004      	b.n	800565a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	429a      	cmp	r2, r3
 8005662:	d903      	bls.n	800566c <pvPortMalloc+0xa4>
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1f1      	bne.n	8005650 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800566c:	4b36      	ldr	r3, [pc, #216]	; (8005748 <pvPortMalloc+0x180>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005672:	429a      	cmp	r2, r3
 8005674:	d050      	beq.n	8005718 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2208      	movs	r2, #8
 800567c:	4413      	add	r3, r2
 800567e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	1ad2      	subs	r2, r2, r3
 8005690:	2308      	movs	r3, #8
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	429a      	cmp	r2, r3
 8005696:	d91f      	bls.n	80056d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4413      	add	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00a      	beq.n	80056c0 <pvPortMalloc+0xf8>
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	613b      	str	r3, [r7, #16]
}
 80056bc:	bf00      	nop
 80056be:	e7fe      	b.n	80056be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	1ad2      	subs	r2, r2, r3
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056d2:	69b8      	ldr	r0, [r7, #24]
 80056d4:	f000 f908 	bl	80058e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056d8:	4b1d      	ldr	r3, [pc, #116]	; (8005750 <pvPortMalloc+0x188>)
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	4a1b      	ldr	r2, [pc, #108]	; (8005750 <pvPortMalloc+0x188>)
 80056e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056e6:	4b1a      	ldr	r3, [pc, #104]	; (8005750 <pvPortMalloc+0x188>)
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	4b1b      	ldr	r3, [pc, #108]	; (8005758 <pvPortMalloc+0x190>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d203      	bcs.n	80056fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056f2:	4b17      	ldr	r3, [pc, #92]	; (8005750 <pvPortMalloc+0x188>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a18      	ldr	r2, [pc, #96]	; (8005758 <pvPortMalloc+0x190>)
 80056f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	4b13      	ldr	r3, [pc, #76]	; (800574c <pvPortMalloc+0x184>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	431a      	orrs	r2, r3
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	2200      	movs	r2, #0
 800570c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800570e:	4b13      	ldr	r3, [pc, #76]	; (800575c <pvPortMalloc+0x194>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3301      	adds	r3, #1
 8005714:	4a11      	ldr	r2, [pc, #68]	; (800575c <pvPortMalloc+0x194>)
 8005716:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005718:	f7fe ff58 	bl	80045cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00a      	beq.n	800573c <pvPortMalloc+0x174>
	__asm volatile
 8005726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572a:	f383 8811 	msr	BASEPRI, r3
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f3bf 8f4f 	dsb	sy
 8005736:	60fb      	str	r3, [r7, #12]
}
 8005738:	bf00      	nop
 800573a:	e7fe      	b.n	800573a <pvPortMalloc+0x172>
	return pvReturn;
 800573c:	69fb      	ldr	r3, [r7, #28]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3728      	adds	r7, #40	; 0x28
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	200040bc 	.word	0x200040bc
 800574c:	200040d0 	.word	0x200040d0
 8005750:	200040c0 	.word	0x200040c0
 8005754:	200040b4 	.word	0x200040b4
 8005758:	200040c4 	.word	0x200040c4
 800575c:	200040c8 	.word	0x200040c8

08005760 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d04d      	beq.n	800580e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005772:	2308      	movs	r3, #8
 8005774:	425b      	negs	r3, r3
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	4413      	add	r3, r2
 800577a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	4b24      	ldr	r3, [pc, #144]	; (8005818 <vPortFree+0xb8>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4013      	ands	r3, r2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10a      	bne.n	80057a4 <vPortFree+0x44>
	__asm volatile
 800578e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	60fb      	str	r3, [r7, #12]
}
 80057a0:	bf00      	nop
 80057a2:	e7fe      	b.n	80057a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00a      	beq.n	80057c2 <vPortFree+0x62>
	__asm volatile
 80057ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	60bb      	str	r3, [r7, #8]
}
 80057be:	bf00      	nop
 80057c0:	e7fe      	b.n	80057c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	4b14      	ldr	r3, [pc, #80]	; (8005818 <vPortFree+0xb8>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4013      	ands	r3, r2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d01e      	beq.n	800580e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d11a      	bne.n	800580e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	4b0e      	ldr	r3, [pc, #56]	; (8005818 <vPortFree+0xb8>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	43db      	mvns	r3, r3
 80057e2:	401a      	ands	r2, r3
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057e8:	f7fe fee2 	bl	80045b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	4b0a      	ldr	r3, [pc, #40]	; (800581c <vPortFree+0xbc>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4413      	add	r3, r2
 80057f6:	4a09      	ldr	r2, [pc, #36]	; (800581c <vPortFree+0xbc>)
 80057f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057fa:	6938      	ldr	r0, [r7, #16]
 80057fc:	f000 f874 	bl	80058e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005800:	4b07      	ldr	r3, [pc, #28]	; (8005820 <vPortFree+0xc0>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3301      	adds	r3, #1
 8005806:	4a06      	ldr	r2, [pc, #24]	; (8005820 <vPortFree+0xc0>)
 8005808:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800580a:	f7fe fedf 	bl	80045cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800580e:	bf00      	nop
 8005810:	3718      	adds	r7, #24
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	200040d0 	.word	0x200040d0
 800581c:	200040c0 	.word	0x200040c0
 8005820:	200040cc 	.word	0x200040cc

08005824 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800582a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800582e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005830:	4b27      	ldr	r3, [pc, #156]	; (80058d0 <prvHeapInit+0xac>)
 8005832:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f003 0307 	and.w	r3, r3, #7
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00c      	beq.n	8005858 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	3307      	adds	r3, #7
 8005842:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0307 	bic.w	r3, r3, #7
 800584a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	4a1f      	ldr	r2, [pc, #124]	; (80058d0 <prvHeapInit+0xac>)
 8005854:	4413      	add	r3, r2
 8005856:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800585c:	4a1d      	ldr	r2, [pc, #116]	; (80058d4 <prvHeapInit+0xb0>)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005862:	4b1c      	ldr	r3, [pc, #112]	; (80058d4 <prvHeapInit+0xb0>)
 8005864:	2200      	movs	r2, #0
 8005866:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	4413      	add	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005870:	2208      	movs	r2, #8
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	1a9b      	subs	r3, r3, r2
 8005876:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 0307 	bic.w	r3, r3, #7
 800587e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4a15      	ldr	r2, [pc, #84]	; (80058d8 <prvHeapInit+0xb4>)
 8005884:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005886:	4b14      	ldr	r3, [pc, #80]	; (80058d8 <prvHeapInit+0xb4>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2200      	movs	r2, #0
 800588c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800588e:	4b12      	ldr	r3, [pc, #72]	; (80058d8 <prvHeapInit+0xb4>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	1ad2      	subs	r2, r2, r3
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80058a4:	4b0c      	ldr	r3, [pc, #48]	; (80058d8 <prvHeapInit+0xb4>)
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	4a0a      	ldr	r2, [pc, #40]	; (80058dc <prvHeapInit+0xb8>)
 80058b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	4a09      	ldr	r2, [pc, #36]	; (80058e0 <prvHeapInit+0xbc>)
 80058ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80058bc:	4b09      	ldr	r3, [pc, #36]	; (80058e4 <prvHeapInit+0xc0>)
 80058be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80058c2:	601a      	str	r2, [r3, #0]
}
 80058c4:	bf00      	nop
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	200004b4 	.word	0x200004b4
 80058d4:	200040b4 	.word	0x200040b4
 80058d8:	200040bc 	.word	0x200040bc
 80058dc:	200040c4 	.word	0x200040c4
 80058e0:	200040c0 	.word	0x200040c0
 80058e4:	200040d0 	.word	0x200040d0

080058e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058f0:	4b28      	ldr	r3, [pc, #160]	; (8005994 <prvInsertBlockIntoFreeList+0xac>)
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	e002      	b.n	80058fc <prvInsertBlockIntoFreeList+0x14>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	60fb      	str	r3, [r7, #12]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	429a      	cmp	r2, r3
 8005904:	d8f7      	bhi.n	80058f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	4413      	add	r3, r2
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	429a      	cmp	r2, r3
 8005916:	d108      	bne.n	800592a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	441a      	add	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	441a      	add	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	429a      	cmp	r2, r3
 800593c:	d118      	bne.n	8005970 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	4b15      	ldr	r3, [pc, #84]	; (8005998 <prvInsertBlockIntoFreeList+0xb0>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	429a      	cmp	r2, r3
 8005948:	d00d      	beq.n	8005966 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	441a      	add	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	e008      	b.n	8005978 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005966:	4b0c      	ldr	r3, [pc, #48]	; (8005998 <prvInsertBlockIntoFreeList+0xb0>)
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	e003      	b.n	8005978 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	429a      	cmp	r2, r3
 800597e:	d002      	beq.n	8005986 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005986:	bf00      	nop
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	200040b4 	.word	0x200040b4
 8005998:	200040bc 	.word	0x200040bc

0800599c <std>:
 800599c:	2300      	movs	r3, #0
 800599e:	b510      	push	{r4, lr}
 80059a0:	4604      	mov	r4, r0
 80059a2:	e9c0 3300 	strd	r3, r3, [r0]
 80059a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059aa:	6083      	str	r3, [r0, #8]
 80059ac:	8181      	strh	r1, [r0, #12]
 80059ae:	6643      	str	r3, [r0, #100]	; 0x64
 80059b0:	81c2      	strh	r2, [r0, #14]
 80059b2:	6183      	str	r3, [r0, #24]
 80059b4:	4619      	mov	r1, r3
 80059b6:	2208      	movs	r2, #8
 80059b8:	305c      	adds	r0, #92	; 0x5c
 80059ba:	f000 f906 	bl	8005bca <memset>
 80059be:	4b0d      	ldr	r3, [pc, #52]	; (80059f4 <std+0x58>)
 80059c0:	6263      	str	r3, [r4, #36]	; 0x24
 80059c2:	4b0d      	ldr	r3, [pc, #52]	; (80059f8 <std+0x5c>)
 80059c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80059c6:	4b0d      	ldr	r3, [pc, #52]	; (80059fc <std+0x60>)
 80059c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059ca:	4b0d      	ldr	r3, [pc, #52]	; (8005a00 <std+0x64>)
 80059cc:	6323      	str	r3, [r4, #48]	; 0x30
 80059ce:	4b0d      	ldr	r3, [pc, #52]	; (8005a04 <std+0x68>)
 80059d0:	6224      	str	r4, [r4, #32]
 80059d2:	429c      	cmp	r4, r3
 80059d4:	d006      	beq.n	80059e4 <std+0x48>
 80059d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80059da:	4294      	cmp	r4, r2
 80059dc:	d002      	beq.n	80059e4 <std+0x48>
 80059de:	33d0      	adds	r3, #208	; 0xd0
 80059e0:	429c      	cmp	r4, r3
 80059e2:	d105      	bne.n	80059f0 <std+0x54>
 80059e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80059e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059ec:	f000 b966 	b.w	8005cbc <__retarget_lock_init_recursive>
 80059f0:	bd10      	pop	{r4, pc}
 80059f2:	bf00      	nop
 80059f4:	08005b45 	.word	0x08005b45
 80059f8:	08005b67 	.word	0x08005b67
 80059fc:	08005b9f 	.word	0x08005b9f
 8005a00:	08005bc3 	.word	0x08005bc3
 8005a04:	200040d4 	.word	0x200040d4

08005a08 <stdio_exit_handler>:
 8005a08:	4a02      	ldr	r2, [pc, #8]	; (8005a14 <stdio_exit_handler+0xc>)
 8005a0a:	4903      	ldr	r1, [pc, #12]	; (8005a18 <stdio_exit_handler+0x10>)
 8005a0c:	4803      	ldr	r0, [pc, #12]	; (8005a1c <stdio_exit_handler+0x14>)
 8005a0e:	f000 b869 	b.w	8005ae4 <_fwalk_sglue>
 8005a12:	bf00      	nop
 8005a14:	20000010 	.word	0x20000010
 8005a18:	08006585 	.word	0x08006585
 8005a1c:	2000001c 	.word	0x2000001c

08005a20 <cleanup_stdio>:
 8005a20:	6841      	ldr	r1, [r0, #4]
 8005a22:	4b0c      	ldr	r3, [pc, #48]	; (8005a54 <cleanup_stdio+0x34>)
 8005a24:	4299      	cmp	r1, r3
 8005a26:	b510      	push	{r4, lr}
 8005a28:	4604      	mov	r4, r0
 8005a2a:	d001      	beq.n	8005a30 <cleanup_stdio+0x10>
 8005a2c:	f000 fdaa 	bl	8006584 <_fflush_r>
 8005a30:	68a1      	ldr	r1, [r4, #8]
 8005a32:	4b09      	ldr	r3, [pc, #36]	; (8005a58 <cleanup_stdio+0x38>)
 8005a34:	4299      	cmp	r1, r3
 8005a36:	d002      	beq.n	8005a3e <cleanup_stdio+0x1e>
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f000 fda3 	bl	8006584 <_fflush_r>
 8005a3e:	68e1      	ldr	r1, [r4, #12]
 8005a40:	4b06      	ldr	r3, [pc, #24]	; (8005a5c <cleanup_stdio+0x3c>)
 8005a42:	4299      	cmp	r1, r3
 8005a44:	d004      	beq.n	8005a50 <cleanup_stdio+0x30>
 8005a46:	4620      	mov	r0, r4
 8005a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a4c:	f000 bd9a 	b.w	8006584 <_fflush_r>
 8005a50:	bd10      	pop	{r4, pc}
 8005a52:	bf00      	nop
 8005a54:	200040d4 	.word	0x200040d4
 8005a58:	2000413c 	.word	0x2000413c
 8005a5c:	200041a4 	.word	0x200041a4

08005a60 <global_stdio_init.part.0>:
 8005a60:	b510      	push	{r4, lr}
 8005a62:	4b0b      	ldr	r3, [pc, #44]	; (8005a90 <global_stdio_init.part.0+0x30>)
 8005a64:	4c0b      	ldr	r4, [pc, #44]	; (8005a94 <global_stdio_init.part.0+0x34>)
 8005a66:	4a0c      	ldr	r2, [pc, #48]	; (8005a98 <global_stdio_init.part.0+0x38>)
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	2104      	movs	r1, #4
 8005a70:	f7ff ff94 	bl	800599c <std>
 8005a74:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005a78:	2201      	movs	r2, #1
 8005a7a:	2109      	movs	r1, #9
 8005a7c:	f7ff ff8e 	bl	800599c <std>
 8005a80:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005a84:	2202      	movs	r2, #2
 8005a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a8a:	2112      	movs	r1, #18
 8005a8c:	f7ff bf86 	b.w	800599c <std>
 8005a90:	2000420c 	.word	0x2000420c
 8005a94:	200040d4 	.word	0x200040d4
 8005a98:	08005a09 	.word	0x08005a09

08005a9c <__sfp_lock_acquire>:
 8005a9c:	4801      	ldr	r0, [pc, #4]	; (8005aa4 <__sfp_lock_acquire+0x8>)
 8005a9e:	f000 b90e 	b.w	8005cbe <__retarget_lock_acquire_recursive>
 8005aa2:	bf00      	nop
 8005aa4:	20004215 	.word	0x20004215

08005aa8 <__sfp_lock_release>:
 8005aa8:	4801      	ldr	r0, [pc, #4]	; (8005ab0 <__sfp_lock_release+0x8>)
 8005aaa:	f000 b909 	b.w	8005cc0 <__retarget_lock_release_recursive>
 8005aae:	bf00      	nop
 8005ab0:	20004215 	.word	0x20004215

08005ab4 <__sinit>:
 8005ab4:	b510      	push	{r4, lr}
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	f7ff fff0 	bl	8005a9c <__sfp_lock_acquire>
 8005abc:	6a23      	ldr	r3, [r4, #32]
 8005abe:	b11b      	cbz	r3, 8005ac8 <__sinit+0x14>
 8005ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ac4:	f7ff bff0 	b.w	8005aa8 <__sfp_lock_release>
 8005ac8:	4b04      	ldr	r3, [pc, #16]	; (8005adc <__sinit+0x28>)
 8005aca:	6223      	str	r3, [r4, #32]
 8005acc:	4b04      	ldr	r3, [pc, #16]	; (8005ae0 <__sinit+0x2c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1f5      	bne.n	8005ac0 <__sinit+0xc>
 8005ad4:	f7ff ffc4 	bl	8005a60 <global_stdio_init.part.0>
 8005ad8:	e7f2      	b.n	8005ac0 <__sinit+0xc>
 8005ada:	bf00      	nop
 8005adc:	08005a21 	.word	0x08005a21
 8005ae0:	2000420c 	.word	0x2000420c

08005ae4 <_fwalk_sglue>:
 8005ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ae8:	4607      	mov	r7, r0
 8005aea:	4688      	mov	r8, r1
 8005aec:	4614      	mov	r4, r2
 8005aee:	2600      	movs	r6, #0
 8005af0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005af4:	f1b9 0901 	subs.w	r9, r9, #1
 8005af8:	d505      	bpl.n	8005b06 <_fwalk_sglue+0x22>
 8005afa:	6824      	ldr	r4, [r4, #0]
 8005afc:	2c00      	cmp	r4, #0
 8005afe:	d1f7      	bne.n	8005af0 <_fwalk_sglue+0xc>
 8005b00:	4630      	mov	r0, r6
 8005b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b06:	89ab      	ldrh	r3, [r5, #12]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d907      	bls.n	8005b1c <_fwalk_sglue+0x38>
 8005b0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b10:	3301      	adds	r3, #1
 8005b12:	d003      	beq.n	8005b1c <_fwalk_sglue+0x38>
 8005b14:	4629      	mov	r1, r5
 8005b16:	4638      	mov	r0, r7
 8005b18:	47c0      	blx	r8
 8005b1a:	4306      	orrs	r6, r0
 8005b1c:	3568      	adds	r5, #104	; 0x68
 8005b1e:	e7e9      	b.n	8005af4 <_fwalk_sglue+0x10>

08005b20 <iprintf>:
 8005b20:	b40f      	push	{r0, r1, r2, r3}
 8005b22:	b507      	push	{r0, r1, r2, lr}
 8005b24:	4906      	ldr	r1, [pc, #24]	; (8005b40 <iprintf+0x20>)
 8005b26:	ab04      	add	r3, sp, #16
 8005b28:	6808      	ldr	r0, [r1, #0]
 8005b2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b2e:	6881      	ldr	r1, [r0, #8]
 8005b30:	9301      	str	r3, [sp, #4]
 8005b32:	f000 f9f7 	bl	8005f24 <_vfiprintf_r>
 8005b36:	b003      	add	sp, #12
 8005b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b3c:	b004      	add	sp, #16
 8005b3e:	4770      	bx	lr
 8005b40:	20000068 	.word	0x20000068

08005b44 <__sread>:
 8005b44:	b510      	push	{r4, lr}
 8005b46:	460c      	mov	r4, r1
 8005b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b4c:	f000 f868 	bl	8005c20 <_read_r>
 8005b50:	2800      	cmp	r0, #0
 8005b52:	bfab      	itete	ge
 8005b54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b56:	89a3      	ldrhlt	r3, [r4, #12]
 8005b58:	181b      	addge	r3, r3, r0
 8005b5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b5e:	bfac      	ite	ge
 8005b60:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b62:	81a3      	strhlt	r3, [r4, #12]
 8005b64:	bd10      	pop	{r4, pc}

08005b66 <__swrite>:
 8005b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b6a:	461f      	mov	r7, r3
 8005b6c:	898b      	ldrh	r3, [r1, #12]
 8005b6e:	05db      	lsls	r3, r3, #23
 8005b70:	4605      	mov	r5, r0
 8005b72:	460c      	mov	r4, r1
 8005b74:	4616      	mov	r6, r2
 8005b76:	d505      	bpl.n	8005b84 <__swrite+0x1e>
 8005b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f000 f83c 	bl	8005bfc <_lseek_r>
 8005b84:	89a3      	ldrh	r3, [r4, #12]
 8005b86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b8e:	81a3      	strh	r3, [r4, #12]
 8005b90:	4632      	mov	r2, r6
 8005b92:	463b      	mov	r3, r7
 8005b94:	4628      	mov	r0, r5
 8005b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b9a:	f000 b853 	b.w	8005c44 <_write_r>

08005b9e <__sseek>:
 8005b9e:	b510      	push	{r4, lr}
 8005ba0:	460c      	mov	r4, r1
 8005ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ba6:	f000 f829 	bl	8005bfc <_lseek_r>
 8005baa:	1c43      	adds	r3, r0, #1
 8005bac:	89a3      	ldrh	r3, [r4, #12]
 8005bae:	bf15      	itete	ne
 8005bb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005bb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005bb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005bba:	81a3      	strheq	r3, [r4, #12]
 8005bbc:	bf18      	it	ne
 8005bbe:	81a3      	strhne	r3, [r4, #12]
 8005bc0:	bd10      	pop	{r4, pc}

08005bc2 <__sclose>:
 8005bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bc6:	f000 b809 	b.w	8005bdc <_close_r>

08005bca <memset>:
 8005bca:	4402      	add	r2, r0
 8005bcc:	4603      	mov	r3, r0
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d100      	bne.n	8005bd4 <memset+0xa>
 8005bd2:	4770      	bx	lr
 8005bd4:	f803 1b01 	strb.w	r1, [r3], #1
 8005bd8:	e7f9      	b.n	8005bce <memset+0x4>
	...

08005bdc <_close_r>:
 8005bdc:	b538      	push	{r3, r4, r5, lr}
 8005bde:	4d06      	ldr	r5, [pc, #24]	; (8005bf8 <_close_r+0x1c>)
 8005be0:	2300      	movs	r3, #0
 8005be2:	4604      	mov	r4, r0
 8005be4:	4608      	mov	r0, r1
 8005be6:	602b      	str	r3, [r5, #0]
 8005be8:	f7fa ffab 	bl	8000b42 <_close>
 8005bec:	1c43      	adds	r3, r0, #1
 8005bee:	d102      	bne.n	8005bf6 <_close_r+0x1a>
 8005bf0:	682b      	ldr	r3, [r5, #0]
 8005bf2:	b103      	cbz	r3, 8005bf6 <_close_r+0x1a>
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	bd38      	pop	{r3, r4, r5, pc}
 8005bf8:	20004210 	.word	0x20004210

08005bfc <_lseek_r>:
 8005bfc:	b538      	push	{r3, r4, r5, lr}
 8005bfe:	4d07      	ldr	r5, [pc, #28]	; (8005c1c <_lseek_r+0x20>)
 8005c00:	4604      	mov	r4, r0
 8005c02:	4608      	mov	r0, r1
 8005c04:	4611      	mov	r1, r2
 8005c06:	2200      	movs	r2, #0
 8005c08:	602a      	str	r2, [r5, #0]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f7fa ffc0 	bl	8000b90 <_lseek>
 8005c10:	1c43      	adds	r3, r0, #1
 8005c12:	d102      	bne.n	8005c1a <_lseek_r+0x1e>
 8005c14:	682b      	ldr	r3, [r5, #0]
 8005c16:	b103      	cbz	r3, 8005c1a <_lseek_r+0x1e>
 8005c18:	6023      	str	r3, [r4, #0]
 8005c1a:	bd38      	pop	{r3, r4, r5, pc}
 8005c1c:	20004210 	.word	0x20004210

08005c20 <_read_r>:
 8005c20:	b538      	push	{r3, r4, r5, lr}
 8005c22:	4d07      	ldr	r5, [pc, #28]	; (8005c40 <_read_r+0x20>)
 8005c24:	4604      	mov	r4, r0
 8005c26:	4608      	mov	r0, r1
 8005c28:	4611      	mov	r1, r2
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	602a      	str	r2, [r5, #0]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	f7fa ff4e 	bl	8000ad0 <_read>
 8005c34:	1c43      	adds	r3, r0, #1
 8005c36:	d102      	bne.n	8005c3e <_read_r+0x1e>
 8005c38:	682b      	ldr	r3, [r5, #0]
 8005c3a:	b103      	cbz	r3, 8005c3e <_read_r+0x1e>
 8005c3c:	6023      	str	r3, [r4, #0]
 8005c3e:	bd38      	pop	{r3, r4, r5, pc}
 8005c40:	20004210 	.word	0x20004210

08005c44 <_write_r>:
 8005c44:	b538      	push	{r3, r4, r5, lr}
 8005c46:	4d07      	ldr	r5, [pc, #28]	; (8005c64 <_write_r+0x20>)
 8005c48:	4604      	mov	r4, r0
 8005c4a:	4608      	mov	r0, r1
 8005c4c:	4611      	mov	r1, r2
 8005c4e:	2200      	movs	r2, #0
 8005c50:	602a      	str	r2, [r5, #0]
 8005c52:	461a      	mov	r2, r3
 8005c54:	f7fa ff59 	bl	8000b0a <_write>
 8005c58:	1c43      	adds	r3, r0, #1
 8005c5a:	d102      	bne.n	8005c62 <_write_r+0x1e>
 8005c5c:	682b      	ldr	r3, [r5, #0]
 8005c5e:	b103      	cbz	r3, 8005c62 <_write_r+0x1e>
 8005c60:	6023      	str	r3, [r4, #0]
 8005c62:	bd38      	pop	{r3, r4, r5, pc}
 8005c64:	20004210 	.word	0x20004210

08005c68 <__errno>:
 8005c68:	4b01      	ldr	r3, [pc, #4]	; (8005c70 <__errno+0x8>)
 8005c6a:	6818      	ldr	r0, [r3, #0]
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	20000068 	.word	0x20000068

08005c74 <__libc_init_array>:
 8005c74:	b570      	push	{r4, r5, r6, lr}
 8005c76:	4d0d      	ldr	r5, [pc, #52]	; (8005cac <__libc_init_array+0x38>)
 8005c78:	4c0d      	ldr	r4, [pc, #52]	; (8005cb0 <__libc_init_array+0x3c>)
 8005c7a:	1b64      	subs	r4, r4, r5
 8005c7c:	10a4      	asrs	r4, r4, #2
 8005c7e:	2600      	movs	r6, #0
 8005c80:	42a6      	cmp	r6, r4
 8005c82:	d109      	bne.n	8005c98 <__libc_init_array+0x24>
 8005c84:	4d0b      	ldr	r5, [pc, #44]	; (8005cb4 <__libc_init_array+0x40>)
 8005c86:	4c0c      	ldr	r4, [pc, #48]	; (8005cb8 <__libc_init_array+0x44>)
 8005c88:	f000 fdce 	bl	8006828 <_init>
 8005c8c:	1b64      	subs	r4, r4, r5
 8005c8e:	10a4      	asrs	r4, r4, #2
 8005c90:	2600      	movs	r6, #0
 8005c92:	42a6      	cmp	r6, r4
 8005c94:	d105      	bne.n	8005ca2 <__libc_init_array+0x2e>
 8005c96:	bd70      	pop	{r4, r5, r6, pc}
 8005c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c9c:	4798      	blx	r3
 8005c9e:	3601      	adds	r6, #1
 8005ca0:	e7ee      	b.n	8005c80 <__libc_init_array+0xc>
 8005ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ca6:	4798      	blx	r3
 8005ca8:	3601      	adds	r6, #1
 8005caa:	e7f2      	b.n	8005c92 <__libc_init_array+0x1e>
 8005cac:	0800691c 	.word	0x0800691c
 8005cb0:	0800691c 	.word	0x0800691c
 8005cb4:	0800691c 	.word	0x0800691c
 8005cb8:	08006920 	.word	0x08006920

08005cbc <__retarget_lock_init_recursive>:
 8005cbc:	4770      	bx	lr

08005cbe <__retarget_lock_acquire_recursive>:
 8005cbe:	4770      	bx	lr

08005cc0 <__retarget_lock_release_recursive>:
 8005cc0:	4770      	bx	lr

08005cc2 <memcpy>:
 8005cc2:	440a      	add	r2, r1
 8005cc4:	4291      	cmp	r1, r2
 8005cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cca:	d100      	bne.n	8005cce <memcpy+0xc>
 8005ccc:	4770      	bx	lr
 8005cce:	b510      	push	{r4, lr}
 8005cd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cd8:	4291      	cmp	r1, r2
 8005cda:	d1f9      	bne.n	8005cd0 <memcpy+0xe>
 8005cdc:	bd10      	pop	{r4, pc}
	...

08005ce0 <_free_r>:
 8005ce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ce2:	2900      	cmp	r1, #0
 8005ce4:	d044      	beq.n	8005d70 <_free_r+0x90>
 8005ce6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cea:	9001      	str	r0, [sp, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f1a1 0404 	sub.w	r4, r1, #4
 8005cf2:	bfb8      	it	lt
 8005cf4:	18e4      	addlt	r4, r4, r3
 8005cf6:	f000 f8df 	bl	8005eb8 <__malloc_lock>
 8005cfa:	4a1e      	ldr	r2, [pc, #120]	; (8005d74 <_free_r+0x94>)
 8005cfc:	9801      	ldr	r0, [sp, #4]
 8005cfe:	6813      	ldr	r3, [r2, #0]
 8005d00:	b933      	cbnz	r3, 8005d10 <_free_r+0x30>
 8005d02:	6063      	str	r3, [r4, #4]
 8005d04:	6014      	str	r4, [r2, #0]
 8005d06:	b003      	add	sp, #12
 8005d08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d0c:	f000 b8da 	b.w	8005ec4 <__malloc_unlock>
 8005d10:	42a3      	cmp	r3, r4
 8005d12:	d908      	bls.n	8005d26 <_free_r+0x46>
 8005d14:	6825      	ldr	r5, [r4, #0]
 8005d16:	1961      	adds	r1, r4, r5
 8005d18:	428b      	cmp	r3, r1
 8005d1a:	bf01      	itttt	eq
 8005d1c:	6819      	ldreq	r1, [r3, #0]
 8005d1e:	685b      	ldreq	r3, [r3, #4]
 8005d20:	1949      	addeq	r1, r1, r5
 8005d22:	6021      	streq	r1, [r4, #0]
 8005d24:	e7ed      	b.n	8005d02 <_free_r+0x22>
 8005d26:	461a      	mov	r2, r3
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	b10b      	cbz	r3, 8005d30 <_free_r+0x50>
 8005d2c:	42a3      	cmp	r3, r4
 8005d2e:	d9fa      	bls.n	8005d26 <_free_r+0x46>
 8005d30:	6811      	ldr	r1, [r2, #0]
 8005d32:	1855      	adds	r5, r2, r1
 8005d34:	42a5      	cmp	r5, r4
 8005d36:	d10b      	bne.n	8005d50 <_free_r+0x70>
 8005d38:	6824      	ldr	r4, [r4, #0]
 8005d3a:	4421      	add	r1, r4
 8005d3c:	1854      	adds	r4, r2, r1
 8005d3e:	42a3      	cmp	r3, r4
 8005d40:	6011      	str	r1, [r2, #0]
 8005d42:	d1e0      	bne.n	8005d06 <_free_r+0x26>
 8005d44:	681c      	ldr	r4, [r3, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	6053      	str	r3, [r2, #4]
 8005d4a:	440c      	add	r4, r1
 8005d4c:	6014      	str	r4, [r2, #0]
 8005d4e:	e7da      	b.n	8005d06 <_free_r+0x26>
 8005d50:	d902      	bls.n	8005d58 <_free_r+0x78>
 8005d52:	230c      	movs	r3, #12
 8005d54:	6003      	str	r3, [r0, #0]
 8005d56:	e7d6      	b.n	8005d06 <_free_r+0x26>
 8005d58:	6825      	ldr	r5, [r4, #0]
 8005d5a:	1961      	adds	r1, r4, r5
 8005d5c:	428b      	cmp	r3, r1
 8005d5e:	bf04      	itt	eq
 8005d60:	6819      	ldreq	r1, [r3, #0]
 8005d62:	685b      	ldreq	r3, [r3, #4]
 8005d64:	6063      	str	r3, [r4, #4]
 8005d66:	bf04      	itt	eq
 8005d68:	1949      	addeq	r1, r1, r5
 8005d6a:	6021      	streq	r1, [r4, #0]
 8005d6c:	6054      	str	r4, [r2, #4]
 8005d6e:	e7ca      	b.n	8005d06 <_free_r+0x26>
 8005d70:	b003      	add	sp, #12
 8005d72:	bd30      	pop	{r4, r5, pc}
 8005d74:	20004218 	.word	0x20004218

08005d78 <sbrk_aligned>:
 8005d78:	b570      	push	{r4, r5, r6, lr}
 8005d7a:	4e0e      	ldr	r6, [pc, #56]	; (8005db4 <sbrk_aligned+0x3c>)
 8005d7c:	460c      	mov	r4, r1
 8005d7e:	6831      	ldr	r1, [r6, #0]
 8005d80:	4605      	mov	r5, r0
 8005d82:	b911      	cbnz	r1, 8005d8a <sbrk_aligned+0x12>
 8005d84:	f000 fcbc 	bl	8006700 <_sbrk_r>
 8005d88:	6030      	str	r0, [r6, #0]
 8005d8a:	4621      	mov	r1, r4
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	f000 fcb7 	bl	8006700 <_sbrk_r>
 8005d92:	1c43      	adds	r3, r0, #1
 8005d94:	d00a      	beq.n	8005dac <sbrk_aligned+0x34>
 8005d96:	1cc4      	adds	r4, r0, #3
 8005d98:	f024 0403 	bic.w	r4, r4, #3
 8005d9c:	42a0      	cmp	r0, r4
 8005d9e:	d007      	beq.n	8005db0 <sbrk_aligned+0x38>
 8005da0:	1a21      	subs	r1, r4, r0
 8005da2:	4628      	mov	r0, r5
 8005da4:	f000 fcac 	bl	8006700 <_sbrk_r>
 8005da8:	3001      	adds	r0, #1
 8005daa:	d101      	bne.n	8005db0 <sbrk_aligned+0x38>
 8005dac:	f04f 34ff 	mov.w	r4, #4294967295
 8005db0:	4620      	mov	r0, r4
 8005db2:	bd70      	pop	{r4, r5, r6, pc}
 8005db4:	2000421c 	.word	0x2000421c

08005db8 <_malloc_r>:
 8005db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dbc:	1ccd      	adds	r5, r1, #3
 8005dbe:	f025 0503 	bic.w	r5, r5, #3
 8005dc2:	3508      	adds	r5, #8
 8005dc4:	2d0c      	cmp	r5, #12
 8005dc6:	bf38      	it	cc
 8005dc8:	250c      	movcc	r5, #12
 8005dca:	2d00      	cmp	r5, #0
 8005dcc:	4607      	mov	r7, r0
 8005dce:	db01      	blt.n	8005dd4 <_malloc_r+0x1c>
 8005dd0:	42a9      	cmp	r1, r5
 8005dd2:	d905      	bls.n	8005de0 <_malloc_r+0x28>
 8005dd4:	230c      	movs	r3, #12
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	2600      	movs	r6, #0
 8005dda:	4630      	mov	r0, r6
 8005ddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005de0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005eb4 <_malloc_r+0xfc>
 8005de4:	f000 f868 	bl	8005eb8 <__malloc_lock>
 8005de8:	f8d8 3000 	ldr.w	r3, [r8]
 8005dec:	461c      	mov	r4, r3
 8005dee:	bb5c      	cbnz	r4, 8005e48 <_malloc_r+0x90>
 8005df0:	4629      	mov	r1, r5
 8005df2:	4638      	mov	r0, r7
 8005df4:	f7ff ffc0 	bl	8005d78 <sbrk_aligned>
 8005df8:	1c43      	adds	r3, r0, #1
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	d155      	bne.n	8005eaa <_malloc_r+0xf2>
 8005dfe:	f8d8 4000 	ldr.w	r4, [r8]
 8005e02:	4626      	mov	r6, r4
 8005e04:	2e00      	cmp	r6, #0
 8005e06:	d145      	bne.n	8005e94 <_malloc_r+0xdc>
 8005e08:	2c00      	cmp	r4, #0
 8005e0a:	d048      	beq.n	8005e9e <_malloc_r+0xe6>
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	4631      	mov	r1, r6
 8005e10:	4638      	mov	r0, r7
 8005e12:	eb04 0903 	add.w	r9, r4, r3
 8005e16:	f000 fc73 	bl	8006700 <_sbrk_r>
 8005e1a:	4581      	cmp	r9, r0
 8005e1c:	d13f      	bne.n	8005e9e <_malloc_r+0xe6>
 8005e1e:	6821      	ldr	r1, [r4, #0]
 8005e20:	1a6d      	subs	r5, r5, r1
 8005e22:	4629      	mov	r1, r5
 8005e24:	4638      	mov	r0, r7
 8005e26:	f7ff ffa7 	bl	8005d78 <sbrk_aligned>
 8005e2a:	3001      	adds	r0, #1
 8005e2c:	d037      	beq.n	8005e9e <_malloc_r+0xe6>
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	442b      	add	r3, r5
 8005e32:	6023      	str	r3, [r4, #0]
 8005e34:	f8d8 3000 	ldr.w	r3, [r8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d038      	beq.n	8005eae <_malloc_r+0xf6>
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	42a2      	cmp	r2, r4
 8005e40:	d12b      	bne.n	8005e9a <_malloc_r+0xe2>
 8005e42:	2200      	movs	r2, #0
 8005e44:	605a      	str	r2, [r3, #4]
 8005e46:	e00f      	b.n	8005e68 <_malloc_r+0xb0>
 8005e48:	6822      	ldr	r2, [r4, #0]
 8005e4a:	1b52      	subs	r2, r2, r5
 8005e4c:	d41f      	bmi.n	8005e8e <_malloc_r+0xd6>
 8005e4e:	2a0b      	cmp	r2, #11
 8005e50:	d917      	bls.n	8005e82 <_malloc_r+0xca>
 8005e52:	1961      	adds	r1, r4, r5
 8005e54:	42a3      	cmp	r3, r4
 8005e56:	6025      	str	r5, [r4, #0]
 8005e58:	bf18      	it	ne
 8005e5a:	6059      	strne	r1, [r3, #4]
 8005e5c:	6863      	ldr	r3, [r4, #4]
 8005e5e:	bf08      	it	eq
 8005e60:	f8c8 1000 	streq.w	r1, [r8]
 8005e64:	5162      	str	r2, [r4, r5]
 8005e66:	604b      	str	r3, [r1, #4]
 8005e68:	4638      	mov	r0, r7
 8005e6a:	f104 060b 	add.w	r6, r4, #11
 8005e6e:	f000 f829 	bl	8005ec4 <__malloc_unlock>
 8005e72:	f026 0607 	bic.w	r6, r6, #7
 8005e76:	1d23      	adds	r3, r4, #4
 8005e78:	1af2      	subs	r2, r6, r3
 8005e7a:	d0ae      	beq.n	8005dda <_malloc_r+0x22>
 8005e7c:	1b9b      	subs	r3, r3, r6
 8005e7e:	50a3      	str	r3, [r4, r2]
 8005e80:	e7ab      	b.n	8005dda <_malloc_r+0x22>
 8005e82:	42a3      	cmp	r3, r4
 8005e84:	6862      	ldr	r2, [r4, #4]
 8005e86:	d1dd      	bne.n	8005e44 <_malloc_r+0x8c>
 8005e88:	f8c8 2000 	str.w	r2, [r8]
 8005e8c:	e7ec      	b.n	8005e68 <_malloc_r+0xb0>
 8005e8e:	4623      	mov	r3, r4
 8005e90:	6864      	ldr	r4, [r4, #4]
 8005e92:	e7ac      	b.n	8005dee <_malloc_r+0x36>
 8005e94:	4634      	mov	r4, r6
 8005e96:	6876      	ldr	r6, [r6, #4]
 8005e98:	e7b4      	b.n	8005e04 <_malloc_r+0x4c>
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	e7cc      	b.n	8005e38 <_malloc_r+0x80>
 8005e9e:	230c      	movs	r3, #12
 8005ea0:	603b      	str	r3, [r7, #0]
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	f000 f80e 	bl	8005ec4 <__malloc_unlock>
 8005ea8:	e797      	b.n	8005dda <_malloc_r+0x22>
 8005eaa:	6025      	str	r5, [r4, #0]
 8005eac:	e7dc      	b.n	8005e68 <_malloc_r+0xb0>
 8005eae:	605b      	str	r3, [r3, #4]
 8005eb0:	deff      	udf	#255	; 0xff
 8005eb2:	bf00      	nop
 8005eb4:	20004218 	.word	0x20004218

08005eb8 <__malloc_lock>:
 8005eb8:	4801      	ldr	r0, [pc, #4]	; (8005ec0 <__malloc_lock+0x8>)
 8005eba:	f7ff bf00 	b.w	8005cbe <__retarget_lock_acquire_recursive>
 8005ebe:	bf00      	nop
 8005ec0:	20004214 	.word	0x20004214

08005ec4 <__malloc_unlock>:
 8005ec4:	4801      	ldr	r0, [pc, #4]	; (8005ecc <__malloc_unlock+0x8>)
 8005ec6:	f7ff befb 	b.w	8005cc0 <__retarget_lock_release_recursive>
 8005eca:	bf00      	nop
 8005ecc:	20004214 	.word	0x20004214

08005ed0 <__sfputc_r>:
 8005ed0:	6893      	ldr	r3, [r2, #8]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	b410      	push	{r4}
 8005ed8:	6093      	str	r3, [r2, #8]
 8005eda:	da08      	bge.n	8005eee <__sfputc_r+0x1e>
 8005edc:	6994      	ldr	r4, [r2, #24]
 8005ede:	42a3      	cmp	r3, r4
 8005ee0:	db01      	blt.n	8005ee6 <__sfputc_r+0x16>
 8005ee2:	290a      	cmp	r1, #10
 8005ee4:	d103      	bne.n	8005eee <__sfputc_r+0x1e>
 8005ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005eea:	f000 bb73 	b.w	80065d4 <__swbuf_r>
 8005eee:	6813      	ldr	r3, [r2, #0]
 8005ef0:	1c58      	adds	r0, r3, #1
 8005ef2:	6010      	str	r0, [r2, #0]
 8005ef4:	7019      	strb	r1, [r3, #0]
 8005ef6:	4608      	mov	r0, r1
 8005ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <__sfputs_r>:
 8005efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f00:	4606      	mov	r6, r0
 8005f02:	460f      	mov	r7, r1
 8005f04:	4614      	mov	r4, r2
 8005f06:	18d5      	adds	r5, r2, r3
 8005f08:	42ac      	cmp	r4, r5
 8005f0a:	d101      	bne.n	8005f10 <__sfputs_r+0x12>
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	e007      	b.n	8005f20 <__sfputs_r+0x22>
 8005f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f14:	463a      	mov	r2, r7
 8005f16:	4630      	mov	r0, r6
 8005f18:	f7ff ffda 	bl	8005ed0 <__sfputc_r>
 8005f1c:	1c43      	adds	r3, r0, #1
 8005f1e:	d1f3      	bne.n	8005f08 <__sfputs_r+0xa>
 8005f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f24 <_vfiprintf_r>:
 8005f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f28:	460d      	mov	r5, r1
 8005f2a:	b09d      	sub	sp, #116	; 0x74
 8005f2c:	4614      	mov	r4, r2
 8005f2e:	4698      	mov	r8, r3
 8005f30:	4606      	mov	r6, r0
 8005f32:	b118      	cbz	r0, 8005f3c <_vfiprintf_r+0x18>
 8005f34:	6a03      	ldr	r3, [r0, #32]
 8005f36:	b90b      	cbnz	r3, 8005f3c <_vfiprintf_r+0x18>
 8005f38:	f7ff fdbc 	bl	8005ab4 <__sinit>
 8005f3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f3e:	07d9      	lsls	r1, r3, #31
 8005f40:	d405      	bmi.n	8005f4e <_vfiprintf_r+0x2a>
 8005f42:	89ab      	ldrh	r3, [r5, #12]
 8005f44:	059a      	lsls	r2, r3, #22
 8005f46:	d402      	bmi.n	8005f4e <_vfiprintf_r+0x2a>
 8005f48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f4a:	f7ff feb8 	bl	8005cbe <__retarget_lock_acquire_recursive>
 8005f4e:	89ab      	ldrh	r3, [r5, #12]
 8005f50:	071b      	lsls	r3, r3, #28
 8005f52:	d501      	bpl.n	8005f58 <_vfiprintf_r+0x34>
 8005f54:	692b      	ldr	r3, [r5, #16]
 8005f56:	b99b      	cbnz	r3, 8005f80 <_vfiprintf_r+0x5c>
 8005f58:	4629      	mov	r1, r5
 8005f5a:	4630      	mov	r0, r6
 8005f5c:	f000 fb78 	bl	8006650 <__swsetup_r>
 8005f60:	b170      	cbz	r0, 8005f80 <_vfiprintf_r+0x5c>
 8005f62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f64:	07dc      	lsls	r4, r3, #31
 8005f66:	d504      	bpl.n	8005f72 <_vfiprintf_r+0x4e>
 8005f68:	f04f 30ff 	mov.w	r0, #4294967295
 8005f6c:	b01d      	add	sp, #116	; 0x74
 8005f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f72:	89ab      	ldrh	r3, [r5, #12]
 8005f74:	0598      	lsls	r0, r3, #22
 8005f76:	d4f7      	bmi.n	8005f68 <_vfiprintf_r+0x44>
 8005f78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f7a:	f7ff fea1 	bl	8005cc0 <__retarget_lock_release_recursive>
 8005f7e:	e7f3      	b.n	8005f68 <_vfiprintf_r+0x44>
 8005f80:	2300      	movs	r3, #0
 8005f82:	9309      	str	r3, [sp, #36]	; 0x24
 8005f84:	2320      	movs	r3, #32
 8005f86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f8e:	2330      	movs	r3, #48	; 0x30
 8005f90:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006144 <_vfiprintf_r+0x220>
 8005f94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f98:	f04f 0901 	mov.w	r9, #1
 8005f9c:	4623      	mov	r3, r4
 8005f9e:	469a      	mov	sl, r3
 8005fa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fa4:	b10a      	cbz	r2, 8005faa <_vfiprintf_r+0x86>
 8005fa6:	2a25      	cmp	r2, #37	; 0x25
 8005fa8:	d1f9      	bne.n	8005f9e <_vfiprintf_r+0x7a>
 8005faa:	ebba 0b04 	subs.w	fp, sl, r4
 8005fae:	d00b      	beq.n	8005fc8 <_vfiprintf_r+0xa4>
 8005fb0:	465b      	mov	r3, fp
 8005fb2:	4622      	mov	r2, r4
 8005fb4:	4629      	mov	r1, r5
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	f7ff ffa1 	bl	8005efe <__sfputs_r>
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	f000 80a9 	beq.w	8006114 <_vfiprintf_r+0x1f0>
 8005fc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fc4:	445a      	add	r2, fp
 8005fc6:	9209      	str	r2, [sp, #36]	; 0x24
 8005fc8:	f89a 3000 	ldrb.w	r3, [sl]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 80a1 	beq.w	8006114 <_vfiprintf_r+0x1f0>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8005fd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fdc:	f10a 0a01 	add.w	sl, sl, #1
 8005fe0:	9304      	str	r3, [sp, #16]
 8005fe2:	9307      	str	r3, [sp, #28]
 8005fe4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fe8:	931a      	str	r3, [sp, #104]	; 0x68
 8005fea:	4654      	mov	r4, sl
 8005fec:	2205      	movs	r2, #5
 8005fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ff2:	4854      	ldr	r0, [pc, #336]	; (8006144 <_vfiprintf_r+0x220>)
 8005ff4:	f7fa f8ec 	bl	80001d0 <memchr>
 8005ff8:	9a04      	ldr	r2, [sp, #16]
 8005ffa:	b9d8      	cbnz	r0, 8006034 <_vfiprintf_r+0x110>
 8005ffc:	06d1      	lsls	r1, r2, #27
 8005ffe:	bf44      	itt	mi
 8006000:	2320      	movmi	r3, #32
 8006002:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006006:	0713      	lsls	r3, r2, #28
 8006008:	bf44      	itt	mi
 800600a:	232b      	movmi	r3, #43	; 0x2b
 800600c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006010:	f89a 3000 	ldrb.w	r3, [sl]
 8006014:	2b2a      	cmp	r3, #42	; 0x2a
 8006016:	d015      	beq.n	8006044 <_vfiprintf_r+0x120>
 8006018:	9a07      	ldr	r2, [sp, #28]
 800601a:	4654      	mov	r4, sl
 800601c:	2000      	movs	r0, #0
 800601e:	f04f 0c0a 	mov.w	ip, #10
 8006022:	4621      	mov	r1, r4
 8006024:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006028:	3b30      	subs	r3, #48	; 0x30
 800602a:	2b09      	cmp	r3, #9
 800602c:	d94d      	bls.n	80060ca <_vfiprintf_r+0x1a6>
 800602e:	b1b0      	cbz	r0, 800605e <_vfiprintf_r+0x13a>
 8006030:	9207      	str	r2, [sp, #28]
 8006032:	e014      	b.n	800605e <_vfiprintf_r+0x13a>
 8006034:	eba0 0308 	sub.w	r3, r0, r8
 8006038:	fa09 f303 	lsl.w	r3, r9, r3
 800603c:	4313      	orrs	r3, r2
 800603e:	9304      	str	r3, [sp, #16]
 8006040:	46a2      	mov	sl, r4
 8006042:	e7d2      	b.n	8005fea <_vfiprintf_r+0xc6>
 8006044:	9b03      	ldr	r3, [sp, #12]
 8006046:	1d19      	adds	r1, r3, #4
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	9103      	str	r1, [sp, #12]
 800604c:	2b00      	cmp	r3, #0
 800604e:	bfbb      	ittet	lt
 8006050:	425b      	neglt	r3, r3
 8006052:	f042 0202 	orrlt.w	r2, r2, #2
 8006056:	9307      	strge	r3, [sp, #28]
 8006058:	9307      	strlt	r3, [sp, #28]
 800605a:	bfb8      	it	lt
 800605c:	9204      	strlt	r2, [sp, #16]
 800605e:	7823      	ldrb	r3, [r4, #0]
 8006060:	2b2e      	cmp	r3, #46	; 0x2e
 8006062:	d10c      	bne.n	800607e <_vfiprintf_r+0x15a>
 8006064:	7863      	ldrb	r3, [r4, #1]
 8006066:	2b2a      	cmp	r3, #42	; 0x2a
 8006068:	d134      	bne.n	80060d4 <_vfiprintf_r+0x1b0>
 800606a:	9b03      	ldr	r3, [sp, #12]
 800606c:	1d1a      	adds	r2, r3, #4
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	9203      	str	r2, [sp, #12]
 8006072:	2b00      	cmp	r3, #0
 8006074:	bfb8      	it	lt
 8006076:	f04f 33ff 	movlt.w	r3, #4294967295
 800607a:	3402      	adds	r4, #2
 800607c:	9305      	str	r3, [sp, #20]
 800607e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006154 <_vfiprintf_r+0x230>
 8006082:	7821      	ldrb	r1, [r4, #0]
 8006084:	2203      	movs	r2, #3
 8006086:	4650      	mov	r0, sl
 8006088:	f7fa f8a2 	bl	80001d0 <memchr>
 800608c:	b138      	cbz	r0, 800609e <_vfiprintf_r+0x17a>
 800608e:	9b04      	ldr	r3, [sp, #16]
 8006090:	eba0 000a 	sub.w	r0, r0, sl
 8006094:	2240      	movs	r2, #64	; 0x40
 8006096:	4082      	lsls	r2, r0
 8006098:	4313      	orrs	r3, r2
 800609a:	3401      	adds	r4, #1
 800609c:	9304      	str	r3, [sp, #16]
 800609e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060a2:	4829      	ldr	r0, [pc, #164]	; (8006148 <_vfiprintf_r+0x224>)
 80060a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060a8:	2206      	movs	r2, #6
 80060aa:	f7fa f891 	bl	80001d0 <memchr>
 80060ae:	2800      	cmp	r0, #0
 80060b0:	d03f      	beq.n	8006132 <_vfiprintf_r+0x20e>
 80060b2:	4b26      	ldr	r3, [pc, #152]	; (800614c <_vfiprintf_r+0x228>)
 80060b4:	bb1b      	cbnz	r3, 80060fe <_vfiprintf_r+0x1da>
 80060b6:	9b03      	ldr	r3, [sp, #12]
 80060b8:	3307      	adds	r3, #7
 80060ba:	f023 0307 	bic.w	r3, r3, #7
 80060be:	3308      	adds	r3, #8
 80060c0:	9303      	str	r3, [sp, #12]
 80060c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060c4:	443b      	add	r3, r7
 80060c6:	9309      	str	r3, [sp, #36]	; 0x24
 80060c8:	e768      	b.n	8005f9c <_vfiprintf_r+0x78>
 80060ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80060ce:	460c      	mov	r4, r1
 80060d0:	2001      	movs	r0, #1
 80060d2:	e7a6      	b.n	8006022 <_vfiprintf_r+0xfe>
 80060d4:	2300      	movs	r3, #0
 80060d6:	3401      	adds	r4, #1
 80060d8:	9305      	str	r3, [sp, #20]
 80060da:	4619      	mov	r1, r3
 80060dc:	f04f 0c0a 	mov.w	ip, #10
 80060e0:	4620      	mov	r0, r4
 80060e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060e6:	3a30      	subs	r2, #48	; 0x30
 80060e8:	2a09      	cmp	r2, #9
 80060ea:	d903      	bls.n	80060f4 <_vfiprintf_r+0x1d0>
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d0c6      	beq.n	800607e <_vfiprintf_r+0x15a>
 80060f0:	9105      	str	r1, [sp, #20]
 80060f2:	e7c4      	b.n	800607e <_vfiprintf_r+0x15a>
 80060f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80060f8:	4604      	mov	r4, r0
 80060fa:	2301      	movs	r3, #1
 80060fc:	e7f0      	b.n	80060e0 <_vfiprintf_r+0x1bc>
 80060fe:	ab03      	add	r3, sp, #12
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	462a      	mov	r2, r5
 8006104:	4b12      	ldr	r3, [pc, #72]	; (8006150 <_vfiprintf_r+0x22c>)
 8006106:	a904      	add	r1, sp, #16
 8006108:	4630      	mov	r0, r6
 800610a:	f3af 8000 	nop.w
 800610e:	4607      	mov	r7, r0
 8006110:	1c78      	adds	r0, r7, #1
 8006112:	d1d6      	bne.n	80060c2 <_vfiprintf_r+0x19e>
 8006114:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006116:	07d9      	lsls	r1, r3, #31
 8006118:	d405      	bmi.n	8006126 <_vfiprintf_r+0x202>
 800611a:	89ab      	ldrh	r3, [r5, #12]
 800611c:	059a      	lsls	r2, r3, #22
 800611e:	d402      	bmi.n	8006126 <_vfiprintf_r+0x202>
 8006120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006122:	f7ff fdcd 	bl	8005cc0 <__retarget_lock_release_recursive>
 8006126:	89ab      	ldrh	r3, [r5, #12]
 8006128:	065b      	lsls	r3, r3, #25
 800612a:	f53f af1d 	bmi.w	8005f68 <_vfiprintf_r+0x44>
 800612e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006130:	e71c      	b.n	8005f6c <_vfiprintf_r+0x48>
 8006132:	ab03      	add	r3, sp, #12
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	462a      	mov	r2, r5
 8006138:	4b05      	ldr	r3, [pc, #20]	; (8006150 <_vfiprintf_r+0x22c>)
 800613a:	a904      	add	r1, sp, #16
 800613c:	4630      	mov	r0, r6
 800613e:	f000 f879 	bl	8006234 <_printf_i>
 8006142:	e7e4      	b.n	800610e <_vfiprintf_r+0x1ea>
 8006144:	080068e0 	.word	0x080068e0
 8006148:	080068ea 	.word	0x080068ea
 800614c:	00000000 	.word	0x00000000
 8006150:	08005eff 	.word	0x08005eff
 8006154:	080068e6 	.word	0x080068e6

08006158 <_printf_common>:
 8006158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800615c:	4616      	mov	r6, r2
 800615e:	4699      	mov	r9, r3
 8006160:	688a      	ldr	r2, [r1, #8]
 8006162:	690b      	ldr	r3, [r1, #16]
 8006164:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006168:	4293      	cmp	r3, r2
 800616a:	bfb8      	it	lt
 800616c:	4613      	movlt	r3, r2
 800616e:	6033      	str	r3, [r6, #0]
 8006170:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006174:	4607      	mov	r7, r0
 8006176:	460c      	mov	r4, r1
 8006178:	b10a      	cbz	r2, 800617e <_printf_common+0x26>
 800617a:	3301      	adds	r3, #1
 800617c:	6033      	str	r3, [r6, #0]
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	0699      	lsls	r1, r3, #26
 8006182:	bf42      	ittt	mi
 8006184:	6833      	ldrmi	r3, [r6, #0]
 8006186:	3302      	addmi	r3, #2
 8006188:	6033      	strmi	r3, [r6, #0]
 800618a:	6825      	ldr	r5, [r4, #0]
 800618c:	f015 0506 	ands.w	r5, r5, #6
 8006190:	d106      	bne.n	80061a0 <_printf_common+0x48>
 8006192:	f104 0a19 	add.w	sl, r4, #25
 8006196:	68e3      	ldr	r3, [r4, #12]
 8006198:	6832      	ldr	r2, [r6, #0]
 800619a:	1a9b      	subs	r3, r3, r2
 800619c:	42ab      	cmp	r3, r5
 800619e:	dc26      	bgt.n	80061ee <_printf_common+0x96>
 80061a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061a4:	1e13      	subs	r3, r2, #0
 80061a6:	6822      	ldr	r2, [r4, #0]
 80061a8:	bf18      	it	ne
 80061aa:	2301      	movne	r3, #1
 80061ac:	0692      	lsls	r2, r2, #26
 80061ae:	d42b      	bmi.n	8006208 <_printf_common+0xb0>
 80061b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061b4:	4649      	mov	r1, r9
 80061b6:	4638      	mov	r0, r7
 80061b8:	47c0      	blx	r8
 80061ba:	3001      	adds	r0, #1
 80061bc:	d01e      	beq.n	80061fc <_printf_common+0xa4>
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	6922      	ldr	r2, [r4, #16]
 80061c2:	f003 0306 	and.w	r3, r3, #6
 80061c6:	2b04      	cmp	r3, #4
 80061c8:	bf02      	ittt	eq
 80061ca:	68e5      	ldreq	r5, [r4, #12]
 80061cc:	6833      	ldreq	r3, [r6, #0]
 80061ce:	1aed      	subeq	r5, r5, r3
 80061d0:	68a3      	ldr	r3, [r4, #8]
 80061d2:	bf0c      	ite	eq
 80061d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061d8:	2500      	movne	r5, #0
 80061da:	4293      	cmp	r3, r2
 80061dc:	bfc4      	itt	gt
 80061de:	1a9b      	subgt	r3, r3, r2
 80061e0:	18ed      	addgt	r5, r5, r3
 80061e2:	2600      	movs	r6, #0
 80061e4:	341a      	adds	r4, #26
 80061e6:	42b5      	cmp	r5, r6
 80061e8:	d11a      	bne.n	8006220 <_printf_common+0xc8>
 80061ea:	2000      	movs	r0, #0
 80061ec:	e008      	b.n	8006200 <_printf_common+0xa8>
 80061ee:	2301      	movs	r3, #1
 80061f0:	4652      	mov	r2, sl
 80061f2:	4649      	mov	r1, r9
 80061f4:	4638      	mov	r0, r7
 80061f6:	47c0      	blx	r8
 80061f8:	3001      	adds	r0, #1
 80061fa:	d103      	bne.n	8006204 <_printf_common+0xac>
 80061fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006204:	3501      	adds	r5, #1
 8006206:	e7c6      	b.n	8006196 <_printf_common+0x3e>
 8006208:	18e1      	adds	r1, r4, r3
 800620a:	1c5a      	adds	r2, r3, #1
 800620c:	2030      	movs	r0, #48	; 0x30
 800620e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006212:	4422      	add	r2, r4
 8006214:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006218:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800621c:	3302      	adds	r3, #2
 800621e:	e7c7      	b.n	80061b0 <_printf_common+0x58>
 8006220:	2301      	movs	r3, #1
 8006222:	4622      	mov	r2, r4
 8006224:	4649      	mov	r1, r9
 8006226:	4638      	mov	r0, r7
 8006228:	47c0      	blx	r8
 800622a:	3001      	adds	r0, #1
 800622c:	d0e6      	beq.n	80061fc <_printf_common+0xa4>
 800622e:	3601      	adds	r6, #1
 8006230:	e7d9      	b.n	80061e6 <_printf_common+0x8e>
	...

08006234 <_printf_i>:
 8006234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006238:	7e0f      	ldrb	r7, [r1, #24]
 800623a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800623c:	2f78      	cmp	r7, #120	; 0x78
 800623e:	4691      	mov	r9, r2
 8006240:	4680      	mov	r8, r0
 8006242:	460c      	mov	r4, r1
 8006244:	469a      	mov	sl, r3
 8006246:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800624a:	d807      	bhi.n	800625c <_printf_i+0x28>
 800624c:	2f62      	cmp	r7, #98	; 0x62
 800624e:	d80a      	bhi.n	8006266 <_printf_i+0x32>
 8006250:	2f00      	cmp	r7, #0
 8006252:	f000 80d4 	beq.w	80063fe <_printf_i+0x1ca>
 8006256:	2f58      	cmp	r7, #88	; 0x58
 8006258:	f000 80c0 	beq.w	80063dc <_printf_i+0x1a8>
 800625c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006260:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006264:	e03a      	b.n	80062dc <_printf_i+0xa8>
 8006266:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800626a:	2b15      	cmp	r3, #21
 800626c:	d8f6      	bhi.n	800625c <_printf_i+0x28>
 800626e:	a101      	add	r1, pc, #4	; (adr r1, 8006274 <_printf_i+0x40>)
 8006270:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006274:	080062cd 	.word	0x080062cd
 8006278:	080062e1 	.word	0x080062e1
 800627c:	0800625d 	.word	0x0800625d
 8006280:	0800625d 	.word	0x0800625d
 8006284:	0800625d 	.word	0x0800625d
 8006288:	0800625d 	.word	0x0800625d
 800628c:	080062e1 	.word	0x080062e1
 8006290:	0800625d 	.word	0x0800625d
 8006294:	0800625d 	.word	0x0800625d
 8006298:	0800625d 	.word	0x0800625d
 800629c:	0800625d 	.word	0x0800625d
 80062a0:	080063e5 	.word	0x080063e5
 80062a4:	0800630d 	.word	0x0800630d
 80062a8:	0800639f 	.word	0x0800639f
 80062ac:	0800625d 	.word	0x0800625d
 80062b0:	0800625d 	.word	0x0800625d
 80062b4:	08006407 	.word	0x08006407
 80062b8:	0800625d 	.word	0x0800625d
 80062bc:	0800630d 	.word	0x0800630d
 80062c0:	0800625d 	.word	0x0800625d
 80062c4:	0800625d 	.word	0x0800625d
 80062c8:	080063a7 	.word	0x080063a7
 80062cc:	682b      	ldr	r3, [r5, #0]
 80062ce:	1d1a      	adds	r2, r3, #4
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	602a      	str	r2, [r5, #0]
 80062d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062dc:	2301      	movs	r3, #1
 80062de:	e09f      	b.n	8006420 <_printf_i+0x1ec>
 80062e0:	6820      	ldr	r0, [r4, #0]
 80062e2:	682b      	ldr	r3, [r5, #0]
 80062e4:	0607      	lsls	r7, r0, #24
 80062e6:	f103 0104 	add.w	r1, r3, #4
 80062ea:	6029      	str	r1, [r5, #0]
 80062ec:	d501      	bpl.n	80062f2 <_printf_i+0xbe>
 80062ee:	681e      	ldr	r6, [r3, #0]
 80062f0:	e003      	b.n	80062fa <_printf_i+0xc6>
 80062f2:	0646      	lsls	r6, r0, #25
 80062f4:	d5fb      	bpl.n	80062ee <_printf_i+0xba>
 80062f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80062fa:	2e00      	cmp	r6, #0
 80062fc:	da03      	bge.n	8006306 <_printf_i+0xd2>
 80062fe:	232d      	movs	r3, #45	; 0x2d
 8006300:	4276      	negs	r6, r6
 8006302:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006306:	485a      	ldr	r0, [pc, #360]	; (8006470 <_printf_i+0x23c>)
 8006308:	230a      	movs	r3, #10
 800630a:	e012      	b.n	8006332 <_printf_i+0xfe>
 800630c:	682b      	ldr	r3, [r5, #0]
 800630e:	6820      	ldr	r0, [r4, #0]
 8006310:	1d19      	adds	r1, r3, #4
 8006312:	6029      	str	r1, [r5, #0]
 8006314:	0605      	lsls	r5, r0, #24
 8006316:	d501      	bpl.n	800631c <_printf_i+0xe8>
 8006318:	681e      	ldr	r6, [r3, #0]
 800631a:	e002      	b.n	8006322 <_printf_i+0xee>
 800631c:	0641      	lsls	r1, r0, #25
 800631e:	d5fb      	bpl.n	8006318 <_printf_i+0xe4>
 8006320:	881e      	ldrh	r6, [r3, #0]
 8006322:	4853      	ldr	r0, [pc, #332]	; (8006470 <_printf_i+0x23c>)
 8006324:	2f6f      	cmp	r7, #111	; 0x6f
 8006326:	bf0c      	ite	eq
 8006328:	2308      	moveq	r3, #8
 800632a:	230a      	movne	r3, #10
 800632c:	2100      	movs	r1, #0
 800632e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006332:	6865      	ldr	r5, [r4, #4]
 8006334:	60a5      	str	r5, [r4, #8]
 8006336:	2d00      	cmp	r5, #0
 8006338:	bfa2      	ittt	ge
 800633a:	6821      	ldrge	r1, [r4, #0]
 800633c:	f021 0104 	bicge.w	r1, r1, #4
 8006340:	6021      	strge	r1, [r4, #0]
 8006342:	b90e      	cbnz	r6, 8006348 <_printf_i+0x114>
 8006344:	2d00      	cmp	r5, #0
 8006346:	d04b      	beq.n	80063e0 <_printf_i+0x1ac>
 8006348:	4615      	mov	r5, r2
 800634a:	fbb6 f1f3 	udiv	r1, r6, r3
 800634e:	fb03 6711 	mls	r7, r3, r1, r6
 8006352:	5dc7      	ldrb	r7, [r0, r7]
 8006354:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006358:	4637      	mov	r7, r6
 800635a:	42bb      	cmp	r3, r7
 800635c:	460e      	mov	r6, r1
 800635e:	d9f4      	bls.n	800634a <_printf_i+0x116>
 8006360:	2b08      	cmp	r3, #8
 8006362:	d10b      	bne.n	800637c <_printf_i+0x148>
 8006364:	6823      	ldr	r3, [r4, #0]
 8006366:	07de      	lsls	r6, r3, #31
 8006368:	d508      	bpl.n	800637c <_printf_i+0x148>
 800636a:	6923      	ldr	r3, [r4, #16]
 800636c:	6861      	ldr	r1, [r4, #4]
 800636e:	4299      	cmp	r1, r3
 8006370:	bfde      	ittt	le
 8006372:	2330      	movle	r3, #48	; 0x30
 8006374:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006378:	f105 35ff 	addle.w	r5, r5, #4294967295
 800637c:	1b52      	subs	r2, r2, r5
 800637e:	6122      	str	r2, [r4, #16]
 8006380:	f8cd a000 	str.w	sl, [sp]
 8006384:	464b      	mov	r3, r9
 8006386:	aa03      	add	r2, sp, #12
 8006388:	4621      	mov	r1, r4
 800638a:	4640      	mov	r0, r8
 800638c:	f7ff fee4 	bl	8006158 <_printf_common>
 8006390:	3001      	adds	r0, #1
 8006392:	d14a      	bne.n	800642a <_printf_i+0x1f6>
 8006394:	f04f 30ff 	mov.w	r0, #4294967295
 8006398:	b004      	add	sp, #16
 800639a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	f043 0320 	orr.w	r3, r3, #32
 80063a4:	6023      	str	r3, [r4, #0]
 80063a6:	4833      	ldr	r0, [pc, #204]	; (8006474 <_printf_i+0x240>)
 80063a8:	2778      	movs	r7, #120	; 0x78
 80063aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80063ae:	6823      	ldr	r3, [r4, #0]
 80063b0:	6829      	ldr	r1, [r5, #0]
 80063b2:	061f      	lsls	r7, r3, #24
 80063b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80063b8:	d402      	bmi.n	80063c0 <_printf_i+0x18c>
 80063ba:	065f      	lsls	r7, r3, #25
 80063bc:	bf48      	it	mi
 80063be:	b2b6      	uxthmi	r6, r6
 80063c0:	07df      	lsls	r7, r3, #31
 80063c2:	bf48      	it	mi
 80063c4:	f043 0320 	orrmi.w	r3, r3, #32
 80063c8:	6029      	str	r1, [r5, #0]
 80063ca:	bf48      	it	mi
 80063cc:	6023      	strmi	r3, [r4, #0]
 80063ce:	b91e      	cbnz	r6, 80063d8 <_printf_i+0x1a4>
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	f023 0320 	bic.w	r3, r3, #32
 80063d6:	6023      	str	r3, [r4, #0]
 80063d8:	2310      	movs	r3, #16
 80063da:	e7a7      	b.n	800632c <_printf_i+0xf8>
 80063dc:	4824      	ldr	r0, [pc, #144]	; (8006470 <_printf_i+0x23c>)
 80063de:	e7e4      	b.n	80063aa <_printf_i+0x176>
 80063e0:	4615      	mov	r5, r2
 80063e2:	e7bd      	b.n	8006360 <_printf_i+0x12c>
 80063e4:	682b      	ldr	r3, [r5, #0]
 80063e6:	6826      	ldr	r6, [r4, #0]
 80063e8:	6961      	ldr	r1, [r4, #20]
 80063ea:	1d18      	adds	r0, r3, #4
 80063ec:	6028      	str	r0, [r5, #0]
 80063ee:	0635      	lsls	r5, r6, #24
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	d501      	bpl.n	80063f8 <_printf_i+0x1c4>
 80063f4:	6019      	str	r1, [r3, #0]
 80063f6:	e002      	b.n	80063fe <_printf_i+0x1ca>
 80063f8:	0670      	lsls	r0, r6, #25
 80063fa:	d5fb      	bpl.n	80063f4 <_printf_i+0x1c0>
 80063fc:	8019      	strh	r1, [r3, #0]
 80063fe:	2300      	movs	r3, #0
 8006400:	6123      	str	r3, [r4, #16]
 8006402:	4615      	mov	r5, r2
 8006404:	e7bc      	b.n	8006380 <_printf_i+0x14c>
 8006406:	682b      	ldr	r3, [r5, #0]
 8006408:	1d1a      	adds	r2, r3, #4
 800640a:	602a      	str	r2, [r5, #0]
 800640c:	681d      	ldr	r5, [r3, #0]
 800640e:	6862      	ldr	r2, [r4, #4]
 8006410:	2100      	movs	r1, #0
 8006412:	4628      	mov	r0, r5
 8006414:	f7f9 fedc 	bl	80001d0 <memchr>
 8006418:	b108      	cbz	r0, 800641e <_printf_i+0x1ea>
 800641a:	1b40      	subs	r0, r0, r5
 800641c:	6060      	str	r0, [r4, #4]
 800641e:	6863      	ldr	r3, [r4, #4]
 8006420:	6123      	str	r3, [r4, #16]
 8006422:	2300      	movs	r3, #0
 8006424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006428:	e7aa      	b.n	8006380 <_printf_i+0x14c>
 800642a:	6923      	ldr	r3, [r4, #16]
 800642c:	462a      	mov	r2, r5
 800642e:	4649      	mov	r1, r9
 8006430:	4640      	mov	r0, r8
 8006432:	47d0      	blx	sl
 8006434:	3001      	adds	r0, #1
 8006436:	d0ad      	beq.n	8006394 <_printf_i+0x160>
 8006438:	6823      	ldr	r3, [r4, #0]
 800643a:	079b      	lsls	r3, r3, #30
 800643c:	d413      	bmi.n	8006466 <_printf_i+0x232>
 800643e:	68e0      	ldr	r0, [r4, #12]
 8006440:	9b03      	ldr	r3, [sp, #12]
 8006442:	4298      	cmp	r0, r3
 8006444:	bfb8      	it	lt
 8006446:	4618      	movlt	r0, r3
 8006448:	e7a6      	b.n	8006398 <_printf_i+0x164>
 800644a:	2301      	movs	r3, #1
 800644c:	4632      	mov	r2, r6
 800644e:	4649      	mov	r1, r9
 8006450:	4640      	mov	r0, r8
 8006452:	47d0      	blx	sl
 8006454:	3001      	adds	r0, #1
 8006456:	d09d      	beq.n	8006394 <_printf_i+0x160>
 8006458:	3501      	adds	r5, #1
 800645a:	68e3      	ldr	r3, [r4, #12]
 800645c:	9903      	ldr	r1, [sp, #12]
 800645e:	1a5b      	subs	r3, r3, r1
 8006460:	42ab      	cmp	r3, r5
 8006462:	dcf2      	bgt.n	800644a <_printf_i+0x216>
 8006464:	e7eb      	b.n	800643e <_printf_i+0x20a>
 8006466:	2500      	movs	r5, #0
 8006468:	f104 0619 	add.w	r6, r4, #25
 800646c:	e7f5      	b.n	800645a <_printf_i+0x226>
 800646e:	bf00      	nop
 8006470:	080068f1 	.word	0x080068f1
 8006474:	08006902 	.word	0x08006902

08006478 <__sflush_r>:
 8006478:	898a      	ldrh	r2, [r1, #12]
 800647a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800647e:	4605      	mov	r5, r0
 8006480:	0710      	lsls	r0, r2, #28
 8006482:	460c      	mov	r4, r1
 8006484:	d458      	bmi.n	8006538 <__sflush_r+0xc0>
 8006486:	684b      	ldr	r3, [r1, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	dc05      	bgt.n	8006498 <__sflush_r+0x20>
 800648c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800648e:	2b00      	cmp	r3, #0
 8006490:	dc02      	bgt.n	8006498 <__sflush_r+0x20>
 8006492:	2000      	movs	r0, #0
 8006494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006498:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800649a:	2e00      	cmp	r6, #0
 800649c:	d0f9      	beq.n	8006492 <__sflush_r+0x1a>
 800649e:	2300      	movs	r3, #0
 80064a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80064a4:	682f      	ldr	r7, [r5, #0]
 80064a6:	6a21      	ldr	r1, [r4, #32]
 80064a8:	602b      	str	r3, [r5, #0]
 80064aa:	d032      	beq.n	8006512 <__sflush_r+0x9a>
 80064ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80064ae:	89a3      	ldrh	r3, [r4, #12]
 80064b0:	075a      	lsls	r2, r3, #29
 80064b2:	d505      	bpl.n	80064c0 <__sflush_r+0x48>
 80064b4:	6863      	ldr	r3, [r4, #4]
 80064b6:	1ac0      	subs	r0, r0, r3
 80064b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064ba:	b10b      	cbz	r3, 80064c0 <__sflush_r+0x48>
 80064bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064be:	1ac0      	subs	r0, r0, r3
 80064c0:	2300      	movs	r3, #0
 80064c2:	4602      	mov	r2, r0
 80064c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064c6:	6a21      	ldr	r1, [r4, #32]
 80064c8:	4628      	mov	r0, r5
 80064ca:	47b0      	blx	r6
 80064cc:	1c43      	adds	r3, r0, #1
 80064ce:	89a3      	ldrh	r3, [r4, #12]
 80064d0:	d106      	bne.n	80064e0 <__sflush_r+0x68>
 80064d2:	6829      	ldr	r1, [r5, #0]
 80064d4:	291d      	cmp	r1, #29
 80064d6:	d82b      	bhi.n	8006530 <__sflush_r+0xb8>
 80064d8:	4a29      	ldr	r2, [pc, #164]	; (8006580 <__sflush_r+0x108>)
 80064da:	410a      	asrs	r2, r1
 80064dc:	07d6      	lsls	r6, r2, #31
 80064de:	d427      	bmi.n	8006530 <__sflush_r+0xb8>
 80064e0:	2200      	movs	r2, #0
 80064e2:	6062      	str	r2, [r4, #4]
 80064e4:	04d9      	lsls	r1, r3, #19
 80064e6:	6922      	ldr	r2, [r4, #16]
 80064e8:	6022      	str	r2, [r4, #0]
 80064ea:	d504      	bpl.n	80064f6 <__sflush_r+0x7e>
 80064ec:	1c42      	adds	r2, r0, #1
 80064ee:	d101      	bne.n	80064f4 <__sflush_r+0x7c>
 80064f0:	682b      	ldr	r3, [r5, #0]
 80064f2:	b903      	cbnz	r3, 80064f6 <__sflush_r+0x7e>
 80064f4:	6560      	str	r0, [r4, #84]	; 0x54
 80064f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064f8:	602f      	str	r7, [r5, #0]
 80064fa:	2900      	cmp	r1, #0
 80064fc:	d0c9      	beq.n	8006492 <__sflush_r+0x1a>
 80064fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006502:	4299      	cmp	r1, r3
 8006504:	d002      	beq.n	800650c <__sflush_r+0x94>
 8006506:	4628      	mov	r0, r5
 8006508:	f7ff fbea 	bl	8005ce0 <_free_r>
 800650c:	2000      	movs	r0, #0
 800650e:	6360      	str	r0, [r4, #52]	; 0x34
 8006510:	e7c0      	b.n	8006494 <__sflush_r+0x1c>
 8006512:	2301      	movs	r3, #1
 8006514:	4628      	mov	r0, r5
 8006516:	47b0      	blx	r6
 8006518:	1c41      	adds	r1, r0, #1
 800651a:	d1c8      	bne.n	80064ae <__sflush_r+0x36>
 800651c:	682b      	ldr	r3, [r5, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d0c5      	beq.n	80064ae <__sflush_r+0x36>
 8006522:	2b1d      	cmp	r3, #29
 8006524:	d001      	beq.n	800652a <__sflush_r+0xb2>
 8006526:	2b16      	cmp	r3, #22
 8006528:	d101      	bne.n	800652e <__sflush_r+0xb6>
 800652a:	602f      	str	r7, [r5, #0]
 800652c:	e7b1      	b.n	8006492 <__sflush_r+0x1a>
 800652e:	89a3      	ldrh	r3, [r4, #12]
 8006530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006534:	81a3      	strh	r3, [r4, #12]
 8006536:	e7ad      	b.n	8006494 <__sflush_r+0x1c>
 8006538:	690f      	ldr	r7, [r1, #16]
 800653a:	2f00      	cmp	r7, #0
 800653c:	d0a9      	beq.n	8006492 <__sflush_r+0x1a>
 800653e:	0793      	lsls	r3, r2, #30
 8006540:	680e      	ldr	r6, [r1, #0]
 8006542:	bf08      	it	eq
 8006544:	694b      	ldreq	r3, [r1, #20]
 8006546:	600f      	str	r7, [r1, #0]
 8006548:	bf18      	it	ne
 800654a:	2300      	movne	r3, #0
 800654c:	eba6 0807 	sub.w	r8, r6, r7
 8006550:	608b      	str	r3, [r1, #8]
 8006552:	f1b8 0f00 	cmp.w	r8, #0
 8006556:	dd9c      	ble.n	8006492 <__sflush_r+0x1a>
 8006558:	6a21      	ldr	r1, [r4, #32]
 800655a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800655c:	4643      	mov	r3, r8
 800655e:	463a      	mov	r2, r7
 8006560:	4628      	mov	r0, r5
 8006562:	47b0      	blx	r6
 8006564:	2800      	cmp	r0, #0
 8006566:	dc06      	bgt.n	8006576 <__sflush_r+0xfe>
 8006568:	89a3      	ldrh	r3, [r4, #12]
 800656a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800656e:	81a3      	strh	r3, [r4, #12]
 8006570:	f04f 30ff 	mov.w	r0, #4294967295
 8006574:	e78e      	b.n	8006494 <__sflush_r+0x1c>
 8006576:	4407      	add	r7, r0
 8006578:	eba8 0800 	sub.w	r8, r8, r0
 800657c:	e7e9      	b.n	8006552 <__sflush_r+0xda>
 800657e:	bf00      	nop
 8006580:	dfbffffe 	.word	0xdfbffffe

08006584 <_fflush_r>:
 8006584:	b538      	push	{r3, r4, r5, lr}
 8006586:	690b      	ldr	r3, [r1, #16]
 8006588:	4605      	mov	r5, r0
 800658a:	460c      	mov	r4, r1
 800658c:	b913      	cbnz	r3, 8006594 <_fflush_r+0x10>
 800658e:	2500      	movs	r5, #0
 8006590:	4628      	mov	r0, r5
 8006592:	bd38      	pop	{r3, r4, r5, pc}
 8006594:	b118      	cbz	r0, 800659e <_fflush_r+0x1a>
 8006596:	6a03      	ldr	r3, [r0, #32]
 8006598:	b90b      	cbnz	r3, 800659e <_fflush_r+0x1a>
 800659a:	f7ff fa8b 	bl	8005ab4 <__sinit>
 800659e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d0f3      	beq.n	800658e <_fflush_r+0xa>
 80065a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80065a8:	07d0      	lsls	r0, r2, #31
 80065aa:	d404      	bmi.n	80065b6 <_fflush_r+0x32>
 80065ac:	0599      	lsls	r1, r3, #22
 80065ae:	d402      	bmi.n	80065b6 <_fflush_r+0x32>
 80065b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065b2:	f7ff fb84 	bl	8005cbe <__retarget_lock_acquire_recursive>
 80065b6:	4628      	mov	r0, r5
 80065b8:	4621      	mov	r1, r4
 80065ba:	f7ff ff5d 	bl	8006478 <__sflush_r>
 80065be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065c0:	07da      	lsls	r2, r3, #31
 80065c2:	4605      	mov	r5, r0
 80065c4:	d4e4      	bmi.n	8006590 <_fflush_r+0xc>
 80065c6:	89a3      	ldrh	r3, [r4, #12]
 80065c8:	059b      	lsls	r3, r3, #22
 80065ca:	d4e1      	bmi.n	8006590 <_fflush_r+0xc>
 80065cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065ce:	f7ff fb77 	bl	8005cc0 <__retarget_lock_release_recursive>
 80065d2:	e7dd      	b.n	8006590 <_fflush_r+0xc>

080065d4 <__swbuf_r>:
 80065d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d6:	460e      	mov	r6, r1
 80065d8:	4614      	mov	r4, r2
 80065da:	4605      	mov	r5, r0
 80065dc:	b118      	cbz	r0, 80065e6 <__swbuf_r+0x12>
 80065de:	6a03      	ldr	r3, [r0, #32]
 80065e0:	b90b      	cbnz	r3, 80065e6 <__swbuf_r+0x12>
 80065e2:	f7ff fa67 	bl	8005ab4 <__sinit>
 80065e6:	69a3      	ldr	r3, [r4, #24]
 80065e8:	60a3      	str	r3, [r4, #8]
 80065ea:	89a3      	ldrh	r3, [r4, #12]
 80065ec:	071a      	lsls	r2, r3, #28
 80065ee:	d525      	bpl.n	800663c <__swbuf_r+0x68>
 80065f0:	6923      	ldr	r3, [r4, #16]
 80065f2:	b31b      	cbz	r3, 800663c <__swbuf_r+0x68>
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	6922      	ldr	r2, [r4, #16]
 80065f8:	1a98      	subs	r0, r3, r2
 80065fa:	6963      	ldr	r3, [r4, #20]
 80065fc:	b2f6      	uxtb	r6, r6
 80065fe:	4283      	cmp	r3, r0
 8006600:	4637      	mov	r7, r6
 8006602:	dc04      	bgt.n	800660e <__swbuf_r+0x3a>
 8006604:	4621      	mov	r1, r4
 8006606:	4628      	mov	r0, r5
 8006608:	f7ff ffbc 	bl	8006584 <_fflush_r>
 800660c:	b9e0      	cbnz	r0, 8006648 <__swbuf_r+0x74>
 800660e:	68a3      	ldr	r3, [r4, #8]
 8006610:	3b01      	subs	r3, #1
 8006612:	60a3      	str	r3, [r4, #8]
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	6022      	str	r2, [r4, #0]
 800661a:	701e      	strb	r6, [r3, #0]
 800661c:	6962      	ldr	r2, [r4, #20]
 800661e:	1c43      	adds	r3, r0, #1
 8006620:	429a      	cmp	r2, r3
 8006622:	d004      	beq.n	800662e <__swbuf_r+0x5a>
 8006624:	89a3      	ldrh	r3, [r4, #12]
 8006626:	07db      	lsls	r3, r3, #31
 8006628:	d506      	bpl.n	8006638 <__swbuf_r+0x64>
 800662a:	2e0a      	cmp	r6, #10
 800662c:	d104      	bne.n	8006638 <__swbuf_r+0x64>
 800662e:	4621      	mov	r1, r4
 8006630:	4628      	mov	r0, r5
 8006632:	f7ff ffa7 	bl	8006584 <_fflush_r>
 8006636:	b938      	cbnz	r0, 8006648 <__swbuf_r+0x74>
 8006638:	4638      	mov	r0, r7
 800663a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800663c:	4621      	mov	r1, r4
 800663e:	4628      	mov	r0, r5
 8006640:	f000 f806 	bl	8006650 <__swsetup_r>
 8006644:	2800      	cmp	r0, #0
 8006646:	d0d5      	beq.n	80065f4 <__swbuf_r+0x20>
 8006648:	f04f 37ff 	mov.w	r7, #4294967295
 800664c:	e7f4      	b.n	8006638 <__swbuf_r+0x64>
	...

08006650 <__swsetup_r>:
 8006650:	b538      	push	{r3, r4, r5, lr}
 8006652:	4b2a      	ldr	r3, [pc, #168]	; (80066fc <__swsetup_r+0xac>)
 8006654:	4605      	mov	r5, r0
 8006656:	6818      	ldr	r0, [r3, #0]
 8006658:	460c      	mov	r4, r1
 800665a:	b118      	cbz	r0, 8006664 <__swsetup_r+0x14>
 800665c:	6a03      	ldr	r3, [r0, #32]
 800665e:	b90b      	cbnz	r3, 8006664 <__swsetup_r+0x14>
 8006660:	f7ff fa28 	bl	8005ab4 <__sinit>
 8006664:	89a3      	ldrh	r3, [r4, #12]
 8006666:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800666a:	0718      	lsls	r0, r3, #28
 800666c:	d422      	bmi.n	80066b4 <__swsetup_r+0x64>
 800666e:	06d9      	lsls	r1, r3, #27
 8006670:	d407      	bmi.n	8006682 <__swsetup_r+0x32>
 8006672:	2309      	movs	r3, #9
 8006674:	602b      	str	r3, [r5, #0]
 8006676:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800667a:	81a3      	strh	r3, [r4, #12]
 800667c:	f04f 30ff 	mov.w	r0, #4294967295
 8006680:	e034      	b.n	80066ec <__swsetup_r+0x9c>
 8006682:	0758      	lsls	r0, r3, #29
 8006684:	d512      	bpl.n	80066ac <__swsetup_r+0x5c>
 8006686:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006688:	b141      	cbz	r1, 800669c <__swsetup_r+0x4c>
 800668a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800668e:	4299      	cmp	r1, r3
 8006690:	d002      	beq.n	8006698 <__swsetup_r+0x48>
 8006692:	4628      	mov	r0, r5
 8006694:	f7ff fb24 	bl	8005ce0 <_free_r>
 8006698:	2300      	movs	r3, #0
 800669a:	6363      	str	r3, [r4, #52]	; 0x34
 800669c:	89a3      	ldrh	r3, [r4, #12]
 800669e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80066a2:	81a3      	strh	r3, [r4, #12]
 80066a4:	2300      	movs	r3, #0
 80066a6:	6063      	str	r3, [r4, #4]
 80066a8:	6923      	ldr	r3, [r4, #16]
 80066aa:	6023      	str	r3, [r4, #0]
 80066ac:	89a3      	ldrh	r3, [r4, #12]
 80066ae:	f043 0308 	orr.w	r3, r3, #8
 80066b2:	81a3      	strh	r3, [r4, #12]
 80066b4:	6923      	ldr	r3, [r4, #16]
 80066b6:	b94b      	cbnz	r3, 80066cc <__swsetup_r+0x7c>
 80066b8:	89a3      	ldrh	r3, [r4, #12]
 80066ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066c2:	d003      	beq.n	80066cc <__swsetup_r+0x7c>
 80066c4:	4621      	mov	r1, r4
 80066c6:	4628      	mov	r0, r5
 80066c8:	f000 f850 	bl	800676c <__smakebuf_r>
 80066cc:	89a0      	ldrh	r0, [r4, #12]
 80066ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066d2:	f010 0301 	ands.w	r3, r0, #1
 80066d6:	d00a      	beq.n	80066ee <__swsetup_r+0x9e>
 80066d8:	2300      	movs	r3, #0
 80066da:	60a3      	str	r3, [r4, #8]
 80066dc:	6963      	ldr	r3, [r4, #20]
 80066de:	425b      	negs	r3, r3
 80066e0:	61a3      	str	r3, [r4, #24]
 80066e2:	6923      	ldr	r3, [r4, #16]
 80066e4:	b943      	cbnz	r3, 80066f8 <__swsetup_r+0xa8>
 80066e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80066ea:	d1c4      	bne.n	8006676 <__swsetup_r+0x26>
 80066ec:	bd38      	pop	{r3, r4, r5, pc}
 80066ee:	0781      	lsls	r1, r0, #30
 80066f0:	bf58      	it	pl
 80066f2:	6963      	ldrpl	r3, [r4, #20]
 80066f4:	60a3      	str	r3, [r4, #8]
 80066f6:	e7f4      	b.n	80066e2 <__swsetup_r+0x92>
 80066f8:	2000      	movs	r0, #0
 80066fa:	e7f7      	b.n	80066ec <__swsetup_r+0x9c>
 80066fc:	20000068 	.word	0x20000068

08006700 <_sbrk_r>:
 8006700:	b538      	push	{r3, r4, r5, lr}
 8006702:	4d06      	ldr	r5, [pc, #24]	; (800671c <_sbrk_r+0x1c>)
 8006704:	2300      	movs	r3, #0
 8006706:	4604      	mov	r4, r0
 8006708:	4608      	mov	r0, r1
 800670a:	602b      	str	r3, [r5, #0]
 800670c:	f7fa fa4e 	bl	8000bac <_sbrk>
 8006710:	1c43      	adds	r3, r0, #1
 8006712:	d102      	bne.n	800671a <_sbrk_r+0x1a>
 8006714:	682b      	ldr	r3, [r5, #0]
 8006716:	b103      	cbz	r3, 800671a <_sbrk_r+0x1a>
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	bd38      	pop	{r3, r4, r5, pc}
 800671c:	20004210 	.word	0x20004210

08006720 <__swhatbuf_r>:
 8006720:	b570      	push	{r4, r5, r6, lr}
 8006722:	460c      	mov	r4, r1
 8006724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006728:	2900      	cmp	r1, #0
 800672a:	b096      	sub	sp, #88	; 0x58
 800672c:	4615      	mov	r5, r2
 800672e:	461e      	mov	r6, r3
 8006730:	da0d      	bge.n	800674e <__swhatbuf_r+0x2e>
 8006732:	89a3      	ldrh	r3, [r4, #12]
 8006734:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006738:	f04f 0100 	mov.w	r1, #0
 800673c:	bf0c      	ite	eq
 800673e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006742:	2340      	movne	r3, #64	; 0x40
 8006744:	2000      	movs	r0, #0
 8006746:	6031      	str	r1, [r6, #0]
 8006748:	602b      	str	r3, [r5, #0]
 800674a:	b016      	add	sp, #88	; 0x58
 800674c:	bd70      	pop	{r4, r5, r6, pc}
 800674e:	466a      	mov	r2, sp
 8006750:	f000 f848 	bl	80067e4 <_fstat_r>
 8006754:	2800      	cmp	r0, #0
 8006756:	dbec      	blt.n	8006732 <__swhatbuf_r+0x12>
 8006758:	9901      	ldr	r1, [sp, #4]
 800675a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800675e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006762:	4259      	negs	r1, r3
 8006764:	4159      	adcs	r1, r3
 8006766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800676a:	e7eb      	b.n	8006744 <__swhatbuf_r+0x24>

0800676c <__smakebuf_r>:
 800676c:	898b      	ldrh	r3, [r1, #12]
 800676e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006770:	079d      	lsls	r5, r3, #30
 8006772:	4606      	mov	r6, r0
 8006774:	460c      	mov	r4, r1
 8006776:	d507      	bpl.n	8006788 <__smakebuf_r+0x1c>
 8006778:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800677c:	6023      	str	r3, [r4, #0]
 800677e:	6123      	str	r3, [r4, #16]
 8006780:	2301      	movs	r3, #1
 8006782:	6163      	str	r3, [r4, #20]
 8006784:	b002      	add	sp, #8
 8006786:	bd70      	pop	{r4, r5, r6, pc}
 8006788:	ab01      	add	r3, sp, #4
 800678a:	466a      	mov	r2, sp
 800678c:	f7ff ffc8 	bl	8006720 <__swhatbuf_r>
 8006790:	9900      	ldr	r1, [sp, #0]
 8006792:	4605      	mov	r5, r0
 8006794:	4630      	mov	r0, r6
 8006796:	f7ff fb0f 	bl	8005db8 <_malloc_r>
 800679a:	b948      	cbnz	r0, 80067b0 <__smakebuf_r+0x44>
 800679c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067a0:	059a      	lsls	r2, r3, #22
 80067a2:	d4ef      	bmi.n	8006784 <__smakebuf_r+0x18>
 80067a4:	f023 0303 	bic.w	r3, r3, #3
 80067a8:	f043 0302 	orr.w	r3, r3, #2
 80067ac:	81a3      	strh	r3, [r4, #12]
 80067ae:	e7e3      	b.n	8006778 <__smakebuf_r+0xc>
 80067b0:	89a3      	ldrh	r3, [r4, #12]
 80067b2:	6020      	str	r0, [r4, #0]
 80067b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067b8:	81a3      	strh	r3, [r4, #12]
 80067ba:	9b00      	ldr	r3, [sp, #0]
 80067bc:	6163      	str	r3, [r4, #20]
 80067be:	9b01      	ldr	r3, [sp, #4]
 80067c0:	6120      	str	r0, [r4, #16]
 80067c2:	b15b      	cbz	r3, 80067dc <__smakebuf_r+0x70>
 80067c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067c8:	4630      	mov	r0, r6
 80067ca:	f000 f81d 	bl	8006808 <_isatty_r>
 80067ce:	b128      	cbz	r0, 80067dc <__smakebuf_r+0x70>
 80067d0:	89a3      	ldrh	r3, [r4, #12]
 80067d2:	f023 0303 	bic.w	r3, r3, #3
 80067d6:	f043 0301 	orr.w	r3, r3, #1
 80067da:	81a3      	strh	r3, [r4, #12]
 80067dc:	89a3      	ldrh	r3, [r4, #12]
 80067de:	431d      	orrs	r5, r3
 80067e0:	81a5      	strh	r5, [r4, #12]
 80067e2:	e7cf      	b.n	8006784 <__smakebuf_r+0x18>

080067e4 <_fstat_r>:
 80067e4:	b538      	push	{r3, r4, r5, lr}
 80067e6:	4d07      	ldr	r5, [pc, #28]	; (8006804 <_fstat_r+0x20>)
 80067e8:	2300      	movs	r3, #0
 80067ea:	4604      	mov	r4, r0
 80067ec:	4608      	mov	r0, r1
 80067ee:	4611      	mov	r1, r2
 80067f0:	602b      	str	r3, [r5, #0]
 80067f2:	f7fa f9b2 	bl	8000b5a <_fstat>
 80067f6:	1c43      	adds	r3, r0, #1
 80067f8:	d102      	bne.n	8006800 <_fstat_r+0x1c>
 80067fa:	682b      	ldr	r3, [r5, #0]
 80067fc:	b103      	cbz	r3, 8006800 <_fstat_r+0x1c>
 80067fe:	6023      	str	r3, [r4, #0]
 8006800:	bd38      	pop	{r3, r4, r5, pc}
 8006802:	bf00      	nop
 8006804:	20004210 	.word	0x20004210

08006808 <_isatty_r>:
 8006808:	b538      	push	{r3, r4, r5, lr}
 800680a:	4d06      	ldr	r5, [pc, #24]	; (8006824 <_isatty_r+0x1c>)
 800680c:	2300      	movs	r3, #0
 800680e:	4604      	mov	r4, r0
 8006810:	4608      	mov	r0, r1
 8006812:	602b      	str	r3, [r5, #0]
 8006814:	f7fa f9b1 	bl	8000b7a <_isatty>
 8006818:	1c43      	adds	r3, r0, #1
 800681a:	d102      	bne.n	8006822 <_isatty_r+0x1a>
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	b103      	cbz	r3, 8006822 <_isatty_r+0x1a>
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	bd38      	pop	{r3, r4, r5, pc}
 8006824:	20004210 	.word	0x20004210

08006828 <_init>:
 8006828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682a:	bf00      	nop
 800682c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800682e:	bc08      	pop	{r3}
 8006830:	469e      	mov	lr, r3
 8006832:	4770      	bx	lr

08006834 <_fini>:
 8006834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006836:	bf00      	nop
 8006838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800683a:	bc08      	pop	{r3}
 800683c:	469e      	mov	lr, r3
 800683e:	4770      	bx	lr
